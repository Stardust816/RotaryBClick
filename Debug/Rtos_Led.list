
Rtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a8  080093a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b0  080093b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080093b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041fc  2000007c  08009434  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004278  08009434  00024278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f775  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e3f  00000000  00000000  0003f821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00043660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  00044f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050f7  00000000  00000000  00046648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abce  00000000  00000000  0004b73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7004  00000000  00000000  0006630d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007100  00000000  00000000  0013d364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009154 	.word	0x08009154

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009154 	.word	0x08009154

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	e853 3f00 	ldrex	r3, [r3]
 8000596:	60bb      	str	r3, [r7, #8]
   return(result);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	69fa      	ldr	r2, [r7, #28]
 80005a4:	61ba      	str	r2, [r7, #24]
 80005a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005a8:	6979      	ldr	r1, [r7, #20]
 80005aa:	69ba      	ldr	r2, [r7, #24]
 80005ac:	e841 2300 	strex	r3, r2, [r1]
 80005b0:	613b      	str	r3, [r7, #16]
   return(result);
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1e9      	bne.n	800058c <LL_USART_EnableIT_IDLE+0x8>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3724      	adds	r7, #36	; 0x24
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <setleds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setleds(uint16_t ledring) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]

	//uint16_t ledring = 0b1010101010101010;

	for (int i = 0; i < 16; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e01f      	b.n	8000618 <setleds+0x50>

		if (ledring & (1 << i)) {
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <setleds+0x2c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <setleds+0x7c>)
 80005ee:	f001 fb53 	bl	8001c98 <HAL_GPIO_WritePin>
 80005f2:	e004      	b.n	80005fe <setleds+0x36>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2120      	movs	r1, #32
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <setleds+0x7c>)
 80005fa:	f001 fb4d 	bl	8001c98 <HAL_GPIO_WritePin>
		}

		//SCK
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2108      	movs	r1, #8
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <setleds+0x7c>)
 8000604:	f001 fb48 	bl	8001c98 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2108      	movs	r1, #8
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <setleds+0x7c>)
 800060e:	f001 fb43 	bl	8001c98 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b0f      	cmp	r3, #15
 800061c:	dddc      	ble.n	80005d8 <setleds+0x10>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	}

	//Latch
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2101      	movs	r1, #1
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <setleds+0x7c>)
 8000624:	f001 fb38 	bl	8001c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <setleds+0x7c>)
 800062e:	f001 fb33 	bl	8001c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <setleds+0x7c>)
 8000638:	f001 fb2e 	bl	8001c98 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	48000400 	.word	0x48000400

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fe11 	bl	8001272 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f844 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f922 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8000658:	f000 f902 	bl	8000860 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f8d0 	bl	8000800 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f89e 	bl	80007a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000664:	f004 fb84 	bl	8004d70 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RotaryEncoderQueue */
  RotaryEncoderQueueHandle = osMessageQueueNew (16, sizeof(InputEvent), &RotaryEncoderQueue_attributes);
 8000668:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <main+0x68>)
 800066a:	2108      	movs	r1, #8
 800066c:	2010      	movs	r0, #16
 800066e:	f004 fc76 	bl	8004f5e <osMessageQueueNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <main+0x6c>)
 8000676:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000678:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <main+0x70>)
 800067a:	2100      	movs	r1, #0
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <main+0x74>)
 800067e:	f004 fbc1 	bl	8004e04 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <main+0x78>)
 8000686:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <main+0x7c>)
 800068a:	2100      	movs	r1, #0
 800068c:	480e      	ldr	r0, [pc, #56]	; (80006c8 <main+0x80>)
 800068e:	f004 fbb9 	bl	8004e04 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <main+0x84>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <main+0x88>)
 800069a:	2100      	movs	r1, #0
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <main+0x8c>)
 800069e:	f004 fbb1 	bl	8004e04 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <main+0x90>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f004 fb86 	bl	8004db8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006ac:	e7fe      	b.n	80006ac <main+0x64>
 80006ae:	bf00      	nop
 80006b0:	080092b0 	.word	0x080092b0
 80006b4:	2000076c 	.word	0x2000076c
 80006b8:	08009244 	.word	0x08009244
 80006bc:	08000ac1 	.word	0x08000ac1
 80006c0:	200001e8 	.word	0x200001e8
 80006c4:	08009268 	.word	0x08009268
 80006c8:	08000b25 	.word	0x08000b25
 80006cc:	200004a8 	.word	0x200004a8
 80006d0:	0800928c 	.word	0x0800928c
 80006d4:	08000c91 	.word	0x08000c91
 80006d8:	20000768 	.word	0x20000768

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	; 0x58
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2244      	movs	r2, #68	; 0x44
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f007 fc47 	bl	8007f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000702:	f001 faff 	bl	8001d04 <HAL_PWREx_ControlVoltageScaling>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800070c:	f000 fb18 	bl	8000d40 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000710:	f001 fada 	bl	8001cc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <SystemClock_Config+0xc0>)
 8000716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <SystemClock_Config+0xc0>)
 800071c:	f023 0318 	bic.w	r3, r3, #24
 8000720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000724:	2314      	movs	r3, #20
 8000726:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000734:	2360      	movs	r3, #96	; 0x60
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800073c:	2301      	movs	r3, #1
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000748:	2307      	movs	r3, #7
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fb29 	bl	8001db0 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000764:	f000 faec 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2303      	movs	r3, #3
 800076e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f001 ff29 	bl	80025d8 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800078c:	f000 fad8 	bl	8000d40 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000790:	f002 fb6e 	bl	8002e70 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000794:	bf00      	nop
 8000796:	3758      	adds	r7, #88	; 0x58
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART1_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007e4:	f002 fec6 	bl	8003574 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 faa7 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000098 	.word	0x20000098
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	; (800085c <MX_USART2_UART_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000844:	f002 fe96 	bl	8003574 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 fa77 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000011c 	.word	0x2000011c
 800085c:	40004400 	.word	0x40004400

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_DMA_Init+0x38>)
 8000868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <MX_DMA_Init+0x38>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6493      	str	r3, [r2, #72]	; 0x48
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_DMA_Init+0x38>)
 8000874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	200f      	movs	r0, #15
 8000884:	f000 fde6 	bl	8001454 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000888:	200f      	movs	r0, #15
 800088a:	f000 fdff 	bl	800148c <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <MX_GPIO_Init+0xc0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a29      	ldr	r2, [pc, #164]	; (800095c <MX_GPIO_Init+0xc0>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_GPIO_Init+0xc0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_GPIO_Init+0xc0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <MX_GPIO_Init+0xc0>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_GPIO_Init+0xc0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_GPIO_Init+0xc0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <MX_GPIO_Init+0xc0>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_GPIO_Init+0xc0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2129      	movs	r1, #41	; 0x29
 80008fe:	4818      	ldr	r0, [pc, #96]	; (8000960 <MX_GPIO_Init+0xc4>)
 8000900:	f001 f9ca 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000904:	2309      	movs	r3, #9
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 f83b 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_5;
 800091e:	2329      	movs	r3, #41	; 0x29
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	480a      	ldr	r0, [pc, #40]	; (8000960 <MX_GPIO_Init+0xc4>)
 8000936:	f001 f82d 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800093a:	2302      	movs	r3, #2
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0xc4>)
 800094e:	f001 f821 	bl	8001994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	48000400 	.word	0x48000400

08000964 <UartHandlerTask>:

/* USER CODE BEGIN 4 */

// by jD

void UartHandlerTask(void *argument) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
	static size_t old_pos = 0;  // Track the position of last character processed

	while(1) {
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 800096c:	f107 020c 	add.w	r2, r7, #12
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000978:	2000      	movs	r0, #0
 800097a:	f006 f983 	bl	8006c84 <xTaskNotifyWait>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d1f3      	bne.n	800096c <UartHandlerTask+0x8>

			if(ulNotificationValue & UART1_IDLE_EVENT) { // Received message from UART1
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d03e      	beq.n	8000a0c <UartHandlerTask+0xa8>

				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR; // huart1->hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <UartHandlerTask+0x13c>)
 8000990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800099a:	617b      	str	r3, [r7, #20]
				size_t length;

				if(new_pos != old_pos) { // Check if any new data is received
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <UartHandlerTask+0x140>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d032      	beq.n	8000a0c <UartHandlerTask+0xa8>
					// The transmissions here are also in blocking mode, otherwise output is cutoff!
					// If received data is BIGGER than buffer size, then output will be cutoff! (=> Increase buffer size)

					if (new_pos > old_pos) { // If data does not wrap around the buffer
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <UartHandlerTask+0x140>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d910      	bls.n	80009d2 <UartHandlerTask+0x6e>
						length = new_pos - old_pos;
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <UartHandlerTask+0x140>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	613b      	str	r3, [r7, #16]
						// Process your data => uart1Buffer[old_pos] TO uart1Buffer[old_pos+length] == Received DATA
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 80009ba:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <UartHandlerTask+0x140>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <UartHandlerTask+0x144>)
 80009c0:	1899      	adds	r1, r3, r2
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ca:	4838      	ldr	r0, [pc, #224]	; (8000aac <UartHandlerTask+0x148>)
 80009cc:	f002 fe20 	bl	8003610 <HAL_UART_Transmit>
 80009d0:	e019      	b.n	8000a06 <UartHandlerTask+0xa2>

					} else { // If data wraps around the buffer
						// If you process data in here, you'll need to partially construct your data

						// First transmit the data until the end of the buffer
						length = BUFFER_SIZE - old_pos;
 80009d2:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <UartHandlerTask+0x140>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80009da:	613b      	str	r3, [r7, #16]
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 80009dc:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <UartHandlerTask+0x140>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <UartHandlerTask+0x144>)
 80009e2:	1899      	adds	r1, r3, r2
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ec:	482f      	ldr	r0, [pc, #188]	; (8000aac <UartHandlerTask+0x148>)
 80009ee:	f002 fe0f 	bl	8003610 <HAL_UART_Transmit>

						// Then transmit the remaining data from the beginning of the buffer
						length = new_pos;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	613b      	str	r3, [r7, #16]
						HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009fe:	492a      	ldr	r1, [pc, #168]	; (8000aa8 <UartHandlerTask+0x144>)
 8000a00:	482a      	ldr	r0, [pc, #168]	; (8000aac <UartHandlerTask+0x148>)
 8000a02:	f002 fe05 	bl	8003610 <HAL_UART_Transmit>
					}

					old_pos = new_pos;  // Update the position of the last character processed
 8000a06:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <UartHandlerTask+0x140>)
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	6013      	str	r3, [r2, #0]
				}
			}

			if (ulNotificationValue & UART2_EVENT) { // Received CHARACTER from UART2
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0aa      	beq.n	800096c <UartHandlerTask+0x8>
				char c = (char)uart2_rx_char;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <UartHandlerTask+0x14c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	72fb      	strb	r3, [r7, #11]

				// Echo back the character to the terminal
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 8000a1c:	f107 030b 	add.w	r3, r7, #11
 8000a20:	2201      	movs	r2, #1
 8000a22:	4619      	mov	r1, r3
 8000a24:	4821      	ldr	r0, [pc, #132]	; (8000aac <UartHandlerTask+0x148>)
 8000a26:	f002 fe87 	bl	8003738 <HAL_UART_Transmit_IT>

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r') {
 8000a2a:	7afb      	ldrb	r3, [r7, #11]
 8000a2c:	2b0d      	cmp	r3, #13
 8000a2e:	d12c      	bne.n	8000a8a <UartHandlerTask+0x126>
					uart2Buffer[uart2BufferIndex++] = '\r';
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	b291      	uxth	r1, r2
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a3a:	8011      	strh	r1, [r2, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <UartHandlerTask+0x154>)
 8000a40:	210d      	movs	r1, #13
 8000a42:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	b291      	uxth	r1, r2
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a4e:	8011      	strh	r1, [r2, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <UartHandlerTask+0x154>)
 8000a54:	210a      	movs	r1, #10
 8000a56:	5499      	strb	r1, [r3, r2]
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <UartHandlerTask+0x158>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <UartHandlerTask+0x148>)
 8000a62:	f002 fe69 	bl	8003738 <HAL_UART_Transmit_IT>
					// This call will be made in blocking mode, because we'll clear the buffer!
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a6e:	4912      	ldr	r1, [pc, #72]	; (8000ab8 <UartHandlerTask+0x154>)
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <UartHandlerTask+0x13c>)
 8000a72:	f002 fdcd 	bl	8003610 <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 8000a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <UartHandlerTask+0x154>)
 8000a7e:	f007 fa7e 	bl	8007f7e <memset>
					uart2BufferIndex = 0;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]
 8000a88:	e770      	b.n	800096c <UartHandlerTask+0x8>

				} else {
					// Add character to buffer
					uart2Buffer[uart2BufferIndex++] = c;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	b291      	uxth	r1, r2
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <UartHandlerTask+0x150>)
 8000a94:	8011      	strh	r1, [r2, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	7af9      	ldrb	r1, [r7, #11]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <UartHandlerTask+0x154>)
 8000a9c:	5499      	strb	r1, [r3, r2]
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8000a9e:	e765      	b.n	800096c <UartHandlerTask+0x8>
 8000aa0:	20000098 	.word	0x20000098
 8000aa4:	20002848 	.word	0x20002848
 8000aa8:	20000840 	.word	0x20000840
 8000aac:	2000011c 	.word	0x2000011c
 8000ab0:	20002842 	.word	0x20002842
 8000ab4:	20002840 	.word	0x20002840
 8000ab8:	20001840 	.word	0x20001840
 8000abc:	20000004 	.word	0x20000004

08000ac0 <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
		/*setleds(0b1010101010101010);
		 osDelay(1000);
		 setleds(0b0101010101010101);
		 osDelay(1000);*/

		osStatus_t ret = osMessageQueueGet(RotaryEncoderQueueHandle, &event, 0,
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <StartLedTask+0x58>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	f107 0108 	add.w	r1, r7, #8
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f004 fb16 	bl	8005104 <osMessageQueueGet>
 8000ad8:	6138      	str	r0, [r7, #16]
				10);
		if (ret != osOK) {
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <StartLedTask+0x28>
			//something went wrong
			printf("\r\ncannot read item from queue");
 8000ae0:	480e      	ldr	r0, [pc, #56]	; (8000b1c <StartLedTask+0x5c>)
 8000ae2:	f007 fae9 	bl	80080b8 <iprintf>
 8000ae6:	e013      	b.n	8000b10 <StartLedTask+0x50>
		} else {
			printf("\r\nread item");
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <StartLedTask+0x60>)
 8000aea:	f007 fae5 	bl	80080b8 <iprintf>

			uint32_t value;

			if (event.button_pressed) { //If 6th bit set, button was pressed -> pause game -> display on leds
 8000aee:	7a3b      	ldrb	r3, [r7, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <StartLedTask+0x3c>
				value = 0b1010101010101010;
 8000af4:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e004      	b.n	8000b06 <StartLedTask+0x46>
			} else {
				value = 1 << event.counter;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2201      	movs	r2, #1
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	617b      	str	r3, [r7, #20]
			}
			setleds(value);
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fd5c 	bl	80005c8 <setleds>
		}

		osDelay(2);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f004 fa09 	bl	8004f28 <osDelay>
	for (;;) {
 8000b16:	e7d7      	b.n	8000ac8 <StartLedTask+0x8>
 8000b18:	2000076c 	.word	0x2000076c
 8000b1c:	080091b0 	.word	0x080091b0
 8000b20:	080091d0 	.word	0x080091d0

08000b24 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	uint16_t counter = 8;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	86bb      	strh	r3, [r7, #52]	; 0x34
	//uint16_t old_counter = 0;
	uint8_t old_state_a = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state_button = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	InputEvent event;
	event.button_pressed = true;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	event.counter = LEDSTART;
 8000b42:	2307      	movs	r3, #7
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
	InputEvent oldevent;
	/* Infinite loop */
	for (;;) {

		uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b46:	2101      	movs	r1, #1
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f001 f88c 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000b56:	2102      	movs	r1, #2
 8000b58:	4847      	ldr	r0, [pc, #284]	; (8000c78 <StartEncoderTask+0x154>)
 8000b5a:	f001 f885 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint8_t button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000b64:	2108      	movs	r1, #8
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f001 f87d 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if (a != old_state_a && event.counter <= 16) {
 8000b74:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000b78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d015      	beq.n	8000bac <StartEncoderTask+0x88>
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	2b10      	cmp	r3, #16
 8000b84:	dc12      	bgt.n	8000bac <StartEncoderTask+0x88>

			if (a != b) {
 8000b86:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000b8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d006      	beq.n	8000ba0 <StartEncoderTask+0x7c>
				if (LEDMAX > event.counter)
 8000b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b94:	2b0a      	cmp	r3, #10
 8000b96:	dc09      	bgt.n	8000bac <StartEncoderTask+0x88>
					event.counter++;
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b9e:	e005      	b.n	8000bac <StartEncoderTask+0x88>

			} else if (LEDMIN != event.counter) {
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d002      	beq.n	8000bac <StartEncoderTask+0x88>
				//if(counter != 3)
				event.counter--;
 8000ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28

			}
		}

		if (old_state_button != button && button) {
 8000bac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000bb0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d014      	beq.n	8000be2 <StartEncoderTask+0xbe>
 8000bb8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d010      	beq.n	8000be2 <StartEncoderTask+0xbe>
			event.button_pressed = !event.button_pressed; //Bit toggle -> XOR -> toggle 6th bit
 8000bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bf14      	ite	ne
 8000bc8:	2301      	movne	r3, #1
 8000bca:	2300      	moveq	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f083 0301 	eor.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			event.counter = LEDSTART;
 8000bde:	2307      	movs	r3, #7
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
			//setleds(0b1010101010101010);
		}

		if (memcmp(&oldevent, &event, sizeof(event))) {
 8000be2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2208      	movs	r2, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f007 f9a8 	bl	8007f42 <memcmp>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d02b      	beq.n	8000c50 <StartEncoderTask+0x12c>

			char msg1[16];
			snprintf(msg1, sizeof(msg1), "%d\r\n", event.counter);
 8000bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfa:	f107 000c 	add.w	r0, r7, #12
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <StartEncoderTask+0x158>)
 8000c00:	2110      	movs	r1, #16
 8000c02:	f007 faeb 	bl	80081dc <sniprintf>

			HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), 1000);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fae0 	bl	80001d0 <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f107 010c 	add.w	r1, r7, #12
 8000c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1c:	4818      	ldr	r0, [pc, #96]	; (8000c80 <StartEncoderTask+0x15c>)
 8000c1e:	f002 fcf7 	bl	8003610 <HAL_UART_Transmit>

			//uint32_t leds = 0xFFFF0000;

			//leds = leds >> counter;
			//event.counter = counter;
			osStatus_t ret = osMessageQueuePut(RotaryEncoderQueueHandle,
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <StartEncoderTask+0x160>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f004 fa09 	bl	8005044 <osMessageQueuePut>
 8000c32:	62f8      	str	r0, [r7, #44]	; 0x2c
					&event, 0, 10);

			if (ret != osOK) {
 8000c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <StartEncoderTask+0x122>
				//something went wrong
				printf("\r\ncannot enqueue item %u", counter);
 8000c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <StartEncoderTask+0x164>)
 8000c40:	f007 fa3a 	bl	80080b8 <iprintf>
 8000c44:	e004      	b.n	8000c50 <StartEncoderTask+0x12c>
			} else {
				printf("\r\nenqueued item %u", counter);
 8000c46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4810      	ldr	r0, [pc, #64]	; (8000c8c <StartEncoderTask+0x168>)
 8000c4c:	f007 fa34 	bl	80080b8 <iprintf>
			}
		}
		old_state_a = a;
 8000c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		old_state_button = button;
 8000c58:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000c5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//old_counter = counter;
		memcpy(&oldevent, &event, sizeof(event));
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c6c:	e883 0003 	stmia.w	r3, {r0, r1}
		osDelay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f004 f959 	bl	8004f28 <osDelay>
	for (;;) {
 8000c76:	e766      	b.n	8000b46 <StartEncoderTask+0x22>
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	080091dc 	.word	0x080091dc
 8000c80:	2000011c 	.word	0x2000011c
 8000c84:	2000076c 	.word	0x2000076c
 8000c88:	080091e4 	.word	0x080091e4
 8000c8c:	08009200 	.word	0x08009200

08000c90 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]
	/* Debugging by jD */
	strcpy((char*)uart1Buffer, "start broadcaster!\n\r");
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <StartDefaultTask+0x6c>)
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <StartDefaultTask+0x70>)
 8000c9c:	4614      	mov	r4, r2
 8000c9e:	461d      	mov	r5, r3
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca8:	6020      	str	r0, [r4, #0]
 8000caa:	3404      	adds	r4, #4
 8000cac:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, uart1Buffer, strlen((char*)uart1Buffer), HAL_MAX_DELAY);
 8000cae:	4813      	ldr	r0, [pc, #76]	; (8000cfc <StartDefaultTask+0x6c>)
 8000cb0:	f7ff fa8e 	bl	80001d0 <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbc:	490f      	ldr	r1, [pc, #60]	; (8000cfc <StartDefaultTask+0x6c>)
 8000cbe:	4811      	ldr	r0, [pc, #68]	; (8000d04 <StartDefaultTask+0x74>)
 8000cc0:	f002 fca6 	bl	8003610 <HAL_UART_Transmit>
	strcpy((char*)uart1Buffer, "\0");
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <StartDefaultTask+0x6c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]

	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 128, NULL, osPriorityNormal1, &xUartTaskHandle);
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <StartDefaultTask+0x78>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <StartDefaultTask+0x7c>)
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	2319      	movs	r3, #25
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <StartDefaultTask+0x80>)
 8000cdc:	f005 f95b 	bl	8005f96 <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <StartDefaultTask+0x84>)
 8000ce2:	f7ff fc4f 	bl	8000584 <LL_USART_EnableIT_IDLE>
	// NOTE: Please check stm32l4xx_it.c for the USER-CODE that handles the IDLE Line Interrupt!!
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 8000ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cea:	4904      	ldr	r1, [pc, #16]	; (8000cfc <StartDefaultTask+0x6c>)
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <StartDefaultTask+0x88>)
 8000cee:	f002 fd91 	bl	8003814 <HAL_UART_Receive_DMA>
	/* Infinite loop
	for(;;) {
		osDelay(1);
	} */
  /* USER CODE END StartDefaultTask */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000840 	.word	0x20000840
 8000d00:	08009214 	.word	0x08009214
 8000d04:	2000011c 	.word	0x2000011c
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20002844 	.word	0x20002844
 8000d10:	08000965 	.word	0x08000965
 8000d14:	40013800 	.word	0x40013800
 8000d18:	20000098 	.word	0x20000098

08000d1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2e:	f000 fab9 	bl	80012a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40001000 	.word	0x40001000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	210f      	movs	r1, #15
 8000d86:	f06f 0001 	mvn.w	r0, #1
 8000d8a:	f000 fb63 	bl	8001454 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0a0      	sub	sp, #128	; 0x80
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	2254      	movs	r2, #84	; 0x54
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f007 f8de 	bl	8007f7e <memset>
  if(huart->Instance==USART1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	; (8000f44 <HAL_UART_MspInit+0x1a8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d169      	bne.n	8000ea0 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fe53 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de4:	f7ff ffac 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de8:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dec:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	6613      	str	r3, [r2, #96]	; 0x60
 8000df4:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	4a50      	ldr	r2, [pc, #320]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0c:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f000 fdac 	bl	8001994 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e3c:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e3e:	4a44      	ldr	r2, [pc, #272]	; (8000f50 <HAL_UART_MspInit+0x1b4>)
 8000e40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000e42:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e48:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b3f      	ldr	r3, [pc, #252]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e60:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e68:	2220      	movs	r2, #32
 8000e6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e72:	4836      	ldr	r0, [pc, #216]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e74:	f000 fb18 	bl	80014a8 <HAL_DMA_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000e7e:	f7ff ff5f 	bl	8000d40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e86:	671a      	str	r2, [r3, #112]	; 0x70
 8000e88:	4a30      	ldr	r2, [pc, #192]	; (8000f4c <HAL_UART_MspInit+0x1b0>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	2025      	movs	r0, #37	; 0x25
 8000e94:	f000 fade 	bl	8001454 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e98:	2025      	movs	r0, #37	; 0x25
 8000e9a:	f000 faf7 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e9e:	e04d      	b.n	8000f3c <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <HAL_UART_MspInit+0x1b8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d148      	bne.n	8000f3c <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fde4 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8000ec2:	f7ff ff3d 	bl	8000d40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_UART_MspInit+0x1ac>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f000 fd3e 	bl	8001994 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f000 fd2c 	bl	8001994 <HAL_GPIO_Init>
}
 8000f3c:	bf00      	nop
 8000f3e:	3780      	adds	r7, #128	; 0x80
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40013800 	.word	0x40013800
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	200001a0 	.word	0x200001a0
 8000f50:	40020058 	.word	0x40020058
 8000f54:	40004400 	.word	0x40004400

08000f58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	; 0x38
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <HAL_InitTick+0xe0>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a33      	ldr	r2, [pc, #204]	; (8001038 <HAL_InitTick+0xe0>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <HAL_InitTick+0xe0>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f7e:	f107 0210 	add.w	r2, r7, #16
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fce9 	bl	8002960 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d103      	bne.n	8000fa0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f98:	f001 fcb6 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8000f9c:	6378      	str	r0, [r7, #52]	; 0x34
 8000f9e:	e004      	b.n	8000faa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fa0:	f001 fcb2 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fac:	4a23      	ldr	r2, [pc, #140]	; (800103c <HAL_InitTick+0xe4>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	0c9b      	lsrs	r3, r3, #18
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_InitTick+0xe8>)
 8000fba:	4a22      	ldr	r2, [pc, #136]	; (8001044 <HAL_InitTick+0xec>)
 8000fbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <HAL_InitTick+0xe8>)
 8000fc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <HAL_InitTick+0xe8>)
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_InitTick+0xe8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_InitTick+0xe8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_InitTick+0xe8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fde:	4818      	ldr	r0, [pc, #96]	; (8001040 <HAL_InitTick+0xe8>)
 8000fe0:	f002 f848 	bl	8003074 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d11b      	bne.n	800102a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ff2:	4813      	ldr	r0, [pc, #76]	; (8001040 <HAL_InitTick+0xe8>)
 8000ff4:	f002 f8a0 	bl	8003138 <HAL_TIM_Base_Start_IT>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001002:	2b00      	cmp	r3, #0
 8001004:	d111      	bne.n	800102a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001006:	2036      	movs	r0, #54	; 0x36
 8001008:	f000 fa40 	bl	800148c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	d808      	bhi.n	8001024 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001012:	2200      	movs	r2, #0
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	2036      	movs	r0, #54	; 0x36
 8001018:	f000 fa1c 	bl	8001454 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_InitTick+0xf0>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e002      	b.n	800102a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800102a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800102e:	4618      	mov	r0, r3
 8001030:	3738      	adds	r7, #56	; 0x38
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	431bde83 	.word	0x431bde83
 8001040:	2000284c 	.word	0x2000284c
 8001044:	40001000 	.word	0x40001000
 8001048:	2000000c 	.word	0x2000000c

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <DMA1_Channel5_IRQHandler+0x10>)
 800107e:	f000 fbaa 	bl	80017d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001a0 	.word	0x200001a0

0800108c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <USART1_IRQHandler+0x10>)
 8001092:	f002 fc15 	bl	80038c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000098 	.word	0x20000098

080010a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM6_DAC_IRQHandler+0x10>)
 80010a6:	f002 f89b 	bl	80031e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000284c 	.word	0x2000284c

080010b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e00a      	b.n	80010dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c6:	f3af 8000 	nop.w
 80010ca:	4601      	mov	r1, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	b2ca      	uxtb	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf0      	blt.n	80010c6 <_read+0x12>
  }

  return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e009      	b.n	8001114 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf1      	blt.n	8001100 <_write+0x12>
  }
  return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114e:	605a      	str	r2, [r3, #4]
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f006 fd9c 	bl	8007cfc <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20010000 	.word	0x20010000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20002898 	.word	0x20002898
 80011f8:	20004278 	.word	0x20004278

080011fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001258 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001224:	f7ff ffea 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <LoopForever+0x6>)
  ldr r1, =_edata
 800122a:	490d      	ldr	r1, [pc, #52]	; (8001260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <LoopForever+0xe>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001240:	4c0a      	ldr	r4, [pc, #40]	; (800126c <LoopForever+0x16>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124e:	f006 fe51 	bl	8007ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001252:	f7ff f9f9 	bl	8000648 <main>

08001256 <LoopForever>:

LoopForever:
    b LoopForever
 8001256:	e7fe      	b.n	8001256 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001258:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001264:	080093b8 	.word	0x080093b8
  ldr r2, =_sbss
 8001268:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800126c:	20004278 	.word	0x20004278

08001270 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC1_IRQHandler>

08001272 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f8de 	bl	800143e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	200f      	movs	r0, #15
 8001284:	f7ff fe68 	bl	8000f58 <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	e001      	b.n	8001298 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001294:	f7ff fd5a 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001298:	79fb      	ldrb	r3, [r7, #7]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000010 	.word	0x20000010
 80012c8:	2000289c 	.word	0x2000289c

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2000289c 	.word	0x2000289c

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff4c 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001466:	f7ff ff61 	bl	800132c <__NVIC_GetPriorityGrouping>
 800146a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f7ff ffb1 	bl	80013d8 <NVIC_EncodePriority>
 8001476:	4602      	mov	r2, r0
 8001478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff80 	bl	8001384 <__NVIC_SetPriority>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff54 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e098      	b.n	80015ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b4d      	ldr	r3, [pc, #308]	; (80015f8 <HAL_DMA_Init+0x150>)
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d80f      	bhi.n	80014e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b4b      	ldr	r3, [pc, #300]	; (80015fc <HAL_DMA_Init+0x154>)
 80014ce:	4413      	add	r3, r2
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_DMA_Init+0x158>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	009a      	lsls	r2, r3, #2
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <HAL_DMA_Init+0x15c>)
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
 80014e4:	e00e      	b.n	8001504 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_DMA_Init+0x160>)
 80014ee:	4413      	add	r3, r2
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <HAL_DMA_Init+0x158>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	009a      	lsls	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a42      	ldr	r2, [pc, #264]	; (800160c <HAL_DMA_Init+0x164>)
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800151a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800155e:	d039      	beq.n	80015d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_DMA_Init+0x15c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d11a      	bne.n	80015a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_DMA_Init+0x168>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 031c 	and.w	r3, r3, #28
 8001576:	210f      	movs	r1, #15
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	4924      	ldr	r1, [pc, #144]	; (8001610 <HAL_DMA_Init+0x168>)
 8001580:	4013      	ands	r3, r2
 8001582:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_DMA_Init+0x168>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f003 031c 	and.w	r3, r3, #28
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	491d      	ldr	r1, [pc, #116]	; (8001610 <HAL_DMA_Init+0x168>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
 800159e:	e019      	b.n	80015d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	210f      	movs	r1, #15
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4917      	ldr	r1, [pc, #92]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6859      	ldr	r1, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 031c 	and.w	r3, r3, #28
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	4911      	ldr	r1, [pc, #68]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40020407 	.word	0x40020407
 80015fc:	bffdfff8 	.word	0xbffdfff8
 8001600:	cccccccd 	.word	0xcccccccd
 8001604:	40020000 	.word	0x40020000
 8001608:	bffdfbf8 	.word	0xbffdfbf8
 800160c:	40020400 	.word	0x40020400
 8001610:	400200a8 	.word	0x400200a8
 8001614:	400204a8 	.word	0x400204a8

08001618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_DMA_Start_IT+0x20>
 8001634:	2302      	movs	r3, #2
 8001636:	e04b      	b.n	80016d0 <HAL_DMA_Start_IT+0xb8>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d13a      	bne.n	80016c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 f95f 	bl	8001934 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 020e 	orr.w	r2, r2, #14
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e00f      	b.n	80016b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0204 	bic.w	r2, r2, #4
 800169e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 020a 	orr.w	r2, r2, #10
 80016ae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e005      	b.n	80016ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016ca:	2302      	movs	r3, #2
 80016cc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d008      	beq.n	8001702 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2204      	movs	r2, #4
 80016f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e022      	b.n	8001748 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 020e 	bic.w	r2, r2, #14
 8001710:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0201 	bic.w	r2, r2, #1
 8001720:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f003 021c 	and.w	r2, r3, #28
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f202 	lsl.w	r2, r1, r2
 8001734:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d005      	beq.n	8001778 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2204      	movs	r2, #4
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e029      	b.n	80017cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 020e 	bic.w	r2, r2, #14
 8001786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	f003 021c 	and.w	r2, r3, #28
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	4798      	blx	r3
    }
  }
  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f003 031c 	and.w	r3, r3, #28
 80017f6:	2204      	movs	r2, #4
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d026      	beq.n	8001850 <HAL_DMA_IRQHandler+0x7a>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d021      	beq.n	8001850 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0204 	bic.w	r2, r2, #4
 8001828:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f003 021c 	and.w	r2, r3, #28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2104      	movs	r1, #4
 8001838:	fa01 f202 	lsl.w	r2, r1, r2
 800183c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	2b00      	cmp	r3, #0
 8001844:	d071      	beq.n	800192a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800184e:	e06c      	b.n	800192a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	f003 031c 	and.w	r3, r3, #28
 8001858:	2202      	movs	r2, #2
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02e      	beq.n	80018c2 <HAL_DMA_IRQHandler+0xec>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d029      	beq.n	80018c2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 020a 	bic.w	r2, r2, #10
 800188a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f003 021c 	and.w	r2, r3, #28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	2102      	movs	r1, #2
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d038      	beq.n	800192a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018c0:	e033      	b.n	800192a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f003 031c 	and.w	r3, r3, #28
 80018ca:	2208      	movs	r2, #8
 80018cc:	409a      	lsls	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d02a      	beq.n	800192c <HAL_DMA_IRQHandler+0x156>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d025      	beq.n	800192c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 020e 	bic.w	r2, r2, #14
 80018ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f003 021c 	and.w	r2, r3, #28
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800192a:	bf00      	nop
 800192c:	bf00      	nop
}
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f003 021c 	and.w	r2, r3, #28
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b10      	cmp	r3, #16
 8001964:	d108      	bne.n	8001978 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001976:	e007      	b.n	8001988 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	60da      	str	r2, [r3, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e148      	b.n	8001c36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 813a 	beq.w	8001c30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d005      	beq.n	80019d4 <HAL_GPIO_Init+0x40>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d017      	beq.n	8001a72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	6939      	ldr	r1, [r7, #16]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8094 	beq.w	8001c30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0c:	4a51      	ldr	r2, [pc, #324]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6613      	str	r3, [r2, #96]	; 0x60
 8001b14:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b20:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_GPIO_Init+0x2c4>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1d4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a43      	ldr	r2, [pc, #268]	; (8001c5c <HAL_GPIO_Init+0x2c8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1d0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a42      	ldr	r2, [pc, #264]	; (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1cc>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e004      	b.n	8001b6a <HAL_GPIO_Init+0x1d6>
 8001b60:	2307      	movs	r3, #7
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x1d6>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_GPIO_Init+0x1d6>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4093      	lsls	r3, r2
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b7a:	4937      	ldr	r1, [pc, #220]	; (8001c58 <HAL_GPIO_Init+0x2c4>)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bac:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bd6:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f47f aeaf 	bne.w	80019a4 <HAL_GPIO_Init+0x10>
  }
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40007000 	.word	0x40007000

08001d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d12:	d130      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d20:	d038      	beq.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2232      	movs	r2, #50	; 0x32
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0c9b      	lsrs	r3, r3, #18
 8001d44:	3301      	adds	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d48:	e002      	b.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5c:	d102      	bne.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f2      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d70:	d110      	bne.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e00f      	b.n	8001d96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d82:	d007      	beq.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d8c:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40007000 	.word	0x40007000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	431bde83 	.word	0x431bde83

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f000 bc02 	b.w	80025c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc4:	4b96      	ldr	r3, [pc, #600]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dce:	4b94      	ldr	r3, [pc, #592]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80e4 	beq.w	8001fae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4c>
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	f040 808b 	bne.w	8001f0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	f040 8087 	bne.w	8001f0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dfc:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x64>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e3d9      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1a      	ldr	r2, [r3, #32]
 8001e18:	4b81      	ldr	r3, [pc, #516]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <HAL_RCC_OscConfig+0x7e>
 8001e24:	4b7e      	ldr	r3, [pc, #504]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e2c:	e005      	b.n	8001e3a <HAL_RCC_OscConfig+0x8a>
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d223      	bcs.n	8001e86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fdbe 	bl	80029c4 <RCC_SetFlashLatencyFromMSIRange>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e3ba      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a72      	ldr	r2, [pc, #456]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b70      	ldr	r3, [pc, #448]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	496d      	ldr	r1, [pc, #436]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e70:	4b6b      	ldr	r3, [pc, #428]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	4968      	ldr	r1, [pc, #416]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
 8001e84:	e025      	b.n	8001ed2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e86:	4b66      	ldr	r3, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a65      	ldr	r2, [pc, #404]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4960      	ldr	r1, [pc, #384]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea4:	4b5e      	ldr	r3, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	495b      	ldr	r1, [pc, #364]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fd7e 	bl	80029c4 <RCC_SetFlashLatencyFromMSIRange>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e37a      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ed2:	f000 fc81 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b51      	ldr	r3, [pc, #324]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	4950      	ldr	r1, [pc, #320]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	4a4e      	ldr	r2, [pc, #312]	; (8002028 <HAL_RCC_OscConfig+0x278>)
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ef2:	4b4e      	ldr	r3, [pc, #312]	; (800202c <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f82e 	bl	8000f58 <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d052      	beq.n	8001fac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	e35e      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d032      	beq.n	8001f78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f12:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a42      	ldr	r2, [pc, #264]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f9d5 	bl	80012cc <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f26:	f7ff f9d1 	bl	80012cc <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e347      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f38:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a35      	ldr	r2, [pc, #212]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4930      	ldr	r1, [pc, #192]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	492b      	ldr	r1, [pc, #172]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
 8001f76:	e01a      	b.n	8001fae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a28      	ldr	r2, [pc, #160]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f84:	f7ff f9a2 	bl	80012cc <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f99e 	bl	80012cc <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e314      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1dc>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d073      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x21c>
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d063      	beq.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d15f      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e2f1      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_OscConfig+0x24c>
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e025      	b.n	8002048 <HAL_RCC_OscConfig+0x298>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d114      	bne.n	8002030 <HAL_RCC_OscConfig+0x280>
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a02      	ldr	r2, [pc, #8]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e013      	b.n	8002048 <HAL_RCC_OscConfig+0x298>
 8002020:	40021000 	.word	0x40021000
 8002024:	080092c8 	.word	0x080092c8
 8002028:	20000008 	.word	0x20000008
 800202c:	2000000c 	.word	0x2000000c
 8002030:	4ba0      	ldr	r3, [pc, #640]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a9f      	ldr	r2, [pc, #636]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b9d      	ldr	r3, [pc, #628]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a9c      	ldr	r2, [pc, #624]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f93c 	bl	80012cc <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f938 	bl	80012cc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e2ae      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206a:	4b92      	ldr	r3, [pc, #584]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x2a8>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f928 	bl	80012cc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f924 	bl	80012cc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e29a      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002092:	4b88      	ldr	r3, [pc, #544]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x2d0>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d060      	beq.n	8002170 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_OscConfig+0x310>
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d119      	bne.n	80020ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d116      	bne.n	80020ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c0:	4b7c      	ldr	r3, [pc, #496]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_OscConfig+0x328>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e277      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b76      	ldr	r3, [pc, #472]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	061b      	lsls	r3, r3, #24
 80020e6:	4973      	ldr	r1, [pc, #460]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ec:	e040      	b.n	8002170 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d023      	beq.n	800213e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f6:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6e      	ldr	r2, [pc, #440]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f8e3 	bl	80012cc <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff f8df 	bl	80012cc <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e255      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800211c:	4b65      	ldr	r3, [pc, #404]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b62      	ldr	r3, [pc, #392]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	495f      	ldr	r1, [pc, #380]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
 800213c:	e018      	b.n	8002170 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f8bf 	bl	80012cc <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff f8bb 	bl	80012cc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e231      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d03c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01c      	beq.n	80021be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002184:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218a:	4a4a      	ldr	r2, [pc, #296]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f89a 	bl	80012cc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff f896 	bl	80012cc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e20c      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80021b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ef      	beq.n	800219c <HAL_RCC_OscConfig+0x3ec>
 80021bc:	e01b      	b.n	80021f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	4a3b      	ldr	r2, [pc, #236]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff f87d 	bl	80012cc <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7ff f879 	bl	80012cc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e1ef      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ef      	bne.n	80021d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80a6 	beq.w	8002350 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10d      	bne.n	8002230 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x508>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d118      	bne.n	800226e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_RCC_OscConfig+0x508>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x508>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002248:	f7ff f840 	bl	80012cc <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7ff f83c 	bl	80012cc <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e1b2      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_RCC_OscConfig+0x508>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d108      	bne.n	8002288 <HAL_RCC_OscConfig+0x4d8>
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002286:	e029      	b.n	80022dc <HAL_RCC_OscConfig+0x52c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b05      	cmp	r3, #5
 800228e:	d115      	bne.n	80022bc <HAL_RCC_OscConfig+0x50c>
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a03      	ldr	r2, [pc, #12]	; (80022b4 <HAL_RCC_OscConfig+0x504>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b0:	e014      	b.n	80022dc <HAL_RCC_OscConfig+0x52c>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
 80022bc:	4b9a      	ldr	r3, [pc, #616]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	4a99      	ldr	r2, [pc, #612]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022cc:	4b96      	ldr	r3, [pc, #600]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a95      	ldr	r2, [pc, #596]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d016      	beq.n	8002312 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fff2 	bl	80012cc <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe ffee 	bl	80012cc <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e162      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ed      	beq.n	80022ec <HAL_RCC_OscConfig+0x53c>
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7fe ffdb 	bl	80012cc <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe ffd7 	bl	80012cc <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e14b      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002330:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ed      	bne.n	800231a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b78      	ldr	r3, [pc, #480]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a77      	ldr	r2, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d03c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01c      	beq.n	800239e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236a:	4a6f      	ldr	r2, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe ffaa 	bl	80012cc <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800237c:	f7fe ffa6 	bl	80012cc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e11c      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800238e:	4b66      	ldr	r3, [pc, #408]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ef      	beq.n	800237c <HAL_RCC_OscConfig+0x5cc>
 800239c:	e01b      	b.n	80023d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800239e:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80023a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a4:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ae:	f7fe ff8d 	bl	80012cc <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b6:	f7fe ff89 	bl	80012cc <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0ff      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c8:	4b57      	ldr	r3, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80023ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ef      	bne.n	80023b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80f3 	beq.w	80025c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	f040 80c9 	bne.w	800257c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023ea:	4b4f      	ldr	r3, [pc, #316]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d12c      	bne.n	8002458 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	3b01      	subs	r3, #1
 800240a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d123      	bne.n	8002458 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d11b      	bne.n	8002458 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d113      	bne.n	8002458 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d109      	bne.n	8002458 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	3b01      	subs	r3, #1
 8002452:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d06b      	beq.n	8002530 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d062      	beq.n	8002524 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800245e:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0ac      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002478:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800247a:	f7fe ff27 	bl	80012cc <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe ff23 	bl	80012cc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e099      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_RCC_OscConfig+0x77c>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024b0:	3a01      	subs	r2, #1
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	4311      	orrs	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ba:	0212      	lsls	r2, r2, #8
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024c2:	0852      	lsrs	r2, r2, #1
 80024c4:	3a01      	subs	r2, #1
 80024c6:	0552      	lsls	r2, r2, #21
 80024c8:	4311      	orrs	r1, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ce:	0852      	lsrs	r2, r2, #1
 80024d0:	3a01      	subs	r2, #1
 80024d2:	0652      	lsls	r2, r2, #25
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024da:	06d2      	lsls	r2, r2, #27
 80024dc:	430a      	orrs	r2, r1
 80024de:	4912      	ldr	r1, [pc, #72]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 80024f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024fc:	f7fe fee6 	bl	80012cc <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fee2 	bl	80012cc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e058      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <HAL_RCC_OscConfig+0x778>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002522:	e050      	b.n	80025c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e04f      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
 8002528:	40021000 	.word	0x40021000
 800252c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d144      	bne.n	80025c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 8002542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 800254e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002554:	f7fe feba 	bl	80012cc <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe feb6 	bl	80012cc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e02c      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x7ac>
 800257a:	e024      	b.n	80025c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d01f      	beq.n	80025c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 8002588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fe9d 	bl	80012cc <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fe99 	bl	80012cc <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e00f      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	4905      	ldr	r1, [pc, #20]	; (80025d0 <HAL_RCC_OscConfig+0x820>)
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_OscConfig+0x824>)
 80025bc:	4013      	ands	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
 80025c0:	e001      	b.n	80025c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	feeefffc 	.word	0xfeeefffc

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0e7      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d910      	bls.n	800261c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4970      	ldr	r1, [pc, #448]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b6e      	ldr	r3, [pc, #440]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0cf      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002634:	429a      	cmp	r2, r3
 8002636:	d908      	bls.n	800264a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4960      	ldr	r1, [pc, #384]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d04c      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d121      	bne.n	80026ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0a6      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e09a      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268e:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e08e      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e086      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4943      	ldr	r1, [pc, #268]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe fe04 	bl	80012cc <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fe fe00 	bl	80012cc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e06e      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002708:	429a      	cmp	r2, r3
 800270a:	d208      	bcs.n	800271e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	492b      	ldr	r1, [pc, #172]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271e:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d210      	bcs.n	800274e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 0207 	bic.w	r2, r3, #7
 8002734:	4923      	ldr	r1, [pc, #140]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCC_ClockConfig+0x1ec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e036      	b.n	80027bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4918      	ldr	r1, [pc, #96]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d009      	beq.n	800278c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4910      	ldr	r1, [pc, #64]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800278c:	f000 f824 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	490b      	ldr	r1, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1f4>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1f8>)
 80027aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1fc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fbd1 	bl	8000f58 <HAL_InitTick>
 80027b6:	4603      	mov	r3, r0
 80027b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80027ba:	7afb      	ldrb	r3, [r7, #11]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	080092c8 	.word	0x080092c8
 80027d0:	20000008 	.word	0x20000008
 80027d4:	2000000c 	.word	0x2000000c

080027d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f0:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x34>
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d121      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d11e      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800280c:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e005      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002834:	4a2b      	ldr	r2, [pc, #172]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10d      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d102      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	e004      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d101      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_RCC_GetSysClockFreq+0x114>)
 800285e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d134      	bne.n	80028d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0xa6>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d003      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0xac>
 800287c:	e005      	b.n	800288a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002880:	617b      	str	r3, [r7, #20]
      break;
 8002882:	e005      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002886:	617b      	str	r3, [r7, #20]
      break;
 8002888:	e002      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	617b      	str	r3, [r7, #20]
      break;
 800288e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	fb03 f202 	mul.w	r2, r3, r2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	0e5b      	lsrs	r3, r3, #25
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	3301      	adds	r3, #1
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028d0:	69bb      	ldr	r3, [r7, #24]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080092e0 	.word	0x080092e0
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000008 	.word	0x20000008

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800290c:	f7ff fff0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4904      	ldr	r1, [pc, #16]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	080092d8 	.word	0x080092d8

08002934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002938:	f7ff ffda 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	0adb      	lsrs	r3, r3, #11
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4904      	ldr	r1, [pc, #16]	; (800295c <HAL_RCC_GetPCLK2Freq+0x28>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	080092d8 	.word	0x080092d8

08002960 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	220f      	movs	r2, #15
 800296e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_RCC_GetClockConfig+0x60>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0207 	and.w	r2, r3, #7
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	601a      	str	r2, [r3, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40022000 	.word	0x40022000

080029c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029dc:	f7ff f984 	bl	8001ce8 <HAL_PWREx_GetVoltageRange>
 80029e0:	6178      	str	r0, [r7, #20]
 80029e2:	e014      	b.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029fc:	f7ff f974 	bl	8001ce8 <HAL_PWREx_GetVoltageRange>
 8002a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a14:	d10b      	bne.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d919      	bls.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8002a20:	d902      	bls.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a22:	2302      	movs	r3, #2
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e013      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a28:	2301      	movs	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e010      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d902      	bls.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a34:	2303      	movs	r3, #3
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	e00a      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d102      	bne.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a40:	2302      	movs	r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e004      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d101      	bne.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 0207 	bic.w	r2, r3, #7
 8002a58:	4909      	ldr	r1, [pc, #36]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40022000 	.word	0x40022000

08002a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a90:	2300      	movs	r3, #0
 8002a92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d031      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aa8:	d01a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002aaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aae:	d814      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac6:	e00c      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f9de 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae8:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	494e      	ldr	r1, [pc, #312]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002afe:	e001      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 809e 	beq.w	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b16:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	4a3f      	ldr	r2, [pc, #252]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6593      	str	r3, [r2, #88]	; 0x58
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b44:	2301      	movs	r3, #1
 8002b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b48:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a39      	ldr	r2, [pc, #228]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b54:	f7fe fbba 	bl	80012cc <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b5a:	e009      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7fe fbb6 	bl	80012cc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b6e:	e005      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ef      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d15a      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b82:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01e      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d019      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bca:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d016      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fb76 	bl	80012cc <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	e00b      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe fb72 	bl	80012cc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d902      	bls.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	74fb      	strb	r3, [r7, #19]
            break;
 8002bfa:	e006      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ec      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1e:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c26:	e009      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3c:	7c7b      	ldrb	r3, [r7, #17]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4b8a      	ldr	r3, [pc, #552]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a89      	ldr	r2, [pc, #548]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5a:	4b84      	ldr	r3, [pc, #528]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f023 0203 	bic.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4980      	ldr	r1, [pc, #512]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c7c:	4b7b      	ldr	r3, [pc, #492]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 020c 	bic.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	4978      	ldr	r1, [pc, #480]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c9e:	4b73      	ldr	r3, [pc, #460]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	496f      	ldr	r1, [pc, #444]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cc0:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	4967      	ldr	r1, [pc, #412]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ce2:	4b62      	ldr	r3, [pc, #392]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	495e      	ldr	r1, [pc, #376]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	4956      	ldr	r1, [pc, #344]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d26:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	494d      	ldr	r1, [pc, #308]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d028      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d48:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4945      	ldr	r1, [pc, #276]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
 8002d74:	e011      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f882 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d028      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	492d      	ldr	r1, [pc, #180]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd0:	60d3      	str	r3, [r2, #12]
 8002dd2:	e011      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2101      	movs	r1, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f853 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01c      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e12:	4916      	ldr	r1, [pc, #88]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f830 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	4904      	ldr	r1, [pc, #16]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000

08002e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e9e:	4b74      	ldr	r3, [pc, #464]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d018      	beq.n	8002edc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eaa:	4b71      	ldr	r3, [pc, #452]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10d      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ec2:	4b6b      	ldr	r3, [pc, #428]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d047      	beq.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	e044      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d018      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0x86>
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d825      	bhi.n	8002f34 <RCCEx_PLLSAI1_Config+0xa4>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d002      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x62>
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d009      	beq.n	8002f04 <RCCEx_PLLSAI1_Config+0x74>
 8002ef0:	e020      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e01a      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f04:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e013      	b.n	8002f3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f16:	4b56      	ldr	r3, [pc, #344]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f22:	4b53      	ldr	r3, [pc, #332]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f32:	e006      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e004      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f42:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f4a:	4b49      	ldr	r3, [pc, #292]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	4943      	ldr	r1, [pc, #268]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d17c      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3f      	ldr	r2, [pc, #252]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe f9a8 	bl	80012cc <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f7e:	e009      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f80:	f7fe f9a4 	bl	80012cc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	73fb      	strb	r3, [r7, #15]
        break;
 8002f92:	e005      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ef      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d15f      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d110      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fac:	4b30      	ldr	r3, [pc, #192]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6892      	ldr	r2, [r2, #8]
 8002fbc:	0211      	lsls	r1, r2, #8
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	06d2      	lsls	r2, r2, #27
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	492a      	ldr	r1, [pc, #168]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	610b      	str	r3, [r1, #16]
 8002fcc:	e027      	b.n	800301e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d112      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	0211      	lsls	r1, r2, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6912      	ldr	r2, [r2, #16]
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0552      	lsls	r2, r2, #21
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	491f      	ldr	r1, [pc, #124]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	610b      	str	r3, [r1, #16]
 8002ff8:	e011      	b.n	800301e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003002:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	0211      	lsls	r1, r2, #8
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6952      	ldr	r2, [r2, #20]
 8003010:	0852      	lsrs	r2, r2, #1
 8003012:	3a01      	subs	r2, #1
 8003014:	0652      	lsls	r2, r2, #25
 8003016:	430a      	orrs	r2, r1
 8003018:	4915      	ldr	r1, [pc, #84]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301a:	4313      	orrs	r3, r2
 800301c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003028:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7fe f94f 	bl	80012cc <HAL_GetTick>
 800302e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003030:	e009      	b.n	8003046 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003032:	f7fe f94b 	bl	80012cc <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d902      	bls.n	8003046 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	73fb      	strb	r3, [r7, #15]
          break;
 8003044:	e005      	b.n	8003052 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ef      	beq.n	8003032 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e049      	b.n	800311a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f841 	bl	8003122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 f9dc 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e03b      	b.n	80031c8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_TIM_Base_Start_IT+0x9c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_TIM_Base_Start_IT+0x4e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317a:	d004      	beq.n	8003186 <HAL_TIM_Base_Start_IT+0x4e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d115      	bne.n	80031b2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_TIM_Base_Start_IT+0xa4>)
 800318e:	4013      	ands	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d015      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x8c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319e:	d011      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b0:	e008      	b.n	80031c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e000      	b.n	80031c6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40014000 	.word	0x40014000
 80031dc:	00010007 	.word	0x00010007

080031e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0202 	mvn.w	r2, #2
 800320c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f905 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f8f7 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f908 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0204 	mvn.w	r2, #4
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8db 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f8cd 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8de 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b08      	cmp	r3, #8
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0208 	mvn.w	r2, #8
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2204      	movs	r2, #4
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8b1 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8a3 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8b4 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0210 	mvn.w	r2, #16
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2208      	movs	r2, #8
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f887 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f879 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f88a 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d107      	bne.n	8003364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0201 	mvn.w	r2, #1
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fcdc 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d107      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8de 	bl	800354c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339e:	d10e      	bne.n	80033be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d107      	bne.n	80033be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f8d1 	bl	8003560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d10e      	bne.n	80033ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d107      	bne.n	80033ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f838 	bl	800345a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d10e      	bne.n	8003416 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b20      	cmp	r3, #32
 8003404:	d107      	bne.n	8003416 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0220 	mvn.w	r2, #32
 800340e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f891 	bl	8003538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a2a      	ldr	r2, [pc, #168]	; (800352c <TIM_Base_SetConfig+0xbc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_Base_SetConfig+0x20>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d108      	bne.n	80034a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <TIM_Base_SetConfig+0xbc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <TIM_Base_SetConfig+0x52>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d007      	beq.n	80034c2 <TIM_Base_SetConfig+0x52>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <TIM_Base_SetConfig+0xc0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <TIM_Base_SetConfig+0x52>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <TIM_Base_SetConfig+0xc4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <TIM_Base_SetConfig+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <TIM_Base_SetConfig+0xa0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <TIM_Base_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0xa0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <TIM_Base_SetConfig+0xc4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	615a      	str	r2, [r3, #20]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400

08003538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e040      	b.n	8003608 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fc00 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fc9a 	bl	8003eec <UART_SetConfig>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e022      	b.n	8003608 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 feba 	bl	8004344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 ff41 	bl	8004488 <UART_CheckIdleState>
 8003606:	4603      	mov	r3, r0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003624:	2b20      	cmp	r3, #32
 8003626:	f040 8082 	bne.w	800372e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_UART_Transmit+0x26>
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07a      	b.n	8003730 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_UART_Transmit+0x38>
 8003644:	2302      	movs	r3, #2
 8003646:	e073      	b.n	8003730 <HAL_UART_Transmit+0x120>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2221      	movs	r2, #33	; 0x21
 800365c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800365e:	f7fd fe35 	bl	80012cc <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d108      	bne.n	8003690 <HAL_UART_Transmit+0x80>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e003      	b.n	8003698 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036a0:	e02d      	b.n	80036fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 ff34 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e039      	b.n	8003730 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036ce:	b292      	uxth	r2, r2
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	3302      	adds	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e008      	b.n	80036ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b292      	uxth	r2, r2
 80036e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1cb      	bne.n	80036a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	2140      	movs	r1, #64	; 0x40
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 ff00 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e005      	b.n	8003730 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003738:	b480      	push	{r7}
 800373a:	b08b      	sub	sp, #44	; 0x2c
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374a:	2b20      	cmp	r3, #32
 800374c:	d156      	bne.n	80037fc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_Transmit_IT+0x22>
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e04f      	b.n	80037fe <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_UART_Transmit_IT+0x34>
 8003768:	2302      	movs	r3, #2
 800376a:	e048      	b.n	80037fe <HAL_UART_Transmit_IT+0xc6>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2221      	movs	r2, #33	; 0x21
 800379c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a6:	d107      	bne.n	80037b8 <HAL_UART_Transmit_IT+0x80>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_UART_Transmit_IT+0xd4>)
 80037b4:	669a      	str	r2, [r3, #104]	; 0x68
 80037b6:	e002      	b.n	80037be <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <HAL_UART_Transmit_IT+0xd8>)
 80037bc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	613b      	str	r3, [r7, #16]
   return(result);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	69f9      	ldr	r1, [r7, #28]
 80037ea:	6a3a      	ldr	r2, [r7, #32]
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e6      	bne.n	80037c6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	372c      	adds	r7, #44	; 0x2c
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	08004bbf 	.word	0x08004bbf
 8003810:	08004b07 	.word	0x08004b07

08003814 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	2b20      	cmp	r3, #32
 8003828:	d142      	bne.n	80038b0 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_UART_Receive_DMA+0x22>
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e03b      	b.n	80038b2 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_UART_Receive_DMA+0x34>
 8003844:	2302      	movs	r3, #2
 8003846:	e034      	b.n	80038b2 <HAL_UART_Receive_DMA+0x9e>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <HAL_UART_Receive_DMA+0xa8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01f      	beq.n	80038a0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d018      	beq.n	80038a0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	613b      	str	r3, [r7, #16]
   return(result);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	e841 2300 	strex	r3, r2, [r1]
 8003898:	61bb      	str	r3, [r7, #24]
   return(result);
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e6      	bne.n	800386e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fefc 	bl	80046a4 <UART_Start_Receive_DMA>
 80038ac:	4603      	mov	r3, r0
 80038ae:	e000      	b.n	80038b2 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40008000 	.word	0x40008000

080038c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0ba      	sub	sp, #232	; 0xe8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80038ee:	4013      	ands	r3, r2
 80038f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d115      	bne.n	8003928 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 82a6 	beq.w	8003e6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
      }
      return;
 8003926:	e2a0      	b.n	8003e6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8117 	beq.w	8003b60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800393e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_UART_IRQHandler+0x298>)
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 810a 	beq.w	8003b60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <HAL_UART_IRQHandler+0xbc>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800397c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d011      	beq.n	80039ac <HAL_UART_IRQHandler+0xec>
 8003988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a2:	f043 0204 	orr.w	r2, r3, #4
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d011      	beq.n	80039dc <HAL_UART_IRQHandler+0x11c>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2204      	movs	r2, #4
 80039ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d2:	f043 0202 	orr.w	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d017      	beq.n	8003a18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0e:	f043 0208 	orr.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_UART_IRQHandler+0x18a>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 820c 	beq.w	8003e6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04f      	beq.n	8003b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 feca 	bl	800483c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d141      	bne.n	8003b3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1d9      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <HAL_UART_IRQHandler+0x29c>)
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fe1c 	bl	8001754 <HAL_DMA_Abort_IT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00f      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9c4 	bl	8003ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e00b      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9c0 	bl	8003ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e007      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9bc 	bl	8003ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b50:	e18d      	b.n	8003e6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b52:	bf00      	nop
    return;
 8003b54:	e18b      	b.n	8003e6e <HAL_UART_IRQHandler+0x5ae>
 8003b56:	bf00      	nop
 8003b58:	04000120 	.word	0x04000120
 8003b5c:	08004adb 	.word	0x08004adb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 8146 	bne.w	8003df6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 813f 	beq.w	8003df6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8138 	beq.w	8003df6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	f040 80b4 	bne.w	8003d06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003baa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 815f 	beq.w	8003e72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f080 8157 	bcs.w	8003e72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 8085 	bne.w	8003cea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1da      	bne.n	8003be0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e1      	bne.n	8003c2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e3      	bne.n	8003c66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cba:	f023 0310 	bic.w	r3, r3, #16
 8003cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e4      	bne.n	8003caa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd fcf7 	bl	80016d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8e8 	bl	8003ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d04:	e0b5      	b.n	8003e72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a7 	beq.w	8003e76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a2 	beq.w	8003e76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d54:	647b      	str	r3, [r7, #68]	; 0x44
 8003d56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e4      	bne.n	8003d32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	623b      	str	r3, [r7, #32]
   return(result);
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3308      	adds	r3, #8
 8003d88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d8c:	633a      	str	r2, [r7, #48]	; 0x30
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e3      	bne.n	8003d68 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0310 	bic.w	r3, r3, #16
 8003dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	617b      	str	r3, [r7, #20]
   return(result);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e4      	bne.n	8003db2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f870 	bl	8003ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003df4:	e03f      	b.n	8003e76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <HAL_UART_IRQHandler+0x560>
 8003e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 ff5a 	bl	8004cd2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e1e:	e02d      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01c      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
    }
    return;
 8003e48:	e017      	b.n	8003e7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 ff0b 	bl	8004c7e <UART_EndTransmit_IT>
    return;
 8003e68:	e008      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e6a:	bf00      	nop
 8003e6c:	e006      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003e7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e7c:	37e8      	adds	r7, #232	; 0xe8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop

08003e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b08a      	sub	sp, #40	; 0x28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4bb4      	ldr	r3, [pc, #720]	; (80041ec <UART_SetConfig+0x300>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4aa9      	ldr	r2, [pc, #676]	; (80041f0 <UART_SetConfig+0x304>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	4313      	orrs	r3, r2
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4aa0      	ldr	r2, [pc, #640]	; (80041f4 <UART_SetConfig+0x308>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d126      	bne.n	8003fc4 <UART_SetConfig+0xd8>
 8003f76:	4ba0      	ldr	r3, [pc, #640]	; (80041f8 <UART_SetConfig+0x30c>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d81b      	bhi.n	8003fbc <UART_SetConfig+0xd0>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0xa0>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003f9d 	.word	0x08003f9d
 8003f90:	08003fad 	.word	0x08003fad
 8003f94:	08003fa5 	.word	0x08003fa5
 8003f98:	08003fb5 	.word	0x08003fb5
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa2:	e080      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003faa:	e07c      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8003fac:	2304      	movs	r3, #4
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb2:	e078      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fba:	e074      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc2:	e070      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a8c      	ldr	r2, [pc, #560]	; (80041fc <UART_SetConfig+0x310>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d138      	bne.n	8004040 <UART_SetConfig+0x154>
 8003fce:	4b8a      	ldr	r3, [pc, #552]	; (80041f8 <UART_SetConfig+0x30c>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d82d      	bhi.n	8004038 <UART_SetConfig+0x14c>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <UART_SetConfig+0xf8>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004039 	.word	0x08004039
 8003fec:	08004039 	.word	0x08004039
 8003ff0:	08004039 	.word	0x08004039
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004039 	.word	0x08004039
 8003ffc:	08004039 	.word	0x08004039
 8004000:	08004039 	.word	0x08004039
 8004004:	08004021 	.word	0x08004021
 8004008:	08004039 	.word	0x08004039
 800400c:	08004039 	.word	0x08004039
 8004010:	08004039 	.word	0x08004039
 8004014:	08004031 	.word	0x08004031
 8004018:	2300      	movs	r3, #0
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401e:	e042      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004020:	2302      	movs	r3, #2
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004026:	e03e      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004028:	2304      	movs	r3, #4
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402e:	e03a      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004030:	2308      	movs	r3, #8
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004036:	e036      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004038:	2310      	movs	r3, #16
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403e:	e032      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a6a      	ldr	r2, [pc, #424]	; (80041f0 <UART_SetConfig+0x304>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d12a      	bne.n	80040a0 <UART_SetConfig+0x1b4>
 800404a:	4b6b      	ldr	r3, [pc, #428]	; (80041f8 <UART_SetConfig+0x30c>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004054:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004058:	d01a      	beq.n	8004090 <UART_SetConfig+0x1a4>
 800405a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800405e:	d81b      	bhi.n	8004098 <UART_SetConfig+0x1ac>
 8004060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004064:	d00c      	beq.n	8004080 <UART_SetConfig+0x194>
 8004066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406a:	d815      	bhi.n	8004098 <UART_SetConfig+0x1ac>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <UART_SetConfig+0x18c>
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d008      	beq.n	8004088 <UART_SetConfig+0x19c>
 8004076:	e00f      	b.n	8004098 <UART_SetConfig+0x1ac>
 8004078:	2300      	movs	r3, #0
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407e:	e012      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004080:	2302      	movs	r3, #2
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e00e      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004088:	2304      	movs	r3, #4
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408e:	e00a      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004090:	2308      	movs	r3, #8
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004096:	e006      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004098:	2310      	movs	r3, #16
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409e:	e002      	b.n	80040a6 <UART_SetConfig+0x1ba>
 80040a0:	2310      	movs	r3, #16
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a51      	ldr	r2, [pc, #324]	; (80041f0 <UART_SetConfig+0x304>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d17a      	bne.n	80041a6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d824      	bhi.n	8004102 <UART_SetConfig+0x216>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0x1d4>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	08004103 	.word	0x08004103
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	08004103 	.word	0x08004103
 80040d0:	080040f3 	.word	0x080040f3
 80040d4:	08004103 	.word	0x08004103
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004103 	.word	0x08004103
 80040e0:	080040fb 	.word	0x080040fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fe fc10 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 80040e8:	61f8      	str	r0, [r7, #28]
        break;
 80040ea:	e010      	b.n	800410e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ec:	4b44      	ldr	r3, [pc, #272]	; (8004200 <UART_SetConfig+0x314>)
 80040ee:	61fb      	str	r3, [r7, #28]
        break;
 80040f0:	e00d      	b.n	800410e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f2:	f7fe fb71 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 80040f6:	61f8      	str	r0, [r7, #28]
        break;
 80040f8:	e009      	b.n	800410e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fe:	61fb      	str	r3, [r7, #28]
        break;
 8004100:	e005      	b.n	800410e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800410c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8107 	beq.w	8004324 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	429a      	cmp	r2, r3
 8004124:	d305      	bcc.n	8004132 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	429a      	cmp	r2, r3
 8004130:	d903      	bls.n	800413a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004138:	e0f4      	b.n	8004324 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2200      	movs	r2, #0
 800413e:	461c      	mov	r4, r3
 8004140:	4615      	mov	r5, r2
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	022b      	lsls	r3, r5, #8
 800414c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004150:	0222      	lsls	r2, r4, #8
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	6849      	ldr	r1, [r1, #4]
 8004156:	0849      	lsrs	r1, r1, #1
 8004158:	2000      	movs	r0, #0
 800415a:	4688      	mov	r8, r1
 800415c:	4681      	mov	r9, r0
 800415e:	eb12 0a08 	adds.w	sl, r2, r8
 8004162:	eb43 0b09 	adc.w	fp, r3, r9
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004174:	4650      	mov	r0, sl
 8004176:	4659      	mov	r1, fp
 8004178:	f7fc f882 	bl	8000280 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800418a:	d308      	bcc.n	800419e <UART_SetConfig+0x2b2>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004192:	d204      	bcs.n	800419e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	60da      	str	r2, [r3, #12]
 800419c:	e0c2      	b.n	8004324 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041a4:	e0be      	b.n	8004324 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	d16a      	bne.n	8004286 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80041b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d834      	bhi.n	8004222 <UART_SetConfig+0x336>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <UART_SetConfig+0x2d4>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	08004205 	.word	0x08004205
 80041c8:	0800420d 	.word	0x0800420d
 80041cc:	08004223 	.word	0x08004223
 80041d0:	08004213 	.word	0x08004213
 80041d4:	08004223 	.word	0x08004223
 80041d8:	08004223 	.word	0x08004223
 80041dc:	08004223 	.word	0x08004223
 80041e0:	0800421b 	.word	0x0800421b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7fe fb90 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 80041e8:	61f8      	str	r0, [r7, #28]
        break;
 80041ea:	e020      	b.n	800422e <UART_SetConfig+0x342>
 80041ec:	efff69f3 	.word	0xefff69f3
 80041f0:	40008000 	.word	0x40008000
 80041f4:	40013800 	.word	0x40013800
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40004400 	.word	0x40004400
 8004200:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004204:	f7fe fb96 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8004208:	61f8      	str	r0, [r7, #28]
        break;
 800420a:	e010      	b.n	800422e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800420c:	4b4c      	ldr	r3, [pc, #304]	; (8004340 <UART_SetConfig+0x454>)
 800420e:	61fb      	str	r3, [r7, #28]
        break;
 8004210:	e00d      	b.n	800422e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7fe fae1 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8004216:	61f8      	str	r0, [r7, #28]
        break;
 8004218:	e009      	b.n	800422e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421e:	61fb      	str	r3, [r7, #28]
        break;
 8004220:	e005      	b.n	800422e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800422c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d077      	beq.n	8004324 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005a      	lsls	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	441a      	add	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b0f      	cmp	r3, #15
 800424e:	d916      	bls.n	800427e <UART_SetConfig+0x392>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004256:	d212      	bcs.n	800427e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f023 030f 	bic.w	r3, r3, #15
 8004260:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	b29a      	uxth	r2, r3
 800426e:	8afb      	ldrh	r3, [r7, #22]
 8004270:	4313      	orrs	r3, r2
 8004272:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	8afa      	ldrh	r2, [r7, #22]
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	e052      	b.n	8004324 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004284:	e04e      	b.n	8004324 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800428a:	2b08      	cmp	r3, #8
 800428c:	d827      	bhi.n	80042de <UART_SetConfig+0x3f2>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <UART_SetConfig+0x3a8>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	080042df 	.word	0x080042df
 80042a4:	080042cf 	.word	0x080042cf
 80042a8:	080042df 	.word	0x080042df
 80042ac:	080042df 	.word	0x080042df
 80042b0:	080042df 	.word	0x080042df
 80042b4:	080042d7 	.word	0x080042d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fe fb26 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 80042bc:	61f8      	str	r0, [r7, #28]
        break;
 80042be:	e014      	b.n	80042ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7fe fb38 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 80042c4:	61f8      	str	r0, [r7, #28]
        break;
 80042c6:	e010      	b.n	80042ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <UART_SetConfig+0x454>)
 80042ca:	61fb      	str	r3, [r7, #28]
        break;
 80042cc:	e00d      	b.n	80042ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ce:	f7fe fa83 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 80042d2:	61f8      	str	r0, [r7, #28]
        break;
 80042d4:	e009      	b.n	80042ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042da:	61fb      	str	r3, [r7, #28]
        break;
 80042dc:	e005      	b.n	80042ea <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042e8:	bf00      	nop
    }

    if (pclk != 0U)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d019      	beq.n	8004324 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	085a      	lsrs	r2, r3, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	441a      	add	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d909      	bls.n	800431e <UART_SetConfig+0x432>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004310:	d205      	bcs.n	800431e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60da      	str	r2, [r3, #12]
 800431c:	e002      	b.n	8004324 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004330:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004334:	4618      	mov	r0, r3
 8004336:	3728      	adds	r7, #40	; 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800433e:	bf00      	nop
 8004340:	00f42400 	.word	0x00f42400

08004344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01a      	beq.n	800445a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004442:	d10a      	bne.n	800445a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af02      	add	r7, sp, #8
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004498:	f7fc ff18 	bl	80012cc <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d10e      	bne.n	80044ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f82d 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e023      	b.n	8004512 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d10e      	bne.n	80044f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f817 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00d      	b.n	8004512 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b09c      	sub	sp, #112	; 0x70
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452a:	e0a5      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004532:	f000 80a1 	beq.w	8004678 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004536:	f7fc fec9 	bl	80012cc <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004542:	429a      	cmp	r2, r3
 8004544:	d302      	bcc.n	800454c <UART_WaitOnFlagUntilTimeout+0x32>
 8004546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004548:	2b00      	cmp	r3, #0
 800454a:	d13e      	bne.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800455a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004560:	667b      	str	r3, [r7, #100]	; 0x64
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e6      	bne.n	800454c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3308      	adds	r3, #8
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	663b      	str	r3, [r7, #96]	; 0x60
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800459e:	64ba      	str	r2, [r7, #72]	; 0x48
 80045a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e5      	bne.n	800457e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e067      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d04f      	beq.n	8004678 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e6:	d147      	bne.n	8004678 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004606:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
 8004612:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	613b      	str	r3, [r7, #16]
   return(result);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	66bb      	str	r3, [r7, #104]	; 0x68
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004644:	623a      	str	r2, [r7, #32]
 8004646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	69f9      	ldr	r1, [r7, #28]
 800464a:	6a3a      	ldr	r2, [r7, #32]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	61bb      	str	r3, [r7, #24]
   return(result);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e010      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4013      	ands	r3, r2
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	429a      	cmp	r2, r3
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	429a      	cmp	r2, r3
 8004694:	f43f af4a 	beq.w	800452c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3770      	adds	r7, #112	; 0x70
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b096      	sub	sp, #88	; 0x58
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2222      	movs	r2, #34	; 0x22
 80046cc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d02b      	beq.n	800472e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a42      	ldr	r2, [pc, #264]	; (80047e4 <UART_Start_Receive_DMA+0x140>)
 80046dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <UART_Start_Receive_DMA+0x144>)
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a40      	ldr	r2, [pc, #256]	; (80047ec <UART_Start_Receive_DMA+0x148>)
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	2200      	movs	r2, #0
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	4619      	mov	r1, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	461a      	mov	r2, r3
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	f7fc ff85 	bl	8001618 <HAL_DMA_Start_IT>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00c      	beq.n	800472e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2210      	movs	r2, #16
 8004718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e055      	b.n	80047da <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	657b      	str	r3, [r7, #84]	; 0x54
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475c:	64bb      	str	r3, [r7, #72]	; 0x48
 800475e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e6      	bne.n	800473e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3308      	adds	r3, #8
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	653b      	str	r3, [r7, #80]	; 0x50
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004790:	637a      	str	r2, [r7, #52]	; 0x34
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	613b      	str	r3, [r7, #16]
   return(result);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047c4:	623a      	str	r2, [r7, #32]
 80047c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	69f9      	ldr	r1, [r7, #28]
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e5      	bne.n	80047a4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3758      	adds	r7, #88	; 0x58
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	08004903 	.word	0x08004903
 80047e8:	08004a27 	.word	0x08004a27
 80047ec:	08004a5f 	.word	0x08004a5f

080047f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	60bb      	str	r3, [r7, #8]
   return(result);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	613b      	str	r3, [r7, #16]
   return(result);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004830:	bf00      	nop
 8004832:	3724      	adds	r7, #36	; 0x24
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b095      	sub	sp, #84	; 0x54
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004862:	643b      	str	r3, [r7, #64]	; 0x40
 8004864:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e6      	bne.n	8004844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	61fb      	str	r3, [r7, #28]
   return(result);
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	64bb      	str	r3, [r7, #72]	; 0x48
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d118      	bne.n	80048e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f023 0310 	bic.w	r3, r3, #16
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6979      	ldr	r1, [r7, #20]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	613b      	str	r3, [r7, #16]
   return(result);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e6      	bne.n	80048b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048f6:	bf00      	nop
 80048f8:	3754      	adds	r7, #84	; 0x54
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b09c      	sub	sp, #112	; 0x70
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d170      	bne.n	8004a00 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	2200      	movs	r2, #0
 8004922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493a:	66bb      	str	r3, [r7, #104]	; 0x68
 800493c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004944:	65bb      	str	r3, [r7, #88]	; 0x58
 8004946:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800494a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	667b      	str	r3, [r7, #100]	; 0x64
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004978:	647a      	str	r2, [r7, #68]	; 0x44
 800497a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800497e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	623b      	str	r3, [r7, #32]
   return(result);
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a2:	663b      	str	r3, [r7, #96]	; 0x60
 80049a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049ac:	633a      	str	r2, [r7, #48]	; 0x30
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	2220      	movs	r2, #32
 80049c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d118      	bne.n	8004a00 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	60fb      	str	r3, [r7, #12]
   return(result);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0310 	bic.w	r3, r3, #16
 80049e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	617b      	str	r3, [r7, #20]
   return(result);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e6      	bne.n	80049ce <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d107      	bne.n	8004a18 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a12:	f7ff fa5f 	bl	8003ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a16:	e002      	b.n	8004a1e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004a18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a1a:	f7ff fa3d 	bl	8003e98 <HAL_UART_RxCpltCallback>
}
 8004a1e:	bf00      	nop
 8004a20:	3770      	adds	r7, #112	; 0x70
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d109      	bne.n	8004a50 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	4619      	mov	r1, r3
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fa43 	bl	8003ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a4e:	e002      	b.n	8004a56 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff fa2b 	bl	8003eac <HAL_UART_RxHalfCpltCallback>
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d109      	bne.n	8004a9a <UART_DMAError+0x3c>
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b21      	cmp	r3, #33	; 0x21
 8004a8a:	d106      	bne.n	8004a9a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004a94:	6978      	ldr	r0, [r7, #20]
 8004a96:	f7ff feab 	bl	80047f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d109      	bne.n	8004abc <UART_DMAError+0x5e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b22      	cmp	r3, #34	; 0x22
 8004aac:	d106      	bne.n	8004abc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004ab6:	6978      	ldr	r0, [r7, #20]
 8004ab8:	f7ff fec0 	bl	800483c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac2:	f043 0210 	orr.w	r2, r3, #16
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	f7ff f9f7 	bl	8003ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad2:	bf00      	nop
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff f9e1 	bl	8003ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b08f      	sub	sp, #60	; 0x3c
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b12:	2b21      	cmp	r3, #33	; 0x21
 8004b14:	d14d      	bne.n	8004bb2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d132      	bne.n	8004b88 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b42:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6979      	ldr	r1, [r7, #20]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e6      	bne.n	8004b54 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b86:	e014      	b.n	8004bb2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	b292      	uxth	r2, r2
 8004b94:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004bb2:	bf00      	nop
 8004bb4:	373c      	adds	r7, #60	; 0x3c
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b091      	sub	sp, #68	; 0x44
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bca:	2b21      	cmp	r3, #33	; 0x21
 8004bcc:	d151      	bne.n	8004c72 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d132      	bne.n	8004c40 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	623b      	str	r3, [r7, #32]
   return(result);
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	69b9      	ldr	r1, [r7, #24]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	617b      	str	r3, [r7, #20]
   return(result);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e6      	bne.n	8004c0c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c3e:	e018      	b.n	8004c72 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c52:	b292      	uxth	r2, r2
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c72:	bf00      	nop
 8004c74:	3744      	adds	r7, #68	; 0x44
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b088      	sub	sp, #32
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6979      	ldr	r1, [r7, #20]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff f8dd 	bl	8003e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cca:	bf00      	nop
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <__NVIC_SetPriority>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	db0a      	blt.n	8004d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	490c      	ldr	r1, [pc, #48]	; (8004d34 <__NVIC_SetPriority+0x4c>)
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	0112      	lsls	r2, r2, #4
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d10:	e00a      	b.n	8004d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4908      	ldr	r1, [pc, #32]	; (8004d38 <__NVIC_SetPriority+0x50>)
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	3b04      	subs	r3, #4
 8004d20:	0112      	lsls	r2, r2, #4
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	440b      	add	r3, r1
 8004d26:	761a      	strb	r2, [r3, #24]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	e000e100 	.word	0xe000e100
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <SysTick_Handler+0x1c>)
 8004d42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d44:	f001 ff12 	bl	8006b6c <xTaskGetSchedulerState>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d001      	beq.n	8004d52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d4e:	f002 fd5b 	bl	8007808 <xPortSysTickHandler>
  }
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	e000e010 	.word	0xe000e010

08004d5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d60:	2100      	movs	r1, #0
 8004d62:	f06f 0004 	mvn.w	r0, #4
 8004d66:	f7ff ffbf 	bl	8004ce8 <__NVIC_SetPriority>
#endif
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d76:	f3ef 8305 	mrs	r3, IPSR
 8004d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d82:	f06f 0305 	mvn.w	r3, #5
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	e00c      	b.n	8004da4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <osKernelInitialize+0x44>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <osKernelInitialize+0x44>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	e002      	b.n	8004da4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004da2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004da4:	687b      	ldr	r3, [r7, #4]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	200028a0 	.word	0x200028a0

08004db8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dbe:	f3ef 8305 	mrs	r3, IPSR
 8004dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8004dc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004dca:	f06f 0305 	mvn.w	r3, #5
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	e010      	b.n	8004df4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <osKernelStart+0x48>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d109      	bne.n	8004dee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dda:	f7ff ffbf 	bl	8004d5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <osKernelStart+0x48>)
 8004de0:	2202      	movs	r2, #2
 8004de2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004de4:	f001 fa66 	bl	80062b4 <vTaskStartScheduler>
      stat = osOK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	e002      	b.n	8004df4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004df2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004df4:	687b      	ldr	r3, [r7, #4]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200028a0 	.word	0x200028a0

08004e04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08e      	sub	sp, #56	; 0x38
 8004e08:	af04      	add	r7, sp, #16
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e14:	f3ef 8305 	mrs	r3, IPSR
 8004e18:	617b      	str	r3, [r7, #20]
  return(result);
 8004e1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d17e      	bne.n	8004f1e <osThreadNew+0x11a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d07b      	beq.n	8004f1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e2a:	2318      	movs	r3, #24
 8004e2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d045      	beq.n	8004eca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <osThreadNew+0x48>
        name = attr->name;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <osThreadNew+0x6e>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b38      	cmp	r3, #56	; 0x38
 8004e64:	d805      	bhi.n	8004e72 <osThreadNew+0x6e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <osThreadNew+0x72>
        return (NULL);
 8004e72:	2300      	movs	r3, #0
 8004e74:	e054      	b.n	8004f20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00e      	beq.n	8004eac <osThreadNew+0xa8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2bbb      	cmp	r3, #187	; 0xbb
 8004e94:	d90a      	bls.n	8004eac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <osThreadNew+0xa8>
        mem = 1;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e010      	b.n	8004ece <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10c      	bne.n	8004ece <osThreadNew+0xca>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d108      	bne.n	8004ece <osThreadNew+0xca>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <osThreadNew+0xca>
          mem = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e001      	b.n	8004ece <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d110      	bne.n	8004ef6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004edc:	9202      	str	r2, [sp, #8]
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fff6 	bl	8005edc <xTaskCreateStatic>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	e013      	b.n	8004f1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d110      	bne.n	8004f1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	f107 0310 	add.w	r3, r7, #16
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f001 f841 	bl	8005f96 <xTaskCreate>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d001      	beq.n	8004f1e <osThreadNew+0x11a>
            hTask = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f1e:	693b      	ldr	r3, [r7, #16]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3728      	adds	r7, #40	; 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f30:	f3ef 8305 	mrs	r3, IPSR
 8004f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <osDelay+0x1c>
    stat = osErrorISR;
 8004f3c:	f06f 0305 	mvn.w	r3, #5
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e007      	b.n	8004f54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 f97c 	bl	800624c <vTaskDelay>
    }
  }

  return (stat);
 8004f54:	68fb      	ldr	r3, [r7, #12]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b08a      	sub	sp, #40	; 0x28
 8004f62:	af02      	add	r7, sp, #8
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f6e:	f3ef 8305 	mrs	r3, IPSR
 8004f72:	613b      	str	r3, [r7, #16]
  return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d15f      	bne.n	800503a <osMessageQueueNew+0xdc>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d05c      	beq.n	800503a <osMessageQueueNew+0xdc>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d059      	beq.n	800503a <osMessageQueueNew+0xdc>
    mem = -1;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d029      	beq.n	8004fe6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d012      	beq.n	8004fc0 <osMessageQueueNew+0x62>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b4f      	cmp	r3, #79	; 0x4f
 8004fa0:	d90e      	bls.n	8004fc0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <osMessageQueueNew+0x62>
        mem = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	e014      	b.n	8004fea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d110      	bne.n	8004fea <osMessageQueueNew+0x8c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10c      	bne.n	8004fea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <osMessageQueueNew+0x8c>
          mem = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e001      	b.n	8004fea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10b      	bne.n	8005008 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	9100      	str	r1, [sp, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fa2e 	bl	8005460 <xQueueGenericCreateStatic>
 8005004:	61f8      	str	r0, [r7, #28]
 8005006:	e008      	b.n	800501a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800500e:	2200      	movs	r2, #0
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa9c 	bl	8005550 <xQueueGenericCreate>
 8005018:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00c      	beq.n	800503a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e001      	b.n	8005032 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005032:	6979      	ldr	r1, [r7, #20]
 8005034:	69f8      	ldr	r0, [r7, #28]
 8005036:	f000 fef3 	bl	8005e20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800503a:	69fb      	ldr	r3, [r7, #28]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800505c:	f3ef 8305 	mrs	r3, IPSR
 8005060:	617b      	str	r3, [r7, #20]
  return(result);
 8005062:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005064:	2b00      	cmp	r3, #0
 8005066:	d028      	beq.n	80050ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <osMessageQueuePut+0x36>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <osMessageQueuePut+0x36>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800507a:	f06f 0303 	mvn.w	r3, #3
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	e038      	b.n	80050f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005086:	f107 0210 	add.w	r2, r7, #16
 800508a:	2300      	movs	r3, #0
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	69b8      	ldr	r0, [r7, #24]
 8005090:	f000 fbba 	bl	8005808 <xQueueGenericSendFromISR>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d003      	beq.n	80050a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800509a:	f06f 0302 	mvn.w	r3, #2
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	e028      	b.n	80050f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d025      	beq.n	80050f4 <osMessageQueuePut+0xb0>
 80050a8:	4b15      	ldr	r3, [pc, #84]	; (8005100 <osMessageQueuePut+0xbc>)
 80050aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	e01c      	b.n	80050f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <osMessageQueuePut+0x82>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80050c6:	f06f 0303 	mvn.w	r3, #3
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e012      	b.n	80050f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80050ce:	2300      	movs	r3, #0
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	69b8      	ldr	r0, [r7, #24]
 80050d6:	f000 fa99 	bl	800560c <xQueueGenericSend>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d009      	beq.n	80050f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80050e6:	f06f 0301 	mvn.w	r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	e002      	b.n	80050f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80050ee:	f06f 0302 	mvn.w	r3, #2
 80050f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80050f4:	69fb      	ldr	r3, [r7, #28]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800511a:	f3ef 8305 	mrs	r3, IPSR
 800511e:	617b      	str	r3, [r7, #20]
  return(result);
 8005120:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005122:	2b00      	cmp	r3, #0
 8005124:	d028      	beq.n	8005178 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <osMessageQueueGet+0x34>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <osMessageQueueGet+0x34>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005138:	f06f 0303 	mvn.w	r3, #3
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e037      	b.n	80051b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	461a      	mov	r2, r3
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	69b8      	ldr	r0, [r7, #24]
 800514e:	f000 fcd7 	bl	8005b00 <xQueueReceiveFromISR>
 8005152:	4603      	mov	r3, r0
 8005154:	2b01      	cmp	r3, #1
 8005156:	d003      	beq.n	8005160 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005158:	f06f 0302 	mvn.w	r3, #2
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	e027      	b.n	80051b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d024      	beq.n	80051b0 <osMessageQueueGet+0xac>
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <osMessageQueueGet+0xb8>)
 8005168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	e01b      	b.n	80051b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <osMessageQueueGet+0x80>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d103      	bne.n	800518c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005184:	f06f 0303 	mvn.w	r3, #3
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	e011      	b.n	80051b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	69b8      	ldr	r0, [r7, #24]
 8005192:	f000 fbd5 	bl	8005940 <xQueueReceive>
 8005196:	4603      	mov	r3, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	d009      	beq.n	80051b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80051a2:	f06f 0301 	mvn.w	r3, #1
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e002      	b.n	80051b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80051aa:	f06f 0302 	mvn.w	r3, #2
 80051ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051b0:	69fb      	ldr	r3, [r7, #28]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a07      	ldr	r2, [pc, #28]	; (80051ec <vApplicationGetIdleTaskMemory+0x2c>)
 80051d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a06      	ldr	r2, [pc, #24]	; (80051f0 <vApplicationGetIdleTaskMemory+0x30>)
 80051d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2280      	movs	r2, #128	; 0x80
 80051dc:	601a      	str	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	200028a4 	.word	0x200028a4
 80051f0:	20002960 	.word	0x20002960

080051f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a07      	ldr	r2, [pc, #28]	; (8005220 <vApplicationGetTimerTaskMemory+0x2c>)
 8005204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a06      	ldr	r2, [pc, #24]	; (8005224 <vApplicationGetTimerTaskMemory+0x30>)
 800520a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	20002b60 	.word	0x20002b60
 8005224:	20002c1c 	.word	0x20002c1c

08005228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f103 0208 	add.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f103 0208 	add.w	r2, r3, #8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e0:	d103      	bne.n	80052ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e00c      	b.n	8005304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3308      	adds	r3, #8
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e002      	b.n	80052f8 <vListInsert+0x2e>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	d2f6      	bcs.n	80052f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6892      	ldr	r2, [r2, #8]
 8005352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6852      	ldr	r2, [r2, #4]
 800535c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	d103      	bne.n	8005370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1e5a      	subs	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053ba:	f002 f993 	bl	80076e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	441a      	add	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	3b01      	subs	r3, #1
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	22ff      	movs	r2, #255	; 0xff
 80053fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d114      	bne.n	800543a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01a      	beq.n	800544e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3310      	adds	r3, #16
 800541c:	4618      	mov	r0, r3
 800541e:	f001 f9e3 	bl	80067e8 <xTaskRemoveFromEventList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d012      	beq.n	800544e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <xQueueGenericReset+0xcc>)
 800542a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	e009      	b.n	800544e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3310      	adds	r3, #16
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fef2 	bl	8005228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3324      	adds	r3, #36	; 0x24
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff feed 	bl	8005228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800544e:	f002 f979 	bl	8007744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005452:	2301      	movs	r3, #1
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	; 0x38
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <xQueueGenericCreateStatic+0x52>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <xQueueGenericCreateStatic+0x56>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <xQueueGenericCreateStatic+0x58>
 80054b6:	2300      	movs	r3, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	623b      	str	r3, [r7, #32]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <xQueueGenericCreateStatic+0x7e>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <xQueueGenericCreateStatic+0x82>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <xQueueGenericCreateStatic+0x84>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	61fb      	str	r3, [r7, #28]
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054fe:	2350      	movs	r3, #80	; 0x50
 8005500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d00a      	beq.n	800551e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	61bb      	str	r3, [r7, #24]
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800551e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005532:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f83f 	bl	80055c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005548:	4618      	mov	r0, r3
 800554a:	3730      	adds	r7, #48	; 0x30
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	613b      	str	r3, [r7, #16]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	3350      	adds	r3, #80	; 0x50
 8005588:	4618      	mov	r0, r3
 800558a:	f002 f9cd 	bl	8007928 <pvPortMalloc>
 800558e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d011      	beq.n	80055ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	3350      	adds	r3, #80	; 0x50
 800559e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055a8:	79fa      	ldrb	r2, [r7, #7]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f805 	bl	80055c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ba:	69bb      	ldr	r3, [r7, #24]
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e002      	b.n	80055e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055f2:	2101      	movs	r1, #1
 80055f4:	69b8      	ldr	r0, [r7, #24]
 80055f6:	f7ff fecb 	bl	8005390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08e      	sub	sp, #56	; 0x38
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800561a:	2300      	movs	r3, #0
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <xQueueGenericSend+0x32>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <xQueueGenericSend+0x40>
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <xQueueGenericSend+0x44>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <xQueueGenericSend+0x46>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <xQueueGenericSend+0x60>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d103      	bne.n	800567a <xQueueGenericSend+0x6e>
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <xQueueGenericSend+0x72>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueGenericSend+0x74>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueGenericSend+0x8e>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	623b      	str	r3, [r7, #32]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800569a:	f001 fa67 	bl	8006b6c <xTaskGetSchedulerState>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <xQueueGenericSend+0x9e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <xQueueGenericSend+0xa2>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <xQueueGenericSend+0xa4>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xQueueGenericSend+0xbe>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	61fb      	str	r3, [r7, #28]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ca:	f002 f80b 	bl	80076e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <xQueueGenericSend+0xd4>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d129      	bne.n	8005734 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056e6:	f000 fa8b 	bl	8005c00 <prvCopyDataToQueue>
 80056ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d010      	beq.n	8005716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f875 	bl	80067e8 <xTaskRemoveFromEventList>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005704:	4b3f      	ldr	r3, [pc, #252]	; (8005804 <xQueueGenericSend+0x1f8>)
 8005706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	e00a      	b.n	800572c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <xQueueGenericSend+0x1f8>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800572c:	f002 f80a 	bl	8007744 <vPortExitCritical>
				return pdPASS;
 8005730:	2301      	movs	r3, #1
 8005732:	e063      	b.n	80057fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800573a:	f002 f803 	bl	8007744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800573e:	2300      	movs	r3, #0
 8005740:	e05c      	b.n	80057fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	4618      	mov	r0, r3
 800574e:	f001 f8af 	bl	80068b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005752:	2301      	movs	r3, #1
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005756:	f001 fff5 	bl	8007744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800575a:	f000 fe1b 	bl	8006394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800575e:	f001 ffc1 	bl	80076e4 <vPortEnterCritical>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005768:	b25b      	sxtb	r3, r3
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576e:	d103      	bne.n	8005778 <xQueueGenericSend+0x16c>
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800577e:	b25b      	sxtb	r3, r3
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005784:	d103      	bne.n	800578e <xQueueGenericSend+0x182>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800578e:	f001 ffd9 	bl	8007744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005792:	1d3a      	adds	r2, r7, #4
 8005794:	f107 0314 	add.w	r3, r7, #20
 8005798:	4611      	mov	r1, r2
 800579a:	4618      	mov	r0, r3
 800579c:	f001 f89e 	bl	80068dc <xTaskCheckForTimeOut>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d124      	bne.n	80057f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a8:	f000 fb22 	bl	8005df0 <prvIsQueueFull>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	3310      	adds	r3, #16
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 ffc4 	bl	8006748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c2:	f000 faad 	bl	8005d20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057c6:	f000 fdf3 	bl	80063b0 <xTaskResumeAll>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f47f af7c 	bne.w	80056ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <xQueueGenericSend+0x1f8>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	e772      	b.n	80056ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e6:	f000 fa9b 	bl	8005d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ea:	f000 fde1 	bl	80063b0 <xTaskResumeAll>
 80057ee:	e76c      	b.n	80056ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f2:	f000 fa95 	bl	8005d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057f6:	f000 fddb 	bl	80063b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3738      	adds	r7, #56	; 0x38
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b090      	sub	sp, #64	; 0x40
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <xQueueGenericSendFromISR+0x3c>
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <xQueueGenericSendFromISR+0x40>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <xQueueGenericSendFromISR+0x42>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d103      	bne.n	8005872 <xQueueGenericSendFromISR+0x6a>
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <xQueueGenericSendFromISR+0x6e>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <xQueueGenericSendFromISR+0x70>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	623b      	str	r3, [r7, #32]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005892:	f002 f809 	bl	80078a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005896:	f3ef 8211 	mrs	r2, BASEPRI
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	61fa      	str	r2, [r7, #28]
 80058ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <xQueueGenericSendFromISR+0xbc>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d12f      	bne.n	8005924 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058da:	f000 f991 	bl	8005c00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e6:	d112      	bne.n	800590e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d016      	beq.n	800591e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	3324      	adds	r3, #36	; 0x24
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 ff77 	bl	80067e8 <xTaskRemoveFromEventList>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e007      	b.n	800591e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800590e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005912:	3301      	adds	r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	b25a      	sxtb	r2, r3
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800591e:	2301      	movs	r3, #1
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005922:	e001      	b.n	8005928 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005932:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005936:	4618      	mov	r0, r3
 8005938:	3740      	adds	r7, #64	; 0x40
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	; 0x30
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <xQueueReceive+0x30>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	623b      	str	r3, [r7, #32]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <xQueueReceive+0x3e>
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <xQueueReceive+0x42>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueReceive+0x44>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueReceive+0x5e>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61fb      	str	r3, [r7, #28]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800599e:	f001 f8e5 	bl	8006b6c <xTaskGetSchedulerState>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <xQueueReceive+0x6e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueReceive+0x72>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueReceive+0x74>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xQueueReceive+0x8e>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	61bb      	str	r3, [r7, #24]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ce:	f001 fe89 	bl	80076e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01f      	beq.n	8005a1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e2:	f000 f977 	bl	8005cd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	1e5a      	subs	r2, r3, #1
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00f      	beq.n	8005a16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	3310      	adds	r3, #16
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fef4 	bl	80067e8 <xTaskRemoveFromEventList>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a06:	4b3d      	ldr	r3, [pc, #244]	; (8005afc <xQueueReceive+0x1bc>)
 8005a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a16:	f001 fe95 	bl	8007744 <vPortExitCritical>
				return pdPASS;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e069      	b.n	8005af2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d103      	bne.n	8005a2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a24:	f001 fe8e 	bl	8007744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e062      	b.n	8005af2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a32:	f107 0310 	add.w	r3, r7, #16
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 ff3a 	bl	80068b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a40:	f001 fe80 	bl	8007744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a44:	f000 fca6 	bl	8006394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a48:	f001 fe4c 	bl	80076e4 <vPortEnterCritical>
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a58:	d103      	bne.n	8005a62 <xQueueReceive+0x122>
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a6e:	d103      	bne.n	8005a78 <xQueueReceive+0x138>
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a78:	f001 fe64 	bl	8007744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a7c:	1d3a      	adds	r2, r7, #4
 8005a7e:	f107 0310 	add.w	r3, r7, #16
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 ff29 	bl	80068dc <xTaskCheckForTimeOut>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d123      	bne.n	8005ad8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a92:	f000 f997 	bl	8005dc4 <prvIsQueueEmpty>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d017      	beq.n	8005acc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	3324      	adds	r3, #36	; 0x24
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fe4f 	bl	8006748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aac:	f000 f938 	bl	8005d20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ab0:	f000 fc7e 	bl	80063b0 <xTaskResumeAll>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d189      	bne.n	80059ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005aba:	4b10      	ldr	r3, [pc, #64]	; (8005afc <xQueueReceive+0x1bc>)
 8005abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	e780      	b.n	80059ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ace:	f000 f927 	bl	8005d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ad2:	f000 fc6d 	bl	80063b0 <xTaskResumeAll>
 8005ad6:	e77a      	b.n	80059ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ada:	f000 f921 	bl	8005d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ade:	f000 fc67 	bl	80063b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae4:	f000 f96e 	bl	8005dc4 <prvIsQueueEmpty>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f43f af6f 	beq.w	80059ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005af0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3730      	adds	r7, #48	; 0x30
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	623b      	str	r3, [r7, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <xQueueReceiveFromISR+0x3a>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <xQueueReceiveFromISR+0x3e>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <xQueueReceiveFromISR+0x40>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	61fb      	str	r3, [r7, #28]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b5a:	f001 fea5 	bl	80078a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005b5e:	f3ef 8211 	mrs	r2, BASEPRI
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61ba      	str	r2, [r7, #24]
 8005b74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d02f      	beq.n	8005be6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b94:	f000 f89e 	bl	8005cd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	1e5a      	subs	r2, r3, #1
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba8:	d112      	bne.n	8005bd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	3310      	adds	r3, #16
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fe16 	bl	80067e8 <xTaskRemoveFromEventList>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00e      	beq.n	8005be0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e007      	b.n	8005be0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	b25a      	sxtb	r2, r3
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005be0:	2301      	movs	r3, #1
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
 8005be4:	e001      	b.n	8005bea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f383 8811 	msr	BASEPRI, r3
}
 8005bf4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3738      	adds	r7, #56	; 0x38
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10d      	bne.n	8005c3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d14d      	bne.n	8005cc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 ffbc 	bl	8006ba8 <xTaskPriorityDisinherit>
 8005c30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	609a      	str	r2, [r3, #8]
 8005c38:	e043      	b.n	8005cc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d119      	bne.n	8005c74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6858      	ldr	r0, [r3, #4]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	f002 f989 	bl	8007f62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	441a      	add	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d32b      	bcc.n	8005cc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	e026      	b.n	8005cc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68d8      	ldr	r0, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	f002 f96f 	bl	8007f62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	425b      	negs	r3, r3
 8005c8e:	441a      	add	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d207      	bcs.n	8005cb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	425b      	negs	r3, r3
 8005caa:	441a      	add	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d105      	bne.n	8005cc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cca:	697b      	ldr	r3, [r7, #20]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d018      	beq.n	8005d18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	441a      	add	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d303      	bcc.n	8005d08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68d9      	ldr	r1, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	461a      	mov	r2, r3
 8005d12:	6838      	ldr	r0, [r7, #0]
 8005d14:	f002 f925 	bl	8007f62 <memcpy>
	}
}
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d28:	f001 fcdc 	bl	80076e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d34:	e011      	b.n	8005d5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d012      	beq.n	8005d64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3324      	adds	r3, #36	; 0x24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fd50 	bl	80067e8 <xTaskRemoveFromEventList>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d4e:	f000 fe27 	bl	80069a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dce9      	bgt.n	8005d36 <prvUnlockQueue+0x16>
 8005d62:	e000      	b.n	8005d66 <prvUnlockQueue+0x46>
					break;
 8005d64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	22ff      	movs	r2, #255	; 0xff
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d6e:	f001 fce9 	bl	8007744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d72:	f001 fcb7 	bl	80076e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d7e:	e011      	b.n	8005da4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d012      	beq.n	8005dae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fd2b 	bl	80067e8 <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d98:	f000 fe02 	bl	80069a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	dce9      	bgt.n	8005d80 <prvUnlockQueue+0x60>
 8005dac:	e000      	b.n	8005db0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	22ff      	movs	r2, #255	; 0xff
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005db8:	f001 fcc4 	bl	8007744 <vPortExitCritical>
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dcc:	f001 fc8a 	bl	80076e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de2:	f001 fcaf 	bl	8007744 <vPortExitCritical>

	return xReturn;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005df8:	f001 fc74 	bl	80076e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d102      	bne.n	8005e0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e001      	b.n	8005e12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e12:	f001 fc97 	bl	8007744 <vPortExitCritical>

	return xReturn;
 8005e16:	68fb      	ldr	r3, [r7, #12]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e014      	b.n	8005e5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e30:	4a0f      	ldr	r2, [pc, #60]	; (8005e70 <vQueueAddToRegistry+0x50>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e3c:	490c      	ldr	r1, [pc, #48]	; (8005e70 <vQueueAddToRegistry+0x50>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <vQueueAddToRegistry+0x50>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e52:	e006      	b.n	8005e62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b07      	cmp	r3, #7
 8005e5e:	d9e7      	bls.n	8005e30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	2000301c 	.word	0x2000301c

08005e74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e84:	f001 fc2e 	bl	80076e4 <vPortEnterCritical>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e94:	d103      	bne.n	8005e9e <vQueueWaitForMessageRestricted+0x2a>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea4:	b25b      	sxtb	r3, r3
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eaa:	d103      	bne.n	8005eb4 <vQueueWaitForMessageRestricted+0x40>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eb4:	f001 fc46 	bl	8007744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3324      	adds	r3, #36	; 0x24
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fc61 	bl	8006790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ece:	6978      	ldr	r0, [r7, #20]
 8005ed0:	f7ff ff26 	bl	8005d20 <prvUnlockQueue>
	}
 8005ed4:	bf00      	nop
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	623b      	str	r3, [r7, #32]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61fb      	str	r3, [r7, #28]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f22:	23bc      	movs	r3, #188	; 0xbc
 8005f24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2bbc      	cmp	r3, #188	; 0xbc
 8005f2a:	d00a      	beq.n	8005f42 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61bb      	str	r3, [r7, #24]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01e      	beq.n	8005f88 <xTaskCreateStatic+0xac>
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f62:	2300      	movs	r3, #0
 8005f64:	9303      	str	r3, [sp, #12]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	9302      	str	r3, [sp, #8]
 8005f6a:	f107 0314 	add.w	r3, r7, #20
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f850 	bl	8006020 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f82:	f000 f8f3 	bl	800616c <prvAddNewTaskToReadyList>
 8005f86:	e001      	b.n	8005f8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f8c:	697b      	ldr	r3, [r7, #20]
	}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	; 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b08c      	sub	sp, #48	; 0x30
 8005f9a:	af04      	add	r7, sp, #16
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 fcbc 	bl	8007928 <pvPortMalloc>
 8005fb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00e      	beq.n	8005fd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fb8:	20bc      	movs	r0, #188	; 0xbc
 8005fba:	f001 fcb5 	bl	8007928 <pvPortMalloc>
 8005fbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
 8005fcc:	e005      	b.n	8005fda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fce:	6978      	ldr	r0, [r7, #20]
 8005fd0:	f001 fd76 	bl	8007ac0 <vPortFree>
 8005fd4:	e001      	b.n	8005fda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d017      	beq.n	8006010 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fe8:	88fa      	ldrh	r2, [r7, #6]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	9302      	str	r3, [sp, #8]
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f80e 	bl	8006020 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006004:	69f8      	ldr	r0, [r7, #28]
 8006006:	f000 f8b1 	bl	800616c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800600a:	2301      	movs	r3, #1
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e002      	b.n	8006016 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006014:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006016:	69bb      	ldr	r3, [r7, #24]
	}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	461a      	mov	r2, r3
 8006038:	21a5      	movs	r1, #165	; 0xa5
 800603a:	f001 ffa0 	bl	8007f7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006048:	3b01      	subs	r3, #1
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	617b      	str	r3, [r7, #20]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01f      	beq.n	80060be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e012      	b.n	80060aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	7819      	ldrb	r1, [r3, #0]
 800608c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	3334      	adds	r3, #52	; 0x34
 8006094:	460a      	mov	r2, r1
 8006096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	3301      	adds	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b0f      	cmp	r3, #15
 80060ae:	d9e9      	bls.n	8006084 <prvInitialiseNewTask+0x64>
 80060b0:	e000      	b.n	80060b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80060b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060bc:	e003      	b.n	80060c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b37      	cmp	r3, #55	; 0x37
 80060ca:	d901      	bls.n	80060d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060cc:	2337      	movs	r3, #55	; 0x37
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	2200      	movs	r2, #0
 80060e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff f8be 	bl	8005268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	3318      	adds	r3, #24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff f8b9 	bl	8005268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	2200      	movs	r2, #0
 8006118:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	3354      	adds	r3, #84	; 0x54
 8006120:	2260      	movs	r2, #96	; 0x60
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f001 ff2a 	bl	8007f7e <memset>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <prvInitialiseNewTask+0x140>)
 800612e:	659a      	str	r2, [r3, #88]	; 0x58
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <prvInitialiseNewTask+0x144>)
 8006134:	65da      	str	r2, [r3, #92]	; 0x5c
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <prvInitialiseNewTask+0x148>)
 800613a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	69b8      	ldr	r0, [r7, #24]
 8006142:	f001 f9a1 	bl	8007488 <pxPortInitialiseStack>
 8006146:	4602      	mov	r2, r0
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006156:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006158:	bf00      	nop
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08009330 	.word	0x08009330
 8006164:	08009350 	.word	0x08009350
 8006168:	08009310 	.word	0x08009310

0800616c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006174:	f001 fab6 	bl	80076e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006178:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <prvAddNewTaskToReadyList+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <prvAddNewTaskToReadyList+0xc4>)
 8006180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006182:	4b2c      	ldr	r3, [pc, #176]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800618a:	4a2a      	ldr	r2, [pc, #168]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006190:	4b27      	ldr	r3, [pc, #156]	; (8006230 <prvAddNewTaskToReadyList+0xc4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d110      	bne.n	80061ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006198:	f000 fc26 	bl	80069e8 <prvInitialiseTaskLists>
 800619c:	e00d      	b.n	80061ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800619e:	4b26      	ldr	r3, [pc, #152]	; (8006238 <prvAddNewTaskToReadyList+0xcc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061a6:	4b23      	ldr	r3, [pc, #140]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d802      	bhi.n	80061ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061b4:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <prvAddNewTaskToReadyList+0xd0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	4a1e      	ldr	r2, [pc, #120]	; (800623c <prvAddNewTaskToReadyList+0xd0>)
 80061c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061c4:	4b1d      	ldr	r3, [pc, #116]	; (800623c <prvAddNewTaskToReadyList+0xd0>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <prvAddNewTaskToReadyList+0xd4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d903      	bls.n	80061e0 <prvAddNewTaskToReadyList+0x74>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <prvAddNewTaskToReadyList+0xd4>)
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4a15      	ldr	r2, [pc, #84]	; (8006244 <prvAddNewTaskToReadyList+0xd8>)
 80061ee:	441a      	add	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f7ff f843 	bl	8005282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061fc:	f001 faa2 	bl	8007744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006200:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <prvAddNewTaskToReadyList+0xcc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	429a      	cmp	r2, r3
 8006214:	d207      	bcs.n	8006226 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <prvAddNewTaskToReadyList+0xdc>)
 8006218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20003530 	.word	0x20003530
 8006234:	2000305c 	.word	0x2000305c
 8006238:	2000353c 	.word	0x2000353c
 800623c:	2000354c 	.word	0x2000354c
 8006240:	20003538 	.word	0x20003538
 8006244:	20003060 	.word	0x20003060
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d017      	beq.n	800628e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800625e:	4b13      	ldr	r3, [pc, #76]	; (80062ac <vTaskDelay+0x60>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <vTaskDelay+0x30>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60bb      	str	r3, [r7, #8]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800627c:	f000 f88a 	bl	8006394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006280:	2100      	movs	r1, #0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fd5e 	bl	8006d44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006288:	f000 f892 	bl	80063b0 <xTaskResumeAll>
 800628c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d107      	bne.n	80062a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <vTaskDelay+0x64>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20003558 	.word	0x20003558
 80062b0:	e000ed04 	.word	0xe000ed04

080062b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062c2:	463a      	mov	r2, r7
 80062c4:	1d39      	adds	r1, r7, #4
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe ff78 	bl	80051c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	9202      	str	r2, [sp, #8]
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	2300      	movs	r3, #0
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	460a      	mov	r2, r1
 80062e2:	4924      	ldr	r1, [pc, #144]	; (8006374 <vTaskStartScheduler+0xc0>)
 80062e4:	4824      	ldr	r0, [pc, #144]	; (8006378 <vTaskStartScheduler+0xc4>)
 80062e6:	f7ff fdf9 	bl	8005edc <xTaskCreateStatic>
 80062ea:	4603      	mov	r3, r0
 80062ec:	4a23      	ldr	r2, [pc, #140]	; (800637c <vTaskStartScheduler+0xc8>)
 80062ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <vTaskStartScheduler+0xc8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062f8:	2301      	movs	r3, #1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	e001      	b.n	8006302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d102      	bne.n	800630e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006308:	f000 fd70 	bl	8006dec <xTimerCreateTimerTask>
 800630c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d11b      	bne.n	800634c <vTaskStartScheduler+0x98>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	613b      	str	r3, [r7, #16]
}
 8006326:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006328:	4b15      	ldr	r3, [pc, #84]	; (8006380 <vTaskStartScheduler+0xcc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3354      	adds	r3, #84	; 0x54
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <vTaskStartScheduler+0xd0>)
 8006330:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <vTaskStartScheduler+0xd4>)
 8006334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <vTaskStartScheduler+0xd8>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006340:	4b13      	ldr	r3, [pc, #76]	; (8006390 <vTaskStartScheduler+0xdc>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006346:	f001 f92b 	bl	80075a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800634a:	e00e      	b.n	800636a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006352:	d10a      	bne.n	800636a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	60fb      	str	r3, [r7, #12]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <vTaskStartScheduler+0xb4>
}
 800636a:	bf00      	nop
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	0800922c 	.word	0x0800922c
 8006378:	080069b9 	.word	0x080069b9
 800637c:	20003554 	.word	0x20003554
 8006380:	2000305c 	.word	0x2000305c
 8006384:	20000018 	.word	0x20000018
 8006388:	20003550 	.word	0x20003550
 800638c:	2000353c 	.word	0x2000353c
 8006390:	20003534 	.word	0x20003534

08006394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <vTaskSuspendAll+0x18>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a03      	ldr	r2, [pc, #12]	; (80063ac <vTaskSuspendAll+0x18>)
 80063a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	20003558 	.word	0x20003558

080063b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063be:	4b42      	ldr	r3, [pc, #264]	; (80064c8 <xTaskResumeAll+0x118>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xTaskResumeAll+0x2c>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	603b      	str	r3, [r7, #0]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063dc:	f001 f982 	bl	80076e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063e0:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <xTaskResumeAll+0x118>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	4a38      	ldr	r2, [pc, #224]	; (80064c8 <xTaskResumeAll+0x118>)
 80063e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <xTaskResumeAll+0x118>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d162      	bne.n	80064b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063f2:	4b36      	ldr	r3, [pc, #216]	; (80064cc <xTaskResumeAll+0x11c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d05e      	beq.n	80064b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063fa:	e02f      	b.n	800645c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fc:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <xTaskResumeAll+0x120>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3318      	adds	r3, #24
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe ff97 	bl	800533c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe ff92 	bl	800533c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <xTaskResumeAll+0x124>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d903      	bls.n	800642c <xTaskResumeAll+0x7c>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4a2a      	ldr	r2, [pc, #168]	; (80064d4 <xTaskResumeAll+0x124>)
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4a27      	ldr	r2, [pc, #156]	; (80064d8 <xTaskResumeAll+0x128>)
 800643a:	441a      	add	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fe ff1d 	bl	8005282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4b23      	ldr	r3, [pc, #140]	; (80064dc <xTaskResumeAll+0x12c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006456:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <xTaskResumeAll+0x130>)
 8006458:	2201      	movs	r2, #1
 800645a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800645c:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <xTaskResumeAll+0x120>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1cb      	bne.n	80063fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800646a:	f000 fb5f 	bl	8006b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800646e:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <xTaskResumeAll+0x134>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d010      	beq.n	800649c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800647a:	f000 f847 	bl	800650c <xTaskIncrementTick>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006484:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <xTaskResumeAll+0x130>)
 8006486:	2201      	movs	r2, #1
 8006488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3b01      	subs	r3, #1
 800648e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f1      	bne.n	800647a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <xTaskResumeAll+0x134>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <xTaskResumeAll+0x130>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064a8:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <xTaskResumeAll+0x138>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064b8:	f001 f944 	bl	8007744 <vPortExitCritical>

	return xAlreadyYielded;
 80064bc:	68bb      	ldr	r3, [r7, #8]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20003558 	.word	0x20003558
 80064cc:	20003530 	.word	0x20003530
 80064d0:	200034f0 	.word	0x200034f0
 80064d4:	20003538 	.word	0x20003538
 80064d8:	20003060 	.word	0x20003060
 80064dc:	2000305c 	.word	0x2000305c
 80064e0:	20003544 	.word	0x20003544
 80064e4:	20003540 	.word	0x20003540
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064f2:	4b05      	ldr	r3, [pc, #20]	; (8006508 <xTaskGetTickCount+0x1c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064f8:	687b      	ldr	r3, [r7, #4]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20003534 	.word	0x20003534

0800650c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006516:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <xTaskIncrementTick+0x148>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 808f 	bne.w	800663e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006520:	4b4d      	ldr	r3, [pc, #308]	; (8006658 <xTaskIncrementTick+0x14c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006528:	4a4b      	ldr	r2, [pc, #300]	; (8006658 <xTaskIncrementTick+0x14c>)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d120      	bne.n	8006576 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006534:	4b49      	ldr	r3, [pc, #292]	; (800665c <xTaskIncrementTick+0x150>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <xTaskIncrementTick+0x48>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	603b      	str	r3, [r7, #0]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xTaskIncrementTick+0x46>
 8006554:	4b41      	ldr	r3, [pc, #260]	; (800665c <xTaskIncrementTick+0x150>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	4b41      	ldr	r3, [pc, #260]	; (8006660 <xTaskIncrementTick+0x154>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a3f      	ldr	r2, [pc, #252]	; (800665c <xTaskIncrementTick+0x150>)
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4a3f      	ldr	r2, [pc, #252]	; (8006660 <xTaskIncrementTick+0x154>)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <xTaskIncrementTick+0x158>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	4a3d      	ldr	r2, [pc, #244]	; (8006664 <xTaskIncrementTick+0x158>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	f000 fadb 	bl	8006b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006576:	4b3c      	ldr	r3, [pc, #240]	; (8006668 <xTaskIncrementTick+0x15c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d349      	bcc.n	8006614 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006580:	4b36      	ldr	r3, [pc, #216]	; (800665c <xTaskIncrementTick+0x150>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658a:	4b37      	ldr	r3, [pc, #220]	; (8006668 <xTaskIncrementTick+0x15c>)
 800658c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006590:	601a      	str	r2, [r3, #0]
					break;
 8006592:	e03f      	b.n	8006614 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006594:	4b31      	ldr	r3, [pc, #196]	; (800665c <xTaskIncrementTick+0x150>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d203      	bcs.n	80065b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065ac:	4a2e      	ldr	r2, [pc, #184]	; (8006668 <xTaskIncrementTick+0x15c>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065b2:	e02f      	b.n	8006614 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe febf 	bl	800533c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	3318      	adds	r3, #24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe feb6 	bl	800533c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <xTaskIncrementTick+0x160>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d903      	bls.n	80065e4 <xTaskIncrementTick+0xd8>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	4a22      	ldr	r2, [pc, #136]	; (800666c <xTaskIncrementTick+0x160>)
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <xTaskIncrementTick+0x164>)
 80065f2:	441a      	add	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f7fe fe41 	bl	8005282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4b1b      	ldr	r3, [pc, #108]	; (8006674 <xTaskIncrementTick+0x168>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	429a      	cmp	r2, r3
 800660c:	d3b8      	bcc.n	8006580 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800660e:	2301      	movs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006612:	e7b5      	b.n	8006580 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <xTaskIncrementTick+0x168>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661a:	4915      	ldr	r1, [pc, #84]	; (8006670 <xTaskIncrementTick+0x164>)
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d901      	bls.n	8006630 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <xTaskIncrementTick+0x16c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e004      	b.n	8006648 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <xTaskIncrementTick+0x170>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a0d      	ldr	r2, [pc, #52]	; (800667c <xTaskIncrementTick+0x170>)
 8006646:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006648:	697b      	ldr	r3, [r7, #20]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20003558 	.word	0x20003558
 8006658:	20003534 	.word	0x20003534
 800665c:	200034e8 	.word	0x200034e8
 8006660:	200034ec 	.word	0x200034ec
 8006664:	20003548 	.word	0x20003548
 8006668:	20003550 	.word	0x20003550
 800666c:	20003538 	.word	0x20003538
 8006670:	20003060 	.word	0x20003060
 8006674:	2000305c 	.word	0x2000305c
 8006678:	20003544 	.word	0x20003544
 800667c:	20003540 	.word	0x20003540

08006680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006686:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <vTaskSwitchContext+0xb0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <vTaskSwitchContext+0xb4>)
 8006690:	2201      	movs	r2, #1
 8006692:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006694:	e046      	b.n	8006724 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006696:	4b27      	ldr	r3, [pc, #156]	; (8006734 <vTaskSwitchContext+0xb4>)
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <vTaskSwitchContext+0xb8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e010      	b.n	80066c6 <vTaskSwitchContext+0x46>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	607b      	str	r3, [r7, #4]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vTaskSwitchContext+0x3e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	491d      	ldr	r1, [pc, #116]	; (800673c <vTaskSwitchContext+0xbc>)
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0e4      	beq.n	80066a4 <vTaskSwitchContext+0x24>
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <vTaskSwitchContext+0xbc>)
 80066e6:	4413      	add	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	3308      	adds	r3, #8
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d104      	bne.n	800670a <vTaskSwitchContext+0x8a>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	605a      	str	r2, [r3, #4]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a0b      	ldr	r2, [pc, #44]	; (8006740 <vTaskSwitchContext+0xc0>)
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	4a08      	ldr	r2, [pc, #32]	; (8006738 <vTaskSwitchContext+0xb8>)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <vTaskSwitchContext+0xc0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3354      	adds	r3, #84	; 0x54
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <vTaskSwitchContext+0xc4>)
 8006722:	6013      	str	r3, [r2, #0]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20003558 	.word	0x20003558
 8006734:	20003544 	.word	0x20003544
 8006738:	20003538 	.word	0x20003538
 800673c:	20003060 	.word	0x20003060
 8006740:	2000305c 	.word	0x2000305c
 8006744:	20000018 	.word	0x20000018

08006748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60fb      	str	r3, [r7, #12]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <vTaskPlaceOnEventList+0x44>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3318      	adds	r3, #24
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fe fda7 	bl	80052ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800677c:	2101      	movs	r1, #1
 800677e:	6838      	ldr	r0, [r7, #0]
 8006780:	f000 fae0 	bl	8006d44 <prvAddCurrentTaskToDelayedList>
}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	2000305c 	.word	0x2000305c

08006790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	617b      	str	r3, [r7, #20]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3318      	adds	r3, #24
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7fe fd5e 	bl	8005282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	68b8      	ldr	r0, [r7, #8]
 80067d6:	f000 fab5 	bl	8006d44 <prvAddCurrentTaskToDelayedList>
	}
 80067da:	bf00      	nop
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	2000305c 	.word	0x2000305c

080067e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3318      	adds	r3, #24
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fd8f 	bl	800533c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <xTaskRemoveFromEventList+0xb0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11d      	bne.n	8006862 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3304      	adds	r3, #4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fd86 	bl	800533c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <xTaskRemoveFromEventList+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d903      	bls.n	8006844 <xTaskRemoveFromEventList+0x5c>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a16      	ldr	r2, [pc, #88]	; (800689c <xTaskRemoveFromEventList+0xb4>)
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <xTaskRemoveFromEventList+0xb8>)
 8006852:	441a      	add	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fe fd11 	bl	8005282 <vListInsertEnd>
 8006860:	e005      	b.n	800686e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3318      	adds	r3, #24
 8006866:	4619      	mov	r1, r3
 8006868:	480e      	ldr	r0, [pc, #56]	; (80068a4 <xTaskRemoveFromEventList+0xbc>)
 800686a:	f7fe fd0a 	bl	8005282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <xTaskRemoveFromEventList+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	429a      	cmp	r2, r3
 800687a:	d905      	bls.n	8006888 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <xTaskRemoveFromEventList+0xc4>)
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e001      	b.n	800688c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800688c:	697b      	ldr	r3, [r7, #20]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20003558 	.word	0x20003558
 800689c:	20003538 	.word	0x20003538
 80068a0:	20003060 	.word	0x20003060
 80068a4:	200034f0 	.word	0x200034f0
 80068a8:	2000305c 	.word	0x2000305c
 80068ac:	20003544 	.word	0x20003544

080068b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <vTaskInternalSetTimeOutState+0x24>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <vTaskInternalSetTimeOutState+0x28>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	605a      	str	r2, [r3, #4]
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	20003548 	.word	0x20003548
 80068d8:	20003534 	.word	0x20003534

080068dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	613b      	str	r3, [r7, #16]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	60fb      	str	r3, [r7, #12]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800691e:	f000 fee1 	bl	80076e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <xTaskCheckForTimeOut+0xbc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800693a:	d102      	bne.n	8006942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e023      	b.n	800698a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <xTaskCheckForTimeOut+0xc0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d007      	beq.n	800695e <xTaskCheckForTimeOut+0x82>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	429a      	cmp	r2, r3
 8006956:	d302      	bcc.n	800695e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e015      	b.n	800698a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	429a      	cmp	r2, r3
 8006966:	d20b      	bcs.n	8006980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff ff9b 	bl	80068b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	e004      	b.n	800698a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800698a:	f000 fedb 	bl	8007744 <vPortExitCritical>

	return xReturn;
 800698e:	69fb      	ldr	r3, [r7, #28]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20003534 	.word	0x20003534
 800699c:	20003548 	.word	0x20003548

080069a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <vTaskMissedYield+0x14>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20003544 	.word	0x20003544

080069b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069c0:	f000 f852 	bl	8006a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <prvIdleTask+0x28>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d9f9      	bls.n	80069c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <prvIdleTask+0x2c>)
 80069ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069dc:	e7f0      	b.n	80069c0 <prvIdleTask+0x8>
 80069de:	bf00      	nop
 80069e0:	20003060 	.word	0x20003060
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ee:	2300      	movs	r3, #0
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	e00c      	b.n	8006a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <prvInitialiseTaskLists+0x60>)
 8006a00:	4413      	add	r3, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fc10 	bl	8005228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b37      	cmp	r3, #55	; 0x37
 8006a12:	d9ef      	bls.n	80069f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a14:	480d      	ldr	r0, [pc, #52]	; (8006a4c <prvInitialiseTaskLists+0x64>)
 8006a16:	f7fe fc07 	bl	8005228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a1a:	480d      	ldr	r0, [pc, #52]	; (8006a50 <prvInitialiseTaskLists+0x68>)
 8006a1c:	f7fe fc04 	bl	8005228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a20:	480c      	ldr	r0, [pc, #48]	; (8006a54 <prvInitialiseTaskLists+0x6c>)
 8006a22:	f7fe fc01 	bl	8005228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a26:	480c      	ldr	r0, [pc, #48]	; (8006a58 <prvInitialiseTaskLists+0x70>)
 8006a28:	f7fe fbfe 	bl	8005228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a2c:	480b      	ldr	r0, [pc, #44]	; (8006a5c <prvInitialiseTaskLists+0x74>)
 8006a2e:	f7fe fbfb 	bl	8005228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <prvInitialiseTaskLists+0x78>)
 8006a34:	4a05      	ldr	r2, [pc, #20]	; (8006a4c <prvInitialiseTaskLists+0x64>)
 8006a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <prvInitialiseTaskLists+0x7c>)
 8006a3a:	4a05      	ldr	r2, [pc, #20]	; (8006a50 <prvInitialiseTaskLists+0x68>)
 8006a3c:	601a      	str	r2, [r3, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20003060 	.word	0x20003060
 8006a4c:	200034c0 	.word	0x200034c0
 8006a50:	200034d4 	.word	0x200034d4
 8006a54:	200034f0 	.word	0x200034f0
 8006a58:	20003504 	.word	0x20003504
 8006a5c:	2000351c 	.word	0x2000351c
 8006a60:	200034e8 	.word	0x200034e8
 8006a64:	200034ec 	.word	0x200034ec

08006a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a6e:	e019      	b.n	8006aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a70:	f000 fe38 	bl	80076e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a74:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <prvCheckTasksWaitingTermination+0x50>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fc5b 	bl	800533c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <prvCheckTasksWaitingTermination+0x54>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	4a0b      	ldr	r2, [pc, #44]	; (8006abc <prvCheckTasksWaitingTermination+0x54>)
 8006a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <prvCheckTasksWaitingTermination+0x58>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <prvCheckTasksWaitingTermination+0x58>)
 8006a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a9a:	f000 fe53 	bl	8007744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f810 	bl	8006ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <prvCheckTasksWaitingTermination+0x58>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e1      	bne.n	8006a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20003504 	.word	0x20003504
 8006abc:	20003530 	.word	0x20003530
 8006ac0:	20003518 	.word	0x20003518

08006ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3354      	adds	r3, #84	; 0x54
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fb17 	bl	8008104 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d108      	bne.n	8006af2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 ffeb 	bl	8007ac0 <vPortFree>
				vPortFree( pxTCB );
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ffe8 	bl	8007ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006af0:	e018      	b.n	8006b24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d103      	bne.n	8006b04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 ffdf 	bl	8007ac0 <vPortFree>
	}
 8006b02:	e00f      	b.n	8006b24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d00a      	beq.n	8006b24 <prvDeleteTCB+0x60>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <prvDeleteTCB+0x5e>
	}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <prvResetNextTaskUnblockTime+0x38>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <prvResetNextTaskUnblockTime+0x3c>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b44:	e008      	b.n	8006b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b46:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <prvResetNextTaskUnblockTime+0x38>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <prvResetNextTaskUnblockTime+0x3c>)
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	200034e8 	.word	0x200034e8
 8006b68:	20003550 	.word	0x20003550

08006b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <xTaskGetSchedulerState+0x34>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	e008      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b80:	4b08      	ldr	r3, [pc, #32]	; (8006ba4 <xTaskGetSchedulerState+0x38>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e001      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b92:	687b      	ldr	r3, [r7, #4]
	}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	2000353c 	.word	0x2000353c
 8006ba4:	20003558 	.word	0x20003558

08006ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d056      	beq.n	8006c6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <xTaskPriorityDisinherit+0xd0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d00a      	beq.n	8006bde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60fb      	str	r3, [r7, #12]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d02c      	beq.n	8006c6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d128      	bne.n	8006c6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fb8c 	bl	800533c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <xTaskPriorityDisinherit+0xd4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <xTaskPriorityDisinherit+0xa4>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <xTaskPriorityDisinherit+0xd4>)
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <xTaskPriorityDisinherit+0xd8>)
 8006c5a:	441a      	add	r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f7fe fb0d 	bl	8005282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c6c:	697b      	ldr	r3, [r7, #20]
	}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2000305c 	.word	0x2000305c
 8006c7c:	20003538 	.word	0x20003538
 8006c80:	20003060 	.word	0x20003060

08006c84 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006c92:	f000 fd27 	bl	80076e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006c96:	4b29      	ldr	r3, [pc, #164]	; (8006d3c <xTaskNotifyWait+0xb8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d01c      	beq.n	8006cde <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <xTaskNotifyWait+0xb8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	43d2      	mvns	r2, r2
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006cb6:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <xTaskNotifyWait+0xb8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	6838      	ldr	r0, [r7, #0]
 8006cca:	f000 f83b 	bl	8006d44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006cce:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <xTaskNotifyWait+0xbc>)
 8006cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006cde:	f000 fd31 	bl	8007744 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006ce2:	f000 fcff 	bl	80076e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006cec:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <xTaskNotifyWait+0xb8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006cf8:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <xTaskNotifyWait+0xb8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d002      	beq.n	8006d0c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	e00a      	b.n	8006d22 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <xTaskNotifyWait+0xb8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	43d2      	mvns	r2, r2
 8006d18:	400a      	ands	r2, r1
 8006d1a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <xTaskNotifyWait+0xb8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8006d2c:	f000 fd0a 	bl	8007744 <vPortExitCritical>

		return xReturn;
 8006d30:	697b      	ldr	r3, [r7, #20]
	}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	2000305c 	.word	0x2000305c
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d54:	4b20      	ldr	r3, [pc, #128]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe faee 	bl	800533c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d66:	d10a      	bne.n	8006d7e <prvAddCurrentTaskToDelayedList+0x3a>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d6e:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3304      	adds	r3, #4
 8006d74:	4619      	mov	r1, r3
 8006d76:	4819      	ldr	r0, [pc, #100]	; (8006ddc <prvAddCurrentTaskToDelayedList+0x98>)
 8006d78:	f7fe fa83 	bl	8005282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d7c:	e026      	b.n	8006dcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d209      	bcs.n	8006daa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fe fa91 	bl	80052ca <vListInsert>
}
 8006da8:	e010      	b.n	8006dcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006daa:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f7fe fa87 	bl	80052ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d202      	bcs.n	8006dcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dc6:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20003534 	.word	0x20003534
 8006dd8:	2000305c 	.word	0x2000305c
 8006ddc:	2000351c 	.word	0x2000351c
 8006de0:	200034ec 	.word	0x200034ec
 8006de4:	200034e8 	.word	0x200034e8
 8006de8:	20003550 	.word	0x20003550

08006dec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	; 0x28
 8006df0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006df6:	f000 fb07 	bl	8007408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006dfa:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <xTimerCreateTimerTask+0x80>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d021      	beq.n	8006e46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e0a:	1d3a      	adds	r2, r7, #4
 8006e0c:	f107 0108 	add.w	r1, r7, #8
 8006e10:	f107 030c 	add.w	r3, r7, #12
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe f9ed 	bl	80051f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	9202      	str	r2, [sp, #8]
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	2302      	movs	r3, #2
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	4910      	ldr	r1, [pc, #64]	; (8006e70 <xTimerCreateTimerTask+0x84>)
 8006e2e:	4811      	ldr	r0, [pc, #68]	; (8006e74 <xTimerCreateTimerTask+0x88>)
 8006e30:	f7ff f854 	bl	8005edc <xTaskCreateStatic>
 8006e34:	4603      	mov	r3, r0
 8006e36:	4a10      	ldr	r2, [pc, #64]	; (8006e78 <xTimerCreateTimerTask+0x8c>)
 8006e38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <xTimerCreateTimerTask+0x8c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e42:	2301      	movs	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	613b      	str	r3, [r7, #16]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e62:	697b      	ldr	r3, [r7, #20]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	2000358c 	.word	0x2000358c
 8006e70:	08009234 	.word	0x08009234
 8006e74:	08006fb1 	.word	0x08006fb1
 8006e78:	20003590 	.word	0x20003590

08006e7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	623b      	str	r3, [r7, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d02a      	beq.n	8006f08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b05      	cmp	r3, #5
 8006ec2:	dc18      	bgt.n	8006ef6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ec4:	f7ff fe52 	bl	8006b6c <xTaskGetSchedulerState>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d109      	bne.n	8006ee2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f107 0110 	add.w	r1, r7, #16
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eda:	f7fe fb97 	bl	800560c <xQueueGenericSend>
 8006ede:	6278      	str	r0, [r7, #36]	; 0x24
 8006ee0:	e012      	b.n	8006f08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	f107 0110 	add.w	r1, r7, #16
 8006eea:	2300      	movs	r3, #0
 8006eec:	2200      	movs	r2, #0
 8006eee:	f7fe fb8d 	bl	800560c <xQueueGenericSend>
 8006ef2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ef4:	e008      	b.n	8006f08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	f107 0110 	add.w	r1, r7, #16
 8006efe:	2300      	movs	r3, #0
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	f7fe fc81 	bl	8005808 <xQueueGenericSendFromISR>
 8006f06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3728      	adds	r7, #40	; 0x28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2000358c 	.word	0x2000358c

08006f18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f22:	4b22      	ldr	r3, [pc, #136]	; (8006fac <prvProcessExpiredTimer+0x94>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fa03 	bl	800533c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d022      	beq.n	8006f8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	18d1      	adds	r1, r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	6978      	ldr	r0, [r7, #20]
 8006f52:	f000 f8d1 	bl	80070f8 <prvInsertTimerInActiveList>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01f      	beq.n	8006f9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	2300      	movs	r3, #0
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	2100      	movs	r1, #0
 8006f66:	6978      	ldr	r0, [r7, #20]
 8006f68:	f7ff ff88 	bl	8006e7c <xTimerGenericCommand>
 8006f6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d113      	bne.n	8006f9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60fb      	str	r3, [r7, #12]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	6978      	ldr	r0, [r7, #20]
 8006fa2:	4798      	blx	r3
}
 8006fa4:	bf00      	nop
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20003584 	.word	0x20003584

08006fb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 f857 	bl	8007070 <prvGetNextExpireTime>
 8006fc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f803 	bl	8006fd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006fce:	f000 f8d5 	bl	800717c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fd2:	e7f1      	b.n	8006fb8 <prvTimerTask+0x8>

08006fd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006fde:	f7ff f9d9 	bl	8006394 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fe2:	f107 0308 	add.w	r3, r7, #8
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f866 	bl	80070b8 <prvSampleTimeNow>
 8006fec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d130      	bne.n	8007056 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <prvProcessTimerOrBlockTask+0x3c>
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d806      	bhi.n	8007010 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007002:	f7ff f9d5 	bl	80063b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff ff85 	bl	8006f18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800700e:	e024      	b.n	800705a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007016:	4b13      	ldr	r3, [pc, #76]	; (8007064 <prvProcessTimerOrBlockTask+0x90>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <prvProcessTimerOrBlockTask+0x50>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <prvProcessTimerOrBlockTask+0x52>
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <prvProcessTimerOrBlockTask+0x94>)
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	4619      	mov	r1, r3
 8007036:	f7fe ff1d 	bl	8005e74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800703a:	f7ff f9b9 	bl	80063b0 <xTaskResumeAll>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007044:	4b09      	ldr	r3, [pc, #36]	; (800706c <prvProcessTimerOrBlockTask+0x98>)
 8007046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	f3bf 8f6f 	isb	sy
}
 8007054:	e001      	b.n	800705a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007056:	f7ff f9ab 	bl	80063b0 <xTaskResumeAll>
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20003588 	.word	0x20003588
 8007068:	2000358c 	.word	0x2000358c
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007078:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <prvGetNextExpireTime+0x44>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <prvGetNextExpireTime+0x16>
 8007082:	2201      	movs	r2, #1
 8007084:	e000      	b.n	8007088 <prvGetNextExpireTime+0x18>
 8007086:	2200      	movs	r2, #0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <prvGetNextExpireTime+0x44>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e001      	b.n	80070a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070a4:	68fb      	ldr	r3, [r7, #12]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20003584 	.word	0x20003584

080070b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070c0:	f7ff fa14 	bl	80064ec <xTaskGetTickCount>
 80070c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070c6:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <prvSampleTimeNow+0x3c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d205      	bcs.n	80070dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070d0:	f000 f936 	bl	8007340 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e002      	b.n	80070e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070e2:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <prvSampleTimeNow+0x3c>)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070e8:	68fb      	ldr	r3, [r7, #12]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20003594 	.word	0x20003594

080070f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d812      	bhi.n	8007144 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e01b      	b.n	800716a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <prvInsertTimerInActiveList+0x7c>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fe f8c4 	bl	80052ca <vListInsert>
 8007142:	e012      	b.n	800716a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d206      	bcs.n	800715a <prvInsertTimerInActiveList+0x62>
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d302      	bcc.n	800715a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	e007      	b.n	800716a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <prvInsertTimerInActiveList+0x80>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7fe f8b0 	bl	80052ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20003588 	.word	0x20003588
 8007178:	20003584 	.word	0x20003584

0800717c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007182:	e0ca      	b.n	800731a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da18      	bge.n	80071bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	3304      	adds	r3, #4
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	61fb      	str	r3, [r7, #28]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b2:	6850      	ldr	r0, [r2, #4]
 80071b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b6:	6892      	ldr	r2, [r2, #8]
 80071b8:	4611      	mov	r1, r2
 80071ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f2c0 80aa 	blt.w	8007318 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe f8b1 	bl	800533c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071da:	463b      	mov	r3, r7
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ff6b 	bl	80070b8 <prvSampleTimeNow>
 80071e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	f200 8097 	bhi.w	800731a <prvProcessReceivedCommands+0x19e>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <prvProcessReceivedCommands+0x78>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	08007291 	.word	0x08007291
 8007204:	080072a5 	.word	0x080072a5
 8007208:	080072ef 	.word	0x080072ef
 800720c:	0800721d 	.word	0x0800721d
 8007210:	0800721d 	.word	0x0800721d
 8007214:	08007291 	.word	0x08007291
 8007218:	080072a5 	.word	0x080072a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	b2da      	uxtb	r2, r3
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	18d1      	adds	r1, r2, r3
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800723c:	f7ff ff5c 	bl	80070f8 <prvInsertTimerInActiveList>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d069      	beq.n	800731a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05e      	beq.n	800731a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	441a      	add	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	2100      	movs	r1, #0
 800726c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726e:	f7ff fe05 	bl	8006e7c <xTimerGenericCommand>
 8007272:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d14f      	bne.n	800731a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	61bb      	str	r3, [r7, #24]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80072a2:	e03a      	b.n	800731a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	617b      	str	r3, [r7, #20]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	18d1      	adds	r1, r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e8:	f7ff ff06 	bl	80070f8 <prvInsertTimerInActiveList>
					break;
 80072ec:	e015      	b.n	800731a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80072fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fe:	f000 fbdf 	bl	8007ac0 <vPortFree>
 8007302:	e00a      	b.n	800731a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	b2da      	uxtb	r2, r3
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007316:	e000      	b.n	800731a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007318:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800731a:	4b08      	ldr	r3, [pc, #32]	; (800733c <prvProcessReceivedCommands+0x1c0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	1d39      	adds	r1, r7, #4
 8007320:	2200      	movs	r2, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fb0c 	bl	8005940 <xQueueReceive>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f47f af2a 	bne.w	8007184 <prvProcessReceivedCommands+0x8>
	}
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	3730      	adds	r7, #48	; 0x30
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	2000358c 	.word	0x2000358c

08007340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007346:	e048      	b.n	80073da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007348:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <prvSwitchTimerLists+0xc0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007352:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <prvSwitchTimerLists+0xc0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd ffeb 	bl	800533c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02e      	beq.n	80073da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	429a      	cmp	r2, r3
 800738c:	d90e      	bls.n	80073ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800739a:	4b19      	ldr	r3, [pc, #100]	; (8007400 <prvSwitchTimerLists+0xc0>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3304      	adds	r3, #4
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f7fd ff90 	bl	80052ca <vListInsert>
 80073aa:	e016      	b.n	80073da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073ac:	2300      	movs	r3, #0
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2300      	movs	r3, #0
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fd60 	bl	8006e7c <xTimerGenericCommand>
 80073bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	603b      	str	r3, [r7, #0]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1b1      	bne.n	8007348 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <prvSwitchTimerLists+0xc4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a04      	ldr	r2, [pc, #16]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80073f2:	4a04      	ldr	r2, [pc, #16]	; (8007404 <prvSwitchTimerLists+0xc4>)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6013      	str	r3, [r2, #0]
}
 80073f8:	bf00      	nop
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20003584 	.word	0x20003584
 8007404:	20003588 	.word	0x20003588

08007408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800740e:	f000 f969 	bl	80076e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d120      	bne.n	800745c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800741a:	4814      	ldr	r0, [pc, #80]	; (800746c <prvCheckForValidListAndQueue+0x64>)
 800741c:	f7fd ff04 	bl	8005228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007420:	4813      	ldr	r0, [pc, #76]	; (8007470 <prvCheckForValidListAndQueue+0x68>)
 8007422:	f7fd ff01 	bl	8005228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007426:	4b13      	ldr	r3, [pc, #76]	; (8007474 <prvCheckForValidListAndQueue+0x6c>)
 8007428:	4a10      	ldr	r2, [pc, #64]	; (800746c <prvCheckForValidListAndQueue+0x64>)
 800742a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800742c:	4b12      	ldr	r3, [pc, #72]	; (8007478 <prvCheckForValidListAndQueue+0x70>)
 800742e:	4a10      	ldr	r2, [pc, #64]	; (8007470 <prvCheckForValidListAndQueue+0x68>)
 8007430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007432:	2300      	movs	r3, #0
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <prvCheckForValidListAndQueue+0x74>)
 8007438:	4a11      	ldr	r2, [pc, #68]	; (8007480 <prvCheckForValidListAndQueue+0x78>)
 800743a:	2110      	movs	r1, #16
 800743c:	200a      	movs	r0, #10
 800743e:	f7fe f80f 	bl	8005460 <xQueueGenericCreateStatic>
 8007442:	4603      	mov	r3, r0
 8007444:	4a08      	ldr	r2, [pc, #32]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	490b      	ldr	r1, [pc, #44]	; (8007484 <prvCheckForValidListAndQueue+0x7c>)
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fce2 	bl	8005e20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800745c:	f000 f972 	bl	8007744 <vPortExitCritical>
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000358c 	.word	0x2000358c
 800746c:	2000355c 	.word	0x2000355c
 8007470:	20003570 	.word	0x20003570
 8007474:	20003584 	.word	0x20003584
 8007478:	20003588 	.word	0x20003588
 800747c:	20003638 	.word	0x20003638
 8007480:	20003598 	.word	0x20003598
 8007484:	0800923c 	.word	0x0800923c

08007488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3b04      	subs	r3, #4
 8007498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3b04      	subs	r3, #4
 80074a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0201 	bic.w	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3b04      	subs	r3, #4
 80074b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074b8:	4a0c      	ldr	r2, [pc, #48]	; (80074ec <pxPortInitialiseStack+0x64>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3b14      	subs	r3, #20
 80074c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3b04      	subs	r3, #4
 80074ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f06f 0202 	mvn.w	r2, #2
 80074d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3b20      	subs	r3, #32
 80074dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	080074f1 	.word	0x080074f1

080074f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074fa:	4b12      	ldr	r3, [pc, #72]	; (8007544 <prvTaskExitError+0x54>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007502:	d00a      	beq.n	800751a <prvTaskExitError+0x2a>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <prvTaskExitError+0x28>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	60bb      	str	r3, [r7, #8]
}
 800752c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800752e:	bf00      	nop
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0fc      	beq.n	8007530 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000014 	.word	0x20000014
	...

08007550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <pxCurrentTCBConst2>)
 8007552:	6819      	ldr	r1, [r3, #0]
 8007554:	6808      	ldr	r0, [r1, #0]
 8007556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	f380 8809 	msr	PSP, r0
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8811 	msr	BASEPRI, r0
 800756a:	4770      	bx	lr
 800756c:	f3af 8000 	nop.w

08007570 <pxCurrentTCBConst2>:
 8007570:	2000305c 	.word	0x2000305c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop

08007578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007578:	4808      	ldr	r0, [pc, #32]	; (800759c <prvPortStartFirstTask+0x24>)
 800757a:	6800      	ldr	r0, [r0, #0]
 800757c:	6800      	ldr	r0, [r0, #0]
 800757e:	f380 8808 	msr	MSP, r0
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8814 	msr	CONTROL, r0
 800758a:	b662      	cpsie	i
 800758c:	b661      	cpsie	f
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	df00      	svc	0
 8007598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800759a:	bf00      	nop
 800759c:	e000ed08 	.word	0xe000ed08

080075a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075a6:	4b46      	ldr	r3, [pc, #280]	; (80076c0 <xPortStartScheduler+0x120>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a46      	ldr	r2, [pc, #280]	; (80076c4 <xPortStartScheduler+0x124>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10a      	bne.n	80075c6 <xPortStartScheduler+0x26>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	613b      	str	r3, [r7, #16]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075c6:	4b3e      	ldr	r3, [pc, #248]	; (80076c0 <xPortStartScheduler+0x120>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a3f      	ldr	r2, [pc, #252]	; (80076c8 <xPortStartScheduler+0x128>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d10a      	bne.n	80075e6 <xPortStartScheduler+0x46>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60fb      	str	r3, [r7, #12]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075e6:	4b39      	ldr	r3, [pc, #228]	; (80076cc <xPortStartScheduler+0x12c>)
 80075e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	22ff      	movs	r2, #255	; 0xff
 80075f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007608:	b2da      	uxtb	r2, r3
 800760a:	4b31      	ldr	r3, [pc, #196]	; (80076d0 <xPortStartScheduler+0x130>)
 800760c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800760e:	4b31      	ldr	r3, [pc, #196]	; (80076d4 <xPortStartScheduler+0x134>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007614:	e009      	b.n	800762a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007616:	4b2f      	ldr	r3, [pc, #188]	; (80076d4 <xPortStartScheduler+0x134>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3b01      	subs	r3, #1
 800761c:	4a2d      	ldr	r2, [pc, #180]	; (80076d4 <xPortStartScheduler+0x134>)
 800761e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	b2db      	uxtb	r3, r3
 8007628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007632:	2b80      	cmp	r3, #128	; 0x80
 8007634:	d0ef      	beq.n	8007616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007636:	4b27      	ldr	r3, [pc, #156]	; (80076d4 <xPortStartScheduler+0x134>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1c3 0307 	rsb	r3, r3, #7
 800763e:	2b04      	cmp	r3, #4
 8007640:	d00a      	beq.n	8007658 <xPortStartScheduler+0xb8>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	60bb      	str	r3, [r7, #8]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007658:	4b1e      	ldr	r3, [pc, #120]	; (80076d4 <xPortStartScheduler+0x134>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <xPortStartScheduler+0x134>)
 8007660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <xPortStartScheduler+0x134>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <xPortStartScheduler+0x134>)
 800766c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	b2da      	uxtb	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007676:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <xPortStartScheduler+0x138>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <xPortStartScheduler+0x138>)
 800767c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007682:	4b15      	ldr	r3, [pc, #84]	; (80076d8 <xPortStartScheduler+0x138>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <xPortStartScheduler+0x138>)
 8007688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800768c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800768e:	f000 f8dd 	bl	800784c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007692:	4b12      	ldr	r3, [pc, #72]	; (80076dc <xPortStartScheduler+0x13c>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007698:	f000 f8fc 	bl	8007894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800769c:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <xPortStartScheduler+0x140>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0f      	ldr	r2, [pc, #60]	; (80076e0 <xPortStartScheduler+0x140>)
 80076a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076a8:	f7ff ff66 	bl	8007578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076ac:	f7fe ffe8 	bl	8006680 <vTaskSwitchContext>
	prvTaskExitError();
 80076b0:	f7ff ff1e 	bl	80074f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000ed00 	.word	0xe000ed00
 80076c4:	410fc271 	.word	0x410fc271
 80076c8:	410fc270 	.word	0x410fc270
 80076cc:	e000e400 	.word	0xe000e400
 80076d0:	20003688 	.word	0x20003688
 80076d4:	2000368c 	.word	0x2000368c
 80076d8:	e000ed20 	.word	0xe000ed20
 80076dc:	20000014 	.word	0x20000014
 80076e0:	e000ef34 	.word	0xe000ef34

080076e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	607b      	str	r3, [r7, #4]
}
 80076fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <vPortEnterCritical+0x58>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	4a0d      	ldr	r2, [pc, #52]	; (800773c <vPortEnterCritical+0x58>)
 8007706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <vPortEnterCritical+0x58>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10f      	bne.n	8007730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <vPortEnterCritical+0x5c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <vPortEnterCritical+0x4c>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	603b      	str	r3, [r7, #0]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <vPortEnterCritical+0x4a>
	}
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	20000014 	.word	0x20000014
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800774a:	4b12      	ldr	r3, [pc, #72]	; (8007794 <vPortExitCritical+0x50>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <vPortExitCritical+0x24>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	607b      	str	r3, [r7, #4]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <vPortExitCritical+0x50>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	4a09      	ldr	r2, [pc, #36]	; (8007794 <vPortExitCritical+0x50>)
 8007770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007772:	4b08      	ldr	r3, [pc, #32]	; (8007794 <vPortExitCritical+0x50>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <vPortExitCritical+0x42>
 800777a:	2300      	movs	r3, #0
 800777c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f383 8811 	msr	BASEPRI, r3
}
 8007784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20000014 	.word	0x20000014
	...

080077a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077a0:	f3ef 8009 	mrs	r0, PSP
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	4b15      	ldr	r3, [pc, #84]	; (8007800 <pxCurrentTCBConst>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f01e 0f10 	tst.w	lr, #16
 80077b0:	bf08      	it	eq
 80077b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	6010      	str	r0, [r2, #0]
 80077bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077c4:	f380 8811 	msr	BASEPRI, r0
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f7fe ff56 	bl	8006680 <vTaskSwitchContext>
 80077d4:	f04f 0000 	mov.w	r0, #0
 80077d8:	f380 8811 	msr	BASEPRI, r0
 80077dc:	bc09      	pop	{r0, r3}
 80077de:	6819      	ldr	r1, [r3, #0]
 80077e0:	6808      	ldr	r0, [r1, #0]
 80077e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e6:	f01e 0f10 	tst.w	lr, #16
 80077ea:	bf08      	it	eq
 80077ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077f0:	f380 8809 	msr	PSP, r0
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst>:
 8007800:	2000305c 	.word	0x2000305c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
}
 8007820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007822:	f7fe fe73 	bl	800650c <xTaskIncrementTick>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <xPortSysTickHandler+0x40>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	2300      	movs	r3, #0
 8007836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f383 8811 	msr	BASEPRI, r3
}
 800783e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	e000ed04 	.word	0xe000ed04

0800784c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007850:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <vPortSetupTimerInterrupt+0x34>)
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007856:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <vPortSetupTimerInterrupt+0x38>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <vPortSetupTimerInterrupt+0x3c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <vPortSetupTimerInterrupt+0x40>)
 8007862:	fba2 2303 	umull	r2, r3, r2, r3
 8007866:	099b      	lsrs	r3, r3, #6
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <vPortSetupTimerInterrupt+0x44>)
 800786a:	3b01      	subs	r3, #1
 800786c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800786e:	4b04      	ldr	r3, [pc, #16]	; (8007880 <vPortSetupTimerInterrupt+0x34>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
}
 8007874:	bf00      	nop
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	e000e010 	.word	0xe000e010
 8007884:	e000e018 	.word	0xe000e018
 8007888:	20000008 	.word	0x20000008
 800788c:	10624dd3 	.word	0x10624dd3
 8007890:	e000e014 	.word	0xe000e014

08007894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078a4 <vPortEnableVFP+0x10>
 8007898:	6801      	ldr	r1, [r0, #0]
 800789a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800789e:	6001      	str	r1, [r0, #0]
 80078a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078a2:	bf00      	nop
 80078a4:	e000ed88 	.word	0xe000ed88

080078a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078ae:	f3ef 8305 	mrs	r3, IPSR
 80078b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b0f      	cmp	r3, #15
 80078b8:	d914      	bls.n	80078e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ba:	4a17      	ldr	r2, [pc, #92]	; (8007918 <vPortValidateInterruptPriority+0x70>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078c4:	4b15      	ldr	r3, [pc, #84]	; (800791c <vPortValidateInterruptPriority+0x74>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	7afa      	ldrb	r2, [r7, #11]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d20a      	bcs.n	80078e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	607b      	str	r3, [r7, #4]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <vPortValidateInterruptPriority+0x78>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078ec:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <vPortValidateInterruptPriority+0x7c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d90a      	bls.n	800790a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	603b      	str	r3, [r7, #0]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <vPortValidateInterruptPriority+0x60>
	}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	e000e3f0 	.word	0xe000e3f0
 800791c:	20003688 	.word	0x20003688
 8007920:	e000ed0c 	.word	0xe000ed0c
 8007924:	2000368c 	.word	0x2000368c

08007928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007934:	f7fe fd2e 	bl	8006394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007938:	4b5b      	ldr	r3, [pc, #364]	; (8007aa8 <pvPortMalloc+0x180>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007940:	f000 f920 	bl	8007b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007944:	4b59      	ldr	r3, [pc, #356]	; (8007aac <pvPortMalloc+0x184>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8093 	bne.w	8007a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01d      	beq.n	8007994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007958:	2208      	movs	r2, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d014      	beq.n	8007994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	3308      	adds	r3, #8
 8007972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <pvPortMalloc+0x6c>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	617b      	str	r3, [r7, #20]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d06e      	beq.n	8007a78 <pvPortMalloc+0x150>
 800799a:	4b45      	ldr	r3, [pc, #276]	; (8007ab0 <pvPortMalloc+0x188>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d869      	bhi.n	8007a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079a4:	4b43      	ldr	r3, [pc, #268]	; (8007ab4 <pvPortMalloc+0x18c>)
 80079a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079a8:	4b42      	ldr	r3, [pc, #264]	; (8007ab4 <pvPortMalloc+0x18c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ae:	e004      	b.n	80079ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d903      	bls.n	80079cc <pvPortMalloc+0xa4>
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f1      	bne.n	80079b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079cc:	4b36      	ldr	r3, [pc, #216]	; (8007aa8 <pvPortMalloc+0x180>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d050      	beq.n	8007a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2208      	movs	r2, #8
 80079dc:	4413      	add	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	2308      	movs	r3, #8
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d91f      	bls.n	8007a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <pvPortMalloc+0xf8>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	613b      	str	r3, [r7, #16]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	1ad2      	subs	r2, r2, r3
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a32:	69b8      	ldr	r0, [r7, #24]
 8007a34:	f000 f908 	bl	8007c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a38:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a46:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <pvPortMalloc+0x190>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d203      	bcs.n	8007a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a52:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <pvPortMalloc+0x190>)
 8007a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <pvPortMalloc+0x184>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <pvPortMalloc+0x194>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a11      	ldr	r2, [pc, #68]	; (8007abc <pvPortMalloc+0x194>)
 8007a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a78:	f7fe fc9a 	bl	80063b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <pvPortMalloc+0x174>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	60fb      	str	r3, [r7, #12]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <pvPortMalloc+0x172>
	return pvReturn;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3728      	adds	r7, #40	; 0x28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20004250 	.word	0x20004250
 8007aac:	20004264 	.word	0x20004264
 8007ab0:	20004254 	.word	0x20004254
 8007ab4:	20004248 	.word	0x20004248
 8007ab8:	20004258 	.word	0x20004258
 8007abc:	2000425c 	.word	0x2000425c

08007ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04d      	beq.n	8007b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ad2:	2308      	movs	r3, #8
 8007ad4:	425b      	negs	r3, r3
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4413      	add	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <vPortFree+0xb8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <vPortFree+0x44>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	60fb      	str	r3, [r7, #12]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <vPortFree+0x62>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	60bb      	str	r3, [r7, #8]
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <vPortFree+0xb8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01e      	beq.n	8007b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11a      	bne.n	8007b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <vPortFree+0xb8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	43db      	mvns	r3, r3
 8007b42:	401a      	ands	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b48:	f7fe fc24 	bl	8006394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <vPortFree+0xbc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4413      	add	r3, r2
 8007b56:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <vPortFree+0xbc>)
 8007b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b5a:	6938      	ldr	r0, [r7, #16]
 8007b5c:	f000 f874 	bl	8007c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <vPortFree+0xc0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	4a06      	ldr	r2, [pc, #24]	; (8007b80 <vPortFree+0xc0>)
 8007b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b6a:	f7fe fc21 	bl	80063b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b6e:	bf00      	nop
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20004264 	.word	0x20004264
 8007b7c:	20004254 	.word	0x20004254
 8007b80:	20004260 	.word	0x20004260

08007b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b90:	4b27      	ldr	r3, [pc, #156]	; (8007c30 <prvHeapInit+0xac>)
 8007b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00c      	beq.n	8007bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3307      	adds	r3, #7
 8007ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0307 	bic.w	r3, r3, #7
 8007baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	4a1f      	ldr	r2, [pc, #124]	; (8007c30 <prvHeapInit+0xac>)
 8007bb4:	4413      	add	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bbc:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <prvHeapInit+0xb0>)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <prvHeapInit+0xb0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1a9b      	subs	r3, r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0307 	bic.w	r3, r3, #7
 8007bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <prvHeapInit+0xb4>)
 8007be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007be6:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <prvHeapInit+0xb4>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bee:	4b12      	ldr	r3, [pc, #72]	; (8007c38 <prvHeapInit+0xb4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <prvHeapInit+0xb4>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <prvHeapInit+0xb8>)
 8007c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a09      	ldr	r2, [pc, #36]	; (8007c40 <prvHeapInit+0xbc>)
 8007c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c1c:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <prvHeapInit+0xc0>)
 8007c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c22:	601a      	str	r2, [r3, #0]
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	20003690 	.word	0x20003690
 8007c34:	20004248 	.word	0x20004248
 8007c38:	20004250 	.word	0x20004250
 8007c3c:	20004258 	.word	0x20004258
 8007c40:	20004254 	.word	0x20004254
 8007c44:	20004264 	.word	0x20004264

08007c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c50:	4b28      	ldr	r3, [pc, #160]	; (8007cf4 <prvInsertBlockIntoFreeList+0xac>)
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e002      	b.n	8007c5c <prvInsertBlockIntoFreeList+0x14>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d8f7      	bhi.n	8007c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d108      	bne.n	8007c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	441a      	add	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d118      	bne.n	8007cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d00d      	beq.n	8007cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	441a      	add	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e008      	b.n	8007cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e003      	b.n	8007cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d002      	beq.n	8007ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20004248 	.word	0x20004248
 8007cf8:	20004250 	.word	0x20004250

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	; (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20000018 	.word	0x20000018

08007d08 <std>:
 8007d08:	2300      	movs	r3, #0
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d16:	6083      	str	r3, [r0, #8]
 8007d18:	8181      	strh	r1, [r0, #12]
 8007d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d1c:	81c2      	strh	r2, [r0, #14]
 8007d1e:	6183      	str	r3, [r0, #24]
 8007d20:	4619      	mov	r1, r3
 8007d22:	2208      	movs	r2, #8
 8007d24:	305c      	adds	r0, #92	; 0x5c
 8007d26:	f000 f92a 	bl	8007f7e <memset>
 8007d2a:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <std+0x38>)
 8007d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d2e:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <std+0x3c>)
 8007d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <std+0x40>)
 8007d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <std+0x44>)
 8007d38:	6224      	str	r4, [r4, #32]
 8007d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	bf00      	nop
 8007d40:	08008245 	.word	0x08008245
 8007d44:	08008267 	.word	0x08008267
 8007d48:	0800829f 	.word	0x0800829f
 8007d4c:	080082c3 	.word	0x080082c3

08007d50 <_cleanup_r>:
 8007d50:	4901      	ldr	r1, [pc, #4]	; (8007d58 <_cleanup_r+0x8>)
 8007d52:	f000 b8af 	b.w	8007eb4 <_fwalk_reent>
 8007d56:	bf00      	nop
 8007d58:	0800841d 	.word	0x0800841d

08007d5c <__sfmoreglue>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	2268      	movs	r2, #104	; 0x68
 8007d60:	1e4d      	subs	r5, r1, #1
 8007d62:	4355      	muls	r5, r2
 8007d64:	460e      	mov	r6, r1
 8007d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d6a:	f000 f931 	bl	8007fd0 <_malloc_r>
 8007d6e:	4604      	mov	r4, r0
 8007d70:	b140      	cbz	r0, 8007d84 <__sfmoreglue+0x28>
 8007d72:	2100      	movs	r1, #0
 8007d74:	e9c0 1600 	strd	r1, r6, [r0]
 8007d78:	300c      	adds	r0, #12
 8007d7a:	60a0      	str	r0, [r4, #8]
 8007d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d80:	f000 f8fd 	bl	8007f7e <memset>
 8007d84:	4620      	mov	r0, r4
 8007d86:	bd70      	pop	{r4, r5, r6, pc}

08007d88 <__sfp_lock_acquire>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__sfp_lock_acquire+0x8>)
 8007d8a:	f000 b8d8 	b.w	8007f3e <__retarget_lock_acquire_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20004269 	.word	0x20004269

08007d94 <__sfp_lock_release>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__sfp_lock_release+0x8>)
 8007d96:	f000 b8d3 	b.w	8007f40 <__retarget_lock_release_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	20004269 	.word	0x20004269

08007da0 <__sinit_lock_acquire>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__sinit_lock_acquire+0x8>)
 8007da2:	f000 b8cc 	b.w	8007f3e <__retarget_lock_acquire_recursive>
 8007da6:	bf00      	nop
 8007da8:	2000426a 	.word	0x2000426a

08007dac <__sinit_lock_release>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__sinit_lock_release+0x8>)
 8007dae:	f000 b8c7 	b.w	8007f40 <__retarget_lock_release_recursive>
 8007db2:	bf00      	nop
 8007db4:	2000426a 	.word	0x2000426a

08007db8 <__sinit>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	4604      	mov	r4, r0
 8007dbc:	f7ff fff0 	bl	8007da0 <__sinit_lock_acquire>
 8007dc0:	69a3      	ldr	r3, [r4, #24]
 8007dc2:	b11b      	cbz	r3, 8007dcc <__sinit+0x14>
 8007dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc8:	f7ff bff0 	b.w	8007dac <__sinit_lock_release>
 8007dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8007dd2:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <__sinit+0x68>)
 8007dd4:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <__sinit+0x6c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	bf04      	itt	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	61a3      	streq	r3, [r4, #24]
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 f820 	bl	8007e28 <__sfp>
 8007de8:	6060      	str	r0, [r4, #4]
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 f81c 	bl	8007e28 <__sfp>
 8007df0:	60a0      	str	r0, [r4, #8]
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 f818 	bl	8007e28 <__sfp>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	60e0      	str	r0, [r4, #12]
 8007dfc:	2104      	movs	r1, #4
 8007dfe:	6860      	ldr	r0, [r4, #4]
 8007e00:	f7ff ff82 	bl	8007d08 <std>
 8007e04:	68a0      	ldr	r0, [r4, #8]
 8007e06:	2201      	movs	r2, #1
 8007e08:	2109      	movs	r1, #9
 8007e0a:	f7ff ff7d 	bl	8007d08 <std>
 8007e0e:	68e0      	ldr	r0, [r4, #12]
 8007e10:	2202      	movs	r2, #2
 8007e12:	2112      	movs	r1, #18
 8007e14:	f7ff ff78 	bl	8007d08 <std>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	61a3      	str	r3, [r4, #24]
 8007e1c:	e7d2      	b.n	8007dc4 <__sinit+0xc>
 8007e1e:	bf00      	nop
 8007e20:	08009370 	.word	0x08009370
 8007e24:	08007d51 	.word	0x08007d51

08007e28 <__sfp>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	f7ff ffac 	bl	8007d88 <__sfp_lock_acquire>
 8007e30:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <__sfp+0x84>)
 8007e32:	681e      	ldr	r6, [r3, #0]
 8007e34:	69b3      	ldr	r3, [r6, #24]
 8007e36:	b913      	cbnz	r3, 8007e3e <__sfp+0x16>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f7ff ffbd 	bl	8007db8 <__sinit>
 8007e3e:	3648      	adds	r6, #72	; 0x48
 8007e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	d503      	bpl.n	8007e50 <__sfp+0x28>
 8007e48:	6833      	ldr	r3, [r6, #0]
 8007e4a:	b30b      	cbz	r3, 8007e90 <__sfp+0x68>
 8007e4c:	6836      	ldr	r6, [r6, #0]
 8007e4e:	e7f7      	b.n	8007e40 <__sfp+0x18>
 8007e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e54:	b9d5      	cbnz	r5, 8007e8c <__sfp+0x64>
 8007e56:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <__sfp+0x88>)
 8007e58:	60e3      	str	r3, [r4, #12]
 8007e5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8007e60:	f000 f86c 	bl	8007f3c <__retarget_lock_init_recursive>
 8007e64:	f7ff ff96 	bl	8007d94 <__sfp_lock_release>
 8007e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e70:	6025      	str	r5, [r4, #0]
 8007e72:	61a5      	str	r5, [r4, #24]
 8007e74:	2208      	movs	r2, #8
 8007e76:	4629      	mov	r1, r5
 8007e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e7c:	f000 f87f 	bl	8007f7e <memset>
 8007e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e88:	4620      	mov	r0, r4
 8007e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8c:	3468      	adds	r4, #104	; 0x68
 8007e8e:	e7d9      	b.n	8007e44 <__sfp+0x1c>
 8007e90:	2104      	movs	r1, #4
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ff62 	bl	8007d5c <__sfmoreglue>
 8007e98:	4604      	mov	r4, r0
 8007e9a:	6030      	str	r0, [r6, #0]
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d1d5      	bne.n	8007e4c <__sfp+0x24>
 8007ea0:	f7ff ff78 	bl	8007d94 <__sfp_lock_release>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	e7ee      	b.n	8007e88 <__sfp+0x60>
 8007eaa:	bf00      	nop
 8007eac:	08009370 	.word	0x08009370
 8007eb0:	ffff0001 	.word	0xffff0001

08007eb4 <_fwalk_reent>:
 8007eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb8:	4606      	mov	r6, r0
 8007eba:	4688      	mov	r8, r1
 8007ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ec0:	2700      	movs	r7, #0
 8007ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8007eca:	d505      	bpl.n	8007ed8 <_fwalk_reent+0x24>
 8007ecc:	6824      	ldr	r4, [r4, #0]
 8007ece:	2c00      	cmp	r4, #0
 8007ed0:	d1f7      	bne.n	8007ec2 <_fwalk_reent+0xe>
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed8:	89ab      	ldrh	r3, [r5, #12]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d907      	bls.n	8007eee <_fwalk_reent+0x3a>
 8007ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	d003      	beq.n	8007eee <_fwalk_reent+0x3a>
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4630      	mov	r0, r6
 8007eea:	47c0      	blx	r8
 8007eec:	4307      	orrs	r7, r0
 8007eee:	3568      	adds	r5, #104	; 0x68
 8007ef0:	e7e9      	b.n	8007ec6 <_fwalk_reent+0x12>
	...

08007ef4 <__libc_init_array>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4d0d      	ldr	r5, [pc, #52]	; (8007f2c <__libc_init_array+0x38>)
 8007ef8:	4c0d      	ldr	r4, [pc, #52]	; (8007f30 <__libc_init_array+0x3c>)
 8007efa:	1b64      	subs	r4, r4, r5
 8007efc:	10a4      	asrs	r4, r4, #2
 8007efe:	2600      	movs	r6, #0
 8007f00:	42a6      	cmp	r6, r4
 8007f02:	d109      	bne.n	8007f18 <__libc_init_array+0x24>
 8007f04:	4d0b      	ldr	r5, [pc, #44]	; (8007f34 <__libc_init_array+0x40>)
 8007f06:	4c0c      	ldr	r4, [pc, #48]	; (8007f38 <__libc_init_array+0x44>)
 8007f08:	f001 f924 	bl	8009154 <_init>
 8007f0c:	1b64      	subs	r4, r4, r5
 8007f0e:	10a4      	asrs	r4, r4, #2
 8007f10:	2600      	movs	r6, #0
 8007f12:	42a6      	cmp	r6, r4
 8007f14:	d105      	bne.n	8007f22 <__libc_init_array+0x2e>
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1c:	4798      	blx	r3
 8007f1e:	3601      	adds	r6, #1
 8007f20:	e7ee      	b.n	8007f00 <__libc_init_array+0xc>
 8007f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f26:	4798      	blx	r3
 8007f28:	3601      	adds	r6, #1
 8007f2a:	e7f2      	b.n	8007f12 <__libc_init_array+0x1e>
 8007f2c:	080093b0 	.word	0x080093b0
 8007f30:	080093b0 	.word	0x080093b0
 8007f34:	080093b0 	.word	0x080093b0
 8007f38:	080093b4 	.word	0x080093b4

08007f3c <__retarget_lock_init_recursive>:
 8007f3c:	4770      	bx	lr

08007f3e <__retarget_lock_acquire_recursive>:
 8007f3e:	4770      	bx	lr

08007f40 <__retarget_lock_release_recursive>:
 8007f40:	4770      	bx	lr

08007f42 <memcmp>:
 8007f42:	b510      	push	{r4, lr}
 8007f44:	3901      	subs	r1, #1
 8007f46:	4402      	add	r2, r0
 8007f48:	4290      	cmp	r0, r2
 8007f4a:	d101      	bne.n	8007f50 <memcmp+0xe>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e005      	b.n	8007f5c <memcmp+0x1a>
 8007f50:	7803      	ldrb	r3, [r0, #0]
 8007f52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	d001      	beq.n	8007f5e <memcmp+0x1c>
 8007f5a:	1b18      	subs	r0, r3, r4
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	3001      	adds	r0, #1
 8007f60:	e7f2      	b.n	8007f48 <memcmp+0x6>

08007f62 <memcpy>:
 8007f62:	440a      	add	r2, r1
 8007f64:	4291      	cmp	r1, r2
 8007f66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f6a:	d100      	bne.n	8007f6e <memcpy+0xc>
 8007f6c:	4770      	bx	lr
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f78:	4291      	cmp	r1, r2
 8007f7a:	d1f9      	bne.n	8007f70 <memcpy+0xe>
 8007f7c:	bd10      	pop	{r4, pc}

08007f7e <memset>:
 8007f7e:	4402      	add	r2, r0
 8007f80:	4603      	mov	r3, r0
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d100      	bne.n	8007f88 <memset+0xa>
 8007f86:	4770      	bx	lr
 8007f88:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8c:	e7f9      	b.n	8007f82 <memset+0x4>
	...

08007f90 <sbrk_aligned>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	4e0e      	ldr	r6, [pc, #56]	; (8007fcc <sbrk_aligned+0x3c>)
 8007f94:	460c      	mov	r4, r1
 8007f96:	6831      	ldr	r1, [r6, #0]
 8007f98:	4605      	mov	r5, r0
 8007f9a:	b911      	cbnz	r1, 8007fa2 <sbrk_aligned+0x12>
 8007f9c:	f000 f90e 	bl	80081bc <_sbrk_r>
 8007fa0:	6030      	str	r0, [r6, #0]
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 f909 	bl	80081bc <_sbrk_r>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	d00a      	beq.n	8007fc4 <sbrk_aligned+0x34>
 8007fae:	1cc4      	adds	r4, r0, #3
 8007fb0:	f024 0403 	bic.w	r4, r4, #3
 8007fb4:	42a0      	cmp	r0, r4
 8007fb6:	d007      	beq.n	8007fc8 <sbrk_aligned+0x38>
 8007fb8:	1a21      	subs	r1, r4, r0
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 f8fe 	bl	80081bc <_sbrk_r>
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d101      	bne.n	8007fc8 <sbrk_aligned+0x38>
 8007fc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007fc8:	4620      	mov	r0, r4
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	20004270 	.word	0x20004270

08007fd0 <_malloc_r>:
 8007fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd4:	1ccd      	adds	r5, r1, #3
 8007fd6:	f025 0503 	bic.w	r5, r5, #3
 8007fda:	3508      	adds	r5, #8
 8007fdc:	2d0c      	cmp	r5, #12
 8007fde:	bf38      	it	cc
 8007fe0:	250c      	movcc	r5, #12
 8007fe2:	2d00      	cmp	r5, #0
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	db01      	blt.n	8007fec <_malloc_r+0x1c>
 8007fe8:	42a9      	cmp	r1, r5
 8007fea:	d905      	bls.n	8007ff8 <_malloc_r+0x28>
 8007fec:	230c      	movs	r3, #12
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	2600      	movs	r6, #0
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff8:	4e2e      	ldr	r6, [pc, #184]	; (80080b4 <_malloc_r+0xe4>)
 8007ffa:	f000 fa5d 	bl	80084b8 <__malloc_lock>
 8007ffe:	6833      	ldr	r3, [r6, #0]
 8008000:	461c      	mov	r4, r3
 8008002:	bb34      	cbnz	r4, 8008052 <_malloc_r+0x82>
 8008004:	4629      	mov	r1, r5
 8008006:	4638      	mov	r0, r7
 8008008:	f7ff ffc2 	bl	8007f90 <sbrk_aligned>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	4604      	mov	r4, r0
 8008010:	d14d      	bne.n	80080ae <_malloc_r+0xde>
 8008012:	6834      	ldr	r4, [r6, #0]
 8008014:	4626      	mov	r6, r4
 8008016:	2e00      	cmp	r6, #0
 8008018:	d140      	bne.n	800809c <_malloc_r+0xcc>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	4631      	mov	r1, r6
 800801e:	4638      	mov	r0, r7
 8008020:	eb04 0803 	add.w	r8, r4, r3
 8008024:	f000 f8ca 	bl	80081bc <_sbrk_r>
 8008028:	4580      	cmp	r8, r0
 800802a:	d13a      	bne.n	80080a2 <_malloc_r+0xd2>
 800802c:	6821      	ldr	r1, [r4, #0]
 800802e:	3503      	adds	r5, #3
 8008030:	1a6d      	subs	r5, r5, r1
 8008032:	f025 0503 	bic.w	r5, r5, #3
 8008036:	3508      	adds	r5, #8
 8008038:	2d0c      	cmp	r5, #12
 800803a:	bf38      	it	cc
 800803c:	250c      	movcc	r5, #12
 800803e:	4629      	mov	r1, r5
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ffa5 	bl	8007f90 <sbrk_aligned>
 8008046:	3001      	adds	r0, #1
 8008048:	d02b      	beq.n	80080a2 <_malloc_r+0xd2>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	442b      	add	r3, r5
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	e00e      	b.n	8008070 <_malloc_r+0xa0>
 8008052:	6822      	ldr	r2, [r4, #0]
 8008054:	1b52      	subs	r2, r2, r5
 8008056:	d41e      	bmi.n	8008096 <_malloc_r+0xc6>
 8008058:	2a0b      	cmp	r2, #11
 800805a:	d916      	bls.n	800808a <_malloc_r+0xba>
 800805c:	1961      	adds	r1, r4, r5
 800805e:	42a3      	cmp	r3, r4
 8008060:	6025      	str	r5, [r4, #0]
 8008062:	bf18      	it	ne
 8008064:	6059      	strne	r1, [r3, #4]
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	bf08      	it	eq
 800806a:	6031      	streq	r1, [r6, #0]
 800806c:	5162      	str	r2, [r4, r5]
 800806e:	604b      	str	r3, [r1, #4]
 8008070:	4638      	mov	r0, r7
 8008072:	f104 060b 	add.w	r6, r4, #11
 8008076:	f000 fa25 	bl	80084c4 <__malloc_unlock>
 800807a:	f026 0607 	bic.w	r6, r6, #7
 800807e:	1d23      	adds	r3, r4, #4
 8008080:	1af2      	subs	r2, r6, r3
 8008082:	d0b6      	beq.n	8007ff2 <_malloc_r+0x22>
 8008084:	1b9b      	subs	r3, r3, r6
 8008086:	50a3      	str	r3, [r4, r2]
 8008088:	e7b3      	b.n	8007ff2 <_malloc_r+0x22>
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	42a3      	cmp	r3, r4
 800808e:	bf0c      	ite	eq
 8008090:	6032      	streq	r2, [r6, #0]
 8008092:	605a      	strne	r2, [r3, #4]
 8008094:	e7ec      	b.n	8008070 <_malloc_r+0xa0>
 8008096:	4623      	mov	r3, r4
 8008098:	6864      	ldr	r4, [r4, #4]
 800809a:	e7b2      	b.n	8008002 <_malloc_r+0x32>
 800809c:	4634      	mov	r4, r6
 800809e:	6876      	ldr	r6, [r6, #4]
 80080a0:	e7b9      	b.n	8008016 <_malloc_r+0x46>
 80080a2:	230c      	movs	r3, #12
 80080a4:	603b      	str	r3, [r7, #0]
 80080a6:	4638      	mov	r0, r7
 80080a8:	f000 fa0c 	bl	80084c4 <__malloc_unlock>
 80080ac:	e7a1      	b.n	8007ff2 <_malloc_r+0x22>
 80080ae:	6025      	str	r5, [r4, #0]
 80080b0:	e7de      	b.n	8008070 <_malloc_r+0xa0>
 80080b2:	bf00      	nop
 80080b4:	2000426c 	.word	0x2000426c

080080b8 <iprintf>:
 80080b8:	b40f      	push	{r0, r1, r2, r3}
 80080ba:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <iprintf+0x2c>)
 80080bc:	b513      	push	{r0, r1, r4, lr}
 80080be:	681c      	ldr	r4, [r3, #0]
 80080c0:	b124      	cbz	r4, 80080cc <iprintf+0x14>
 80080c2:	69a3      	ldr	r3, [r4, #24]
 80080c4:	b913      	cbnz	r3, 80080cc <iprintf+0x14>
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7ff fe76 	bl	8007db8 <__sinit>
 80080cc:	ab05      	add	r3, sp, #20
 80080ce:	9a04      	ldr	r2, [sp, #16]
 80080d0:	68a1      	ldr	r1, [r4, #8]
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fbcd 	bl	8008874 <_vfiprintf_r>
 80080da:	b002      	add	sp, #8
 80080dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e0:	b004      	add	sp, #16
 80080e2:	4770      	bx	lr
 80080e4:	20000018 	.word	0x20000018

080080e8 <cleanup_glue>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	460c      	mov	r4, r1
 80080ec:	6809      	ldr	r1, [r1, #0]
 80080ee:	4605      	mov	r5, r0
 80080f0:	b109      	cbz	r1, 80080f6 <cleanup_glue+0xe>
 80080f2:	f7ff fff9 	bl	80080e8 <cleanup_glue>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4628      	mov	r0, r5
 80080fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080fe:	f000 b9e7 	b.w	80084d0 <_free_r>
	...

08008104 <_reclaim_reent>:
 8008104:	4b2c      	ldr	r3, [pc, #176]	; (80081b8 <_reclaim_reent+0xb4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4283      	cmp	r3, r0
 800810a:	b570      	push	{r4, r5, r6, lr}
 800810c:	4604      	mov	r4, r0
 800810e:	d051      	beq.n	80081b4 <_reclaim_reent+0xb0>
 8008110:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008112:	b143      	cbz	r3, 8008126 <_reclaim_reent+0x22>
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d14a      	bne.n	80081b0 <_reclaim_reent+0xac>
 800811a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800811c:	6819      	ldr	r1, [r3, #0]
 800811e:	b111      	cbz	r1, 8008126 <_reclaim_reent+0x22>
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f9d5 	bl	80084d0 <_free_r>
 8008126:	6961      	ldr	r1, [r4, #20]
 8008128:	b111      	cbz	r1, 8008130 <_reclaim_reent+0x2c>
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f9d0 	bl	80084d0 <_free_r>
 8008130:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008132:	b111      	cbz	r1, 800813a <_reclaim_reent+0x36>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f9cb 	bl	80084d0 <_free_r>
 800813a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800813c:	b111      	cbz	r1, 8008144 <_reclaim_reent+0x40>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 f9c6 	bl	80084d0 <_free_r>
 8008144:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008146:	b111      	cbz	r1, 800814e <_reclaim_reent+0x4a>
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f9c1 	bl	80084d0 <_free_r>
 800814e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008150:	b111      	cbz	r1, 8008158 <_reclaim_reent+0x54>
 8008152:	4620      	mov	r0, r4
 8008154:	f000 f9bc 	bl	80084d0 <_free_r>
 8008158:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800815a:	b111      	cbz	r1, 8008162 <_reclaim_reent+0x5e>
 800815c:	4620      	mov	r0, r4
 800815e:	f000 f9b7 	bl	80084d0 <_free_r>
 8008162:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008164:	b111      	cbz	r1, 800816c <_reclaim_reent+0x68>
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f9b2 	bl	80084d0 <_free_r>
 800816c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800816e:	b111      	cbz	r1, 8008176 <_reclaim_reent+0x72>
 8008170:	4620      	mov	r0, r4
 8008172:	f000 f9ad 	bl	80084d0 <_free_r>
 8008176:	69a3      	ldr	r3, [r4, #24]
 8008178:	b1e3      	cbz	r3, 80081b4 <_reclaim_reent+0xb0>
 800817a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800817c:	4620      	mov	r0, r4
 800817e:	4798      	blx	r3
 8008180:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008182:	b1b9      	cbz	r1, 80081b4 <_reclaim_reent+0xb0>
 8008184:	4620      	mov	r0, r4
 8008186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800818a:	f7ff bfad 	b.w	80080e8 <cleanup_glue>
 800818e:	5949      	ldr	r1, [r1, r5]
 8008190:	b941      	cbnz	r1, 80081a4 <_reclaim_reent+0xa0>
 8008192:	3504      	adds	r5, #4
 8008194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008196:	2d80      	cmp	r5, #128	; 0x80
 8008198:	68d9      	ldr	r1, [r3, #12]
 800819a:	d1f8      	bne.n	800818e <_reclaim_reent+0x8a>
 800819c:	4620      	mov	r0, r4
 800819e:	f000 f997 	bl	80084d0 <_free_r>
 80081a2:	e7ba      	b.n	800811a <_reclaim_reent+0x16>
 80081a4:	680e      	ldr	r6, [r1, #0]
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 f992 	bl	80084d0 <_free_r>
 80081ac:	4631      	mov	r1, r6
 80081ae:	e7ef      	b.n	8008190 <_reclaim_reent+0x8c>
 80081b0:	2500      	movs	r5, #0
 80081b2:	e7ef      	b.n	8008194 <_reclaim_reent+0x90>
 80081b4:	bd70      	pop	{r4, r5, r6, pc}
 80081b6:	bf00      	nop
 80081b8:	20000018 	.word	0x20000018

080081bc <_sbrk_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d06      	ldr	r5, [pc, #24]	; (80081d8 <_sbrk_r+0x1c>)
 80081c0:	2300      	movs	r3, #0
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	602b      	str	r3, [r5, #0]
 80081c8:	f7f8 ffe2 	bl	8001190 <_sbrk>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_sbrk_r+0x1a>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_sbrk_r+0x1a>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	20004274 	.word	0x20004274

080081dc <sniprintf>:
 80081dc:	b40c      	push	{r2, r3}
 80081de:	b530      	push	{r4, r5, lr}
 80081e0:	4b17      	ldr	r3, [pc, #92]	; (8008240 <sniprintf+0x64>)
 80081e2:	1e0c      	subs	r4, r1, #0
 80081e4:	681d      	ldr	r5, [r3, #0]
 80081e6:	b09d      	sub	sp, #116	; 0x74
 80081e8:	da08      	bge.n	80081fc <sniprintf+0x20>
 80081ea:	238b      	movs	r3, #139	; 0x8b
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081f2:	b01d      	add	sp, #116	; 0x74
 80081f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081f8:	b002      	add	sp, #8
 80081fa:	4770      	bx	lr
 80081fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008204:	bf14      	ite	ne
 8008206:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800820a:	4623      	moveq	r3, r4
 800820c:	9304      	str	r3, [sp, #16]
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008214:	9002      	str	r0, [sp, #8]
 8008216:	9006      	str	r0, [sp, #24]
 8008218:	f8ad 3016 	strh.w	r3, [sp, #22]
 800821c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800821e:	ab21      	add	r3, sp, #132	; 0x84
 8008220:	a902      	add	r1, sp, #8
 8008222:	4628      	mov	r0, r5
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	f000 f9fb 	bl	8008620 <_svfiprintf_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	bfbc      	itt	lt
 800822e:	238b      	movlt	r3, #139	; 0x8b
 8008230:	602b      	strlt	r3, [r5, #0]
 8008232:	2c00      	cmp	r4, #0
 8008234:	d0dd      	beq.n	80081f2 <sniprintf+0x16>
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	e7d9      	b.n	80081f2 <sniprintf+0x16>
 800823e:	bf00      	nop
 8008240:	20000018 	.word	0x20000018

08008244 <__sread>:
 8008244:	b510      	push	{r4, lr}
 8008246:	460c      	mov	r4, r1
 8008248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824c:	f000 fdd6 	bl	8008dfc <_read_r>
 8008250:	2800      	cmp	r0, #0
 8008252:	bfab      	itete	ge
 8008254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008256:	89a3      	ldrhlt	r3, [r4, #12]
 8008258:	181b      	addge	r3, r3, r0
 800825a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800825e:	bfac      	ite	ge
 8008260:	6563      	strge	r3, [r4, #84]	; 0x54
 8008262:	81a3      	strhlt	r3, [r4, #12]
 8008264:	bd10      	pop	{r4, pc}

08008266 <__swrite>:
 8008266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826a:	461f      	mov	r7, r3
 800826c:	898b      	ldrh	r3, [r1, #12]
 800826e:	05db      	lsls	r3, r3, #23
 8008270:	4605      	mov	r5, r0
 8008272:	460c      	mov	r4, r1
 8008274:	4616      	mov	r6, r2
 8008276:	d505      	bpl.n	8008284 <__swrite+0x1e>
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	2302      	movs	r3, #2
 800827e:	2200      	movs	r2, #0
 8008280:	f000 f908 	bl	8008494 <_lseek_r>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800828a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	4632      	mov	r2, r6
 8008292:	463b      	mov	r3, r7
 8008294:	4628      	mov	r0, r5
 8008296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800829a:	f000 b817 	b.w	80082cc <_write_r>

0800829e <__sseek>:
 800829e:	b510      	push	{r4, lr}
 80082a0:	460c      	mov	r4, r1
 80082a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a6:	f000 f8f5 	bl	8008494 <_lseek_r>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	bf15      	itete	ne
 80082b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80082b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082ba:	81a3      	strheq	r3, [r4, #12]
 80082bc:	bf18      	it	ne
 80082be:	81a3      	strhne	r3, [r4, #12]
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <__sclose>:
 80082c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c6:	f000 b813 	b.w	80082f0 <_close_r>
	...

080082cc <_write_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	; (80082ec <_write_r+0x20>)
 80082d0:	4604      	mov	r4, r0
 80082d2:	4608      	mov	r0, r1
 80082d4:	4611      	mov	r1, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7f8 ff07 	bl	80010ee <_write>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_write_r+0x1e>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_write_r+0x1e>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20004274 	.word	0x20004274

080082f0 <_close_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d06      	ldr	r5, [pc, #24]	; (800830c <_close_r+0x1c>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	f7f8 ff13 	bl	8001126 <_close>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_close_r+0x1a>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_close_r+0x1a>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20004274 	.word	0x20004274

08008310 <__sflush_r>:
 8008310:	898a      	ldrh	r2, [r1, #12]
 8008312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	4605      	mov	r5, r0
 8008318:	0710      	lsls	r0, r2, #28
 800831a:	460c      	mov	r4, r1
 800831c:	d458      	bmi.n	80083d0 <__sflush_r+0xc0>
 800831e:	684b      	ldr	r3, [r1, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	dc05      	bgt.n	8008330 <__sflush_r+0x20>
 8008324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	dc02      	bgt.n	8008330 <__sflush_r+0x20>
 800832a:	2000      	movs	r0, #0
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008332:	2e00      	cmp	r6, #0
 8008334:	d0f9      	beq.n	800832a <__sflush_r+0x1a>
 8008336:	2300      	movs	r3, #0
 8008338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800833c:	682f      	ldr	r7, [r5, #0]
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	d032      	beq.n	80083a8 <__sflush_r+0x98>
 8008342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	075a      	lsls	r2, r3, #29
 8008348:	d505      	bpl.n	8008356 <__sflush_r+0x46>
 800834a:	6863      	ldr	r3, [r4, #4]
 800834c:	1ac0      	subs	r0, r0, r3
 800834e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008350:	b10b      	cbz	r3, 8008356 <__sflush_r+0x46>
 8008352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008354:	1ac0      	subs	r0, r0, r3
 8008356:	2300      	movs	r3, #0
 8008358:	4602      	mov	r2, r0
 800835a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835c:	6a21      	ldr	r1, [r4, #32]
 800835e:	4628      	mov	r0, r5
 8008360:	47b0      	blx	r6
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	d106      	bne.n	8008376 <__sflush_r+0x66>
 8008368:	6829      	ldr	r1, [r5, #0]
 800836a:	291d      	cmp	r1, #29
 800836c:	d82c      	bhi.n	80083c8 <__sflush_r+0xb8>
 800836e:	4a2a      	ldr	r2, [pc, #168]	; (8008418 <__sflush_r+0x108>)
 8008370:	40ca      	lsrs	r2, r1
 8008372:	07d6      	lsls	r6, r2, #31
 8008374:	d528      	bpl.n	80083c8 <__sflush_r+0xb8>
 8008376:	2200      	movs	r2, #0
 8008378:	6062      	str	r2, [r4, #4]
 800837a:	04d9      	lsls	r1, r3, #19
 800837c:	6922      	ldr	r2, [r4, #16]
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	d504      	bpl.n	800838c <__sflush_r+0x7c>
 8008382:	1c42      	adds	r2, r0, #1
 8008384:	d101      	bne.n	800838a <__sflush_r+0x7a>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b903      	cbnz	r3, 800838c <__sflush_r+0x7c>
 800838a:	6560      	str	r0, [r4, #84]	; 0x54
 800838c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800838e:	602f      	str	r7, [r5, #0]
 8008390:	2900      	cmp	r1, #0
 8008392:	d0ca      	beq.n	800832a <__sflush_r+0x1a>
 8008394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008398:	4299      	cmp	r1, r3
 800839a:	d002      	beq.n	80083a2 <__sflush_r+0x92>
 800839c:	4628      	mov	r0, r5
 800839e:	f000 f897 	bl	80084d0 <_free_r>
 80083a2:	2000      	movs	r0, #0
 80083a4:	6360      	str	r0, [r4, #52]	; 0x34
 80083a6:	e7c1      	b.n	800832c <__sflush_r+0x1c>
 80083a8:	6a21      	ldr	r1, [r4, #32]
 80083aa:	2301      	movs	r3, #1
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b0      	blx	r6
 80083b0:	1c41      	adds	r1, r0, #1
 80083b2:	d1c7      	bne.n	8008344 <__sflush_r+0x34>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0c4      	beq.n	8008344 <__sflush_r+0x34>
 80083ba:	2b1d      	cmp	r3, #29
 80083bc:	d001      	beq.n	80083c2 <__sflush_r+0xb2>
 80083be:	2b16      	cmp	r3, #22
 80083c0:	d101      	bne.n	80083c6 <__sflush_r+0xb6>
 80083c2:	602f      	str	r7, [r5, #0]
 80083c4:	e7b1      	b.n	800832a <__sflush_r+0x1a>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	e7ad      	b.n	800832c <__sflush_r+0x1c>
 80083d0:	690f      	ldr	r7, [r1, #16]
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	d0a9      	beq.n	800832a <__sflush_r+0x1a>
 80083d6:	0793      	lsls	r3, r2, #30
 80083d8:	680e      	ldr	r6, [r1, #0]
 80083da:	bf08      	it	eq
 80083dc:	694b      	ldreq	r3, [r1, #20]
 80083de:	600f      	str	r7, [r1, #0]
 80083e0:	bf18      	it	ne
 80083e2:	2300      	movne	r3, #0
 80083e4:	eba6 0807 	sub.w	r8, r6, r7
 80083e8:	608b      	str	r3, [r1, #8]
 80083ea:	f1b8 0f00 	cmp.w	r8, #0
 80083ee:	dd9c      	ble.n	800832a <__sflush_r+0x1a>
 80083f0:	6a21      	ldr	r1, [r4, #32]
 80083f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083f4:	4643      	mov	r3, r8
 80083f6:	463a      	mov	r2, r7
 80083f8:	4628      	mov	r0, r5
 80083fa:	47b0      	blx	r6
 80083fc:	2800      	cmp	r0, #0
 80083fe:	dc06      	bgt.n	800840e <__sflush_r+0xfe>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800840c:	e78e      	b.n	800832c <__sflush_r+0x1c>
 800840e:	4407      	add	r7, r0
 8008410:	eba8 0800 	sub.w	r8, r8, r0
 8008414:	e7e9      	b.n	80083ea <__sflush_r+0xda>
 8008416:	bf00      	nop
 8008418:	20400001 	.word	0x20400001

0800841c <_fflush_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	690b      	ldr	r3, [r1, #16]
 8008420:	4605      	mov	r5, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b913      	cbnz	r3, 800842c <_fflush_r+0x10>
 8008426:	2500      	movs	r5, #0
 8008428:	4628      	mov	r0, r5
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	b118      	cbz	r0, 8008436 <_fflush_r+0x1a>
 800842e:	6983      	ldr	r3, [r0, #24]
 8008430:	b90b      	cbnz	r3, 8008436 <_fflush_r+0x1a>
 8008432:	f7ff fcc1 	bl	8007db8 <__sinit>
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <_fflush_r+0x6c>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d11b      	bne.n	8008474 <_fflush_r+0x58>
 800843c:	686c      	ldr	r4, [r5, #4]
 800843e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ef      	beq.n	8008426 <_fflush_r+0xa>
 8008446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008448:	07d0      	lsls	r0, r2, #31
 800844a:	d404      	bmi.n	8008456 <_fflush_r+0x3a>
 800844c:	0599      	lsls	r1, r3, #22
 800844e:	d402      	bmi.n	8008456 <_fflush_r+0x3a>
 8008450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008452:	f7ff fd74 	bl	8007f3e <__retarget_lock_acquire_recursive>
 8008456:	4628      	mov	r0, r5
 8008458:	4621      	mov	r1, r4
 800845a:	f7ff ff59 	bl	8008310 <__sflush_r>
 800845e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008460:	07da      	lsls	r2, r3, #31
 8008462:	4605      	mov	r5, r0
 8008464:	d4e0      	bmi.n	8008428 <_fflush_r+0xc>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	059b      	lsls	r3, r3, #22
 800846a:	d4dd      	bmi.n	8008428 <_fflush_r+0xc>
 800846c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846e:	f7ff fd67 	bl	8007f40 <__retarget_lock_release_recursive>
 8008472:	e7d9      	b.n	8008428 <_fflush_r+0xc>
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <_fflush_r+0x70>)
 8008476:	429c      	cmp	r4, r3
 8008478:	d101      	bne.n	800847e <_fflush_r+0x62>
 800847a:	68ac      	ldr	r4, [r5, #8]
 800847c:	e7df      	b.n	800843e <_fflush_r+0x22>
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <_fflush_r+0x74>)
 8008480:	429c      	cmp	r4, r3
 8008482:	bf08      	it	eq
 8008484:	68ec      	ldreq	r4, [r5, #12]
 8008486:	e7da      	b.n	800843e <_fflush_r+0x22>
 8008488:	08009330 	.word	0x08009330
 800848c:	08009350 	.word	0x08009350
 8008490:	08009310 	.word	0x08009310

08008494 <_lseek_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d07      	ldr	r5, [pc, #28]	; (80084b4 <_lseek_r+0x20>)
 8008498:	4604      	mov	r4, r0
 800849a:	4608      	mov	r0, r1
 800849c:	4611      	mov	r1, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	602a      	str	r2, [r5, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f7f8 fe66 	bl	8001174 <_lseek>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_lseek_r+0x1e>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_lseek_r+0x1e>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	20004274 	.word	0x20004274

080084b8 <__malloc_lock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__malloc_lock+0x8>)
 80084ba:	f7ff bd40 	b.w	8007f3e <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	20004268 	.word	0x20004268

080084c4 <__malloc_unlock>:
 80084c4:	4801      	ldr	r0, [pc, #4]	; (80084cc <__malloc_unlock+0x8>)
 80084c6:	f7ff bd3b 	b.w	8007f40 <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	20004268 	.word	0x20004268

080084d0 <_free_r>:
 80084d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084d2:	2900      	cmp	r1, #0
 80084d4:	d044      	beq.n	8008560 <_free_r+0x90>
 80084d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084da:	9001      	str	r0, [sp, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f1a1 0404 	sub.w	r4, r1, #4
 80084e2:	bfb8      	it	lt
 80084e4:	18e4      	addlt	r4, r4, r3
 80084e6:	f7ff ffe7 	bl	80084b8 <__malloc_lock>
 80084ea:	4a1e      	ldr	r2, [pc, #120]	; (8008564 <_free_r+0x94>)
 80084ec:	9801      	ldr	r0, [sp, #4]
 80084ee:	6813      	ldr	r3, [r2, #0]
 80084f0:	b933      	cbnz	r3, 8008500 <_free_r+0x30>
 80084f2:	6063      	str	r3, [r4, #4]
 80084f4:	6014      	str	r4, [r2, #0]
 80084f6:	b003      	add	sp, #12
 80084f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084fc:	f7ff bfe2 	b.w	80084c4 <__malloc_unlock>
 8008500:	42a3      	cmp	r3, r4
 8008502:	d908      	bls.n	8008516 <_free_r+0x46>
 8008504:	6825      	ldr	r5, [r4, #0]
 8008506:	1961      	adds	r1, r4, r5
 8008508:	428b      	cmp	r3, r1
 800850a:	bf01      	itttt	eq
 800850c:	6819      	ldreq	r1, [r3, #0]
 800850e:	685b      	ldreq	r3, [r3, #4]
 8008510:	1949      	addeq	r1, r1, r5
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	e7ed      	b.n	80084f2 <_free_r+0x22>
 8008516:	461a      	mov	r2, r3
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	b10b      	cbz	r3, 8008520 <_free_r+0x50>
 800851c:	42a3      	cmp	r3, r4
 800851e:	d9fa      	bls.n	8008516 <_free_r+0x46>
 8008520:	6811      	ldr	r1, [r2, #0]
 8008522:	1855      	adds	r5, r2, r1
 8008524:	42a5      	cmp	r5, r4
 8008526:	d10b      	bne.n	8008540 <_free_r+0x70>
 8008528:	6824      	ldr	r4, [r4, #0]
 800852a:	4421      	add	r1, r4
 800852c:	1854      	adds	r4, r2, r1
 800852e:	42a3      	cmp	r3, r4
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	d1e0      	bne.n	80084f6 <_free_r+0x26>
 8008534:	681c      	ldr	r4, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	6053      	str	r3, [r2, #4]
 800853a:	4421      	add	r1, r4
 800853c:	6011      	str	r1, [r2, #0]
 800853e:	e7da      	b.n	80084f6 <_free_r+0x26>
 8008540:	d902      	bls.n	8008548 <_free_r+0x78>
 8008542:	230c      	movs	r3, #12
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	e7d6      	b.n	80084f6 <_free_r+0x26>
 8008548:	6825      	ldr	r5, [r4, #0]
 800854a:	1961      	adds	r1, r4, r5
 800854c:	428b      	cmp	r3, r1
 800854e:	bf04      	itt	eq
 8008550:	6819      	ldreq	r1, [r3, #0]
 8008552:	685b      	ldreq	r3, [r3, #4]
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	bf04      	itt	eq
 8008558:	1949      	addeq	r1, r1, r5
 800855a:	6021      	streq	r1, [r4, #0]
 800855c:	6054      	str	r4, [r2, #4]
 800855e:	e7ca      	b.n	80084f6 <_free_r+0x26>
 8008560:	b003      	add	sp, #12
 8008562:	bd30      	pop	{r4, r5, pc}
 8008564:	2000426c 	.word	0x2000426c

08008568 <__ssputs_r>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	688e      	ldr	r6, [r1, #8]
 800856e:	429e      	cmp	r6, r3
 8008570:	4682      	mov	sl, r0
 8008572:	460c      	mov	r4, r1
 8008574:	4690      	mov	r8, r2
 8008576:	461f      	mov	r7, r3
 8008578:	d838      	bhi.n	80085ec <__ssputs_r+0x84>
 800857a:	898a      	ldrh	r2, [r1, #12]
 800857c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008580:	d032      	beq.n	80085e8 <__ssputs_r+0x80>
 8008582:	6825      	ldr	r5, [r4, #0]
 8008584:	6909      	ldr	r1, [r1, #16]
 8008586:	eba5 0901 	sub.w	r9, r5, r1
 800858a:	6965      	ldr	r5, [r4, #20]
 800858c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008594:	3301      	adds	r3, #1
 8008596:	444b      	add	r3, r9
 8008598:	106d      	asrs	r5, r5, #1
 800859a:	429d      	cmp	r5, r3
 800859c:	bf38      	it	cc
 800859e:	461d      	movcc	r5, r3
 80085a0:	0553      	lsls	r3, r2, #21
 80085a2:	d531      	bpl.n	8008608 <__ssputs_r+0xa0>
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7ff fd13 	bl	8007fd0 <_malloc_r>
 80085aa:	4606      	mov	r6, r0
 80085ac:	b950      	cbnz	r0, 80085c4 <__ssputs_r+0x5c>
 80085ae:	230c      	movs	r3, #12
 80085b0:	f8ca 3000 	str.w	r3, [sl]
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c4:	6921      	ldr	r1, [r4, #16]
 80085c6:	464a      	mov	r2, r9
 80085c8:	f7ff fccb 	bl	8007f62 <memcpy>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	6126      	str	r6, [r4, #16]
 80085da:	6165      	str	r5, [r4, #20]
 80085dc:	444e      	add	r6, r9
 80085de:	eba5 0509 	sub.w	r5, r5, r9
 80085e2:	6026      	str	r6, [r4, #0]
 80085e4:	60a5      	str	r5, [r4, #8]
 80085e6:	463e      	mov	r6, r7
 80085e8:	42be      	cmp	r6, r7
 80085ea:	d900      	bls.n	80085ee <__ssputs_r+0x86>
 80085ec:	463e      	mov	r6, r7
 80085ee:	6820      	ldr	r0, [r4, #0]
 80085f0:	4632      	mov	r2, r6
 80085f2:	4641      	mov	r1, r8
 80085f4:	f000 fd3a 	bl	800906c <memmove>
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	1b9b      	subs	r3, r3, r6
 80085fc:	60a3      	str	r3, [r4, #8]
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	4433      	add	r3, r6
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	2000      	movs	r0, #0
 8008606:	e7db      	b.n	80085c0 <__ssputs_r+0x58>
 8008608:	462a      	mov	r2, r5
 800860a:	f000 fd49 	bl	80090a0 <_realloc_r>
 800860e:	4606      	mov	r6, r0
 8008610:	2800      	cmp	r0, #0
 8008612:	d1e1      	bne.n	80085d8 <__ssputs_r+0x70>
 8008614:	6921      	ldr	r1, [r4, #16]
 8008616:	4650      	mov	r0, sl
 8008618:	f7ff ff5a 	bl	80084d0 <_free_r>
 800861c:	e7c7      	b.n	80085ae <__ssputs_r+0x46>
	...

08008620 <_svfiprintf_r>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	4698      	mov	r8, r3
 8008626:	898b      	ldrh	r3, [r1, #12]
 8008628:	061b      	lsls	r3, r3, #24
 800862a:	b09d      	sub	sp, #116	; 0x74
 800862c:	4607      	mov	r7, r0
 800862e:	460d      	mov	r5, r1
 8008630:	4614      	mov	r4, r2
 8008632:	d50e      	bpl.n	8008652 <_svfiprintf_r+0x32>
 8008634:	690b      	ldr	r3, [r1, #16]
 8008636:	b963      	cbnz	r3, 8008652 <_svfiprintf_r+0x32>
 8008638:	2140      	movs	r1, #64	; 0x40
 800863a:	f7ff fcc9 	bl	8007fd0 <_malloc_r>
 800863e:	6028      	str	r0, [r5, #0]
 8008640:	6128      	str	r0, [r5, #16]
 8008642:	b920      	cbnz	r0, 800864e <_svfiprintf_r+0x2e>
 8008644:	230c      	movs	r3, #12
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800864c:	e0d1      	b.n	80087f2 <_svfiprintf_r+0x1d2>
 800864e:	2340      	movs	r3, #64	; 0x40
 8008650:	616b      	str	r3, [r5, #20]
 8008652:	2300      	movs	r3, #0
 8008654:	9309      	str	r3, [sp, #36]	; 0x24
 8008656:	2320      	movs	r3, #32
 8008658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800865c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008660:	2330      	movs	r3, #48	; 0x30
 8008662:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800880c <_svfiprintf_r+0x1ec>
 8008666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800866a:	f04f 0901 	mov.w	r9, #1
 800866e:	4623      	mov	r3, r4
 8008670:	469a      	mov	sl, r3
 8008672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008676:	b10a      	cbz	r2, 800867c <_svfiprintf_r+0x5c>
 8008678:	2a25      	cmp	r2, #37	; 0x25
 800867a:	d1f9      	bne.n	8008670 <_svfiprintf_r+0x50>
 800867c:	ebba 0b04 	subs.w	fp, sl, r4
 8008680:	d00b      	beq.n	800869a <_svfiprintf_r+0x7a>
 8008682:	465b      	mov	r3, fp
 8008684:	4622      	mov	r2, r4
 8008686:	4629      	mov	r1, r5
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff ff6d 	bl	8008568 <__ssputs_r>
 800868e:	3001      	adds	r0, #1
 8008690:	f000 80aa 	beq.w	80087e8 <_svfiprintf_r+0x1c8>
 8008694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008696:	445a      	add	r2, fp
 8008698:	9209      	str	r2, [sp, #36]	; 0x24
 800869a:	f89a 3000 	ldrb.w	r3, [sl]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 80a2 	beq.w	80087e8 <_svfiprintf_r+0x1c8>
 80086a4:	2300      	movs	r3, #0
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ae:	f10a 0a01 	add.w	sl, sl, #1
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	9307      	str	r3, [sp, #28]
 80086b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ba:	931a      	str	r3, [sp, #104]	; 0x68
 80086bc:	4654      	mov	r4, sl
 80086be:	2205      	movs	r2, #5
 80086c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c4:	4851      	ldr	r0, [pc, #324]	; (800880c <_svfiprintf_r+0x1ec>)
 80086c6:	f7f7 fd8b 	bl	80001e0 <memchr>
 80086ca:	9a04      	ldr	r2, [sp, #16]
 80086cc:	b9d8      	cbnz	r0, 8008706 <_svfiprintf_r+0xe6>
 80086ce:	06d0      	lsls	r0, r2, #27
 80086d0:	bf44      	itt	mi
 80086d2:	2320      	movmi	r3, #32
 80086d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d8:	0711      	lsls	r1, r2, #28
 80086da:	bf44      	itt	mi
 80086dc:	232b      	movmi	r3, #43	; 0x2b
 80086de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e2:	f89a 3000 	ldrb.w	r3, [sl]
 80086e6:	2b2a      	cmp	r3, #42	; 0x2a
 80086e8:	d015      	beq.n	8008716 <_svfiprintf_r+0xf6>
 80086ea:	9a07      	ldr	r2, [sp, #28]
 80086ec:	4654      	mov	r4, sl
 80086ee:	2000      	movs	r0, #0
 80086f0:	f04f 0c0a 	mov.w	ip, #10
 80086f4:	4621      	mov	r1, r4
 80086f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086fa:	3b30      	subs	r3, #48	; 0x30
 80086fc:	2b09      	cmp	r3, #9
 80086fe:	d94e      	bls.n	800879e <_svfiprintf_r+0x17e>
 8008700:	b1b0      	cbz	r0, 8008730 <_svfiprintf_r+0x110>
 8008702:	9207      	str	r2, [sp, #28]
 8008704:	e014      	b.n	8008730 <_svfiprintf_r+0x110>
 8008706:	eba0 0308 	sub.w	r3, r0, r8
 800870a:	fa09 f303 	lsl.w	r3, r9, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	46a2      	mov	sl, r4
 8008714:	e7d2      	b.n	80086bc <_svfiprintf_r+0x9c>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	1d19      	adds	r1, r3, #4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	9103      	str	r1, [sp, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfbb      	ittet	lt
 8008722:	425b      	neglt	r3, r3
 8008724:	f042 0202 	orrlt.w	r2, r2, #2
 8008728:	9307      	strge	r3, [sp, #28]
 800872a:	9307      	strlt	r3, [sp, #28]
 800872c:	bfb8      	it	lt
 800872e:	9204      	strlt	r2, [sp, #16]
 8008730:	7823      	ldrb	r3, [r4, #0]
 8008732:	2b2e      	cmp	r3, #46	; 0x2e
 8008734:	d10c      	bne.n	8008750 <_svfiprintf_r+0x130>
 8008736:	7863      	ldrb	r3, [r4, #1]
 8008738:	2b2a      	cmp	r3, #42	; 0x2a
 800873a:	d135      	bne.n	80087a8 <_svfiprintf_r+0x188>
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	9203      	str	r2, [sp, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	bfb8      	it	lt
 8008748:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800874c:	3402      	adds	r4, #2
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800881c <_svfiprintf_r+0x1fc>
 8008754:	7821      	ldrb	r1, [r4, #0]
 8008756:	2203      	movs	r2, #3
 8008758:	4650      	mov	r0, sl
 800875a:	f7f7 fd41 	bl	80001e0 <memchr>
 800875e:	b140      	cbz	r0, 8008772 <_svfiprintf_r+0x152>
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	eba0 000a 	sub.w	r0, r0, sl
 8008766:	fa03 f000 	lsl.w	r0, r3, r0
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	4303      	orrs	r3, r0
 800876e:	3401      	adds	r4, #1
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008776:	4826      	ldr	r0, [pc, #152]	; (8008810 <_svfiprintf_r+0x1f0>)
 8008778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800877c:	2206      	movs	r2, #6
 800877e:	f7f7 fd2f 	bl	80001e0 <memchr>
 8008782:	2800      	cmp	r0, #0
 8008784:	d038      	beq.n	80087f8 <_svfiprintf_r+0x1d8>
 8008786:	4b23      	ldr	r3, [pc, #140]	; (8008814 <_svfiprintf_r+0x1f4>)
 8008788:	bb1b      	cbnz	r3, 80087d2 <_svfiprintf_r+0x1b2>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	3307      	adds	r3, #7
 800878e:	f023 0307 	bic.w	r3, r3, #7
 8008792:	3308      	adds	r3, #8
 8008794:	9303      	str	r3, [sp, #12]
 8008796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008798:	4433      	add	r3, r6
 800879a:	9309      	str	r3, [sp, #36]	; 0x24
 800879c:	e767      	b.n	800866e <_svfiprintf_r+0x4e>
 800879e:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a2:	460c      	mov	r4, r1
 80087a4:	2001      	movs	r0, #1
 80087a6:	e7a5      	b.n	80086f4 <_svfiprintf_r+0xd4>
 80087a8:	2300      	movs	r3, #0
 80087aa:	3401      	adds	r4, #1
 80087ac:	9305      	str	r3, [sp, #20]
 80087ae:	4619      	mov	r1, r3
 80087b0:	f04f 0c0a 	mov.w	ip, #10
 80087b4:	4620      	mov	r0, r4
 80087b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ba:	3a30      	subs	r2, #48	; 0x30
 80087bc:	2a09      	cmp	r2, #9
 80087be:	d903      	bls.n	80087c8 <_svfiprintf_r+0x1a8>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0c5      	beq.n	8008750 <_svfiprintf_r+0x130>
 80087c4:	9105      	str	r1, [sp, #20]
 80087c6:	e7c3      	b.n	8008750 <_svfiprintf_r+0x130>
 80087c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80087cc:	4604      	mov	r4, r0
 80087ce:	2301      	movs	r3, #1
 80087d0:	e7f0      	b.n	80087b4 <_svfiprintf_r+0x194>
 80087d2:	ab03      	add	r3, sp, #12
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	462a      	mov	r2, r5
 80087d8:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <_svfiprintf_r+0x1f8>)
 80087da:	a904      	add	r1, sp, #16
 80087dc:	4638      	mov	r0, r7
 80087de:	f3af 8000 	nop.w
 80087e2:	1c42      	adds	r2, r0, #1
 80087e4:	4606      	mov	r6, r0
 80087e6:	d1d6      	bne.n	8008796 <_svfiprintf_r+0x176>
 80087e8:	89ab      	ldrh	r3, [r5, #12]
 80087ea:	065b      	lsls	r3, r3, #25
 80087ec:	f53f af2c 	bmi.w	8008648 <_svfiprintf_r+0x28>
 80087f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087f2:	b01d      	add	sp, #116	; 0x74
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	ab03      	add	r3, sp, #12
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	462a      	mov	r2, r5
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <_svfiprintf_r+0x1f8>)
 8008800:	a904      	add	r1, sp, #16
 8008802:	4638      	mov	r0, r7
 8008804:	f000 f9d4 	bl	8008bb0 <_printf_i>
 8008808:	e7eb      	b.n	80087e2 <_svfiprintf_r+0x1c2>
 800880a:	bf00      	nop
 800880c:	08009374 	.word	0x08009374
 8008810:	0800937e 	.word	0x0800937e
 8008814:	00000000 	.word	0x00000000
 8008818:	08008569 	.word	0x08008569
 800881c:	0800937a 	.word	0x0800937a

08008820 <__sfputc_r>:
 8008820:	6893      	ldr	r3, [r2, #8]
 8008822:	3b01      	subs	r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	b410      	push	{r4}
 8008828:	6093      	str	r3, [r2, #8]
 800882a:	da08      	bge.n	800883e <__sfputc_r+0x1e>
 800882c:	6994      	ldr	r4, [r2, #24]
 800882e:	42a3      	cmp	r3, r4
 8008830:	db01      	blt.n	8008836 <__sfputc_r+0x16>
 8008832:	290a      	cmp	r1, #10
 8008834:	d103      	bne.n	800883e <__sfputc_r+0x1e>
 8008836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883a:	f000 baf1 	b.w	8008e20 <__swbuf_r>
 800883e:	6813      	ldr	r3, [r2, #0]
 8008840:	1c58      	adds	r0, r3, #1
 8008842:	6010      	str	r0, [r2, #0]
 8008844:	7019      	strb	r1, [r3, #0]
 8008846:	4608      	mov	r0, r1
 8008848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800884c:	4770      	bx	lr

0800884e <__sfputs_r>:
 800884e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008850:	4606      	mov	r6, r0
 8008852:	460f      	mov	r7, r1
 8008854:	4614      	mov	r4, r2
 8008856:	18d5      	adds	r5, r2, r3
 8008858:	42ac      	cmp	r4, r5
 800885a:	d101      	bne.n	8008860 <__sfputs_r+0x12>
 800885c:	2000      	movs	r0, #0
 800885e:	e007      	b.n	8008870 <__sfputs_r+0x22>
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	463a      	mov	r2, r7
 8008866:	4630      	mov	r0, r6
 8008868:	f7ff ffda 	bl	8008820 <__sfputc_r>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d1f3      	bne.n	8008858 <__sfputs_r+0xa>
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008874 <_vfiprintf_r>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	460d      	mov	r5, r1
 800887a:	b09d      	sub	sp, #116	; 0x74
 800887c:	4614      	mov	r4, r2
 800887e:	4698      	mov	r8, r3
 8008880:	4606      	mov	r6, r0
 8008882:	b118      	cbz	r0, 800888c <_vfiprintf_r+0x18>
 8008884:	6983      	ldr	r3, [r0, #24]
 8008886:	b90b      	cbnz	r3, 800888c <_vfiprintf_r+0x18>
 8008888:	f7ff fa96 	bl	8007db8 <__sinit>
 800888c:	4b89      	ldr	r3, [pc, #548]	; (8008ab4 <_vfiprintf_r+0x240>)
 800888e:	429d      	cmp	r5, r3
 8008890:	d11b      	bne.n	80088ca <_vfiprintf_r+0x56>
 8008892:	6875      	ldr	r5, [r6, #4]
 8008894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008896:	07d9      	lsls	r1, r3, #31
 8008898:	d405      	bmi.n	80088a6 <_vfiprintf_r+0x32>
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	059a      	lsls	r2, r3, #22
 800889e:	d402      	bmi.n	80088a6 <_vfiprintf_r+0x32>
 80088a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a2:	f7ff fb4c 	bl	8007f3e <__retarget_lock_acquire_recursive>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	071b      	lsls	r3, r3, #28
 80088aa:	d501      	bpl.n	80088b0 <_vfiprintf_r+0x3c>
 80088ac:	692b      	ldr	r3, [r5, #16]
 80088ae:	b9eb      	cbnz	r3, 80088ec <_vfiprintf_r+0x78>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 fb06 	bl	8008ec4 <__swsetup_r>
 80088b8:	b1c0      	cbz	r0, 80088ec <_vfiprintf_r+0x78>
 80088ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088bc:	07dc      	lsls	r4, r3, #31
 80088be:	d50e      	bpl.n	80088de <_vfiprintf_r+0x6a>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088c4:	b01d      	add	sp, #116	; 0x74
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	4b7b      	ldr	r3, [pc, #492]	; (8008ab8 <_vfiprintf_r+0x244>)
 80088cc:	429d      	cmp	r5, r3
 80088ce:	d101      	bne.n	80088d4 <_vfiprintf_r+0x60>
 80088d0:	68b5      	ldr	r5, [r6, #8]
 80088d2:	e7df      	b.n	8008894 <_vfiprintf_r+0x20>
 80088d4:	4b79      	ldr	r3, [pc, #484]	; (8008abc <_vfiprintf_r+0x248>)
 80088d6:	429d      	cmp	r5, r3
 80088d8:	bf08      	it	eq
 80088da:	68f5      	ldreq	r5, [r6, #12]
 80088dc:	e7da      	b.n	8008894 <_vfiprintf_r+0x20>
 80088de:	89ab      	ldrh	r3, [r5, #12]
 80088e0:	0598      	lsls	r0, r3, #22
 80088e2:	d4ed      	bmi.n	80088c0 <_vfiprintf_r+0x4c>
 80088e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e6:	f7ff fb2b 	bl	8007f40 <__retarget_lock_release_recursive>
 80088ea:	e7e9      	b.n	80088c0 <_vfiprintf_r+0x4c>
 80088ec:	2300      	movs	r3, #0
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	2320      	movs	r3, #32
 80088f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088fa:	2330      	movs	r3, #48	; 0x30
 80088fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ac0 <_vfiprintf_r+0x24c>
 8008900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008904:	f04f 0901 	mov.w	r9, #1
 8008908:	4623      	mov	r3, r4
 800890a:	469a      	mov	sl, r3
 800890c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008910:	b10a      	cbz	r2, 8008916 <_vfiprintf_r+0xa2>
 8008912:	2a25      	cmp	r2, #37	; 0x25
 8008914:	d1f9      	bne.n	800890a <_vfiprintf_r+0x96>
 8008916:	ebba 0b04 	subs.w	fp, sl, r4
 800891a:	d00b      	beq.n	8008934 <_vfiprintf_r+0xc0>
 800891c:	465b      	mov	r3, fp
 800891e:	4622      	mov	r2, r4
 8008920:	4629      	mov	r1, r5
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ff93 	bl	800884e <__sfputs_r>
 8008928:	3001      	adds	r0, #1
 800892a:	f000 80aa 	beq.w	8008a82 <_vfiprintf_r+0x20e>
 800892e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008930:	445a      	add	r2, fp
 8008932:	9209      	str	r2, [sp, #36]	; 0x24
 8008934:	f89a 3000 	ldrb.w	r3, [sl]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80a2 	beq.w	8008a82 <_vfiprintf_r+0x20e>
 800893e:	2300      	movs	r3, #0
 8008940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008948:	f10a 0a01 	add.w	sl, sl, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008954:	931a      	str	r3, [sp, #104]	; 0x68
 8008956:	4654      	mov	r4, sl
 8008958:	2205      	movs	r2, #5
 800895a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895e:	4858      	ldr	r0, [pc, #352]	; (8008ac0 <_vfiprintf_r+0x24c>)
 8008960:	f7f7 fc3e 	bl	80001e0 <memchr>
 8008964:	9a04      	ldr	r2, [sp, #16]
 8008966:	b9d8      	cbnz	r0, 80089a0 <_vfiprintf_r+0x12c>
 8008968:	06d1      	lsls	r1, r2, #27
 800896a:	bf44      	itt	mi
 800896c:	2320      	movmi	r3, #32
 800896e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008972:	0713      	lsls	r3, r2, #28
 8008974:	bf44      	itt	mi
 8008976:	232b      	movmi	r3, #43	; 0x2b
 8008978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897c:	f89a 3000 	ldrb.w	r3, [sl]
 8008980:	2b2a      	cmp	r3, #42	; 0x2a
 8008982:	d015      	beq.n	80089b0 <_vfiprintf_r+0x13c>
 8008984:	9a07      	ldr	r2, [sp, #28]
 8008986:	4654      	mov	r4, sl
 8008988:	2000      	movs	r0, #0
 800898a:	f04f 0c0a 	mov.w	ip, #10
 800898e:	4621      	mov	r1, r4
 8008990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008994:	3b30      	subs	r3, #48	; 0x30
 8008996:	2b09      	cmp	r3, #9
 8008998:	d94e      	bls.n	8008a38 <_vfiprintf_r+0x1c4>
 800899a:	b1b0      	cbz	r0, 80089ca <_vfiprintf_r+0x156>
 800899c:	9207      	str	r2, [sp, #28]
 800899e:	e014      	b.n	80089ca <_vfiprintf_r+0x156>
 80089a0:	eba0 0308 	sub.w	r3, r0, r8
 80089a4:	fa09 f303 	lsl.w	r3, r9, r3
 80089a8:	4313      	orrs	r3, r2
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	46a2      	mov	sl, r4
 80089ae:	e7d2      	b.n	8008956 <_vfiprintf_r+0xe2>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	1d19      	adds	r1, r3, #4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	9103      	str	r1, [sp, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bfbb      	ittet	lt
 80089bc:	425b      	neglt	r3, r3
 80089be:	f042 0202 	orrlt.w	r2, r2, #2
 80089c2:	9307      	strge	r3, [sp, #28]
 80089c4:	9307      	strlt	r3, [sp, #28]
 80089c6:	bfb8      	it	lt
 80089c8:	9204      	strlt	r2, [sp, #16]
 80089ca:	7823      	ldrb	r3, [r4, #0]
 80089cc:	2b2e      	cmp	r3, #46	; 0x2e
 80089ce:	d10c      	bne.n	80089ea <_vfiprintf_r+0x176>
 80089d0:	7863      	ldrb	r3, [r4, #1]
 80089d2:	2b2a      	cmp	r3, #42	; 0x2a
 80089d4:	d135      	bne.n	8008a42 <_vfiprintf_r+0x1ce>
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	1d1a      	adds	r2, r3, #4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	9203      	str	r2, [sp, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089e6:	3402      	adds	r4, #2
 80089e8:	9305      	str	r3, [sp, #20]
 80089ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ad0 <_vfiprintf_r+0x25c>
 80089ee:	7821      	ldrb	r1, [r4, #0]
 80089f0:	2203      	movs	r2, #3
 80089f2:	4650      	mov	r0, sl
 80089f4:	f7f7 fbf4 	bl	80001e0 <memchr>
 80089f8:	b140      	cbz	r0, 8008a0c <_vfiprintf_r+0x198>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	eba0 000a 	sub.w	r0, r0, sl
 8008a00:	fa03 f000 	lsl.w	r0, r3, r0
 8008a04:	9b04      	ldr	r3, [sp, #16]
 8008a06:	4303      	orrs	r3, r0
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a10:	482c      	ldr	r0, [pc, #176]	; (8008ac4 <_vfiprintf_r+0x250>)
 8008a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a16:	2206      	movs	r2, #6
 8008a18:	f7f7 fbe2 	bl	80001e0 <memchr>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d03f      	beq.n	8008aa0 <_vfiprintf_r+0x22c>
 8008a20:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <_vfiprintf_r+0x254>)
 8008a22:	bb1b      	cbnz	r3, 8008a6c <_vfiprintf_r+0x1f8>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	3307      	adds	r3, #7
 8008a28:	f023 0307 	bic.w	r3, r3, #7
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a32:	443b      	add	r3, r7
 8008a34:	9309      	str	r3, [sp, #36]	; 0x24
 8008a36:	e767      	b.n	8008908 <_vfiprintf_r+0x94>
 8008a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	2001      	movs	r0, #1
 8008a40:	e7a5      	b.n	800898e <_vfiprintf_r+0x11a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	3401      	adds	r4, #1
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f04f 0c0a 	mov.w	ip, #10
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a54:	3a30      	subs	r2, #48	; 0x30
 8008a56:	2a09      	cmp	r2, #9
 8008a58:	d903      	bls.n	8008a62 <_vfiprintf_r+0x1ee>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0c5      	beq.n	80089ea <_vfiprintf_r+0x176>
 8008a5e:	9105      	str	r1, [sp, #20]
 8008a60:	e7c3      	b.n	80089ea <_vfiprintf_r+0x176>
 8008a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a66:	4604      	mov	r4, r0
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e7f0      	b.n	8008a4e <_vfiprintf_r+0x1da>
 8008a6c:	ab03      	add	r3, sp, #12
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	462a      	mov	r2, r5
 8008a72:	4b16      	ldr	r3, [pc, #88]	; (8008acc <_vfiprintf_r+0x258>)
 8008a74:	a904      	add	r1, sp, #16
 8008a76:	4630      	mov	r0, r6
 8008a78:	f3af 8000 	nop.w
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	1c78      	adds	r0, r7, #1
 8008a80:	d1d6      	bne.n	8008a30 <_vfiprintf_r+0x1bc>
 8008a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a84:	07d9      	lsls	r1, r3, #31
 8008a86:	d405      	bmi.n	8008a94 <_vfiprintf_r+0x220>
 8008a88:	89ab      	ldrh	r3, [r5, #12]
 8008a8a:	059a      	lsls	r2, r3, #22
 8008a8c:	d402      	bmi.n	8008a94 <_vfiprintf_r+0x220>
 8008a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a90:	f7ff fa56 	bl	8007f40 <__retarget_lock_release_recursive>
 8008a94:	89ab      	ldrh	r3, [r5, #12]
 8008a96:	065b      	lsls	r3, r3, #25
 8008a98:	f53f af12 	bmi.w	80088c0 <_vfiprintf_r+0x4c>
 8008a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a9e:	e711      	b.n	80088c4 <_vfiprintf_r+0x50>
 8008aa0:	ab03      	add	r3, sp, #12
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <_vfiprintf_r+0x258>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f000 f880 	bl	8008bb0 <_printf_i>
 8008ab0:	e7e4      	b.n	8008a7c <_vfiprintf_r+0x208>
 8008ab2:	bf00      	nop
 8008ab4:	08009330 	.word	0x08009330
 8008ab8:	08009350 	.word	0x08009350
 8008abc:	08009310 	.word	0x08009310
 8008ac0:	08009374 	.word	0x08009374
 8008ac4:	0800937e 	.word	0x0800937e
 8008ac8:	00000000 	.word	0x00000000
 8008acc:	0800884f 	.word	0x0800884f
 8008ad0:	0800937a 	.word	0x0800937a

08008ad4 <_printf_common>:
 8008ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	4616      	mov	r6, r2
 8008ada:	4699      	mov	r9, r3
 8008adc:	688a      	ldr	r2, [r1, #8]
 8008ade:	690b      	ldr	r3, [r1, #16]
 8008ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	bfb8      	it	lt
 8008ae8:	4613      	movlt	r3, r2
 8008aea:	6033      	str	r3, [r6, #0]
 8008aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008af0:	4607      	mov	r7, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	b10a      	cbz	r2, 8008afa <_printf_common+0x26>
 8008af6:	3301      	adds	r3, #1
 8008af8:	6033      	str	r3, [r6, #0]
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	0699      	lsls	r1, r3, #26
 8008afe:	bf42      	ittt	mi
 8008b00:	6833      	ldrmi	r3, [r6, #0]
 8008b02:	3302      	addmi	r3, #2
 8008b04:	6033      	strmi	r3, [r6, #0]
 8008b06:	6825      	ldr	r5, [r4, #0]
 8008b08:	f015 0506 	ands.w	r5, r5, #6
 8008b0c:	d106      	bne.n	8008b1c <_printf_common+0x48>
 8008b0e:	f104 0a19 	add.w	sl, r4, #25
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	6832      	ldr	r2, [r6, #0]
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dc26      	bgt.n	8008b6a <_printf_common+0x96>
 8008b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b20:	1e13      	subs	r3, r2, #0
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	bf18      	it	ne
 8008b26:	2301      	movne	r3, #1
 8008b28:	0692      	lsls	r2, r2, #26
 8008b2a:	d42b      	bmi.n	8008b84 <_printf_common+0xb0>
 8008b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b30:	4649      	mov	r1, r9
 8008b32:	4638      	mov	r0, r7
 8008b34:	47c0      	blx	r8
 8008b36:	3001      	adds	r0, #1
 8008b38:	d01e      	beq.n	8008b78 <_printf_common+0xa4>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	68e5      	ldr	r5, [r4, #12]
 8008b3e:	6832      	ldr	r2, [r6, #0]
 8008b40:	f003 0306 	and.w	r3, r3, #6
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	bf08      	it	eq
 8008b48:	1aad      	subeq	r5, r5, r2
 8008b4a:	68a3      	ldr	r3, [r4, #8]
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	bf0c      	ite	eq
 8008b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b54:	2500      	movne	r5, #0
 8008b56:	4293      	cmp	r3, r2
 8008b58:	bfc4      	itt	gt
 8008b5a:	1a9b      	subgt	r3, r3, r2
 8008b5c:	18ed      	addgt	r5, r5, r3
 8008b5e:	2600      	movs	r6, #0
 8008b60:	341a      	adds	r4, #26
 8008b62:	42b5      	cmp	r5, r6
 8008b64:	d11a      	bne.n	8008b9c <_printf_common+0xc8>
 8008b66:	2000      	movs	r0, #0
 8008b68:	e008      	b.n	8008b7c <_printf_common+0xa8>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	4649      	mov	r1, r9
 8008b70:	4638      	mov	r0, r7
 8008b72:	47c0      	blx	r8
 8008b74:	3001      	adds	r0, #1
 8008b76:	d103      	bne.n	8008b80 <_printf_common+0xac>
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b80:	3501      	adds	r5, #1
 8008b82:	e7c6      	b.n	8008b12 <_printf_common+0x3e>
 8008b84:	18e1      	adds	r1, r4, r3
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	2030      	movs	r0, #48	; 0x30
 8008b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b8e:	4422      	add	r2, r4
 8008b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b98:	3302      	adds	r3, #2
 8008b9a:	e7c7      	b.n	8008b2c <_printf_common+0x58>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	47c0      	blx	r8
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d0e6      	beq.n	8008b78 <_printf_common+0xa4>
 8008baa:	3601      	adds	r6, #1
 8008bac:	e7d9      	b.n	8008b62 <_printf_common+0x8e>
	...

08008bb0 <_printf_i>:
 8008bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	7e0f      	ldrb	r7, [r1, #24]
 8008bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bb8:	2f78      	cmp	r7, #120	; 0x78
 8008bba:	4691      	mov	r9, r2
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	469a      	mov	sl, r3
 8008bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bc6:	d807      	bhi.n	8008bd8 <_printf_i+0x28>
 8008bc8:	2f62      	cmp	r7, #98	; 0x62
 8008bca:	d80a      	bhi.n	8008be2 <_printf_i+0x32>
 8008bcc:	2f00      	cmp	r7, #0
 8008bce:	f000 80d8 	beq.w	8008d82 <_printf_i+0x1d2>
 8008bd2:	2f58      	cmp	r7, #88	; 0x58
 8008bd4:	f000 80a3 	beq.w	8008d1e <_printf_i+0x16e>
 8008bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008be0:	e03a      	b.n	8008c58 <_printf_i+0xa8>
 8008be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008be6:	2b15      	cmp	r3, #21
 8008be8:	d8f6      	bhi.n	8008bd8 <_printf_i+0x28>
 8008bea:	a101      	add	r1, pc, #4	; (adr r1, 8008bf0 <_printf_i+0x40>)
 8008bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bf0:	08008c49 	.word	0x08008c49
 8008bf4:	08008c5d 	.word	0x08008c5d
 8008bf8:	08008bd9 	.word	0x08008bd9
 8008bfc:	08008bd9 	.word	0x08008bd9
 8008c00:	08008bd9 	.word	0x08008bd9
 8008c04:	08008bd9 	.word	0x08008bd9
 8008c08:	08008c5d 	.word	0x08008c5d
 8008c0c:	08008bd9 	.word	0x08008bd9
 8008c10:	08008bd9 	.word	0x08008bd9
 8008c14:	08008bd9 	.word	0x08008bd9
 8008c18:	08008bd9 	.word	0x08008bd9
 8008c1c:	08008d69 	.word	0x08008d69
 8008c20:	08008c8d 	.word	0x08008c8d
 8008c24:	08008d4b 	.word	0x08008d4b
 8008c28:	08008bd9 	.word	0x08008bd9
 8008c2c:	08008bd9 	.word	0x08008bd9
 8008c30:	08008d8b 	.word	0x08008d8b
 8008c34:	08008bd9 	.word	0x08008bd9
 8008c38:	08008c8d 	.word	0x08008c8d
 8008c3c:	08008bd9 	.word	0x08008bd9
 8008c40:	08008bd9 	.word	0x08008bd9
 8008c44:	08008d53 	.word	0x08008d53
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	1d1a      	adds	r2, r3, #4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	602a      	str	r2, [r5, #0]
 8008c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e0a3      	b.n	8008da4 <_printf_i+0x1f4>
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	6829      	ldr	r1, [r5, #0]
 8008c60:	0606      	lsls	r6, r0, #24
 8008c62:	f101 0304 	add.w	r3, r1, #4
 8008c66:	d50a      	bpl.n	8008c7e <_printf_i+0xce>
 8008c68:	680e      	ldr	r6, [r1, #0]
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	2e00      	cmp	r6, #0
 8008c6e:	da03      	bge.n	8008c78 <_printf_i+0xc8>
 8008c70:	232d      	movs	r3, #45	; 0x2d
 8008c72:	4276      	negs	r6, r6
 8008c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c78:	485e      	ldr	r0, [pc, #376]	; (8008df4 <_printf_i+0x244>)
 8008c7a:	230a      	movs	r3, #10
 8008c7c:	e019      	b.n	8008cb2 <_printf_i+0x102>
 8008c7e:	680e      	ldr	r6, [r1, #0]
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c86:	bf18      	it	ne
 8008c88:	b236      	sxthne	r6, r6
 8008c8a:	e7ef      	b.n	8008c6c <_printf_i+0xbc>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	6820      	ldr	r0, [r4, #0]
 8008c90:	1d19      	adds	r1, r3, #4
 8008c92:	6029      	str	r1, [r5, #0]
 8008c94:	0601      	lsls	r1, r0, #24
 8008c96:	d501      	bpl.n	8008c9c <_printf_i+0xec>
 8008c98:	681e      	ldr	r6, [r3, #0]
 8008c9a:	e002      	b.n	8008ca2 <_printf_i+0xf2>
 8008c9c:	0646      	lsls	r6, r0, #25
 8008c9e:	d5fb      	bpl.n	8008c98 <_printf_i+0xe8>
 8008ca0:	881e      	ldrh	r6, [r3, #0]
 8008ca2:	4854      	ldr	r0, [pc, #336]	; (8008df4 <_printf_i+0x244>)
 8008ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2308      	moveq	r3, #8
 8008caa:	230a      	movne	r3, #10
 8008cac:	2100      	movs	r1, #0
 8008cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cb2:	6865      	ldr	r5, [r4, #4]
 8008cb4:	60a5      	str	r5, [r4, #8]
 8008cb6:	2d00      	cmp	r5, #0
 8008cb8:	bfa2      	ittt	ge
 8008cba:	6821      	ldrge	r1, [r4, #0]
 8008cbc:	f021 0104 	bicge.w	r1, r1, #4
 8008cc0:	6021      	strge	r1, [r4, #0]
 8008cc2:	b90e      	cbnz	r6, 8008cc8 <_printf_i+0x118>
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	d04d      	beq.n	8008d64 <_printf_i+0x1b4>
 8008cc8:	4615      	mov	r5, r2
 8008cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cce:	fb03 6711 	mls	r7, r3, r1, r6
 8008cd2:	5dc7      	ldrb	r7, [r0, r7]
 8008cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cd8:	4637      	mov	r7, r6
 8008cda:	42bb      	cmp	r3, r7
 8008cdc:	460e      	mov	r6, r1
 8008cde:	d9f4      	bls.n	8008cca <_printf_i+0x11a>
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d10b      	bne.n	8008cfc <_printf_i+0x14c>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	07de      	lsls	r6, r3, #31
 8008ce8:	d508      	bpl.n	8008cfc <_printf_i+0x14c>
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	bfde      	ittt	le
 8008cf2:	2330      	movle	r3, #48	; 0x30
 8008cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008cfc:	1b52      	subs	r2, r2, r5
 8008cfe:	6122      	str	r2, [r4, #16]
 8008d00:	f8cd a000 	str.w	sl, [sp]
 8008d04:	464b      	mov	r3, r9
 8008d06:	aa03      	add	r2, sp, #12
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	f7ff fee2 	bl	8008ad4 <_printf_common>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d14c      	bne.n	8008dae <_printf_i+0x1fe>
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d18:	b004      	add	sp, #16
 8008d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1e:	4835      	ldr	r0, [pc, #212]	; (8008df4 <_printf_i+0x244>)
 8008d20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d24:	6829      	ldr	r1, [r5, #0]
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d2c:	6029      	str	r1, [r5, #0]
 8008d2e:	061d      	lsls	r5, r3, #24
 8008d30:	d514      	bpl.n	8008d5c <_printf_i+0x1ac>
 8008d32:	07df      	lsls	r7, r3, #31
 8008d34:	bf44      	itt	mi
 8008d36:	f043 0320 	orrmi.w	r3, r3, #32
 8008d3a:	6023      	strmi	r3, [r4, #0]
 8008d3c:	b91e      	cbnz	r6, 8008d46 <_printf_i+0x196>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	f023 0320 	bic.w	r3, r3, #32
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	2310      	movs	r3, #16
 8008d48:	e7b0      	b.n	8008cac <_printf_i+0xfc>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	f043 0320 	orr.w	r3, r3, #32
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	2378      	movs	r3, #120	; 0x78
 8008d54:	4828      	ldr	r0, [pc, #160]	; (8008df8 <_printf_i+0x248>)
 8008d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d5a:	e7e3      	b.n	8008d24 <_printf_i+0x174>
 8008d5c:	0659      	lsls	r1, r3, #25
 8008d5e:	bf48      	it	mi
 8008d60:	b2b6      	uxthmi	r6, r6
 8008d62:	e7e6      	b.n	8008d32 <_printf_i+0x182>
 8008d64:	4615      	mov	r5, r2
 8008d66:	e7bb      	b.n	8008ce0 <_printf_i+0x130>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	6826      	ldr	r6, [r4, #0]
 8008d6c:	6961      	ldr	r1, [r4, #20]
 8008d6e:	1d18      	adds	r0, r3, #4
 8008d70:	6028      	str	r0, [r5, #0]
 8008d72:	0635      	lsls	r5, r6, #24
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	d501      	bpl.n	8008d7c <_printf_i+0x1cc>
 8008d78:	6019      	str	r1, [r3, #0]
 8008d7a:	e002      	b.n	8008d82 <_printf_i+0x1d2>
 8008d7c:	0670      	lsls	r0, r6, #25
 8008d7e:	d5fb      	bpl.n	8008d78 <_printf_i+0x1c8>
 8008d80:	8019      	strh	r1, [r3, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	6123      	str	r3, [r4, #16]
 8008d86:	4615      	mov	r5, r2
 8008d88:	e7ba      	b.n	8008d00 <_printf_i+0x150>
 8008d8a:	682b      	ldr	r3, [r5, #0]
 8008d8c:	1d1a      	adds	r2, r3, #4
 8008d8e:	602a      	str	r2, [r5, #0]
 8008d90:	681d      	ldr	r5, [r3, #0]
 8008d92:	6862      	ldr	r2, [r4, #4]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4628      	mov	r0, r5
 8008d98:	f7f7 fa22 	bl	80001e0 <memchr>
 8008d9c:	b108      	cbz	r0, 8008da2 <_printf_i+0x1f2>
 8008d9e:	1b40      	subs	r0, r0, r5
 8008da0:	6060      	str	r0, [r4, #4]
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	2300      	movs	r3, #0
 8008da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dac:	e7a8      	b.n	8008d00 <_printf_i+0x150>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	462a      	mov	r2, r5
 8008db2:	4649      	mov	r1, r9
 8008db4:	4640      	mov	r0, r8
 8008db6:	47d0      	blx	sl
 8008db8:	3001      	adds	r0, #1
 8008dba:	d0ab      	beq.n	8008d14 <_printf_i+0x164>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	079b      	lsls	r3, r3, #30
 8008dc0:	d413      	bmi.n	8008dea <_printf_i+0x23a>
 8008dc2:	68e0      	ldr	r0, [r4, #12]
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	4298      	cmp	r0, r3
 8008dc8:	bfb8      	it	lt
 8008dca:	4618      	movlt	r0, r3
 8008dcc:	e7a4      	b.n	8008d18 <_printf_i+0x168>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	47d0      	blx	sl
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d09b      	beq.n	8008d14 <_printf_i+0x164>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	9903      	ldr	r1, [sp, #12]
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dcf2      	bgt.n	8008dce <_printf_i+0x21e>
 8008de8:	e7eb      	b.n	8008dc2 <_printf_i+0x212>
 8008dea:	2500      	movs	r5, #0
 8008dec:	f104 0619 	add.w	r6, r4, #25
 8008df0:	e7f5      	b.n	8008dde <_printf_i+0x22e>
 8008df2:	bf00      	nop
 8008df4:	08009385 	.word	0x08009385
 8008df8:	08009396 	.word	0x08009396

08008dfc <_read_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d07      	ldr	r5, [pc, #28]	; (8008e1c <_read_r+0x20>)
 8008e00:	4604      	mov	r4, r0
 8008e02:	4608      	mov	r0, r1
 8008e04:	4611      	mov	r1, r2
 8008e06:	2200      	movs	r2, #0
 8008e08:	602a      	str	r2, [r5, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f7f8 f952 	bl	80010b4 <_read>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_read_r+0x1e>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_read_r+0x1e>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	20004274 	.word	0x20004274

08008e20 <__swbuf_r>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	460e      	mov	r6, r1
 8008e24:	4614      	mov	r4, r2
 8008e26:	4605      	mov	r5, r0
 8008e28:	b118      	cbz	r0, 8008e32 <__swbuf_r+0x12>
 8008e2a:	6983      	ldr	r3, [r0, #24]
 8008e2c:	b90b      	cbnz	r3, 8008e32 <__swbuf_r+0x12>
 8008e2e:	f7fe ffc3 	bl	8007db8 <__sinit>
 8008e32:	4b21      	ldr	r3, [pc, #132]	; (8008eb8 <__swbuf_r+0x98>)
 8008e34:	429c      	cmp	r4, r3
 8008e36:	d12b      	bne.n	8008e90 <__swbuf_r+0x70>
 8008e38:	686c      	ldr	r4, [r5, #4]
 8008e3a:	69a3      	ldr	r3, [r4, #24]
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	071a      	lsls	r2, r3, #28
 8008e42:	d52f      	bpl.n	8008ea4 <__swbuf_r+0x84>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	b36b      	cbz	r3, 8008ea4 <__swbuf_r+0x84>
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	6820      	ldr	r0, [r4, #0]
 8008e4c:	1ac0      	subs	r0, r0, r3
 8008e4e:	6963      	ldr	r3, [r4, #20]
 8008e50:	b2f6      	uxtb	r6, r6
 8008e52:	4283      	cmp	r3, r0
 8008e54:	4637      	mov	r7, r6
 8008e56:	dc04      	bgt.n	8008e62 <__swbuf_r+0x42>
 8008e58:	4621      	mov	r1, r4
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f7ff fade 	bl	800841c <_fflush_r>
 8008e60:	bb30      	cbnz	r0, 8008eb0 <__swbuf_r+0x90>
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	6022      	str	r2, [r4, #0]
 8008e6e:	701e      	strb	r6, [r3, #0]
 8008e70:	6963      	ldr	r3, [r4, #20]
 8008e72:	3001      	adds	r0, #1
 8008e74:	4283      	cmp	r3, r0
 8008e76:	d004      	beq.n	8008e82 <__swbuf_r+0x62>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	07db      	lsls	r3, r3, #31
 8008e7c:	d506      	bpl.n	8008e8c <__swbuf_r+0x6c>
 8008e7e:	2e0a      	cmp	r6, #10
 8008e80:	d104      	bne.n	8008e8c <__swbuf_r+0x6c>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4628      	mov	r0, r5
 8008e86:	f7ff fac9 	bl	800841c <_fflush_r>
 8008e8a:	b988      	cbnz	r0, 8008eb0 <__swbuf_r+0x90>
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <__swbuf_r+0x9c>)
 8008e92:	429c      	cmp	r4, r3
 8008e94:	d101      	bne.n	8008e9a <__swbuf_r+0x7a>
 8008e96:	68ac      	ldr	r4, [r5, #8]
 8008e98:	e7cf      	b.n	8008e3a <__swbuf_r+0x1a>
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <__swbuf_r+0xa0>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	bf08      	it	eq
 8008ea0:	68ec      	ldreq	r4, [r5, #12]
 8008ea2:	e7ca      	b.n	8008e3a <__swbuf_r+0x1a>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f80c 	bl	8008ec4 <__swsetup_r>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d0cb      	beq.n	8008e48 <__swbuf_r+0x28>
 8008eb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008eb4:	e7ea      	b.n	8008e8c <__swbuf_r+0x6c>
 8008eb6:	bf00      	nop
 8008eb8:	08009330 	.word	0x08009330
 8008ebc:	08009350 	.word	0x08009350
 8008ec0:	08009310 	.word	0x08009310

08008ec4 <__swsetup_r>:
 8008ec4:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <__swsetup_r+0xcc>)
 8008ec6:	b570      	push	{r4, r5, r6, lr}
 8008ec8:	681d      	ldr	r5, [r3, #0]
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460c      	mov	r4, r1
 8008ece:	b125      	cbz	r5, 8008eda <__swsetup_r+0x16>
 8008ed0:	69ab      	ldr	r3, [r5, #24]
 8008ed2:	b913      	cbnz	r3, 8008eda <__swsetup_r+0x16>
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f7fe ff6f 	bl	8007db8 <__sinit>
 8008eda:	4b2e      	ldr	r3, [pc, #184]	; (8008f94 <__swsetup_r+0xd0>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	d10f      	bne.n	8008f00 <__swsetup_r+0x3c>
 8008ee0:	686c      	ldr	r4, [r5, #4]
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ee8:	0719      	lsls	r1, r3, #28
 8008eea:	d42c      	bmi.n	8008f46 <__swsetup_r+0x82>
 8008eec:	06dd      	lsls	r5, r3, #27
 8008eee:	d411      	bmi.n	8008f14 <__swsetup_r+0x50>
 8008ef0:	2309      	movs	r3, #9
 8008ef2:	6033      	str	r3, [r6, #0]
 8008ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008efe:	e03e      	b.n	8008f7e <__swsetup_r+0xba>
 8008f00:	4b25      	ldr	r3, [pc, #148]	; (8008f98 <__swsetup_r+0xd4>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d101      	bne.n	8008f0a <__swsetup_r+0x46>
 8008f06:	68ac      	ldr	r4, [r5, #8]
 8008f08:	e7eb      	b.n	8008ee2 <__swsetup_r+0x1e>
 8008f0a:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <__swsetup_r+0xd8>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	bf08      	it	eq
 8008f10:	68ec      	ldreq	r4, [r5, #12]
 8008f12:	e7e6      	b.n	8008ee2 <__swsetup_r+0x1e>
 8008f14:	0758      	lsls	r0, r3, #29
 8008f16:	d512      	bpl.n	8008f3e <__swsetup_r+0x7a>
 8008f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f1a:	b141      	cbz	r1, 8008f2e <__swsetup_r+0x6a>
 8008f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <__swsetup_r+0x66>
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff fad3 	bl	80084d0 <_free_r>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	2300      	movs	r3, #0
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f043 0308 	orr.w	r3, r3, #8
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	b94b      	cbnz	r3, 8008f5e <__swsetup_r+0x9a>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f54:	d003      	beq.n	8008f5e <__swsetup_r+0x9a>
 8008f56:	4621      	mov	r1, r4
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 f847 	bl	8008fec <__smakebuf_r>
 8008f5e:	89a0      	ldrh	r0, [r4, #12]
 8008f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f64:	f010 0301 	ands.w	r3, r0, #1
 8008f68:	d00a      	beq.n	8008f80 <__swsetup_r+0xbc>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60a3      	str	r3, [r4, #8]
 8008f6e:	6963      	ldr	r3, [r4, #20]
 8008f70:	425b      	negs	r3, r3
 8008f72:	61a3      	str	r3, [r4, #24]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	b943      	cbnz	r3, 8008f8a <__swsetup_r+0xc6>
 8008f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f7c:	d1ba      	bne.n	8008ef4 <__swsetup_r+0x30>
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	0781      	lsls	r1, r0, #30
 8008f82:	bf58      	it	pl
 8008f84:	6963      	ldrpl	r3, [r4, #20]
 8008f86:	60a3      	str	r3, [r4, #8]
 8008f88:	e7f4      	b.n	8008f74 <__swsetup_r+0xb0>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e7f7      	b.n	8008f7e <__swsetup_r+0xba>
 8008f8e:	bf00      	nop
 8008f90:	20000018 	.word	0x20000018
 8008f94:	08009330 	.word	0x08009330
 8008f98:	08009350 	.word	0x08009350
 8008f9c:	08009310 	.word	0x08009310

08008fa0 <__swhatbuf_r>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	460e      	mov	r6, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	b096      	sub	sp, #88	; 0x58
 8008fac:	4614      	mov	r4, r2
 8008fae:	461d      	mov	r5, r3
 8008fb0:	da08      	bge.n	8008fc4 <__swhatbuf_r+0x24>
 8008fb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	061a      	lsls	r2, r3, #24
 8008fbc:	d410      	bmi.n	8008fe0 <__swhatbuf_r+0x40>
 8008fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc2:	e00e      	b.n	8008fe2 <__swhatbuf_r+0x42>
 8008fc4:	466a      	mov	r2, sp
 8008fc6:	f000 f89b 	bl	8009100 <_fstat_r>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	dbf1      	blt.n	8008fb2 <__swhatbuf_r+0x12>
 8008fce:	9a01      	ldr	r2, [sp, #4]
 8008fd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fd8:	425a      	negs	r2, r3
 8008fda:	415a      	adcs	r2, r3
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	e7ee      	b.n	8008fbe <__swhatbuf_r+0x1e>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	b016      	add	sp, #88	; 0x58
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008fec <__smakebuf_r>:
 8008fec:	898b      	ldrh	r3, [r1, #12]
 8008fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ff0:	079d      	lsls	r5, r3, #30
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	d507      	bpl.n	8009008 <__smakebuf_r+0x1c>
 8008ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	6123      	str	r3, [r4, #16]
 8009000:	2301      	movs	r3, #1
 8009002:	6163      	str	r3, [r4, #20]
 8009004:	b002      	add	sp, #8
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	ab01      	add	r3, sp, #4
 800900a:	466a      	mov	r2, sp
 800900c:	f7ff ffc8 	bl	8008fa0 <__swhatbuf_r>
 8009010:	9900      	ldr	r1, [sp, #0]
 8009012:	4605      	mov	r5, r0
 8009014:	4630      	mov	r0, r6
 8009016:	f7fe ffdb 	bl	8007fd0 <_malloc_r>
 800901a:	b948      	cbnz	r0, 8009030 <__smakebuf_r+0x44>
 800901c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009020:	059a      	lsls	r2, r3, #22
 8009022:	d4ef      	bmi.n	8009004 <__smakebuf_r+0x18>
 8009024:	f023 0303 	bic.w	r3, r3, #3
 8009028:	f043 0302 	orr.w	r3, r3, #2
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	e7e3      	b.n	8008ff8 <__smakebuf_r+0xc>
 8009030:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <__smakebuf_r+0x7c>)
 8009032:	62b3      	str	r3, [r6, #40]	; 0x28
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	6020      	str	r0, [r4, #0]
 8009038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	6163      	str	r3, [r4, #20]
 8009042:	9b01      	ldr	r3, [sp, #4]
 8009044:	6120      	str	r0, [r4, #16]
 8009046:	b15b      	cbz	r3, 8009060 <__smakebuf_r+0x74>
 8009048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800904c:	4630      	mov	r0, r6
 800904e:	f000 f869 	bl	8009124 <_isatty_r>
 8009052:	b128      	cbz	r0, 8009060 <__smakebuf_r+0x74>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	f043 0301 	orr.w	r3, r3, #1
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	89a0      	ldrh	r0, [r4, #12]
 8009062:	4305      	orrs	r5, r0
 8009064:	81a5      	strh	r5, [r4, #12]
 8009066:	e7cd      	b.n	8009004 <__smakebuf_r+0x18>
 8009068:	08007d51 	.word	0x08007d51

0800906c <memmove>:
 800906c:	4288      	cmp	r0, r1
 800906e:	b510      	push	{r4, lr}
 8009070:	eb01 0402 	add.w	r4, r1, r2
 8009074:	d902      	bls.n	800907c <memmove+0x10>
 8009076:	4284      	cmp	r4, r0
 8009078:	4623      	mov	r3, r4
 800907a:	d807      	bhi.n	800908c <memmove+0x20>
 800907c:	1e43      	subs	r3, r0, #1
 800907e:	42a1      	cmp	r1, r4
 8009080:	d008      	beq.n	8009094 <memmove+0x28>
 8009082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800908a:	e7f8      	b.n	800907e <memmove+0x12>
 800908c:	4402      	add	r2, r0
 800908e:	4601      	mov	r1, r0
 8009090:	428a      	cmp	r2, r1
 8009092:	d100      	bne.n	8009096 <memmove+0x2a>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800909a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800909e:	e7f7      	b.n	8009090 <memmove+0x24>

080090a0 <_realloc_r>:
 80090a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	4680      	mov	r8, r0
 80090a6:	4614      	mov	r4, r2
 80090a8:	460e      	mov	r6, r1
 80090aa:	b921      	cbnz	r1, 80090b6 <_realloc_r+0x16>
 80090ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	4611      	mov	r1, r2
 80090b2:	f7fe bf8d 	b.w	8007fd0 <_malloc_r>
 80090b6:	b92a      	cbnz	r2, 80090c4 <_realloc_r+0x24>
 80090b8:	f7ff fa0a 	bl	80084d0 <_free_r>
 80090bc:	4625      	mov	r5, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c4:	f000 f83e 	bl	8009144 <_malloc_usable_size_r>
 80090c8:	4284      	cmp	r4, r0
 80090ca:	4607      	mov	r7, r0
 80090cc:	d802      	bhi.n	80090d4 <_realloc_r+0x34>
 80090ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090d2:	d812      	bhi.n	80090fa <_realloc_r+0x5a>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4640      	mov	r0, r8
 80090d8:	f7fe ff7a 	bl	8007fd0 <_malloc_r>
 80090dc:	4605      	mov	r5, r0
 80090de:	2800      	cmp	r0, #0
 80090e0:	d0ed      	beq.n	80090be <_realloc_r+0x1e>
 80090e2:	42bc      	cmp	r4, r7
 80090e4:	4622      	mov	r2, r4
 80090e6:	4631      	mov	r1, r6
 80090e8:	bf28      	it	cs
 80090ea:	463a      	movcs	r2, r7
 80090ec:	f7fe ff39 	bl	8007f62 <memcpy>
 80090f0:	4631      	mov	r1, r6
 80090f2:	4640      	mov	r0, r8
 80090f4:	f7ff f9ec 	bl	80084d0 <_free_r>
 80090f8:	e7e1      	b.n	80090be <_realloc_r+0x1e>
 80090fa:	4635      	mov	r5, r6
 80090fc:	e7df      	b.n	80090be <_realloc_r+0x1e>
	...

08009100 <_fstat_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	; (8009120 <_fstat_r+0x20>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	f7f8 f816 	bl	800113e <_fstat>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d102      	bne.n	800911c <_fstat_r+0x1c>
 8009116:	682b      	ldr	r3, [r5, #0]
 8009118:	b103      	cbz	r3, 800911c <_fstat_r+0x1c>
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	bf00      	nop
 8009120:	20004274 	.word	0x20004274

08009124 <_isatty_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	; (8009140 <_isatty_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f8 f815 	bl	800115e <_isatty>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_isatty_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_isatty_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20004274 	.word	0x20004274

08009144 <_malloc_usable_size_r>:
 8009144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009148:	1f18      	subs	r0, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	bfbc      	itt	lt
 800914e:	580b      	ldrlt	r3, [r1, r0]
 8009150:	18c0      	addlt	r0, r0, r3
 8009152:	4770      	bx	lr

08009154 <_init>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr

08009160 <_fini>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	bf00      	nop
 8009164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009166:	bc08      	pop	{r3}
 8009168:	469e      	mov	lr, r3
 800916a:	4770      	bx	lr
