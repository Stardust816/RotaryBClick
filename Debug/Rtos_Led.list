
Rtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a450  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8f8  0800a8f8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a900  0800a900  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a900  0800a900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004250  2000007c  0800a984  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042cc  0800a984  000242cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb67  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3b  00000000  00000000  0003fc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00043b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00045438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a99  00000000  00000000  00046ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b46f  00000000  00000000  0004b641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d70ea  00000000  00000000  00066ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013db9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007228  00000000  00000000  0013dbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5c8 	.word	0x0800a5c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800a5c8 	.word	0x0800a5c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	e853 3f00 	ldrex	r3, [r3]
 8000596:	60bb      	str	r3, [r7, #8]
   return(result);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	69fa      	ldr	r2, [r7, #28]
 80005a4:	61ba      	str	r2, [r7, #24]
 80005a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005a8:	6979      	ldr	r1, [r7, #20]
 80005aa:	69ba      	ldr	r2, [r7, #24]
 80005ac:	e841 2300 	strex	r3, r2, [r1]
 80005b0:	613b      	str	r3, [r7, #16]
   return(result);
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1e9      	bne.n	800058c <LL_USART_EnableIT_IDLE+0x8>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3724      	adds	r7, #36	; 0x24
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <setleds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setleds(uint16_t ledring) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]

	//uint16_t ledring = 0b1010101010101010;

	for (int i = 0; i < 16; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e01f      	b.n	8000618 <setleds+0x50>

		if (ledring & (1 << i)) {
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <setleds+0x2c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <setleds+0x7c>)
 80005ee:	f001 fd23 	bl	8002038 <HAL_GPIO_WritePin>
 80005f2:	e004      	b.n	80005fe <setleds+0x36>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2120      	movs	r1, #32
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <setleds+0x7c>)
 80005fa:	f001 fd1d 	bl	8002038 <HAL_GPIO_WritePin>
		}

		//SCK
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2108      	movs	r1, #8
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <setleds+0x7c>)
 8000604:	f001 fd18 	bl	8002038 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2108      	movs	r1, #8
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <setleds+0x7c>)
 800060e:	f001 fd13 	bl	8002038 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b0f      	cmp	r3, #15
 800061c:	dddc      	ble.n	80005d8 <setleds+0x10>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	}

	//Latch
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2101      	movs	r1, #1
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <setleds+0x7c>)
 8000624:	f001 fd08 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <setleds+0x7c>)
 800062e:	f001 fd03 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <setleds+0x7c>)
 8000638:	f001 fcfe 	bl	8002038 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	48000400 	.word	0x48000400

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 ffe1 	bl	8001612 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f850 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f92e 	bl	80008b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000658:	f000 f90e 	bl	8000878 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f8dc 	bl	8000818 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f8aa 	bl	80007b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000664:	f004 ffca 	bl	80055fc <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSema */
  uartSemaHandle = osSemaphoreNew(1, 1, &uartSema_attributes);
 8000668:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <main+0x78>)
 800066a:	2101      	movs	r1, #1
 800066c:	2001      	movs	r0, #1
 800066e:	f005 f8c2 	bl	80057f6 <osSemaphoreNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <main+0x7c>)
 8000676:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RotaryEncoderQueue */
  RotaryEncoderQueueHandle = osMessageQueueNew (16, sizeof(InputEvent), &RotaryEncoderQueue_attributes);
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <main+0x80>)
 800067a:	2108      	movs	r1, #8
 800067c:	2010      	movs	r0, #16
 800067e:	f005 f9d9 	bl	8005a34 <osMessageQueueNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a11      	ldr	r2, [pc, #68]	; (80006cc <main+0x84>)
 8000686:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <main+0x88>)
 800068a:	2100      	movs	r1, #0
 800068c:	4811      	ldr	r0, [pc, #68]	; (80006d4 <main+0x8c>)
 800068e:	f004 ffff 	bl	8005690 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <main+0x90>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8000698:	4a10      	ldr	r2, [pc, #64]	; (80006dc <main+0x94>)
 800069a:	2100      	movs	r1, #0
 800069c:	4810      	ldr	r0, [pc, #64]	; (80006e0 <main+0x98>)
 800069e:	f004 fff7 	bl	8005690 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <main+0x9c>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <main+0xa0>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	480f      	ldr	r0, [pc, #60]	; (80006ec <main+0xa4>)
 80006ae:	f004 ffef 	bl	8005690 <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <main+0xa8>)
 80006b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b8:	f004 ffc4 	bl	8005644 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006bc:	e7fe      	b.n	80006bc <main+0x74>
 80006be:	bf00      	nop
 80006c0:	0800a808 	.word	0x0800a808
 80006c4:	20000840 	.word	0x20000840
 80006c8:	0800a7f0 	.word	0x0800a7f0
 80006cc:	2000076c 	.word	0x2000076c
 80006d0:	0800a784 	.word	0x0800a784
 80006d4:	08000d1d 	.word	0x08000d1d
 80006d8:	200001e8 	.word	0x200001e8
 80006dc:	0800a7a8 	.word	0x0800a7a8
 80006e0:	08000d81 	.word	0x08000d81
 80006e4:	200004a8 	.word	0x200004a8
 80006e8:	0800a7cc 	.word	0x0800a7cc
 80006ec:	08000f2d 	.word	0x08000f2d
 80006f0:	20000768 	.word	0x20000768

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	; 0x58
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2244      	movs	r2, #68	; 0x44
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f008 fe63 	bl	80093ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000716:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071a:	f001 fcc3 	bl	80020a4 <HAL_PWREx_ControlVoltageScaling>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000724:	f000 fc70 	bl	8001008 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000728:	f001 fc9e 	bl	8002068 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <SystemClock_Config+0xc0>)
 800072e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000732:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <SystemClock_Config+0xc0>)
 8000734:	f023 0318 	bic.w	r3, r3, #24
 8000738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800073c:	2314      	movs	r3, #20
 800073e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800074c:	2360      	movs	r3, #96	; 0x60
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000754:	2301      	movs	r3, #1
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800075c:	2310      	movs	r3, #16
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000760:	2307      	movs	r3, #7
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fced 	bl	8002150 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800077c:	f000 fc44 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f002 f8ed 	bl	8002978 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a4:	f000 fc30 	bl	8001008 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a8:	f002 fd32 	bl	8003210 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	; 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_USART1_UART_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007fc:	f003 f88a 	bl	8003914 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 fbff 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000098 	.word	0x20000098
 8000814:	40013800 	.word	0x40013800

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART2_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800085c:	f003 f85a 	bl	8003914 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 fbcf 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000011c 	.word	0x2000011c
 8000874:	40004400 	.word	0x40004400

08000878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_DMA_Init+0x38>)
 8000880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x38>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6493      	str	r3, [r2, #72]	; 0x48
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x38>)
 800088c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	200f      	movs	r0, #15
 800089c:	f000 ffaa 	bl	80017f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008a0:	200f      	movs	r0, #15
 80008a2:	f000 ffc3 	bl	800182c <HAL_NVIC_EnableIRQ>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_GPIO_Init+0xc0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a29      	ldr	r2, [pc, #164]	; (8000974 <MX_GPIO_Init+0xc0>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_GPIO_Init+0xc0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_GPIO_Init+0xc0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_GPIO_Init+0xc0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_GPIO_Init+0xc0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_GPIO_Init+0xc0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <MX_GPIO_Init+0xc0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_GPIO_Init+0xc0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2129      	movs	r1, #41	; 0x29
 8000916:	4818      	ldr	r0, [pc, #96]	; (8000978 <MX_GPIO_Init+0xc4>)
 8000918:	f001 fb8e 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800091c:	2309      	movs	r3, #9
 800091e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f001 f9ff 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_5;
 8000936:	2329      	movs	r3, #41	; 0x29
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <MX_GPIO_Init+0xc4>)
 800094e:	f001 f9f1 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0xc4>)
 8000966:	f001 f9e5 	bl	8001d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400

0800097c <SendATCommand>:

/* USER CODE BEGIN 4 */

void SendATCommand(char *command) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	// The command sent MUST NOT contain a newline, otherwise it might be error-prone
	uint8_t cmd_length = strlen(command); // If your string is not NULL-Terminated this will cause errors!
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fc23 	bl	80001d0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	73fb      	strb	r3, [r7, #15]
	uint8_t *buffer = (uint8_t*)pvPortMalloc(sizeof(char)*cmd_length+2);
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	3302      	adds	r3, #2
 8000992:	4618      	mov	r0, r3
 8000994:	f008 f9f0 	bl	8008d78 <pvPortMalloc>
 8000998:	60b8      	str	r0, [r7, #8]
	strncpy((char*)buffer, command, cmd_length);
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	461a      	mov	r2, r3
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f008 feba 	bl	800971a <strncpy>
	buffer[cmd_length] = '\r';
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	4413      	add	r3, r2
 80009ac:	220d      	movs	r2, #13
 80009ae:	701a      	strb	r2, [r3, #0]
	buffer[cmd_length+1] = '\n';
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3301      	adds	r3, #1
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	4413      	add	r3, r2
 80009b8:	220a      	movs	r2, #10
 80009ba:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, cmd_length+2, HAL_MAX_DELAY);
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	3302      	adds	r3, #2
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <SendATCommand+0x64>)
 80009cc:	f002 fff0 	bl	80039b0 <HAL_UART_Transmit>
	vPortFree(buffer);
 80009d0:	68b8      	ldr	r0, [r7, #8]
 80009d2:	f008 fa9d 	bl	8008f10 <vPortFree>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000098 	.word	0x20000098

080009e4 <StartTcpServer>:

void StartTcpServer(void) {
 80009e4:	b5b0      	push	{r4, r5, r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	/* Debugging by jD */
	strcpy((char*)uart1Buffer, "connecnt to tcp server!\n\r");
 80009e8:	4a2c      	ldr	r2, [pc, #176]	; (8000a9c <StartTcpServer+0xb8>)
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <StartTcpServer+0xbc>)
 80009ec:	4614      	mov	r4, r2
 80009ee:	461d      	mov	r5, r3
 80009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f8:	c403      	stmia	r4!, {r0, r1}
 80009fa:	8022      	strh	r2, [r4, #0]
	// semaComment
	if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <StartTcpServer+0xc0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	210a      	movs	r1, #10
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 ff80 	bl	8005908 <osSemaphoreAcquire>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10f      	bne.n	8000a2e <StartTcpServer+0x4a>
		HAL_UART_Transmit(&huart2, uart1Buffer, strlen((char*)uart1Buffer), HAL_MAX_DELAY);
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <StartTcpServer+0xb8>)
 8000a10:	f7ff fbde 	bl	80001d0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1c:	491f      	ldr	r1, [pc, #124]	; (8000a9c <StartTcpServer+0xb8>)
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <StartTcpServer+0xc4>)
 8000a20:	f002 ffc6 	bl	80039b0 <HAL_UART_Transmit>
		osSemaphoreRelease(uartSemaHandle);
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <StartTcpServer+0xc0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 ffbf 	bl	80059ac <osSemaphoreRelease>
	}
	strcpy((char*)uart1Buffer, "\0");
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <StartTcpServer+0xb8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]

	// Configure Station+AP Mode
	SendATCommand("AT+CWMODE=1");
 8000a34:	481d      	ldr	r0, [pc, #116]	; (8000aac <StartTcpServer+0xc8>)
 8000a36:	f7ff ffa1 	bl	800097c <SendATCommand>
	osDelay(2000);
 8000a3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a3e:	f004 febf 	bl	80057c0 <osDelay>

	SendATCommand("AT+CIPSTA=\"192.168.5.10\"");
 8000a42:	481b      	ldr	r0, [pc, #108]	; (8000ab0 <StartTcpServer+0xcc>)
 8000a44:	f7ff ff9a 	bl	800097c <SendATCommand>
	osDelay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4c:	f004 feb8 	bl	80057c0 <osDelay>

	// connect to tcp server
	SendATCommand("AT+CWJAP=\"TheDrive\",\"1234567890\"");
 8000a50:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <StartTcpServer+0xd0>)
 8000a52:	f7ff ff93 	bl	800097c <SendATCommand>
	osDelay(3000);
 8000a56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a5a:	f004 feb1 	bl	80057c0 <osDelay>

	SendATCommand("AT+CIPSTART=\"TCP\",\"192.168.5.5\",80");
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <StartTcpServer+0xd4>)
 8000a60:	f7ff ff8c 	bl	800097c <SendATCommand>
	osDelay(1000);
 8000a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a68:	f004 feaa 	bl	80057c0 <osDelay>

	// Gets the Local IP Address
	SendATCommand("AT+CIFSR");
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <StartTcpServer+0xd8>)
 8000a6e:	f7ff ff85 	bl	800097c <SendATCommand>
	osDelay(1000);
 8000a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a76:	f004 fea3 	bl	80057c0 <osDelay>

	// AT+CIPSEND=0,4
	SendATCommand("AT+CIPSEND=4");
 8000a7a:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <StartTcpServer+0xdc>)
 8000a7c:	f7ff ff7e 	bl	800097c <SendATCommand>
	osDelay(1000);
 8000a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a84:	f004 fe9c 	bl	80057c0 <osDelay>

	SendATCommand("test");
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <StartTcpServer+0xe0>)
 8000a8a:	f7ff ff77 	bl	800097c <SendATCommand>
	osDelay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f004 fe95 	bl	80057c0 <osDelay>
}
 8000a96:	bf00      	nop
 8000a98:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000894 	.word	0x20000894
 8000aa0:	0800a630 	.word	0x0800a630
 8000aa4:	20000840 	.word	0x20000840
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	0800a64c 	.word	0x0800a64c
 8000ab0:	0800a658 	.word	0x0800a658
 8000ab4:	0800a674 	.word	0x0800a674
 8000ab8:	0800a698 	.word	0x0800a698
 8000abc:	0800a6bc 	.word	0x0800a6bc
 8000ac0:	0800a6c8 	.word	0x0800a6c8
 8000ac4:	0800a6d8 	.word	0x0800a6d8

08000ac8 <UartHandlerTask>:

void UartHandlerTask(void *argument) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
	static size_t old_pos = 0;  // Track the position of last character processed

	while(1) {
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8000ad0:	f107 020c 	add.w	r2, r7, #12
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000adc:	2000      	movs	r0, #0
 8000ade:	f007 fa15 	bl	8007f0c <xTaskNotifyWait>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d1f3      	bne.n	8000ad0 <UartHandlerTask+0x8>

			if(ulNotificationValue & UART1_IDLE_EVENT) { // Received message from UART1
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d068      	beq.n	8000bc4 <UartHandlerTask+0xfc>

				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR; // huart1->hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 8000af2:	4b67      	ldr	r3, [pc, #412]	; (8000c90 <UartHandlerTask+0x1c8>)
 8000af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000afe:	617b      	str	r3, [r7, #20]
				size_t length;

				if(new_pos != old_pos) { // Check if any new data is received
 8000b00:	4b64      	ldr	r3, [pc, #400]	; (8000c94 <UartHandlerTask+0x1cc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d05c      	beq.n	8000bc4 <UartHandlerTask+0xfc>
					// The transmissions here are also in blocking mode, otherwise output is cutoff!
					// If received data is BIGGER than buffer size, then output will be cutoff! (=> Increase buffer size)

					if (new_pos > old_pos) { // If data does not wrap around the buffer
 8000b0a:	4b62      	ldr	r3, [pc, #392]	; (8000c94 <UartHandlerTask+0x1cc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d91e      	bls.n	8000b52 <UartHandlerTask+0x8a>
						length = new_pos - old_pos;
 8000b14:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <UartHandlerTask+0x1cc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	613b      	str	r3, [r7, #16]
						// Process your data => uart1Buffer[old_pos] TO uart1Buffer[old_pos+length] == Received DATA

						// semaComment
						if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000b1e:	4b5e      	ldr	r3, [pc, #376]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	210a      	movs	r1, #10
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 feef 	bl	8005908 <osSemaphoreAcquire>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d146      	bne.n	8000bbe <UartHandlerTask+0xf6>
							HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8000b30:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <UartHandlerTask+0x1cc>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a59      	ldr	r2, [pc, #356]	; (8000c9c <UartHandlerTask+0x1d4>)
 8000b36:	1899      	adds	r1, r3, r2
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b40:	4857      	ldr	r0, [pc, #348]	; (8000ca0 <UartHandlerTask+0x1d8>)
 8000b42:	f002 ff35 	bl	80039b0 <HAL_UART_Transmit>
							osSemaphoreRelease(uartSemaHandle);
 8000b46:	4b54      	ldr	r3, [pc, #336]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 ff2e 	bl	80059ac <osSemaphoreRelease>
 8000b50:	e035      	b.n	8000bbe <UartHandlerTask+0xf6>

					} else { // If data wraps around the buffer
						// If you process data in here, you'll need to partially construct your data

						// First transmit the data until the end of the buffer
						length = BUFFER_SIZE - old_pos;
 8000b52:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <UartHandlerTask+0x1cc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000b5a:	613b      	str	r3, [r7, #16]

						// semaComment
						if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	210a      	movs	r1, #10
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 fed0 	bl	8005908 <osSemaphoreAcquire>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10f      	bne.n	8000b8e <UartHandlerTask+0xc6>
							HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8000b6e:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <UartHandlerTask+0x1cc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <UartHandlerTask+0x1d4>)
 8000b74:	1899      	adds	r1, r3, r2
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7e:	4848      	ldr	r0, [pc, #288]	; (8000ca0 <UartHandlerTask+0x1d8>)
 8000b80:	f002 ff16 	bl	80039b0 <HAL_UART_Transmit>
							osSemaphoreRelease(uartSemaHandle);
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 ff0f 	bl	80059ac <osSemaphoreRelease>
						}

						// Then transmit the remaining data from the beginning of the buffer
						length = new_pos;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	613b      	str	r3, [r7, #16]

						// semaComment
						if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	210a      	movs	r1, #10
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 feb5 	bl	8005908 <osSemaphoreAcquire>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10c      	bne.n	8000bbe <UartHandlerTask+0xf6>
							HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bac:	493b      	ldr	r1, [pc, #236]	; (8000c9c <UartHandlerTask+0x1d4>)
 8000bae:	483c      	ldr	r0, [pc, #240]	; (8000ca0 <UartHandlerTask+0x1d8>)
 8000bb0:	f002 fefe 	bl	80039b0 <HAL_UART_Transmit>
							osSemaphoreRelease(uartSemaHandle);
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fef7 	bl	80059ac <osSemaphoreRelease>
						}
					}

					old_pos = new_pos;  // Update the position of the last character processed
 8000bbe:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <UartHandlerTask+0x1cc>)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	6013      	str	r3, [r2, #0]
				}
			}

			if (ulNotificationValue & UART2_EVENT) { // Received CHARACTER from UART2
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d080      	beq.n	8000ad0 <UartHandlerTask+0x8>
				char c = (char)uart2_rx_char;
 8000bce:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <UartHandlerTask+0x1dc>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	72fb      	strb	r3, [r7, #11]

				// Echo back the character to the terminal
				// semaComment
				if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000bd4:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	210a      	movs	r1, #10
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fe94 	bl	8005908 <osSemaphoreAcquire>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10b      	bne.n	8000bfe <UartHandlerTask+0x136>
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 8000be6:	f107 030b 	add.w	r3, r7, #11
 8000bea:	2201      	movs	r2, #1
 8000bec:	4619      	mov	r1, r3
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <UartHandlerTask+0x1d8>)
 8000bf0:	f002 ff72 	bl	8003ad8 <HAL_UART_Transmit_IT>
					osSemaphoreRelease(uartSemaHandle);
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 fed7 	bl	80059ac <osSemaphoreRelease>
				}

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r') {
 8000bfe:	7afb      	ldrb	r3, [r7, #11]
 8000c00:	2b0d      	cmp	r3, #13
 8000c02:	d13a      	bne.n	8000c7a <UartHandlerTask+0x1b2>
					uart2Buffer[uart2BufferIndex++] = '\r';
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	b291      	uxth	r1, r2
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c0e:	8011      	strh	r1, [r2, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <UartHandlerTask+0x1e4>)
 8000c14:	210d      	movs	r1, #13
 8000c16:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	b291      	uxth	r1, r2
 8000c20:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c22:	8011      	strh	r1, [r2, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <UartHandlerTask+0x1e4>)
 8000c28:	210a      	movs	r1, #10
 8000c2a:	5499      	strb	r1, [r3, r2]

					// semaComment
					if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	210a      	movs	r1, #10
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 fe68 	bl	8005908 <osSemaphoreAcquire>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10b      	bne.n	8000c56 <UartHandlerTask+0x18e>
						HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <UartHandlerTask+0x1e8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2202      	movs	r2, #2
 8000c44:	4619      	mov	r1, r3
 8000c46:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <UartHandlerTask+0x1d8>)
 8000c48:	f002 ff46 	bl	8003ad8 <HAL_UART_Transmit_IT>
						osSemaphoreRelease(uartSemaHandle);
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <UartHandlerTask+0x1d0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 feab 	bl	80059ac <osSemaphoreRelease>
					}

					// This call will be made in blocking mode, because we'll clear the buffer!
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c58:	881a      	ldrh	r2, [r3, #0]
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5e:	4913      	ldr	r1, [pc, #76]	; (8000cac <UartHandlerTask+0x1e4>)
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <UartHandlerTask+0x1c8>)
 8000c62:	f002 fea5 	bl	80039b0 <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 8000c66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <UartHandlerTask+0x1e4>)
 8000c6e:	f008 fbae 	bl	80093ce <memset>
					uart2BufferIndex = 0;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	801a      	strh	r2, [r3, #0]
 8000c78:	e72a      	b.n	8000ad0 <UartHandlerTask+0x8>

					// Hier kommt Code rein

				} else {
					// Add character to buffer
					uart2Buffer[uart2BufferIndex++] = c;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	b291      	uxth	r1, r2
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <UartHandlerTask+0x1e0>)
 8000c84:	8011      	strh	r1, [r2, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	7af9      	ldrb	r1, [r7, #11]
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <UartHandlerTask+0x1e4>)
 8000c8c:	5499      	strb	r1, [r3, r2]
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8000c8e:	e71f      	b.n	8000ad0 <UartHandlerTask+0x8>
 8000c90:	20000098 	.word	0x20000098
 8000c94:	2000289c 	.word	0x2000289c
 8000c98:	20000840 	.word	0x20000840
 8000c9c:	20000894 	.word	0x20000894
 8000ca0:	2000011c 	.word	0x2000011c
 8000ca4:	20002896 	.word	0x20002896
 8000ca8:	20002894 	.word	0x20002894
 8000cac:	20001894 	.word	0x20001894
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_UART_RxCpltCallback>:
	}
}

/*
Interrupt callback routine for UART */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <HAL_UART_RxCpltCallback+0x54>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d11b      	bne.n	8000cfe <HAL_UART_RxCpltCallback+0x4a>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_UART_RxCpltCallback+0x58>)
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2102      	movs	r1, #2
 8000cda:	f007 f977 	bl	8007fcc <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <HAL_UART_RxCpltCallback+0x40>
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_UART_RxCpltCallback+0x5c>)
 8000ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	f3bf 8f4f 	dsb	sy
 8000cf0:	f3bf 8f6f 	isb	sy

		// Restart reception with interrupt
		HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4907      	ldr	r1, [pc, #28]	; (8000d14 <HAL_UART_RxCpltCallback+0x60>)
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_UART_RxCpltCallback+0x64>)
 8000cfa:	f002 ff5b 	bl	8003bb4 <HAL_UART_Receive_IT>
	}
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	20002898 	.word	0x20002898
 8000d10:	e000ed04 	.word	0xe000ed04
 8000d14:	20002896 	.word	0x20002896
 8000d18:	2000011c 	.word	0x2000011c

08000d1c <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
		/*setleds(0b1010101010101010);
		 osDelay(1000);
		 setleds(0b0101010101010101);
		 osDelay(1000);*/

		osStatus_t ret = osMessageQueueGet(RotaryEncoderQueueHandle, &event, 0,
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <StartLedTask+0x58>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	f107 0108 	add.w	r1, r7, #8
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f004 ff54 	bl	8005bdc <osMessageQueueGet>
 8000d34:	6138      	str	r0, [r7, #16]
				10);
		if (ret != osOK) {
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <StartLedTask+0x28>
			//something went wrong
			printf("\r\ncannot read item from queue");
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <StartLedTask+0x5c>)
 8000d3e:	f008 fbe3 	bl	8009508 <iprintf>
 8000d42:	e013      	b.n	8000d6c <StartLedTask+0x50>
		} else {
			printf("\r\nread item");
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <StartLedTask+0x60>)
 8000d46:	f008 fbdf 	bl	8009508 <iprintf>

			uint32_t value;

			if (event.button_pressed) { //If 6th bit set, button was pressed -> pause game -> display on leds
 8000d4a:	7a3b      	ldrb	r3, [r7, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <StartLedTask+0x3c>
				value = 0b1010101010101010;
 8000d50:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	e004      	b.n	8000d62 <StartLedTask+0x46>
			} else {
				value = 1 << event.counter;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
			}
			setleds(value);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc2e 	bl	80005c8 <setleds>
		}

		osDelay(2);
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f004 fd27 	bl	80057c0 <osDelay>
	for (;;) {
 8000d72:	e7d7      	b.n	8000d24 <StartLedTask+0x8>
 8000d74:	2000076c 	.word	0x2000076c
 8000d78:	0800a6e0 	.word	0x0800a6e0
 8000d7c:	0800a700 	.word	0x0800a700

08000d80 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	uint16_t counter = 8;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	86bb      	strh	r3, [r7, #52]	; 0x34
	//uint16_t old_counter = 0;
	uint8_t old_state_a = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state_button = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	InputEvent event;
	event.button_pressed = true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	event.counter = LEDSTART;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
	InputEvent oldevent;
	/* Infinite loop */
	for (;;) {

		uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000da2:	2101      	movs	r1, #1
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f001 f92e 	bl	8002008 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000db2:	2102      	movs	r1, #2
 8000db4:	4855      	ldr	r0, [pc, #340]	; (8000f0c <StartEncoderTask+0x18c>)
 8000db6:	f001 f927 	bl	8002008 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint8_t button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f001 f91f 	bl	8002008 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if (a != old_state_a && event.counter <= 16) {
 8000dd0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d015      	beq.n	8000e08 <StartEncoderTask+0x88>
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	2b10      	cmp	r3, #16
 8000de0:	dc12      	bgt.n	8000e08 <StartEncoderTask+0x88>

			if (a != b) {
 8000de2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000de6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d006      	beq.n	8000dfc <StartEncoderTask+0x7c>
				if (LEDMAX > event.counter)
 8000dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df0:	2b0a      	cmp	r3, #10
 8000df2:	dc09      	bgt.n	8000e08 <StartEncoderTask+0x88>
					event.counter++;
 8000df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df6:	3301      	adds	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dfa:	e005      	b.n	8000e08 <StartEncoderTask+0x88>

			} else if (LEDMIN != event.counter) {
 8000dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d002      	beq.n	8000e08 <StartEncoderTask+0x88>
				//if(counter != 3)
				event.counter--;
 8000e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e04:	3b01      	subs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28

			}
		}

		if (old_state_button != button && button) {
 8000e08:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000e0c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d014      	beq.n	8000e3e <StartEncoderTask+0xbe>
 8000e14:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d010      	beq.n	8000e3e <StartEncoderTask+0xbe>
			event.button_pressed = !event.button_pressed; //Bit toggle -> XOR -> toggle 6th bit
 8000e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf14      	ite	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	2300      	moveq	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			event.counter = LEDSTART;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
			//setleds(0b1010101010101010);
		}

		if (memcmp(&oldevent, &event, sizeof(event))) {
 8000e3e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2208      	movs	r2, #8
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 faa2 	bl	8009392 <memcmp>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d047      	beq.n	8000ee4 <StartEncoderTask+0x164>

			char msg1[16];
			snprintf(msg1, sizeof(msg1), "%d\r\n", event.counter);
 8000e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e56:	f107 000c 	add.w	r0, r7, #12
 8000e5a:	4a2d      	ldr	r2, [pc, #180]	; (8000f10 <StartEncoderTask+0x190>)
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	f008 fbe5 	bl	800962c <sniprintf>

			// semaComment
			if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <StartEncoderTask+0x194>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	210a      	movs	r1, #10
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 fd4d 	bl	8005908 <osSemaphoreAcquire>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d120      	bne.n	8000eb6 <StartEncoderTask+0x136>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), 1000);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9a9 	bl	80001d0 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	f107 010c 	add.w	r1, r7, #12
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	4823      	ldr	r0, [pc, #140]	; (8000f18 <StartEncoderTask+0x198>)
 8000e8c:	f002 fd90 	bl	80039b0 <HAL_UART_Transmit>
				osSemaphoreRelease(uartSemaHandle);
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <StartEncoderTask+0x194>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 fd89 	bl	80059ac <osSemaphoreRelease>

				SendATCommand("AT+CIPSEND=1");
 8000e9a:	4820      	ldr	r0, [pc, #128]	; (8000f1c <StartEncoderTask+0x19c>)
 8000e9c:	f7ff fd6e 	bl	800097c <SendATCommand>
				osDelay(100);
 8000ea0:	2064      	movs	r0, #100	; 0x64
 8000ea2:	f004 fc8d 	bl	80057c0 <osDelay>

				SendATCommand(msg1);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fd66 	bl	800097c <SendATCommand>
				osDelay(100);
 8000eb0:	2064      	movs	r0, #100	; 0x64
 8000eb2:	f004 fc85 	bl	80057c0 <osDelay>

			//uint32_t leds = 0xFFFF0000;

			//leds = leds >> counter;
			//event.counter = counter;
			osStatus_t ret = osMessageQueuePut(RotaryEncoderQueueHandle,
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <StartEncoderTask+0x1a0>)
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f004 fe2b 	bl	8005b1c <osMessageQueuePut>
 8000ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
					&event, 0, 10);

			if (ret != osOK) {
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <StartEncoderTask+0x15a>
				//something went wrong
				printf("\r\ncannot enqueue item %u", counter);
 8000ece:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <StartEncoderTask+0x1a4>)
 8000ed4:	f008 fb18 	bl	8009508 <iprintf>
 8000ed8:	e004      	b.n	8000ee4 <StartEncoderTask+0x164>
			} else {
				printf("\r\nenqueued item %u", counter);
 8000eda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000edc:	4619      	mov	r1, r3
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <StartEncoderTask+0x1a8>)
 8000ee0:	f008 fb12 	bl	8009508 <iprintf>
			}
		}
		old_state_a = a;
 8000ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		old_state_button = button;
 8000eec:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000ef0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//old_counter = counter;
		memcpy(&oldevent, &event, sizeof(event));
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f00:	e883 0003 	stmia.w	r3, {r0, r1}
		osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f004 fc5b 	bl	80057c0 <osDelay>
	for (;;) {
 8000f0a:	e74a      	b.n	8000da2 <StartEncoderTask+0x22>
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	0800a70c 	.word	0x0800a70c
 8000f14:	20000840 	.word	0x20000840
 8000f18:	2000011c 	.word	0x2000011c
 8000f1c:	0800a714 	.word	0x0800a714
 8000f20:	2000076c 	.word	0x2000076c
 8000f24:	0800a724 	.word	0x0800a724
 8000f28:	0800a740 	.word	0x0800a740

08000f2c <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	/* Debugging by jD */
	strcpy((char*)uart1Buffer, "start broadcaster!\n\r");
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <StartDefaultTask+0x90>)
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <StartDefaultTask+0x94>)
 8000f38:	4614      	mov	r4, r2
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f44:	6020      	str	r0, [r4, #0]
 8000f46:	3404      	adds	r4, #4
 8000f48:	7021      	strb	r1, [r4, #0]

	// semaComment
	if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <StartDefaultTask+0x98>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	210a      	movs	r1, #10
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fcd9 	bl	8005908 <osSemaphoreAcquire>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10f      	bne.n	8000f7c <StartDefaultTask+0x50>
		HAL_UART_Transmit(&huart2, uart1Buffer, strlen((char*)uart1Buffer), HAL_MAX_DELAY);
 8000f5c:	4817      	ldr	r0, [pc, #92]	; (8000fbc <StartDefaultTask+0x90>)
 8000f5e:	f7ff f937 	bl	80001d0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	4914      	ldr	r1, [pc, #80]	; (8000fbc <StartDefaultTask+0x90>)
 8000f6c:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <StartDefaultTask+0x9c>)
 8000f6e:	f002 fd1f 	bl	80039b0 <HAL_UART_Transmit>
		osSemaphoreRelease(uartSemaHandle);
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <StartDefaultTask+0x98>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fd18 	bl	80059ac <osSemaphoreRelease>
	}
	strcpy((char*)uart1Buffer, "\0");
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <StartDefaultTask+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]

	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 128, NULL, osPriorityNormal1, &xUartTaskHandle);
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <StartDefaultTask+0xa0>)
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <StartDefaultTask+0xa4>)
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	2319      	movs	r3, #25
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <StartDefaultTask+0xa8>)
 8000f94:	f005 ffd3 	bl	8006f3e <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <StartDefaultTask+0xac>)
 8000f9a:	f7ff faf3 	bl	8000584 <LL_USART_EnableIT_IDLE>
	// NOTE: Please check stm32l4xx_it.c for the USER-CODE that handles the IDLE Line Interrupt!!
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 8000f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa2:	4906      	ldr	r1, [pc, #24]	; (8000fbc <StartDefaultTask+0x90>)
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <StartDefaultTask+0xb0>)
 8000fa6:	f002 fe5b 	bl	8003c60 <HAL_UART_Receive_DMA>

	StartTcpServer();
 8000faa:	f7ff fd1b 	bl	80009e4 <StartTcpServer>

	HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <StartDefaultTask+0xb4>)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <StartDefaultTask+0x9c>)
 8000fb4:	f002 fdfe 	bl	8003bb4 <HAL_UART_Receive_IT>

	osThreadExit();
 8000fb8:	f004 fbfc 	bl	80057b4 <osThreadExit>
 8000fbc:	20000894 	.word	0x20000894
 8000fc0:	0800a754 	.word	0x0800a754
 8000fc4:	20000840 	.word	0x20000840
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20002898 	.word	0x20002898
 8000fd4:	08000ac9 	.word	0x08000ac9
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	20000098 	.word	0x20000098
 8000fe0:	20002896 	.word	0x20002896

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff6:	f000 fb25 	bl	8001644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40001000 	.word	0x40001000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_MspInit+0x4c>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_MspInit+0x4c>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_MspInit+0x4c>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_MspInit+0x4c>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_MspInit+0x4c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_MspInit+0x4c>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	210f      	movs	r1, #15
 800104e:	f06f 0001 	mvn.w	r0, #1
 8001052:	f000 fbcf 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0a0      	sub	sp, #128	; 0x80
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	2254      	movs	r2, #84	; 0x54
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f008 f9a2 	bl	80093ce <memset>
  if(huart->Instance==USART1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a5f      	ldr	r2, [pc, #380]	; (800120c <HAL_UART_MspInit+0x1a8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d169      	bne.n	8001168 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001098:	2300      	movs	r3, #0
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 febf 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010ac:	f7ff ffac 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b0:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b4:	4a56      	ldr	r2, [pc, #344]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ba:	6613      	str	r3, [r2, #96]	; 0x60
 80010bc:	4b54      	ldr	r3, [pc, #336]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b51      	ldr	r3, [pc, #324]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b4e      	ldr	r3, [pc, #312]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f2:	2307      	movs	r3, #7
 80010f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f000 fe18 	bl	8001d34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 8001106:	4a44      	ldr	r2, [pc, #272]	; (8001218 <HAL_UART_MspInit+0x1b4>)
 8001108:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800110a:	4b42      	ldr	r3, [pc, #264]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 800110c:	2202      	movs	r2, #2
 800110e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800111c:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 8001130:	2220      	movs	r2, #32
 8001132:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800113a:	4836      	ldr	r0, [pc, #216]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 800113c:	f000 fb84 	bl	8001848 <HAL_DMA_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001146:	f7ff ff5f 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a31      	ldr	r2, [pc, #196]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 800114e:	671a      	str	r2, [r3, #112]	; 0x70
 8001150:	4a30      	ldr	r2, [pc, #192]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2025      	movs	r0, #37	; 0x25
 800115c:	f000 fb4a 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001160:	2025      	movs	r0, #37	; 0x25
 8001162:	f000 fb63 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001166:	e04d      	b.n	8001204 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a2b      	ldr	r2, [pc, #172]	; (800121c <HAL_UART_MspInit+0x1b8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d148      	bne.n	8001204 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fe50 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800118a:	f7ff ff3d 	bl	8001008 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011be:	2304      	movs	r3, #4
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ce:	2307      	movs	r3, #7
 80011d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f000 fdaa 	bl	8001d34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011f2:	2303      	movs	r3, #3
 80011f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f000 fd98 	bl	8001d34 <HAL_GPIO_Init>
}
 8001204:	bf00      	nop
 8001206:	3780      	adds	r7, #128	; 0x80
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40013800 	.word	0x40013800
 8001210:	40021000 	.word	0x40021000
 8001214:	200001a0 	.word	0x200001a0
 8001218:	40020058 	.word	0x40020058
 800121c:	40004400 	.word	0x40004400

08001220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <HAL_InitTick+0xe0>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a33      	ldr	r2, [pc, #204]	; (8001300 <HAL_InitTick+0xe0>)
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_InitTick+0xe0>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001246:	f107 0210 	add.w	r2, r7, #16
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fd55 	bl	8002d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001260:	f001 fd22 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8001264:	6378      	str	r0, [r7, #52]	; 0x34
 8001266:	e004      	b.n	8001272 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001268:	f001 fd1e 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 800126c:	4603      	mov	r3, r0
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001274:	4a23      	ldr	r2, [pc, #140]	; (8001304 <HAL_InitTick+0xe4>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	3b01      	subs	r3, #1
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_InitTick+0xe8>)
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <HAL_InitTick+0xec>)
 8001284:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_InitTick+0xe8>)
 8001288:	f240 32e7 	movw	r2, #999	; 0x3e7
 800128c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <HAL_InitTick+0xe8>)
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_InitTick+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_InitTick+0xe8>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_InitTick+0xe8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012a6:	4818      	ldr	r0, [pc, #96]	; (8001308 <HAL_InitTick+0xe8>)
 80012a8:	f002 f8b4 	bl	8003414 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d11b      	bne.n	80012f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012ba:	4813      	ldr	r0, [pc, #76]	; (8001308 <HAL_InitTick+0xe8>)
 80012bc:	f002 f90c 	bl	80034d8 <HAL_TIM_Base_Start_IT>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d111      	bne.n	80012f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012ce:	2036      	movs	r0, #54	; 0x36
 80012d0:	f000 faac 	bl	800182c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	d808      	bhi.n	80012ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012da:	2200      	movs	r2, #0
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	2036      	movs	r0, #54	; 0x36
 80012e0:	f000 fa88 	bl	80017f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_InitTick+0xf0>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e002      	b.n	80012f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3738      	adds	r7, #56	; 0x38
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	431bde83 	.word	0x431bde83
 8001308:	200028a0 	.word	0x200028a0
 800130c:	40001000 	.word	0x40001000
 8001310:	2000000c 	.word	0x2000000c

08001314 <LL_USART_IsActiveFlag_IDLE>:
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b10      	cmp	r3, #16
 8001326:	d101      	bne.n	800132c <LL_USART_IsActiveFlag_IDLE+0x18>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <LL_USART_IsActiveFlag_IDLE+0x1a>
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_USART_ClearFlag_IDLE>:
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2210      	movs	r2, #16
 8001346:	621a      	str	r2, [r3, #32]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b10      	cmp	r3, #16
 8001366:	d101      	bne.n	800136c <LL_USART_IsEnabledIT_IDLE+0x18>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <LL_USART_IsEnabledIT_IDLE+0x1a>
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137e:	e7fe      	b.n	800137e <NMI_Handler+0x4>

08001380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <HardFault_Handler+0x4>

08001386 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <MemManage_Handler+0x4>

0800138c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <BusFault_Handler+0x4>

08001392 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <UsageFault_Handler+0x4>

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA1_Channel5_IRQHandler+0x10>)
 80013ae:	f000 fbe2 	bl	8001b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001a0 	.word	0x200001a0

080013bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013c2:	4816      	ldr	r0, [pc, #88]	; (800141c <USART1_IRQHandler+0x60>)
 80013c4:	f002 fca2 	bl	8003d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 80013c8:	4815      	ldr	r0, [pc, #84]	; (8001420 <USART1_IRQHandler+0x64>)
 80013ca:	f7ff ffc3 	bl	8001354 <LL_USART_IsEnabledIT_IDLE>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01e      	beq.n	8001412 <USART1_IRQHandler+0x56>
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <USART1_IRQHandler+0x64>)
 80013d6:	f7ff ff9d 	bl	8001314 <LL_USART_IsActiveFlag_IDLE>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d018      	beq.n	8001412 <USART1_IRQHandler+0x56>

	  LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 80013e0:	480f      	ldr	r0, [pc, #60]	; (8001420 <USART1_IRQHandler+0x64>)
 80013e2:	f7ff ffaa 	bl	800133a <LL_USART_ClearFlag_IDLE>
	  // Give a task notification to the UART2 Task
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
	  xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <USART1_IRQHandler+0x68>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	2201      	movs	r2, #1
 80013f6:	2101      	movs	r1, #1
 80013f8:	f006 fde8 	bl	8007fcc <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <USART1_IRQHandler+0x56>
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <USART1_IRQHandler+0x6c>)
 8001404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	f3bf 8f6f 	isb	sy
  }

  /* USER CODE END USART1_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000098 	.word	0x20000098
 8001420:	40013800 	.word	0x40013800
 8001424:	20002898 	.word	0x20002898
 8001428:	e000ed04 	.word	0xe000ed04

0800142c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USART2_IRQHandler+0x10>)
 8001432:	f002 fc6b 	bl	8003d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000011c 	.word	0x2000011c

08001440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM6_DAC_IRQHandler+0x10>)
 8001446:	f002 f89b 	bl	8003580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200028a0 	.word	0x200028a0

08001454 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e00a      	b.n	800147c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001466:	f3af 8000 	nop.w
 800146a:	4601      	mov	r1, r0
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	60ba      	str	r2, [r7, #8]
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf0      	blt.n	8001466 <_read+0x12>
  }

  return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e009      	b.n	80014b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	60ba      	str	r2, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbf1      	blt.n	80014a0 <_write+0x12>
  }
  return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_close>:

int _close(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ee:	605a      	str	r2, [r3, #4]
  return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_isatty>:

int _isatty(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <_sbrk+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <_sbrk+0x60>)
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x64>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <_sbrk+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001560:	f007 fdf4 	bl	800914c <__errno>
 8001564:	4603      	mov	r3, r0
 8001566:	220c      	movs	r2, #12
 8001568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156e:	e009      	b.n	8001584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <_sbrk+0x64>)
 8001580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20010000 	.word	0x20010000
 8001590:	00000400 	.word	0x00000400
 8001594:	200028ec 	.word	0x200028ec
 8001598:	200042d0 	.word	0x200042d0

0800159c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c4:	f7ff ffea 	bl	800159c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopForever+0x6>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopForever+0xe>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopForever+0x16>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f007 fea9 	bl	8009344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015f2:	f7ff f829 	bl	8000648 <main>

080015f6 <LoopForever>:

LoopForever:
    b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001604:	0800a908 	.word	0x0800a908
  ldr r2, =_sbss
 8001608:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800160c:	200042cc 	.word	0x200042cc

08001610 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_IRQHandler>

08001612 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f8de 	bl	80017de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001622:	200f      	movs	r0, #15
 8001624:	f7ff fdfc 	bl	8001220 <HAL_InitTick>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	e001      	b.n	8001638 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001634:	f7ff fcee 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001638:	79fb      	ldrb	r3, [r7, #7]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000010 	.word	0x20000010
 8001668:	200028f0 	.word	0x200028f0

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200028f0 	.word	0x200028f0

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff4c 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001806:	f7ff ff61 	bl	80016cc <__NVIC_GetPriorityGrouping>
 800180a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	6978      	ldr	r0, [r7, #20]
 8001812:	f7ff ffb1 	bl	8001778 <NVIC_EncodePriority>
 8001816:	4602      	mov	r2, r0
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff80 	bl	8001724 <__NVIC_SetPriority>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff54 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e098      	b.n	800198c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <HAL_DMA_Init+0x150>)
 8001862:	429a      	cmp	r2, r3
 8001864:	d80f      	bhi.n	8001886 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_DMA_Init+0x154>)
 800186e:	4413      	add	r3, r2
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_DMA_Init+0x158>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	009a      	lsls	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_DMA_Init+0x15c>)
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
 8001884:	e00e      	b.n	80018a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_DMA_Init+0x160>)
 800188e:	4413      	add	r3, r2
 8001890:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <HAL_DMA_Init+0x158>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a42      	ldr	r2, [pc, #264]	; (80019ac <HAL_DMA_Init+0x164>)
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018fe:	d039      	beq.n	8001974 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_DMA_Init+0x15c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d11a      	bne.n	8001940 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_DMA_Init+0x168>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f003 031c 	and.w	r3, r3, #28
 8001916:	210f      	movs	r1, #15
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4924      	ldr	r1, [pc, #144]	; (80019b0 <HAL_DMA_Init+0x168>)
 8001920:	4013      	ands	r3, r2
 8001922:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_DMA_Init+0x168>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f003 031c 	and.w	r3, r3, #28
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	491d      	ldr	r1, [pc, #116]	; (80019b0 <HAL_DMA_Init+0x168>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
 800193e:	e019      	b.n	8001974 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_DMA_Init+0x16c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f003 031c 	and.w	r3, r3, #28
 800194c:	210f      	movs	r1, #15
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	4917      	ldr	r1, [pc, #92]	; (80019b4 <HAL_DMA_Init+0x16c>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_DMA_Init+0x16c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f003 031c 	and.w	r3, r3, #28
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	4911      	ldr	r1, [pc, #68]	; (80019b4 <HAL_DMA_Init+0x16c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40020407 	.word	0x40020407
 800199c:	bffdfff8 	.word	0xbffdfff8
 80019a0:	cccccccd 	.word	0xcccccccd
 80019a4:	40020000 	.word	0x40020000
 80019a8:	bffdfbf8 	.word	0xbffdfbf8
 80019ac:	40020400 	.word	0x40020400
 80019b0:	400200a8 	.word	0x400200a8
 80019b4:	400204a8 	.word	0x400204a8

080019b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_DMA_Start_IT+0x20>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e04b      	b.n	8001a70 <HAL_DMA_Start_IT+0xb8>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d13a      	bne.n	8001a62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f95f 	bl	8001cd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 020e 	orr.w	r2, r2, #14
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e00f      	b.n	8001a50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0204 	bic.w	r2, r2, #4
 8001a3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 020a 	orr.w	r2, r2, #10
 8001a4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e005      	b.n	8001a6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e022      	b.n	8001ae8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020e 	bic.w	r2, r2, #14
 8001ab0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f003 021c 	and.w	r2, r3, #28
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d005      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e029      	b.n	8001b6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 020e 	bic.w	r2, r2, #14
 8001b26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f003 021c 	and.w	r2, r3, #28
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
    }
  }
  return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 031c 	and.w	r3, r3, #28
 8001b96:	2204      	movs	r2, #4
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d026      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x7a>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d021      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0204 	bic.w	r2, r2, #4
 8001bc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f003 021c 	and.w	r2, r3, #28
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d071      	beq.n	8001cca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bee:	e06c      	b.n	8001cca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	f003 031c 	and.w	r3, r3, #28
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d02e      	beq.n	8001c62 <HAL_DMA_IRQHandler+0xec>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d029      	beq.n	8001c62 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10b      	bne.n	8001c34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 020a 	bic.w	r2, r2, #10
 8001c2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	f003 021c 	and.w	r2, r3, #28
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2102      	movs	r1, #2
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d038      	beq.n	8001cca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c60:	e033      	b.n	8001cca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f003 031c 	and.w	r3, r3, #28
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d02a      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x156>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d025      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 020e 	bic.w	r2, r2, #14
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f003 021c 	and.w	r2, r3, #28
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d004      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
}
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f003 021c 	and.w	r2, r3, #28
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d108      	bne.n	8001d18 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d16:	e007      	b.n	8001d28 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e148      	b.n	8001fd6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 813a 	beq.w	8001fd0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d005      	beq.n	8001d74 <HAL_GPIO_Init+0x40>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d130      	bne.n	8001dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001daa:	2201      	movs	r2, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	f003 0201 	and.w	r2, r3, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d017      	beq.n	8001e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0203 	and.w	r2, r3, #3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8094 	beq.w	8001fd0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eac:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec0:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eea:	d00d      	beq.n	8001f08 <HAL_GPIO_Init+0x1d4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a43      	ldr	r2, [pc, #268]	; (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <HAL_GPIO_Init+0x1d0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a42      	ldr	r2, [pc, #264]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_GPIO_Init+0x1cc>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1d6>
 8001f00:	2307      	movs	r3, #7
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1d6>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1d6>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f1a:	4937      	ldr	r1, [pc, #220]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f4c:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f76:	4a23      	ldr	r2, [pc, #140]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa0:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f47f aeaf 	bne.w	8001d44 <HAL_GPIO_Init+0x10>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	48000400 	.word	0x48000400
 8002000:	48000800 	.word	0x48000800
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e001      	b.n	800202a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002054:	e002      	b.n	800205c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40007000 	.word	0x40007000

08002088 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40007000 	.word	0x40007000

080020a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b2:	d130      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c0:	d038      	beq.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2232      	movs	r2, #50	; 0x32
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e8:	e002      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fc:	d102      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f2      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d110      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e00f      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d007      	beq.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800212c:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40007000 	.word	0x40007000
 8002148:	20000008 	.word	0x20000008
 800214c:	431bde83 	.word	0x431bde83

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f000 bc02 	b.w	8002968 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002164:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216e:	4b94      	ldr	r3, [pc, #592]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80e4 	beq.w	800234e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_RCC_OscConfig+0x4c>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	f040 808b 	bne.w	80022aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 8087 	bne.w	80022aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219c:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x64>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e3d9      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_RCC_OscConfig+0x7e>
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021cc:	e005      	b.n	80021da <HAL_RCC_OscConfig+0x8a>
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021da:	4293      	cmp	r3, r2
 80021dc:	d223      	bcs.n	8002226 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fdbe 	bl	8002d64 <RCC_SetFlashLatencyFromMSIRange>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e3ba      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a72      	ldr	r2, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	496d      	ldr	r1, [pc, #436]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	4968      	ldr	r1, [pc, #416]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
 8002224:	e025      	b.n	8002272 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4960      	ldr	r1, [pc, #384]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002244:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	495b      	ldr	r1, [pc, #364]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fd7e 	bl	8002d64 <RCC_SetFlashLatencyFromMSIRange>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e37a      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002272:	f000 fc81 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4950      	ldr	r1, [pc, #320]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a4e      	ldr	r2, [pc, #312]	; (80023c8 <HAL_RCC_OscConfig+0x278>)
 8002290:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002292:	4b4e      	ldr	r3, [pc, #312]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ffc2 	bl	8001220 <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d052      	beq.n	800234c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	e35e      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d032      	beq.n	8002318 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022be:	f7ff f9d5 	bl	800166c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c6:	f7ff f9d1 	bl	800166c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e347      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a35      	ldr	r2, [pc, #212]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b33      	ldr	r3, [pc, #204]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4930      	ldr	r1, [pc, #192]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	492b      	ldr	r1, [pc, #172]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
 8002316:	e01a      	b.n	800234e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002324:	f7ff f9a2 	bl	800166c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232c:	f7ff f99e 	bl	800166c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e314      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1dc>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d073      	beq.n	8002442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x21c>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d063      	beq.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d15f      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e2f1      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x24c>
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e025      	b.n	80023e8 <HAL_RCC_OscConfig+0x298>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d114      	bne.n	80023d0 <HAL_RCC_OscConfig+0x280>
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e013      	b.n	80023e8 <HAL_RCC_OscConfig+0x298>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	0800a818 	.word	0x0800a818
 80023c8:	20000008 	.word	0x20000008
 80023cc:	2000000c 	.word	0x2000000c
 80023d0:	4ba0      	ldr	r3, [pc, #640]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a9f      	ldr	r2, [pc, #636]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b9d      	ldr	r3, [pc, #628]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a9c      	ldr	r2, [pc, #624]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f93c 	bl	800166c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff f938 	bl	800166c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2ae      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	4b92      	ldr	r3, [pc, #584]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2a8>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff f928 	bl	800166c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff f924 	bl	800166c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e29a      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x2d0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d060      	beq.n	8002510 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x310>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d119      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d116      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	4b7c      	ldr	r3, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x328>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e277      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4973      	ldr	r1, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248c:	e040      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d023      	beq.n	80024de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6e      	ldr	r2, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7ff f8e3 	bl	800166c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff f8df 	bl	800166c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e255      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	495f      	ldr	r1, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	e018      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7ff f8bf 	bl	800166c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff f8bb 	bl	800166c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e231      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002524:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	4a4a      	ldr	r2, [pc, #296]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff f89a 	bl	800166c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff f896 	bl	800166c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e20c      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCC_OscConfig+0x3ec>
 800255c:	e01b      	b.n	8002596 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002564:	4a3b      	ldr	r2, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7ff f87d 	bl	800166c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002576:	f7ff f879 	bl	800166c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1ef      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	4b32      	ldr	r3, [pc, #200]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80a6 	beq.w	80026f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	4a26      	ldr	r2, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	; 0x58
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7ff f840 	bl	800166c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7ff f83c 	bl	800166c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1b2      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d8>
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002626:	e029      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d115      	bne.n	800265c <HAL_RCC_OscConfig+0x50c>
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a03      	ldr	r2, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002650:	e014      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	40007000 	.word	0x40007000
 800265c:	4b9a      	ldr	r3, [pc, #616]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	4a99      	ldr	r2, [pc, #612]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800266c:	4b96      	ldr	r3, [pc, #600]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a95      	ldr	r2, [pc, #596]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d016      	beq.n	80026b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fe fff2 	bl	800166c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7fe ffee 	bl	800166c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e162      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ed      	beq.n	800268c <HAL_RCC_OscConfig+0x53c>
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fe ffdb 	bl	800166c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe ffd7 	bl	800166c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e14b      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ed      	bne.n	80026ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d03c      	beq.n	8002776 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01c      	beq.n	800273e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002704:	4b70      	ldr	r3, [pc, #448]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270a:	4a6f      	ldr	r2, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe ffaa 	bl	800166c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271c:	f7fe ffa6 	bl	800166c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e11c      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800272e:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ef      	beq.n	800271c <HAL_RCC_OscConfig+0x5cc>
 800273c:	e01b      	b.n	8002776 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800273e:	4b62      	ldr	r3, [pc, #392]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002744:	4a60      	ldr	r2, [pc, #384]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe ff8d 	bl	800166c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002756:	f7fe ff89 	bl	800166c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0ff      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 800276a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ef      	bne.n	8002756 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80f3 	beq.w	8002966 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	f040 80c9 	bne.w	800291c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800278a:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	429a      	cmp	r2, r3
 800279c:	d12c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	3b01      	subs	r3, #1
 80027aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d123      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d11b      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d113      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d109      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	3b01      	subs	r3, #1
 80027f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d06b      	beq.n	80028d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d062      	beq.n	80028c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027fe:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0ac      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2d      	ldr	r2, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002818:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800281a:	f7fe ff27 	bl	800166c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe ff23 	bl	800166c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e099      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_OscConfig+0x77c>)
 8002846:	4013      	ands	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002850:	3a01      	subs	r2, #1
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	4311      	orrs	r1, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800285a:	0212      	lsls	r2, r2, #8
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002862:	0852      	lsrs	r2, r2, #1
 8002864:	3a01      	subs	r2, #1
 8002866:	0552      	lsls	r2, r2, #21
 8002868:	4311      	orrs	r1, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800286e:	0852      	lsrs	r2, r2, #1
 8002870:	3a01      	subs	r2, #1
 8002872:	0652      	lsls	r2, r2, #25
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800287a:	06d2      	lsls	r2, r2, #27
 800287c:	430a      	orrs	r2, r1
 800287e:	4912      	ldr	r1, [pc, #72]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002880:	4313      	orrs	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 8002896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800289c:	f7fe fee6 	bl	800166c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fee2 	bl	800166c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e058      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_RCC_OscConfig+0x778>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028c2:	e050      	b.n	8002966 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e04f      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d144      	bne.n	8002966 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a23      	ldr	r2, [pc, #140]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f4:	f7fe feba 	bl	800166c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe feb6 	bl	800166c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e02c      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x7ac>
 800291a:	e024      	b.n	8002966 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d01f      	beq.n	8002962 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 8002928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fe9d 	bl	800166c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe fe99 	bl	800166c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e00f      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4905      	ldr	r1, [pc, #20]	; (8002970 <HAL_RCC_OscConfig+0x820>)
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800295c:	4013      	ands	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
 8002960:	e001      	b.n	8002966 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	feeefffc 	.word	0xfeeefffc

08002978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0e7      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b75      	ldr	r3, [pc, #468]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b72      	ldr	r3, [pc, #456]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	4970      	ldr	r1, [pc, #448]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b6e      	ldr	r3, [pc, #440]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0cf      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d908      	bls.n	80029ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4960      	ldr	r1, [pc, #384]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d04c      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d121      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0a6      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a16:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d115      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e09a      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2e:	4b4e      	ldr	r3, [pc, #312]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e08e      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e086      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4943      	ldr	r1, [pc, #268]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe fe04 	bl	800166c <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe fe00 	bl	800166c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e06e      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b31      	ldr	r3, [pc, #196]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d208      	bcs.n	8002abe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	492b      	ldr	r1, [pc, #172]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002abe:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d210      	bcs.n	8002aee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 0207 	bic.w	r2, r3, #7
 8002ad4:	4923      	ldr	r1, [pc, #140]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e036      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4918      	ldr	r1, [pc, #96]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4910      	ldr	r1, [pc, #64]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b2c:	f000 f824 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	490b      	ldr	r1, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1f4>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1fc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fb65 	bl	8001220 <HAL_InitTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	0800a818 	.word	0x0800a818
 8002b70:	20000008 	.word	0x20000008
 8002b74:	2000000c 	.word	0x2000000c

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x34>
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d121      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d11e      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bac:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e004      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d134      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d003      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0xac>
 8002c1c:	e005      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c20:	617b      	str	r3, [r7, #20]
      break;
 8002c22:	e005      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c26:	617b      	str	r3, [r7, #20]
      break;
 8002c28:	e002      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	617b      	str	r3, [r7, #20]
      break;
 8002c2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	fb03 f202 	mul.w	r2, r3, r2
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	0e5b      	lsrs	r3, r3, #25
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	3301      	adds	r3, #1
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c70:	69bb      	ldr	r3, [r7, #24]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	0800a830 	.word	0x0800a830
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	007a1200 	.word	0x007a1200

08002c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000008 	.word	0x20000008

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4904      	ldr	r1, [pc, #16]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	0800a828 	.word	0x0800a828

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cd8:	f7ff ffda 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0adb      	lsrs	r3, r3, #11
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4904      	ldr	r1, [pc, #16]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	0800a828 	.word	0x0800a828

08002d00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_GetClockConfig+0x60>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40022000 	.word	0x40022000

08002d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d70:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d7c:	f7ff f984 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002d80:	6178      	str	r0, [r7, #20]
 8002d82:	e014      	b.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d84:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d9c:	f7ff f974 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db4:	d10b      	bne.n	8002dce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b80      	cmp	r3, #128	; 0x80
 8002dba:	d919      	bls.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8002dc0:	d902      	bls.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	e013      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc8:	2301      	movs	r3, #1
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	e010      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d902      	bls.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	e00a      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d102      	bne.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de0:	2302      	movs	r3, #2
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	e004      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b70      	cmp	r3, #112	; 0x70
 8002dea:	d101      	bne.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 0207 	bic.w	r2, r3, #7
 8002df8:	4909      	ldr	r1, [pc, #36]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40022000 	.word	0x40022000

08002e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e30:	2300      	movs	r3, #0
 8002e32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d031      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e48:	d01a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e4e:	d814      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e58:	d10f      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4a5c      	ldr	r2, [pc, #368]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e66:	e00c      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f9de 	bl	8003230 <RCCEx_PLLSAI1_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e78:	e003      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e88:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	494e      	ldr	r1, [pc, #312]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e9e:	e001      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 809e 	beq.w	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eb6:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ecc:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	4a3f      	ldr	r2, [pc, #252]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed8:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee8:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a39      	ldr	r2, [pc, #228]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ef4:	f7fe fbba 	bl	800166c <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002efa:	e009      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe fbb6 	bl	800166c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f0e:	e005      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f10:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d15a      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01e      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d019      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f6a:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d016      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fb76 	bl	800166c <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f82:	e00b      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe fb72 	bl	800166c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d902      	bls.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	74fb      	strb	r3, [r7, #19]
            break;
 8002f9a:	e006      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0ec      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbe:	4904      	ldr	r1, [pc, #16]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fc6:	e009      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
 8002fcc:	e006      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fdc:	7c7b      	ldrb	r3, [r7, #17]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d105      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe2:	4b8a      	ldr	r3, [pc, #552]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	4a89      	ldr	r2, [pc, #548]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ffa:	4b84      	ldr	r3, [pc, #528]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	f023 0203 	bic.w	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4980      	ldr	r1, [pc, #512]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800301c:	4b7b      	ldr	r3, [pc, #492]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f023 020c 	bic.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	4978      	ldr	r1, [pc, #480]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800303e:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	496f      	ldr	r1, [pc, #444]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	4967      	ldr	r1, [pc, #412]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003082:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	495e      	ldr	r1, [pc, #376]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a4:	4b59      	ldr	r3, [pc, #356]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	4956      	ldr	r1, [pc, #344]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030c6:	4b51      	ldr	r3, [pc, #324]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	494d      	ldr	r1, [pc, #308]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d028      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030e8:	4b48      	ldr	r3, [pc, #288]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4945      	ldr	r1, [pc, #276]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003106:	d106      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003108:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a3f      	ldr	r2, [pc, #252]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003112:	60d3      	str	r3, [r2, #12]
 8003114:	e011      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800311e:	d10c      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	2101      	movs	r1, #1
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f882 	bl	8003230 <RCCEx_PLLSAI1_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d028      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003146:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	492d      	ldr	r1, [pc, #180]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003164:	d106      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003170:	60d3      	str	r3, [r2, #12]
 8003172:	e011      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800317c:	d10c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f853 	bl	8003230 <RCCEx_PLLSAI1_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b2:	4916      	ldr	r1, [pc, #88]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c2:	d10c      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f830 	bl	8003230 <RCCEx_PLLSAI1_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	4904      	ldr	r1, [pc, #16]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003200:	7cbb      	ldrb	r3, [r7, #18]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000

08003210 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000

08003230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800323e:	4b74      	ldr	r3, [pc, #464]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d018      	beq.n	800327c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800324a:	4b71      	ldr	r3, [pc, #452]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0203 	and.w	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d10d      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
       ||
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003262:	4b6b      	ldr	r3, [pc, #428]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
       ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d047      	beq.n	8003306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e044      	b.n	8003306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d018      	beq.n	80032b6 <RCCEx_PLLSAI1_Config+0x86>
 8003284:	2b03      	cmp	r3, #3
 8003286:	d825      	bhi.n	80032d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003288:	2b01      	cmp	r3, #1
 800328a:	d002      	beq.n	8003292 <RCCEx_PLLSAI1_Config+0x62>
 800328c:	2b02      	cmp	r3, #2
 800328e:	d009      	beq.n	80032a4 <RCCEx_PLLSAI1_Config+0x74>
 8003290:	e020      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003292:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11d      	bne.n	80032da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a2:	e01a      	b.n	80032da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032a4:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b4:	e013      	b.n	80032de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032b6:	4b56      	ldr	r3, [pc, #344]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032c2:	4b53      	ldr	r3, [pc, #332]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032d2:	e006      	b.n	80032e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e004      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ea:	4b49      	ldr	r3, [pc, #292]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	430b      	orrs	r3, r1
 8003300:	4943      	ldr	r1, [pc, #268]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d17c      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a3f      	ldr	r2, [pc, #252]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003318:	f7fe f9a8 	bl	800166c <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331e:	e009      	b.n	8003334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003320:	f7fe f9a4 	bl	800166c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d902      	bls.n	8003334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	73fb      	strb	r3, [r7, #15]
        break;
 8003332:	e005      	b.n	8003340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003334:	4b36      	ldr	r3, [pc, #216]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ef      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d15f      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d110      	bne.n	800336e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334c:	4b30      	ldr	r3, [pc, #192]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6892      	ldr	r2, [r2, #8]
 800335c:	0211      	lsls	r1, r2, #8
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68d2      	ldr	r2, [r2, #12]
 8003362:	06d2      	lsls	r2, r2, #27
 8003364:	430a      	orrs	r2, r1
 8003366:	492a      	ldr	r1, [pc, #168]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	610b      	str	r3, [r1, #16]
 800336c:	e027      	b.n	80033be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d112      	bne.n	800339a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003374:	4b26      	ldr	r3, [pc, #152]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800337c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6892      	ldr	r2, [r2, #8]
 8003384:	0211      	lsls	r1, r2, #8
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6912      	ldr	r2, [r2, #16]
 800338a:	0852      	lsrs	r2, r2, #1
 800338c:	3a01      	subs	r2, #1
 800338e:	0552      	lsls	r2, r2, #21
 8003390:	430a      	orrs	r2, r1
 8003392:	491f      	ldr	r1, [pc, #124]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	610b      	str	r3, [r1, #16]
 8003398:	e011      	b.n	80033be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	0211      	lsls	r1, r2, #8
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6952      	ldr	r2, [r2, #20]
 80033b0:	0852      	lsrs	r2, r2, #1
 80033b2:	3a01      	subs	r2, #1
 80033b4:	0652      	lsls	r2, r2, #25
 80033b6:	430a      	orrs	r2, r1
 80033b8:	4915      	ldr	r1, [pc, #84]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a13      	ldr	r2, [pc, #76]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe f94f 	bl	800166c <HAL_GetTick>
 80033ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d0:	e009      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d2:	f7fe f94b 	bl	800166c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d902      	bls.n	80033e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	73fb      	strb	r3, [r7, #15]
          break;
 80033e4:	e005      	b.n	80033f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ef      	beq.n	80033d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e049      	b.n	80034ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f841 	bl	80034c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 f9dc 	bl	8003810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d001      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e03b      	b.n	8003568 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_TIM_Base_Start_IT+0x9c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x4e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d004      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x4e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a15      	ldr	r2, [pc, #84]	; (8003578 <HAL_TIM_Base_Start_IT+0xa0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d115      	bne.n	8003552 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_TIM_Base_Start_IT+0xa4>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d015      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x8c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d011      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	e008      	b.n	8003564 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e000      	b.n	8003566 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40014000 	.word	0x40014000
 800357c:	00010007 	.word	0x00010007

08003580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0202 	mvn.w	r2, #2
 80035ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f905 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8f7 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f908 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0204 	mvn.w	r2, #4
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8db 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f8cd 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8de 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b08      	cmp	r3, #8
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0208 	mvn.w	r2, #8
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2204      	movs	r2, #4
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8b1 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f8a3 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8b4 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b10      	cmp	r3, #16
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b10      	cmp	r3, #16
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0210 	mvn.w	r2, #16
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2208      	movs	r2, #8
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f887 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f879 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f88a 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10e      	bne.n	8003704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0201 	mvn.w	r2, #1
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fc70 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b80      	cmp	r3, #128	; 0x80
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8de 	bl	80038ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373e:	d10e      	bne.n	800375e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d107      	bne.n	800375e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8d1 	bl	8003900 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d10e      	bne.n	800378a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d107      	bne.n	800378a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f838 	bl	80037fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b20      	cmp	r3, #32
 8003796:	d10e      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d107      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0220 	mvn.w	r2, #32
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f891 	bl	80038d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <TIM_Base_SetConfig+0xbc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_Base_SetConfig+0x20>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d108      	bne.n	8003842 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_Base_SetConfig+0xbc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0x52>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0x52>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <TIM_Base_SetConfig+0xc0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0x52>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <TIM_Base_SetConfig+0xc4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <TIM_Base_SetConfig+0xbc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0xa0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <TIM_Base_SetConfig+0xc0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0xa0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <TIM_Base_SetConfig+0xc4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d103      	bne.n	80038b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	615a      	str	r2, [r3, #20]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40014400 	.word	0x40014400

080038d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e040      	b.n	80039a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fb94 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	; 0x24
 8003940:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fce6 	bl	8004324 <UART_SetConfig>
 8003958:	4603      	mov	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e022      	b.n	80039a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 ff06 	bl	800477c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800397e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800398e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 ff8d 	bl	80048c0 <UART_CheckIdleState>
 80039a6:	4603      	mov	r3, r0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	; 0x28
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	f040 8082 	bne.w	8003ace <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_UART_Transmit+0x26>
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e07a      	b.n	8003ad0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x38>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e073      	b.n	8003ad0 <HAL_UART_Transmit+0x120>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2221      	movs	r2, #33	; 0x21
 80039fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fe:	f7fd fe35 	bl	800166c <HAL_GetTick>
 8003a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1c:	d108      	bne.n	8003a30 <HAL_UART_Transmit+0x80>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	e003      	b.n	8003a38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a40:	e02d      	b.n	8003a9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 ff80 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e039      	b.n	8003ad0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	3302      	adds	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e008      	b.n	8003a8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b292      	uxth	r2, r2
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1cb      	bne.n	8003a42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2140      	movs	r1, #64	; 0x40
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 ff4c 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e005      	b.n	8003ad0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b08b      	sub	sp, #44	; 0x2c
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d156      	bne.n	8003b9c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_Transmit_IT+0x22>
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e04f      	b.n	8003b9e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Transmit_IT+0x34>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e048      	b.n	8003b9e <HAL_UART_Transmit_IT+0xc6>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	d107      	bne.n	8003b58 <HAL_UART_Transmit_IT+0x80>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_UART_Transmit_IT+0xd4>)
 8003b54:	669a      	str	r2, [r3, #104]	; 0x68
 8003b56:	e002      	b.n	8003b5e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <HAL_UART_Transmit_IT+0xd8>)
 8003b5c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	372c      	adds	r7, #44	; 0x2c
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	0800518b 	.word	0x0800518b
 8003bb0:	080050d3 	.word	0x080050d3

08003bb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d142      	bne.n	8003c50 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_UART_Receive_IT+0x22>
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e03b      	b.n	8003c52 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_UART_Receive_IT+0x34>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e034      	b.n	8003c52 <HAL_UART_Receive_IT+0x9e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <HAL_UART_Receive_IT+0xa8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d01f      	beq.n	8003c40 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	69f9      	ldr	r1, [r7, #28]
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e6      	bne.n	8003c0e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 ff48 	bl	8004adc <UART_Start_Receive_IT>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40008000 	.word	0x40008000

08003c60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d142      	bne.n	8003cfc <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_UART_Receive_DMA+0x22>
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e03b      	b.n	8003cfe <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_UART_Receive_DMA+0x34>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e034      	b.n	8003cfe <HAL_UART_Receive_DMA+0x9e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_UART_Receive_DMA+0xa8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d01f      	beq.n	8003cec <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	69f9      	ldr	r1, [r7, #28]
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 ffbc 	bl	8004c70 <UART_Start_Receive_DMA>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	e000      	b.n	8003cfe <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	; 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40008000 	.word	0x40008000

08003d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b0ba      	sub	sp, #232	; 0xe8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d36:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00f      	beq.n	8003d74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 82a6 	beq.w	80042b6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
      }
      return;
 8003d72:	e2a0      	b.n	80042b6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8117 	beq.w	8003fac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d8e:	4b85      	ldr	r3, [pc, #532]	; (8003fa4 <HAL_UART_IRQHandler+0x298>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 810a 	beq.w	8003fac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d011      	beq.n	8003dc8 <HAL_UART_IRQHandler+0xbc>
 8003da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d011      	beq.n	8003df8 <HAL_UART_IRQHandler+0xec>
 8003dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2202      	movs	r2, #2
 8003de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d011      	beq.n	8003e28 <HAL_UART_IRQHandler+0x11c>
 8003e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2204      	movs	r2, #4
 8003e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1e:	f043 0202 	orr.w	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2208      	movs	r2, #8
 8003e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5a:	f043 0208 	orr.w	r2, r3, #8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d012      	beq.n	8003e96 <HAL_UART_IRQHandler+0x18a>
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00c      	beq.n	8003e96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 820c 	beq.w	80042ba <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d04f      	beq.n	8003f8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 ff8a 	bl	8004e08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d141      	bne.n	8003f86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3308      	adds	r3, #8
 8003f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1d9      	bne.n	8003f02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d013      	beq.n	8003f7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <HAL_UART_IRQHandler+0x29c>)
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd fdc6 	bl	8001af4 <HAL_DMA_Abort_IT>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d017      	beq.n	8003f9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e00f      	b.n	8003f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9ba 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e00b      	b.n	8003f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9b6 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e007      	b.n	8003f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9b2 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f9c:	e18d      	b.n	80042ba <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9e:	bf00      	nop
    return;
 8003fa0:	e18b      	b.n	80042ba <HAL_UART_IRQHandler+0x5ae>
 8003fa2:	bf00      	nop
 8003fa4:	04000120 	.word	0x04000120
 8003fa8:	080050a7 	.word	0x080050a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 8146 	bne.w	8004242 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 813f 	beq.w	8004242 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8138 	beq.w	8004242 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	f040 80b4 	bne.w	8004152 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ff6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 815f 	beq.w	80042be <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800400a:	429a      	cmp	r2, r3
 800400c:	f080 8157 	bcs.w	80042be <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 8085 	bne.w	8004136 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800405a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004062:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800406e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1da      	bne.n	800402c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3308      	adds	r3, #8
 800407c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3308      	adds	r3, #8
 8004096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800409a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800409e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e1      	bne.n	8004076 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3308      	adds	r3, #8
 80040d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e3      	bne.n	80040b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004106:	f023 0310 	bic.w	r3, r3, #16
 800410a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004118:	65bb      	str	r3, [r7, #88]	; 0x58
 800411a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800411e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e4      	bne.n	80040f6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd fca1 	bl	8001a78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004142:	b29b      	uxth	r3, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	b29b      	uxth	r3, r3
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8de 	bl	800430c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004150:	e0b5      	b.n	80042be <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800415e:	b29b      	uxth	r3, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80a7 	beq.w	80042c2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a2 	beq.w	80042c2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800418c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e4      	bne.n	800417e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	623b      	str	r3, [r7, #32]
   return(result);
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3308      	adds	r3, #8
 80041d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041d8:	633a      	str	r2, [r7, #48]	; 0x30
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	617b      	str	r3, [r7, #20]
   return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e4      	bne.n	80041fe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f866 	bl	800430c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004240:	e03f      	b.n	80042c2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <HAL_UART_IRQHandler+0x560>
 800424e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004262:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f001 f97a 	bl	800555e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800426a:	e02d      	b.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00e      	beq.n	8004296 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01c      	beq.n	80042c6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
    }
    return;
 8004294:	e017      	b.n	80042c6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
 80042a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 ffcb 	bl	800524a <UART_EndTransmit_IT>
    return;
 80042b4:	e008      	b.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80042b6:	bf00      	nop
 80042b8:	e006      	b.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80042ba:	bf00      	nop
 80042bc:	e004      	b.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80042c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042c8:	37e8      	adds	r7, #232	; 0xe8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop

080042d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004328:	b08a      	sub	sp, #40	; 0x28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	4313      	orrs	r3, r2
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4bb4      	ldr	r3, [pc, #720]	; (8004624 <UART_SetConfig+0x300>)
 8004354:	4013      	ands	r3, r2
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435c:	430b      	orrs	r3, r1
 800435e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4aa9      	ldr	r2, [pc, #676]	; (8004628 <UART_SetConfig+0x304>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438c:	4313      	orrs	r3, r2
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4aa0      	ldr	r2, [pc, #640]	; (800462c <UART_SetConfig+0x308>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d126      	bne.n	80043fc <UART_SetConfig+0xd8>
 80043ae:	4ba0      	ldr	r3, [pc, #640]	; (8004630 <UART_SetConfig+0x30c>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d81b      	bhi.n	80043f4 <UART_SetConfig+0xd0>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0xa0>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e5 	.word	0x080043e5
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043ed 	.word	0x080043ed
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e080      	b.n	80044de <UART_SetConfig+0x1ba>
 80043dc:	2302      	movs	r3, #2
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e07c      	b.n	80044de <UART_SetConfig+0x1ba>
 80043e4:	2304      	movs	r3, #4
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ea:	e078      	b.n	80044de <UART_SetConfig+0x1ba>
 80043ec:	2308      	movs	r3, #8
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e074      	b.n	80044de <UART_SetConfig+0x1ba>
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e070      	b.n	80044de <UART_SetConfig+0x1ba>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a8c      	ldr	r2, [pc, #560]	; (8004634 <UART_SetConfig+0x310>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d138      	bne.n	8004478 <UART_SetConfig+0x154>
 8004406:	4b8a      	ldr	r3, [pc, #552]	; (8004630 <UART_SetConfig+0x30c>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d82d      	bhi.n	8004470 <UART_SetConfig+0x14c>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <UART_SetConfig+0xf8>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004451 	.word	0x08004451
 8004420:	08004471 	.word	0x08004471
 8004424:	08004471 	.word	0x08004471
 8004428:	08004471 	.word	0x08004471
 800442c:	08004461 	.word	0x08004461
 8004430:	08004471 	.word	0x08004471
 8004434:	08004471 	.word	0x08004471
 8004438:	08004471 	.word	0x08004471
 800443c:	08004459 	.word	0x08004459
 8004440:	08004471 	.word	0x08004471
 8004444:	08004471 	.word	0x08004471
 8004448:	08004471 	.word	0x08004471
 800444c:	08004469 	.word	0x08004469
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e042      	b.n	80044de <UART_SetConfig+0x1ba>
 8004458:	2302      	movs	r3, #2
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e03e      	b.n	80044de <UART_SetConfig+0x1ba>
 8004460:	2304      	movs	r3, #4
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e03a      	b.n	80044de <UART_SetConfig+0x1ba>
 8004468:	2308      	movs	r3, #8
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e036      	b.n	80044de <UART_SetConfig+0x1ba>
 8004470:	2310      	movs	r3, #16
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e032      	b.n	80044de <UART_SetConfig+0x1ba>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6a      	ldr	r2, [pc, #424]	; (8004628 <UART_SetConfig+0x304>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d12a      	bne.n	80044d8 <UART_SetConfig+0x1b4>
 8004482:	4b6b      	ldr	r3, [pc, #428]	; (8004630 <UART_SetConfig+0x30c>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800448c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004490:	d01a      	beq.n	80044c8 <UART_SetConfig+0x1a4>
 8004492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004496:	d81b      	bhi.n	80044d0 <UART_SetConfig+0x1ac>
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449c:	d00c      	beq.n	80044b8 <UART_SetConfig+0x194>
 800449e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a2:	d815      	bhi.n	80044d0 <UART_SetConfig+0x1ac>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <UART_SetConfig+0x18c>
 80044a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ac:	d008      	beq.n	80044c0 <UART_SetConfig+0x19c>
 80044ae:	e00f      	b.n	80044d0 <UART_SetConfig+0x1ac>
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e012      	b.n	80044de <UART_SetConfig+0x1ba>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e00e      	b.n	80044de <UART_SetConfig+0x1ba>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c6:	e00a      	b.n	80044de <UART_SetConfig+0x1ba>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ce:	e006      	b.n	80044de <UART_SetConfig+0x1ba>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d6:	e002      	b.n	80044de <UART_SetConfig+0x1ba>
 80044d8:	2310      	movs	r3, #16
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a51      	ldr	r2, [pc, #324]	; (8004628 <UART_SetConfig+0x304>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d17a      	bne.n	80045de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d824      	bhi.n	800453a <UART_SetConfig+0x216>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0x1d4>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	0800453b 	.word	0x0800453b
 8004500:	08004525 	.word	0x08004525
 8004504:	0800453b 	.word	0x0800453b
 8004508:	0800452b 	.word	0x0800452b
 800450c:	0800453b 	.word	0x0800453b
 8004510:	0800453b 	.word	0x0800453b
 8004514:	0800453b 	.word	0x0800453b
 8004518:	08004533 	.word	0x08004533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe fbc4 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8004520:	61f8      	str	r0, [r7, #28]
        break;
 8004522:	e010      	b.n	8004546 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004524:	4b44      	ldr	r3, [pc, #272]	; (8004638 <UART_SetConfig+0x314>)
 8004526:	61fb      	str	r3, [r7, #28]
        break;
 8004528:	e00d      	b.n	8004546 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452a:	f7fe fb25 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800452e:	61f8      	str	r0, [r7, #28]
        break;
 8004530:	e009      	b.n	8004546 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004536:	61fb      	str	r3, [r7, #28]
        break;
 8004538:	e005      	b.n	8004546 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004544:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8107 	beq.w	800475c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	429a      	cmp	r2, r3
 800455c:	d305      	bcc.n	800456a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	429a      	cmp	r2, r3
 8004568:	d903      	bls.n	8004572 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004570:	e0f4      	b.n	800475c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2200      	movs	r2, #0
 8004576:	461c      	mov	r4, r3
 8004578:	4615      	mov	r5, r2
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	022b      	lsls	r3, r5, #8
 8004584:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004588:	0222      	lsls	r2, r4, #8
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	6849      	ldr	r1, [r1, #4]
 800458e:	0849      	lsrs	r1, r1, #1
 8004590:	2000      	movs	r0, #0
 8004592:	4688      	mov	r8, r1
 8004594:	4681      	mov	r9, r0
 8004596:	eb12 0a08 	adds.w	sl, r2, r8
 800459a:	eb43 0b09 	adc.w	fp, r3, r9
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ac:	4650      	mov	r0, sl
 80045ae:	4659      	mov	r1, fp
 80045b0:	f7fb fe66 	bl	8000280 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4613      	mov	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c2:	d308      	bcc.n	80045d6 <UART_SetConfig+0x2b2>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ca:	d204      	bcs.n	80045d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	60da      	str	r2, [r3, #12]
 80045d4:	e0c2      	b.n	800475c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045dc:	e0be      	b.n	800475c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e6:	d16a      	bne.n	80046be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80045e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d834      	bhi.n	800465a <UART_SetConfig+0x336>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x2d4>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	0800463d 	.word	0x0800463d
 8004600:	08004645 	.word	0x08004645
 8004604:	0800465b 	.word	0x0800465b
 8004608:	0800464b 	.word	0x0800464b
 800460c:	0800465b 	.word	0x0800465b
 8004610:	0800465b 	.word	0x0800465b
 8004614:	0800465b 	.word	0x0800465b
 8004618:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe fb44 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8004620:	61f8      	str	r0, [r7, #28]
        break;
 8004622:	e020      	b.n	8004666 <UART_SetConfig+0x342>
 8004624:	efff69f3 	.word	0xefff69f3
 8004628:	40008000 	.word	0x40008000
 800462c:	40013800 	.word	0x40013800
 8004630:	40021000 	.word	0x40021000
 8004634:	40004400 	.word	0x40004400
 8004638:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fe fb4a 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8004640:	61f8      	str	r0, [r7, #28]
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <UART_SetConfig+0x454>)
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fe fa95 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800464e:	61f8      	str	r0, [r7, #28]
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d077      	beq.n	800475c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	005a      	lsls	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d916      	bls.n	80046b6 <UART_SetConfig+0x392>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468e:	d212      	bcs.n	80046b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f023 030f 	bic.w	r3, r3, #15
 8004698:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	8afb      	ldrh	r3, [r7, #22]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	8afa      	ldrh	r2, [r7, #22]
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	e052      	b.n	800475c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046bc:	e04e      	b.n	800475c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d827      	bhi.n	8004716 <UART_SetConfig+0x3f2>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x3a8>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	08004701 	.word	0x08004701
 80046d8:	08004717 	.word	0x08004717
 80046dc:	08004707 	.word	0x08004707
 80046e0:	08004717 	.word	0x08004717
 80046e4:	08004717 	.word	0x08004717
 80046e8:	08004717 	.word	0x08004717
 80046ec:	0800470f 	.word	0x0800470f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe fada 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 80046f4:	61f8      	str	r0, [r7, #28]
        break;
 80046f6:	e014      	b.n	8004722 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7fe faec 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 80046fc:	61f8      	str	r0, [r7, #28]
        break;
 80046fe:	e010      	b.n	8004722 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <UART_SetConfig+0x454>)
 8004702:	61fb      	str	r3, [r7, #28]
        break;
 8004704:	e00d      	b.n	8004722 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004706:	f7fe fa37 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800470a:	61f8      	str	r0, [r7, #28]
        break;
 800470c:	e009      	b.n	8004722 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004712:	61fb      	str	r3, [r7, #28]
        break;
 8004714:	e005      	b.n	8004722 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004720:	bf00      	nop
    }

    if (pclk != 0U)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d019      	beq.n	800475c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	085a      	lsrs	r2, r3, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b0f      	cmp	r3, #15
 8004740:	d909      	bls.n	8004756 <UART_SetConfig+0x432>
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d205      	bcs.n	8004756 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60da      	str	r2, [r3, #12]
 8004754:	e002      	b.n	800475c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004768:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800476c:	4618      	mov	r0, r3
 800476e:	3728      	adds	r7, #40	; 0x28
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	00f42400 	.word	0x00f42400

0800477c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01a      	beq.n	8004892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800487a:	d10a      	bne.n	8004892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  }
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048d0:	f7fc fecc 	bl	800166c <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d10e      	bne.n	8004902 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f82d 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e023      	b.n	800494a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d10e      	bne.n	800492e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f817 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e00d      	b.n	800494a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4613      	mov	r3, r2
 8004960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	e0a5      	b.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800496a:	f000 80a1 	beq.w	8004ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fc fe7d 	bl	800166c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <UART_WaitOnFlagUntilTimeout+0x32>
 800497e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004980:	2b00      	cmp	r3, #0
 8004982:	d13e      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004998:	667b      	str	r3, [r7, #100]	; 0x64
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e6      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	663b      	str	r3, [r7, #96]	; 0x60
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e5      	bne.n	80049b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e067      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d04f      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1e:	d147      	bne.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e6      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3308      	adds	r3, #8
 8004a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a7c:	623a      	str	r2, [r7, #32]
 8004a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	69f9      	ldr	r1, [r7, #28]
 8004a82:	6a3a      	ldr	r2, [r7, #32]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e010      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69da      	ldr	r2, [r3, #28]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f43f af4a 	beq.w	8004964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3770      	adds	r7, #112	; 0x70
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b097      	sub	sp, #92	; 0x5c
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d10e      	bne.n	8004b2e <UART_Start_Receive_IT+0x52>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <UART_Start_Receive_IT+0x48>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b22:	e02d      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	22ff      	movs	r2, #255	; 0xff
 8004b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b2c:	e028      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <UART_Start_Receive_IT+0x76>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <UART_Start_Receive_IT+0x6c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	22ff      	movs	r2, #255	; 0xff
 8004b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b46:	e01b      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	227f      	movs	r2, #127	; 0x7f
 8004b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b50:	e016      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5a:	d10d      	bne.n	8004b78 <UART_Start_Receive_IT+0x9c>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <UART_Start_Receive_IT+0x92>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	227f      	movs	r2, #127	; 0x7f
 8004b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b6c:	e008      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	223f      	movs	r2, #63	; 0x3f
 8004b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b76:	e003      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2222      	movs	r2, #34	; 0x22
 8004b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3308      	adds	r3, #8
 8004bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e5      	bne.n	8004b8e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	d107      	bne.n	8004bdc <UART_Start_Receive_IT+0x100>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a24      	ldr	r2, [pc, #144]	; (8004c68 <UART_Start_Receive_IT+0x18c>)
 8004bd8:	665a      	str	r2, [r3, #100]	; 0x64
 8004bda:	e002      	b.n	8004be2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <UART_Start_Receive_IT+0x190>)
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d019      	beq.n	8004c26 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	637b      	str	r3, [r7, #52]	; 0x34
 8004c12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_Start_Receive_IT+0x116>
 8004c24:	e018      	b.n	8004c58 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	613b      	str	r3, [r7, #16]
   return(result);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f043 0320 	orr.w	r3, r3, #32
 8004c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c44:	623b      	str	r3, [r7, #32]
 8004c46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	69f9      	ldr	r1, [r7, #28]
 8004c4a:	6a3a      	ldr	r2, [r7, #32]
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e6      	bne.n	8004c26 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	375c      	adds	r7, #92	; 0x5c
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	080053ff 	.word	0x080053ff
 8004c6c:	0800529f 	.word	0x0800529f

08004c70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b096      	sub	sp, #88	; 0x58
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2222      	movs	r2, #34	; 0x22
 8004c98:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d02b      	beq.n	8004cfa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4a42      	ldr	r2, [pc, #264]	; (8004db0 <UART_Start_Receive_DMA+0x140>)
 8004ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	4a41      	ldr	r2, [pc, #260]	; (8004db4 <UART_Start_Receive_DMA+0x144>)
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a40      	ldr	r2, [pc, #256]	; (8004db8 <UART_Start_Receive_DMA+0x148>)
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3324      	adds	r3, #36	; 0x24
 8004ccc:	4619      	mov	r1, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	f7fc fe6f 	bl	80019b8 <HAL_DMA_Start_IT>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e055      	b.n	8004da6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d018      	beq.n	8004d3c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d2a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e6      	bne.n	8004d0a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d5c:	637a      	str	r2, [r7, #52]	; 0x34
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d90:	623a      	str	r2, [r7, #32]
 8004d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	6a3a      	ldr	r2, [r7, #32]
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3758      	adds	r7, #88	; 0x58
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	08004ecf 	.word	0x08004ecf
 8004db4:	08004ff3 	.word	0x08004ff3
 8004db8:	0800502b 	.word	0x0800502b

08004dbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b089      	sub	sp, #36	; 0x24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e6      	bne.n	8004dc4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004dfc:	bf00      	nop
 8004dfe:	3724      	adds	r7, #36	; 0x24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b095      	sub	sp, #84	; 0x54
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e6      	bne.n	8004e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e5      	bne.n	8004e42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d118      	bne.n	8004eb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f023 0310 	bic.w	r3, r3, #16
 8004e92:	647b      	str	r3, [r7, #68]	; 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6979      	ldr	r1, [r7, #20]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e6      	bne.n	8004e7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ec2:	bf00      	nop
 8004ec4:	3754      	adds	r7, #84	; 0x54
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b09c      	sub	sp, #112	; 0x70
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d170      	bne.n	8004fcc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e6      	bne.n	8004ef2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f44:	647a      	str	r2, [r7, #68]	; 0x44
 8004f46:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	623b      	str	r3, [r7, #32]
   return(result);
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f78:	633a      	str	r2, [r7, #48]	; 0x30
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	2220      	movs	r2, #32
 8004f90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d118      	bne.n	8004fcc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e6      	bne.n	8004f9a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fde:	f7ff f995 	bl	800430c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fe2:	e002      	b.n	8004fea <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004fe4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fe6:	f7fb fe65 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 8004fea:	bf00      	nop
 8004fec:	3770      	adds	r7, #112	; 0x70
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005004:	2b01      	cmp	r3, #1
 8005006:	d109      	bne.n	800501c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	4619      	mov	r1, r3
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff f979 	bl	800430c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800501a:	e002      	b.n	8005022 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff f961 	bl	80042e4 <HAL_UART_RxHalfCpltCallback>
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800503c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005042:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d109      	bne.n	8005066 <UART_DMAError+0x3c>
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b21      	cmp	r3, #33	; 0x21
 8005056:	d106      	bne.n	8005066 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2200      	movs	r2, #0
 800505c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005060:	6978      	ldr	r0, [r7, #20]
 8005062:	f7ff feab 	bl	8004dbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d109      	bne.n	8005088 <UART_DMAError+0x5e>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b22      	cmp	r3, #34	; 0x22
 8005078:	d106      	bne.n	8005088 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005082:	6978      	ldr	r0, [r7, #20]
 8005084:	f7ff fec0 	bl	8004e08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	f043 0210 	orr.w	r2, r3, #16
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005098:	6978      	ldr	r0, [r7, #20]
 800509a:	f7ff f92d 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff f917 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b08f      	sub	sp, #60	; 0x3c
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050de:	2b21      	cmp	r3, #33	; 0x21
 80050e0:	d14d      	bne.n	800517e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d132      	bne.n	8005154 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	60bb      	str	r3, [r7, #8]
   return(result);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005134:	633b      	str	r3, [r7, #48]	; 0x30
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	613b      	str	r3, [r7, #16]
   return(result);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e6      	bne.n	8005120 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005152:	e014      	b.n	800517e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	b292      	uxth	r2, r2
 8005160:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800517e:	bf00      	nop
 8005180:	373c      	adds	r7, #60	; 0x3c
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800518a:	b480      	push	{r7}
 800518c:	b091      	sub	sp, #68	; 0x44
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005196:	2b21      	cmp	r3, #33	; 0x21
 8005198:	d151      	bne.n	800523e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d132      	bne.n	800520c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	623b      	str	r3, [r7, #32]
   return(result);
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	633b      	str	r3, [r7, #48]	; 0x30
 80051c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e6      	bne.n	80051a6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	617b      	str	r3, [r7, #20]
   return(result);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e6      	bne.n	80051d8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800520a:	e018      	b.n	800523e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005214:	881a      	ldrh	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521e:	b292      	uxth	r2, r2
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005226:	1c9a      	adds	r2, r3, #2
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800523e:	bf00      	nop
 8005240:	3744      	adds	r7, #68	; 0x44
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b088      	sub	sp, #32
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6979      	ldr	r1, [r7, #20]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	613b      	str	r3, [r7, #16]
   return(result);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e6      	bne.n	8005252 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff f81d 	bl	80042d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005296:	bf00      	nop
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b096      	sub	sp, #88	; 0x58
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b4:	2b22      	cmp	r3, #34	; 0x22
 80052b6:	f040 8094 	bne.w	80053e2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80052c8:	b2d9      	uxtb	r1, r3
 80052ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	400a      	ands	r2, r1
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d179      	bne.n	80053f6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005316:	653b      	str	r3, [r7, #80]	; 0x50
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	647b      	str	r3, [r7, #68]	; 0x44
 8005322:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800532e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	623b      	str	r3, [r7, #32]
   return(result);
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005354:	633a      	str	r2, [r7, #48]	; 0x30
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800535a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	2b01      	cmp	r3, #1
 800537a:	d12e      	bne.n	80053da <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0310 	bic.w	r3, r3, #16
 8005396:	64bb      	str	r3, [r7, #72]	; 0x48
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	617b      	str	r3, [r7, #20]
   return(result);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d103      	bne.n	80053ca <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2210      	movs	r2, #16
 80053c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fe ff9a 	bl	800430c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053d8:	e00d      	b.n	80053f6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb fc6a 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 80053e0:	e009      	b.n	80053f6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	8b1b      	ldrh	r3, [r3, #24]
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0208 	orr.w	r2, r2, #8
 80053f2:	b292      	uxth	r2, r2
 80053f4:	831a      	strh	r2, [r3, #24]
}
 80053f6:	bf00      	nop
 80053f8:	3758      	adds	r7, #88	; 0x58
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b096      	sub	sp, #88	; 0x58
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800540c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005414:	2b22      	cmp	r3, #34	; 0x22
 8005416:	f040 8094 	bne.w	8005542 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005420:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005428:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800542a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800542e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005432:	4013      	ands	r3, r2
 8005434:	b29a      	uxth	r2, r3
 8005436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005438:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	1c9a      	adds	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d179      	bne.n	8005556 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
 8005482:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d12e      	bne.n	800553a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	647b      	str	r3, [r7, #68]	; 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6979      	ldr	r1, [r7, #20]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	613b      	str	r3, [r7, #16]
   return(result);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e6      	bne.n	80054e2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b10      	cmp	r3, #16
 8005520:	d103      	bne.n	800552a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2210      	movs	r2, #16
 8005528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fe feea 	bl	800430c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005538:	e00d      	b.n	8005556 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fb fbba 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 8005540:	e009      	b.n	8005556 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	8b1b      	ldrh	r3, [r3, #24]
 8005548:	b29a      	uxth	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0208 	orr.w	r2, r2, #8
 8005552:	b292      	uxth	r2, r2
 8005554:	831a      	strh	r2, [r3, #24]
}
 8005556:	bf00      	nop
 8005558:	3758      	adds	r7, #88	; 0x58
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <__NVIC_SetPriority>:
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005584:	2b00      	cmp	r3, #0
 8005586:	db0a      	blt.n	800559e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	490c      	ldr	r1, [pc, #48]	; (80055c0 <__NVIC_SetPriority+0x4c>)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	0112      	lsls	r2, r2, #4
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	440b      	add	r3, r1
 8005598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800559c:	e00a      	b.n	80055b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4908      	ldr	r1, [pc, #32]	; (80055c4 <__NVIC_SetPriority+0x50>)
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	3b04      	subs	r3, #4
 80055ac:	0112      	lsls	r2, r2, #4
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	440b      	add	r3, r1
 80055b2:	761a      	strb	r2, [r3, #24]
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	e000e100 	.word	0xe000e100
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <SysTick_Handler+0x1c>)
 80055ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055d0:	f002 fb12 	bl	8007bf8 <xTaskGetSchedulerState>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055da:	f003 fb3d 	bl	8008c58 <xPortSysTickHandler>
  }
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	e000e010 	.word	0xe000e010

080055e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055ec:	2100      	movs	r1, #0
 80055ee:	f06f 0004 	mvn.w	r0, #4
 80055f2:	f7ff ffbf 	bl	8005574 <__NVIC_SetPriority>
#endif
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005602:	f3ef 8305 	mrs	r3, IPSR
 8005606:	603b      	str	r3, [r7, #0]
  return(result);
 8005608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800560e:	f06f 0305 	mvn.w	r3, #5
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	e00c      	b.n	8005630 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <osKernelInitialize+0x44>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <osKernelInitialize+0x44>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005624:	2300      	movs	r3, #0
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	e002      	b.n	8005630 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800562e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005630:	687b      	ldr	r3, [r7, #4]
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	200028f4 	.word	0x200028f4

08005644 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564a:	f3ef 8305 	mrs	r3, IPSR
 800564e:	603b      	str	r3, [r7, #0]
  return(result);
 8005650:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005656:	f06f 0305 	mvn.w	r3, #5
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	e010      	b.n	8005680 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <osKernelStart+0x48>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d109      	bne.n	800567a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005666:	f7ff ffbf 	bl	80055e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <osKernelStart+0x48>)
 800566c:	2202      	movs	r2, #2
 800566e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005670:	f001 fe66 	bl	8007340 <vTaskStartScheduler>
      stat = osOK;
 8005674:	2300      	movs	r3, #0
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	e002      	b.n	8005680 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800567a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800567e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005680:	687b      	ldr	r3, [r7, #4]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	200028f4 	.word	0x200028f4

08005690 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b08e      	sub	sp, #56	; 0x38
 8005694:	af04      	add	r7, sp, #16
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056a0:	f3ef 8305 	mrs	r3, IPSR
 80056a4:	617b      	str	r3, [r7, #20]
  return(result);
 80056a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d17e      	bne.n	80057aa <osThreadNew+0x11a>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d07b      	beq.n	80057aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056b6:	2318      	movs	r3, #24
 80056b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d045      	beq.n	8005756 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <osThreadNew+0x48>
        name = attr->name;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <osThreadNew+0x6e>
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2b38      	cmp	r3, #56	; 0x38
 80056f0:	d805      	bhi.n	80056fe <osThreadNew+0x6e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <osThreadNew+0x72>
        return (NULL);
 80056fe:	2300      	movs	r3, #0
 8005700:	e054      	b.n	80057ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <osThreadNew+0xa8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	2bbb      	cmp	r3, #187	; 0xbb
 8005720:	d90a      	bls.n	8005738 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <osThreadNew+0xa8>
        mem = 1;
 8005732:	2301      	movs	r3, #1
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e010      	b.n	800575a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10c      	bne.n	800575a <osThreadNew+0xca>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <osThreadNew+0xca>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <osThreadNew+0xca>
          mem = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e001      	b.n	800575a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d110      	bne.n	8005782 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005768:	9202      	str	r2, [sp, #8]
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6a3a      	ldr	r2, [r7, #32]
 8005774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f001 fb84 	bl	8006e84 <xTaskCreateStatic>
 800577c:	4603      	mov	r3, r0
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	e013      	b.n	80057aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d110      	bne.n	80057aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	b29a      	uxth	r2, r3
 800578c:	f107 0310 	add.w	r3, r7, #16
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f001 fbcf 	bl	8006f3e <xTaskCreate>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d001      	beq.n	80057aa <osThreadNew+0x11a>
            hTask = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057aa:	693b      	ldr	r3, [r7, #16]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3728      	adds	r7, #40	; 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f001 fd1b 	bl	80071f4 <vTaskDelete>
#endif
  for (;;);
 80057be:	e7fe      	b.n	80057be <osThreadExit+0xa>

080057c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c8:	f3ef 8305 	mrs	r3, IPSR
 80057cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80057ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <osDelay+0x1c>
    stat = osErrorISR;
 80057d4:	f06f 0305 	mvn.w	r3, #5
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e007      	b.n	80057ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fd76 	bl	80072d8 <vTaskDelay>
    }
  }

  return (stat);
 80057ec:	68fb      	ldr	r3, [r7, #12]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08a      	sub	sp, #40	; 0x28
 80057fa:	af02      	add	r7, sp, #8
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005806:	f3ef 8305 	mrs	r3, IPSR
 800580a:	613b      	str	r3, [r7, #16]
  return(result);
 800580c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800580e:	2b00      	cmp	r3, #0
 8005810:	d175      	bne.n	80058fe <osSemaphoreNew+0x108>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d072      	beq.n	80058fe <osSemaphoreNew+0x108>
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	429a      	cmp	r2, r3
 800581e:	d86e      	bhi.n	80058fe <osSemaphoreNew+0x108>
    mem = -1;
 8005820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005824:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d015      	beq.n	8005858 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d006      	beq.n	8005842 <osSemaphoreNew+0x4c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2b4f      	cmp	r3, #79	; 0x4f
 800583a:	d902      	bls.n	8005842 <osSemaphoreNew+0x4c>
        mem = 1;
 800583c:	2301      	movs	r3, #1
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e00c      	b.n	800585c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <osSemaphoreNew+0x66>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <osSemaphoreNew+0x66>
          mem = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e001      	b.n	800585c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005862:	d04c      	beq.n	80058fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d128      	bne.n	80058bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10a      	bne.n	8005886 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2203      	movs	r2, #3
 8005876:	9200      	str	r2, [sp, #0]
 8005878:	2200      	movs	r2, #0
 800587a:	2100      	movs	r1, #0
 800587c:	2001      	movs	r0, #1
 800587e:	f000 fb5b 	bl	8005f38 <xQueueGenericCreateStatic>
 8005882:	61f8      	str	r0, [r7, #28]
 8005884:	e005      	b.n	8005892 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005886:	2203      	movs	r2, #3
 8005888:	2100      	movs	r1, #0
 800588a:	2001      	movs	r0, #1
 800588c:	f000 fbcc 	bl	8006028 <xQueueGenericCreate>
 8005890:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d022      	beq.n	80058de <osSemaphoreNew+0xe8>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01f      	beq.n	80058de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800589e:	2300      	movs	r3, #0
 80058a0:	2200      	movs	r2, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	69f8      	ldr	r0, [r7, #28]
 80058a6:	f000 fc87 	bl	80061b8 <xQueueGenericSend>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d016      	beq.n	80058de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80058b0:	69f8      	ldr	r0, [r7, #28]
 80058b2:	f001 f913 	bl	8006adc <vQueueDelete>
            hSemaphore = NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e010      	b.n	80058de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d108      	bne.n	80058d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	461a      	mov	r2, r3
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fc09 	bl	80060e2 <xQueueCreateCountingSemaphoreStatic>
 80058d0:	61f8      	str	r0, [r7, #28]
 80058d2:	e004      	b.n	80058de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fc3a 	bl	8006150 <xQueueCreateCountingSemaphore>
 80058dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00c      	beq.n	80058fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e001      	b.n	80058f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80058f6:	6979      	ldr	r1, [r7, #20]
 80058f8:	69f8      	ldr	r0, [r7, #28]
 80058fa:	f001 fa3b 	bl	8006d74 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80058fe:	69fb      	ldr	r3, [r7, #28]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005920:	f06f 0303 	mvn.w	r3, #3
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e039      	b.n	800599c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005928:	f3ef 8305 	mrs	r3, IPSR
 800592c:	60fb      	str	r3, [r7, #12]
  return(result);
 800592e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005930:	2b00      	cmp	r3, #0
 8005932:	d022      	beq.n	800597a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800593a:	f06f 0303 	mvn.w	r3, #3
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	e02c      	b.n	800599c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	461a      	mov	r2, r3
 800594c:	2100      	movs	r1, #0
 800594e:	6938      	ldr	r0, [r7, #16]
 8005950:	f001 f844 	bl	80069dc <xQueueReceiveFromISR>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d003      	beq.n	8005962 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800595a:	f06f 0302 	mvn.w	r3, #2
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e01c      	b.n	800599c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d019      	beq.n	800599c <osSemaphoreAcquire+0x94>
 8005968:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <osSemaphoreAcquire+0xa0>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	e010      	b.n	800599c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6938      	ldr	r0, [r7, #16]
 800597e:	f000 ff21 	bl	80067c4 <xQueueSemaphoreTake>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d009      	beq.n	800599c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800598e:	f06f 0301 	mvn.w	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e002      	b.n	800599c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005996:	f06f 0302 	mvn.w	r3, #2
 800599a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800599c:	697b      	ldr	r3, [r7, #20]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80059c2:	f06f 0303 	mvn.w	r3, #3
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e02c      	b.n	8005a24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ca:	f3ef 8305 	mrs	r3, IPSR
 80059ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01a      	beq.n	8005a0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80059da:	f107 0308 	add.w	r3, r7, #8
 80059de:	4619      	mov	r1, r3
 80059e0:	6938      	ldr	r0, [r7, #16]
 80059e2:	f000 fd82 	bl	80064ea <xQueueGiveFromISR>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d003      	beq.n	80059f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80059ec:	f06f 0302 	mvn.w	r3, #2
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e017      	b.n	8005a24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d014      	beq.n	8005a24 <osSemaphoreRelease+0x78>
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <osSemaphoreRelease+0x84>)
 80059fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	e00b      	b.n	8005a24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	6938      	ldr	r0, [r7, #16]
 8005a14:	f000 fbd0 	bl	80061b8 <xQueueGenericSend>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d002      	beq.n	8005a24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a1e:	f06f 0302 	mvn.w	r3, #2
 8005a22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a24:	697b      	ldr	r3, [r7, #20]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a44:	f3ef 8305 	mrs	r3, IPSR
 8005a48:	613b      	str	r3, [r7, #16]
  return(result);
 8005a4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d15f      	bne.n	8005b10 <osMessageQueueNew+0xdc>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d05c      	beq.n	8005b10 <osMessageQueueNew+0xdc>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d059      	beq.n	8005b10 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d029      	beq.n	8005abc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d012      	beq.n	8005a96 <osMessageQueueNew+0x62>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b4f      	cmp	r3, #79	; 0x4f
 8005a76:	d90e      	bls.n	8005a96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <osMessageQueueNew+0x62>
        mem = 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e014      	b.n	8005ac0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d110      	bne.n	8005ac0 <osMessageQueueNew+0x8c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10c      	bne.n	8005ac0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <osMessageQueueNew+0x8c>
          mem = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	e001      	b.n	8005ac0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10b      	bne.n	8005ade <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2100      	movs	r1, #0
 8005ad0:	9100      	str	r1, [sp, #0]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fa2f 	bl	8005f38 <xQueueGenericCreateStatic>
 8005ada:	61f8      	str	r0, [r7, #28]
 8005adc:	e008      	b.n	8005af0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fa9d 	bl	8006028 <xQueueGenericCreate>
 8005aee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00c      	beq.n	8005b10 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e001      	b.n	8005b08 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	69f8      	ldr	r0, [r7, #28]
 8005b0c:	f001 f932 	bl	8006d74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b10:	69fb      	ldr	r3, [r7, #28]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b34:	f3ef 8305 	mrs	r3, IPSR
 8005b38:	617b      	str	r3, [r7, #20]
  return(result);
 8005b3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d028      	beq.n	8005b92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <osMessageQueuePut+0x36>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <osMessageQueuePut+0x36>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b52:	f06f 0303 	mvn.w	r3, #3
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	e038      	b.n	8005bcc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b5e:	f107 0210 	add.w	r2, r7, #16
 8005b62:	2300      	movs	r3, #0
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	69b8      	ldr	r0, [r7, #24]
 8005b68:	f000 fc24 	bl	80063b4 <xQueueGenericSendFromISR>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d003      	beq.n	8005b7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b72:	f06f 0302 	mvn.w	r3, #2
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	e028      	b.n	8005bcc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d025      	beq.n	8005bcc <osMessageQueuePut+0xb0>
 8005b80:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <osMessageQueuePut+0xbc>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	e01c      	b.n	8005bcc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <osMessageQueuePut+0x82>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b9e:	f06f 0303 	mvn.w	r3, #3
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	e012      	b.n	8005bcc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	69b8      	ldr	r0, [r7, #24]
 8005bae:	f000 fb03 	bl	80061b8 <xQueueGenericSend>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d009      	beq.n	8005bcc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005bbe:	f06f 0301 	mvn.w	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e002      	b.n	8005bcc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005bc6:	f06f 0302 	mvn.w	r3, #2
 8005bca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf2:	f3ef 8305 	mrs	r3, IPSR
 8005bf6:	617b      	str	r3, [r7, #20]
  return(result);
 8005bf8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d028      	beq.n	8005c50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <osMessageQueueGet+0x34>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <osMessageQueueGet+0x34>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c10:	f06f 0303 	mvn.w	r3, #3
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	e037      	b.n	8005c88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c1c:	f107 0310 	add.w	r3, r7, #16
 8005c20:	461a      	mov	r2, r3
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	69b8      	ldr	r0, [r7, #24]
 8005c26:	f000 fed9 	bl	80069dc <xQueueReceiveFromISR>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d003      	beq.n	8005c38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005c30:	f06f 0302 	mvn.w	r3, #2
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	e027      	b.n	8005c88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d024      	beq.n	8005c88 <osMessageQueueGet+0xac>
 8005c3e:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <osMessageQueueGet+0xb8>)
 8005c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	e01b      	b.n	8005c88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <osMessageQueueGet+0x80>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c5c:	f06f 0303 	mvn.w	r3, #3
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e011      	b.n	8005c88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	69b8      	ldr	r0, [r7, #24]
 8005c6a:	f000 fccb 	bl	8006604 <xQueueReceive>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d009      	beq.n	8005c88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c7a:	f06f 0301 	mvn.w	r3, #1
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	e002      	b.n	8005c88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c82:	f06f 0302 	mvn.w	r3, #2
 8005c86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c88:	69fb      	ldr	r3, [r7, #28]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a07      	ldr	r2, [pc, #28]	; (8005cc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4a06      	ldr	r2, [pc, #24]	; (8005cc8 <vApplicationGetIdleTaskMemory+0x30>)
 8005cae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2280      	movs	r2, #128	; 0x80
 8005cb4:	601a      	str	r2, [r3, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	200028f8 	.word	0x200028f8
 8005cc8:	200029b4 	.word	0x200029b4

08005ccc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4a06      	ldr	r2, [pc, #24]	; (8005cfc <vApplicationGetTimerTaskMemory+0x30>)
 8005ce2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cea:	601a      	str	r2, [r3, #0]
}
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20002bb4 	.word	0x20002bb4
 8005cfc:	20002c70 	.word	0x20002c70

08005d00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f103 0208 	add.w	r2, r3, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f103 0208 	add.w	r2, r3, #8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f103 0208 	add.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d103      	bne.n	8005dc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e00c      	b.n	8005ddc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e002      	b.n	8005dd0 <vListInsert+0x2e>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d2f6      	bcs.n	8005dca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6892      	ldr	r2, [r2, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6852      	ldr	r2, [r2, #4]
 8005e34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d103      	bne.n	8005e48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	1e5a      	subs	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e92:	f002 fe4f 	bl	8008b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	441a      	add	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	441a      	add	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	22ff      	movs	r2, #255	; 0xff
 8005ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d114      	bne.n	8005f12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01a      	beq.n	8005f26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3310      	adds	r3, #16
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fcbd 	bl	8007874 <xTaskRemoveFromEventList>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d012      	beq.n	8005f26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <xQueueGenericReset+0xcc>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	e009      	b.n	8005f26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3310      	adds	r3, #16
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fef2 	bl	8005d00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3324      	adds	r3, #36	; 0x24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff feed 	bl	8005d00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f26:	f002 fe35 	bl	8008b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f2a:	2301      	movs	r3, #1
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08e      	sub	sp, #56	; 0x38
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <xQueueGenericCreateStatic+0x52>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <xQueueGenericCreateStatic+0x56>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <xQueueGenericCreateStatic+0x58>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	623b      	str	r3, [r7, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <xQueueGenericCreateStatic+0x7e>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <xQueueGenericCreateStatic+0x82>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <xQueueGenericCreateStatic+0x84>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61fb      	str	r3, [r7, #28]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fd6:	2350      	movs	r3, #80	; 0x50
 8005fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b50      	cmp	r3, #80	; 0x50
 8005fde:	d00a      	beq.n	8005ff6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	61bb      	str	r3, [r7, #24]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ff6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800600a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f83f 	bl	800609c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006020:	4618      	mov	r0, r3
 8006022:	3730      	adds	r7, #48	; 0x30
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <xQueueGenericCreate+0x2a>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	613b      	str	r3, [r7, #16]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3350      	adds	r3, #80	; 0x50
 8006060:	4618      	mov	r0, r3
 8006062:	f002 fe89 	bl	8008d78 <pvPortMalloc>
 8006066:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d011      	beq.n	8006092 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	3350      	adds	r3, #80	; 0x50
 8006076:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006080:	79fa      	ldrb	r2, [r7, #7]
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f805 	bl	800609c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006092:	69bb      	ldr	r3, [r7, #24]
	}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e002      	b.n	80060be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060ca:	2101      	movs	r1, #1
 80060cc:	69b8      	ldr	r0, [r7, #24]
 80060ce:	f7ff fecb 	bl	8005e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b08a      	sub	sp, #40	; 0x28
 80060e6:	af02      	add	r7, sp, #8
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61bb      	str	r3, [r7, #24]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	429a      	cmp	r2, r3
 8006110:	d90a      	bls.n	8006128 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	617b      	str	r3, [r7, #20]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006128:	2302      	movs	r3, #2
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	2100      	movs	r1, #0
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff ff00 	bl	8005f38 <xQueueGenericCreateStatic>
 8006138:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006146:	69fb      	ldr	r3, [r7, #28]
	}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	613b      	str	r3, [r7, #16]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d90a      	bls.n	8006194 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60fb      	str	r3, [r7, #12]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006194:	2202      	movs	r2, #2
 8006196:	2100      	movs	r1, #0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff ff45 	bl	8006028 <xQueueGenericCreate>
 800619e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80061ac:	697b      	ldr	r3, [r7, #20]
	}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08e      	sub	sp, #56	; 0x38
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061c6:	2300      	movs	r3, #0
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <xQueueGenericSend+0x32>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d103      	bne.n	80061f8 <xQueueGenericSend+0x40>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <xQueueGenericSend+0x44>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <xQueueGenericSend+0x46>
 80061fc:	2300      	movs	r3, #0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <xQueueGenericSend+0x60>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d103      	bne.n	8006226 <xQueueGenericSend+0x6e>
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <xQueueGenericSend+0x72>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <xQueueGenericSend+0x74>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xQueueGenericSend+0x8e>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	623b      	str	r3, [r7, #32]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006246:	f001 fcd7 	bl	8007bf8 <xTaskGetSchedulerState>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <xQueueGenericSend+0x9e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <xQueueGenericSend+0xa2>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <xQueueGenericSend+0xa4>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <xQueueGenericSend+0xbe>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	61fb      	str	r3, [r7, #28]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006276:	f002 fc5d 	bl	8008b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <xQueueGenericSend+0xd4>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d129      	bne.n	80062e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006292:	f000 fc5e 	bl	8006b52 <prvCopyDataToQueue>
 8006296:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d010      	beq.n	80062c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	3324      	adds	r3, #36	; 0x24
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 fae5 	bl	8007874 <xTaskRemoveFromEventList>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d013      	beq.n	80062d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062b0:	4b3f      	ldr	r3, [pc, #252]	; (80063b0 <xQueueGenericSend+0x1f8>)
 80062b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	e00a      	b.n	80062d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062c8:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <xQueueGenericSend+0x1f8>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062d8:	f002 fc5c 	bl	8008b94 <vPortExitCritical>
				return pdPASS;
 80062dc:	2301      	movs	r3, #1
 80062de:	e063      	b.n	80063a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062e6:	f002 fc55 	bl	8008b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e05c      	b.n	80063a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f4:	f107 0314 	add.w	r3, r7, #20
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fb1f 	bl	800793c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fe:	2301      	movs	r3, #1
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006302:	f002 fc47 	bl	8008b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006306:	f001 f88b 	bl	8007420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800630a:	f002 fc13 	bl	8008b34 <vPortEnterCritical>
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006314:	b25b      	sxtb	r3, r3
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800631a:	d103      	bne.n	8006324 <xQueueGenericSend+0x16c>
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800632a:	b25b      	sxtb	r3, r3
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006330:	d103      	bne.n	800633a <xQueueGenericSend+0x182>
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800633a:	f002 fc2b 	bl	8008b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633e:	1d3a      	adds	r2, r7, #4
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f001 fb0e 	bl	8007968 <xTaskCheckForTimeOut>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d124      	bne.n	800639c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006354:	f000 fcf5 	bl	8006d42 <prvIsQueueFull>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d018      	beq.n	8006390 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	3310      	adds	r3, #16
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f001 fa34 	bl	80077d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800636c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800636e:	f000 fc80 	bl	8006c72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006372:	f001 f863 	bl	800743c <xTaskResumeAll>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	f47f af7c 	bne.w	8006276 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <xQueueGenericSend+0x1f8>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	e772      	b.n	8006276 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006392:	f000 fc6e 	bl	8006c72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006396:	f001 f851 	bl	800743c <xTaskResumeAll>
 800639a:	e76c      	b.n	8006276 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800639c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800639e:	f000 fc68 	bl	8006c72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063a2:	f001 f84b 	bl	800743c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3738      	adds	r7, #56	; 0x38
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b090      	sub	sp, #64	; 0x40
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <xQueueGenericSendFromISR+0x3c>
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <xQueueGenericSendFromISR+0x40>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <xQueueGenericSendFromISR+0x42>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <xQueueGenericSendFromISR+0x6a>
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <xQueueGenericSendFromISR+0x6e>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericSendFromISR+0x70>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	623b      	str	r3, [r7, #32]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800643e:	f002 fc5b 	bl	8008cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006442:	f3ef 8211 	mrs	r2, BASEPRI
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	61fa      	str	r2, [r7, #28]
 8006458:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800645a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <xQueueGenericSendFromISR+0xbc>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d12f      	bne.n	80064d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006486:	f000 fb64 	bl	8006b52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800648a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006492:	d112      	bne.n	80064ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	3324      	adds	r3, #36	; 0x24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f9e7 	bl	8007874 <xTaskRemoveFromEventList>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00e      	beq.n	80064ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e007      	b.n	80064ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064be:	3301      	adds	r3, #1
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	b25a      	sxtb	r2, r3
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064ca:	2301      	movs	r3, #1
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064ce:	e001      	b.n	80064d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3740      	adds	r7, #64	; 0x40
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b08e      	sub	sp, #56	; 0x38
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	623b      	str	r3, [r7, #32]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <xQueueGiveFromISR+0x48>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	61fb      	str	r3, [r7, #28]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <xQueueGiveFromISR+0x58>
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <xQueueGiveFromISR+0x5c>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <xQueueGiveFromISR+0x5e>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueGiveFromISR+0x78>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	61bb      	str	r3, [r7, #24]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006562:	f002 fbc9 	bl	8008cf8 <vPortValidateInterruptPriority>
	__asm volatile
 8006566:	f3ef 8211 	mrs	r2, BASEPRI
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	617a      	str	r2, [r7, #20]
 800657c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800657e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658e:	429a      	cmp	r2, r3
 8006590:	d22b      	bcs.n	80065ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ac:	d112      	bne.n	80065d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d016      	beq.n	80065e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	3324      	adds	r3, #36	; 0x24
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 f95a 	bl	8007874 <xTaskRemoveFromEventList>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00e      	beq.n	80065e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e007      	b.n	80065e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065d8:	3301      	adds	r3, #1
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	b25a      	sxtb	r2, r3
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80065e4:	2301      	movs	r3, #1
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
 80065e8:	e001      	b.n	80065ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f383 8811 	msr	BASEPRI, r3
}
 80065f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3738      	adds	r7, #56	; 0x38
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08c      	sub	sp, #48	; 0x30
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006610:	2300      	movs	r3, #0
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xQueueReceive+0x30>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	623b      	str	r3, [r7, #32]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <xQueueReceive+0x3e>
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <xQueueReceive+0x42>
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <xQueueReceive+0x44>
 8006646:	2300      	movs	r3, #0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xQueueReceive+0x5e>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	61fb      	str	r3, [r7, #28]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006662:	f001 fac9 	bl	8007bf8 <xTaskGetSchedulerState>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <xQueueReceive+0x6e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <xQueueReceive+0x72>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <xQueueReceive+0x74>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueReceive+0x8e>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61bb      	str	r3, [r7, #24]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006692:	f002 fa4f 	bl	8008b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01f      	beq.n	80066e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a6:	f000 fabe 	bl	8006c26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00f      	beq.n	80066da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	3310      	adds	r3, #16
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 f8d8 	bl	8007874 <xTaskRemoveFromEventList>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066ca:	4b3d      	ldr	r3, [pc, #244]	; (80067c0 <xQueueReceive+0x1bc>)
 80066cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066da:	f002 fa5b 	bl	8008b94 <vPortExitCritical>
				return pdPASS;
 80066de:	2301      	movs	r3, #1
 80066e0:	e069      	b.n	80067b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d103      	bne.n	80066f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066e8:	f002 fa54 	bl	8008b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e062      	b.n	80067b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066f6:	f107 0310 	add.w	r3, r7, #16
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 f91e 	bl	800793c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006700:	2301      	movs	r3, #1
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006704:	f002 fa46 	bl	8008b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006708:	f000 fe8a 	bl	8007420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800670c:	f002 fa12 	bl	8008b34 <vPortEnterCritical>
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006716:	b25b      	sxtb	r3, r3
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800671c:	d103      	bne.n	8006726 <xQueueReceive+0x122>
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800672c:	b25b      	sxtb	r3, r3
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006732:	d103      	bne.n	800673c <xQueueReceive+0x138>
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800673c:	f002 fa2a 	bl	8008b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006740:	1d3a      	adds	r2, r7, #4
 8006742:	f107 0310 	add.w	r3, r7, #16
 8006746:	4611      	mov	r1, r2
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f90d 	bl	8007968 <xTaskCheckForTimeOut>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d123      	bne.n	800679c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006756:	f000 fade 	bl	8006d16 <prvIsQueueEmpty>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	3324      	adds	r3, #36	; 0x24
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	4611      	mov	r1, r2
 8006768:	4618      	mov	r0, r3
 800676a:	f001 f833 	bl	80077d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800676e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006770:	f000 fa7f 	bl	8006c72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006774:	f000 fe62 	bl	800743c <xTaskResumeAll>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d189      	bne.n	8006692 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800677e:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <xQueueReceive+0x1bc>)
 8006780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	e780      	b.n	8006692 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006792:	f000 fa6e 	bl	8006c72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006796:	f000 fe51 	bl	800743c <xTaskResumeAll>
 800679a:	e77a      	b.n	8006692 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800679c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679e:	f000 fa68 	bl	8006c72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067a2:	f000 fe4b 	bl	800743c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a8:	f000 fab5 	bl	8006d16 <prvIsQueueEmpty>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f43f af6f 	beq.w	8006692 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3730      	adds	r7, #48	; 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08e      	sub	sp, #56	; 0x38
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	623b      	str	r3, [r7, #32]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	61fb      	str	r3, [r7, #28]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006814:	f001 f9f0 	bl	8007bf8 <xTaskGetSchedulerState>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <xQueueSemaphoreTake+0x60>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <xQueueSemaphoreTake+0x64>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <xQueueSemaphoreTake+0x66>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61bb      	str	r3, [r7, #24]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006844:	f002 f976 	bl	8008b34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	2b00      	cmp	r3, #0
 8006852:	d024      	beq.n	800689e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	1e5a      	subs	r2, r3, #1
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006864:	f001 fb3e 	bl	8007ee4 <pvTaskIncrementMutexHeldCount>
 8006868:	4602      	mov	r2, r0
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00f      	beq.n	8006896 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	3310      	adds	r3, #16
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fffa 	bl	8007874 <xTaskRemoveFromEventList>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006886:	4b54      	ldr	r3, [pc, #336]	; (80069d8 <xQueueSemaphoreTake+0x214>)
 8006888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006896:	f002 f97d 	bl	8008b94 <vPortExitCritical>
				return pdPASS;
 800689a:	2301      	movs	r3, #1
 800689c:	e097      	b.n	80069ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d111      	bne.n	80068c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	617b      	str	r3, [r7, #20]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80068c0:	f002 f968 	bl	8008b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068c4:	2300      	movs	r3, #0
 80068c6:	e082      	b.n	80069ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068ce:	f107 030c 	add.w	r3, r7, #12
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f832 	bl	800793c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068dc:	f002 f95a 	bl	8008b94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068e0:	f000 fd9e 	bl	8007420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068e4:	f002 f926 	bl	8008b34 <vPortEnterCritical>
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f4:	d103      	bne.n	80068fe <xQueueSemaphoreTake+0x13a>
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006904:	b25b      	sxtb	r3, r3
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690a:	d103      	bne.n	8006914 <xQueueSemaphoreTake+0x150>
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006914:	f002 f93e 	bl	8008b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006918:	463a      	mov	r2, r7
 800691a:	f107 030c 	add.w	r3, r7, #12
 800691e:	4611      	mov	r1, r2
 8006920:	4618      	mov	r0, r3
 8006922:	f001 f821 	bl	8007968 <xTaskCheckForTimeOut>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d132      	bne.n	8006992 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800692c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800692e:	f000 f9f2 	bl	8006d16 <prvIsQueueEmpty>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d026      	beq.n	8006986 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006940:	f002 f8f8 	bl	8008b34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4618      	mov	r0, r3
 800694a:	f001 f973 	bl	8007c34 <xTaskPriorityInherit>
 800694e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006950:	f002 f920 	bl	8008b94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	3324      	adds	r3, #36	; 0x24
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f000 ff39 	bl	80077d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006964:	f000 f985 	bl	8006c72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006968:	f000 fd68 	bl	800743c <xTaskResumeAll>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	f47f af68 	bne.w	8006844 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006974:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <xQueueSemaphoreTake+0x214>)
 8006976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	e75e      	b.n	8006844 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006988:	f000 f973 	bl	8006c72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800698c:	f000 fd56 	bl	800743c <xTaskResumeAll>
 8006990:	e758      	b.n	8006844 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006994:	f000 f96d 	bl	8006c72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006998:	f000 fd50 	bl	800743c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800699c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800699e:	f000 f9ba 	bl	8006d16 <prvIsQueueEmpty>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f43f af4d 	beq.w	8006844 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00d      	beq.n	80069cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80069b0:	f002 f8c0 	bl	8008b34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069b6:	f000 f8b4 	bl	8006b22 <prvGetDisinheritPriorityAfterTimeout>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fa0c 	bl	8007de0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069c8:	f002 f8e4 	bl	8008b94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3738      	adds	r7, #56	; 0x38
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	; 0x38
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	623b      	str	r3, [r7, #32]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <xQueueReceiveFromISR+0x3a>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <xQueueReceiveFromISR+0x3e>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueReceiveFromISR+0x40>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	61fb      	str	r3, [r7, #28]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a36:	f002 f95f 	bl	8008cf8 <vPortValidateInterruptPriority>
	__asm volatile
 8006a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	61ba      	str	r2, [r7, #24]
 8006a50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d02f      	beq.n	8006ac2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a70:	f000 f8d9 	bl	8006c26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	1e5a      	subs	r2, r3, #1
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a84:	d112      	bne.n	8006aac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d016      	beq.n	8006abc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	3310      	adds	r3, #16
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 feee 	bl	8007874 <xTaskRemoveFromEventList>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00e      	beq.n	8006abc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e007      	b.n	8006abc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	b25a      	sxtb	r2, r3
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006abc:	2301      	movs	r3, #1
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac0:	e001      	b.n	8006ac6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f383 8811 	msr	BASEPRI, r3
}
 8006ad0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3738      	adds	r7, #56	; 0x38
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <vQueueDelete+0x28>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	60bb      	str	r3, [r7, #8]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f95f 	bl	8006dc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f002 f9fb 	bl	8008f10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	e001      	b.n	8006b44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b44:	68fb      	ldr	r3, [r7, #12]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b086      	sub	sp, #24
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10d      	bne.n	8006b8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d14d      	bne.n	8006c14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f8c1 	bl	8007d04 <xTaskPriorityDisinherit>
 8006b82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
 8006b8a:	e043      	b.n	8006c14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d119      	bne.n	8006bc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6858      	ldr	r0, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	f002 fc08 	bl	80093b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	441a      	add	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d32b      	bcc.n	8006c14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	605a      	str	r2, [r3, #4]
 8006bc4:	e026      	b.n	8006c14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68d8      	ldr	r0, [r3, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	f002 fbee 	bl	80093b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	425b      	negs	r3, r3
 8006be0:	441a      	add	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d207      	bcs.n	8006c02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	425b      	negs	r3, r3
 8006bfc:	441a      	add	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d105      	bne.n	8006c14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c1c:	697b      	ldr	r3, [r7, #20]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d018      	beq.n	8006c6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	441a      	add	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d303      	bcc.n	8006c5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68d9      	ldr	r1, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	461a      	mov	r2, r3
 8006c64:	6838      	ldr	r0, [r7, #0]
 8006c66:	f002 fba4 	bl	80093b2 <memcpy>
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c7a:	f001 ff5b 	bl	8008b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c86:	e011      	b.n	8006cac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d012      	beq.n	8006cb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3324      	adds	r3, #36	; 0x24
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fded 	bl	8007874 <xTaskRemoveFromEventList>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ca0:	f000 fec4 	bl	8007a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dce9      	bgt.n	8006c88 <prvUnlockQueue+0x16>
 8006cb4:	e000      	b.n	8006cb8 <prvUnlockQueue+0x46>
					break;
 8006cb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	22ff      	movs	r2, #255	; 0xff
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006cc0:	f001 ff68 	bl	8008b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cc4:	f001 ff36 	bl	8008b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cd0:	e011      	b.n	8006cf6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d012      	beq.n	8006d00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3310      	adds	r3, #16
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fdc8 	bl	8007874 <xTaskRemoveFromEventList>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cea:	f000 fe9f 	bl	8007a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dce9      	bgt.n	8006cd2 <prvUnlockQueue+0x60>
 8006cfe:	e000      	b.n	8006d02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	22ff      	movs	r2, #255	; 0xff
 8006d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d0a:	f001 ff43 	bl	8008b94 <vPortExitCritical>
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d1e:	f001 ff09 	bl	8008b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d102      	bne.n	8006d30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e001      	b.n	8006d34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d34:	f001 ff2e 	bl	8008b94 <vPortExitCritical>

	return xReturn;
 8006d38:	68fb      	ldr	r3, [r7, #12]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d4a:	f001 fef3 	bl	8008b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d102      	bne.n	8006d60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	e001      	b.n	8006d64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d64:	f001 ff16 	bl	8008b94 <vPortExitCritical>

	return xReturn;
 8006d68:	68fb      	ldr	r3, [r7, #12]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	e014      	b.n	8006dae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d84:	4a0f      	ldr	r2, [pc, #60]	; (8006dc4 <vQueueAddToRegistry+0x50>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d90:	490c      	ldr	r1, [pc, #48]	; (8006dc4 <vQueueAddToRegistry+0x50>)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d9a:	4a0a      	ldr	r2, [pc, #40]	; (8006dc4 <vQueueAddToRegistry+0x50>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4413      	add	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006da6:	e006      	b.n	8006db6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3301      	adds	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b07      	cmp	r3, #7
 8006db2:	d9e7      	bls.n	8006d84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20003070 	.word	0x20003070

08006dc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e016      	b.n	8006e04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006dd6:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <vQueueUnregisterQueue+0x50>)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4413      	add	r3, r2
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d10b      	bne.n	8006dfe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006de6:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <vQueueUnregisterQueue+0x50>)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2100      	movs	r1, #0
 8006dec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006df0:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <vQueueUnregisterQueue+0x50>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	4413      	add	r3, r2
 8006df8:	2200      	movs	r2, #0
 8006dfa:	605a      	str	r2, [r3, #4]
				break;
 8006dfc:	e006      	b.n	8006e0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b07      	cmp	r3, #7
 8006e08:	d9e5      	bls.n	8006dd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	20003070 	.word	0x20003070

08006e1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e2c:	f001 fe82 	bl	8008b34 <vPortEnterCritical>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e36:	b25b      	sxtb	r3, r3
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e3c:	d103      	bne.n	8006e46 <vQueueWaitForMessageRestricted+0x2a>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e52:	d103      	bne.n	8006e5c <vQueueWaitForMessageRestricted+0x40>
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e5c:	f001 fe9a 	bl	8008b94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	3324      	adds	r3, #36	; 0x24
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fcd3 	bl	800781c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e76:	6978      	ldr	r0, [r7, #20]
 8006e78:	f7ff fefb 	bl	8006c72 <prvUnlockQueue>
	}
 8006e7c:	bf00      	nop
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	; 0x38
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	623b      	str	r3, [r7, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xTaskCreateStatic+0x46>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61fb      	str	r3, [r7, #28]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eca:	23bc      	movs	r3, #188	; 0xbc
 8006ecc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2bbc      	cmp	r3, #188	; 0xbc
 8006ed2:	d00a      	beq.n	8006eea <xTaskCreateStatic+0x66>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	61bb      	str	r3, [r7, #24]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006eea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01e      	beq.n	8006f30 <xTaskCreateStatic+0xac>
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9303      	str	r3, [sp, #12]
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	9302      	str	r3, [sp, #8]
 8006f12:	f107 0314 	add.w	r3, r7, #20
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 f850 	bl	8006fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f2a:	f000 f8f3 	bl	8007114 <prvAddNewTaskToReadyList>
 8006f2e:	e001      	b.n	8006f34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f34:	697b      	ldr	r3, [r7, #20]
	}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3728      	adds	r7, #40	; 0x28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08c      	sub	sp, #48	; 0x30
 8006f42:	af04      	add	r7, sp, #16
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 ff10 	bl	8008d78 <pvPortMalloc>
 8006f58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f60:	20bc      	movs	r0, #188	; 0xbc
 8006f62:	f001 ff09 	bl	8008d78 <pvPortMalloc>
 8006f66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
 8006f74:	e005      	b.n	8006f82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f001 ffca 	bl	8008f10 <vPortFree>
 8006f7c:	e001      	b.n	8006f82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d017      	beq.n	8006fb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	2300      	movs	r3, #0
 8006f94:	9303      	str	r3, [sp, #12]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f80e 	bl	8006fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fac:	69f8      	ldr	r0, [r7, #28]
 8006fae:	f000 f8b1 	bl	8007114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e002      	b.n	8006fbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
	}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	461a      	mov	r2, r3
 8006fe0:	21a5      	movs	r1, #165	; 0xa5
 8006fe2:	f002 f9f4 	bl	80093ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <prvInitialiseNewTask+0x58>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	617b      	str	r3, [r7, #20]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01f      	beq.n	8007066 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e012      	b.n	8007052 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	7819      	ldrb	r1, [r3, #0]
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	3334      	adds	r3, #52	; 0x34
 800703c:	460a      	mov	r2, r1
 800703e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	3301      	adds	r3, #1
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d9e9      	bls.n	800702c <prvInitialiseNewTask+0x64>
 8007058:	e000      	b.n	800705c <prvInitialiseNewTask+0x94>
			{
				break;
 800705a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007064:	e003      	b.n	800706e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	2b37      	cmp	r3, #55	; 0x37
 8007072:	d901      	bls.n	8007078 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007074:	2337      	movs	r3, #55	; 0x37
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800707c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007082:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	3304      	adds	r3, #4
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fe56 	bl	8005d40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	3318      	adds	r3, #24
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fe51 	bl	8005d40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	3354      	adds	r3, #84	; 0x54
 80070c8:	2260      	movs	r2, #96	; 0x60
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 f97e 	bl	80093ce <memset>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	4a0c      	ldr	r2, [pc, #48]	; (8007108 <prvInitialiseNewTask+0x140>)
 80070d6:	659a      	str	r2, [r3, #88]	; 0x58
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	4a0c      	ldr	r2, [pc, #48]	; (800710c <prvInitialiseNewTask+0x144>)
 80070dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	4a0b      	ldr	r2, [pc, #44]	; (8007110 <prvInitialiseNewTask+0x148>)
 80070e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	69b8      	ldr	r0, [r7, #24]
 80070ea:	f001 fbf5 	bl	80088d8 <pxPortInitialiseStack>
 80070ee:	4602      	mov	r2, r0
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007100:	bf00      	nop
 8007102:	3720      	adds	r7, #32
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	0800a880 	.word	0x0800a880
 800710c:	0800a8a0 	.word	0x0800a8a0
 8007110:	0800a860 	.word	0x0800a860

08007114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800711c:	f001 fd0a 	bl	8008b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007120:	4b2d      	ldr	r3, [pc, #180]	; (80071d8 <prvAddNewTaskToReadyList+0xc4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	4a2c      	ldr	r2, [pc, #176]	; (80071d8 <prvAddNewTaskToReadyList+0xc4>)
 8007128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800712a:	4b2c      	ldr	r3, [pc, #176]	; (80071dc <prvAddNewTaskToReadyList+0xc8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007132:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <prvAddNewTaskToReadyList+0xc8>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007138:	4b27      	ldr	r3, [pc, #156]	; (80071d8 <prvAddNewTaskToReadyList+0xc4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d110      	bne.n	8007162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007140:	f000 fc98 	bl	8007a74 <prvInitialiseTaskLists>
 8007144:	e00d      	b.n	8007162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007146:	4b26      	ldr	r3, [pc, #152]	; (80071e0 <prvAddNewTaskToReadyList+0xcc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800714e:	4b23      	ldr	r3, [pc, #140]	; (80071dc <prvAddNewTaskToReadyList+0xc8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	429a      	cmp	r2, r3
 800715a:	d802      	bhi.n	8007162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800715c:	4a1f      	ldr	r2, [pc, #124]	; (80071dc <prvAddNewTaskToReadyList+0xc8>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007162:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <prvAddNewTaskToReadyList+0xd0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <prvAddNewTaskToReadyList+0xd0>)
 800716a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800716c:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <prvAddNewTaskToReadyList+0xd0>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <prvAddNewTaskToReadyList+0xd4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d903      	bls.n	8007188 <prvAddNewTaskToReadyList+0x74>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a18      	ldr	r2, [pc, #96]	; (80071e8 <prvAddNewTaskToReadyList+0xd4>)
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4a15      	ldr	r2, [pc, #84]	; (80071ec <prvAddNewTaskToReadyList+0xd8>)
 8007196:	441a      	add	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f7fe fddb 	bl	8005d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071a4:	f001 fcf6 	bl	8008b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071a8:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <prvAddNewTaskToReadyList+0xcc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00e      	beq.n	80071ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071b0:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <prvAddNewTaskToReadyList+0xc8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d207      	bcs.n	80071ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071be:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <prvAddNewTaskToReadyList+0xdc>)
 80071c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20003584 	.word	0x20003584
 80071dc:	200030b0 	.word	0x200030b0
 80071e0:	20003590 	.word	0x20003590
 80071e4:	200035a0 	.word	0x200035a0
 80071e8:	2000358c 	.word	0x2000358c
 80071ec:	200030b4 	.word	0x200030b4
 80071f0:	e000ed04 	.word	0xe000ed04

080071f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80071fc:	f001 fc9a 	bl	8008b34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <vTaskDelete+0x18>
 8007206:	4b2c      	ldr	r3, [pc, #176]	; (80072b8 <vTaskDelete+0xc4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	e000      	b.n	800720e <vTaskDelete+0x1a>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3304      	adds	r3, #4
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe fdfd 	bl	8005e14 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3318      	adds	r3, #24
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fdf4 	bl	8005e14 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800722c:	4b23      	ldr	r3, [pc, #140]	; (80072bc <vTaskDelete+0xc8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a22      	ldr	r2, [pc, #136]	; (80072bc <vTaskDelete+0xc8>)
 8007234:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007236:	4b20      	ldr	r3, [pc, #128]	; (80072b8 <vTaskDelete+0xc4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	429a      	cmp	r2, r3
 800723e:	d10b      	bne.n	8007258 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	481e      	ldr	r0, [pc, #120]	; (80072c0 <vTaskDelete+0xcc>)
 8007248:	f7fe fd87 	bl	8005d5a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800724c:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <vTaskDelete+0xd0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3301      	adds	r3, #1
 8007252:	4a1c      	ldr	r2, [pc, #112]	; (80072c4 <vTaskDelete+0xd0>)
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	e009      	b.n	800726c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007258:	4b1b      	ldr	r3, [pc, #108]	; (80072c8 <vTaskDelete+0xd4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3b01      	subs	r3, #1
 800725e:	4a1a      	ldr	r2, [pc, #104]	; (80072c8 <vTaskDelete+0xd4>)
 8007260:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fc74 	bl	8007b50 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007268:	f000 fca6 	bl	8007bb8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800726c:	f001 fc92 	bl	8008b94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007270:	4b16      	ldr	r3, [pc, #88]	; (80072cc <vTaskDelete+0xd8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01b      	beq.n	80072b0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007278:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <vTaskDelete+0xc4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	429a      	cmp	r2, r3
 8007280:	d116      	bne.n	80072b0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007282:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <vTaskDelete+0xdc>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <vTaskDelete+0xac>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <vTaskDelete+0xe0>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200030b0 	.word	0x200030b0
 80072bc:	200035a0 	.word	0x200035a0
 80072c0:	20003558 	.word	0x20003558
 80072c4:	2000356c 	.word	0x2000356c
 80072c8:	20003584 	.word	0x20003584
 80072cc:	20003590 	.word	0x20003590
 80072d0:	200035ac 	.word	0x200035ac
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d017      	beq.n	800731a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072ea:	4b13      	ldr	r3, [pc, #76]	; (8007338 <vTaskDelay+0x60>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <vTaskDelay+0x30>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60bb      	str	r3, [r7, #8]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007308:	f000 f88a 	bl	8007420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800730c:	2100      	movs	r1, #0
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 ff40 	bl	8008194 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007314:	f000 f892 	bl	800743c <xTaskResumeAll>
 8007318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d107      	bne.n	8007330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007320:	4b06      	ldr	r3, [pc, #24]	; (800733c <vTaskDelay+0x64>)
 8007322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	200035ac 	.word	0x200035ac
 800733c:	e000ed04 	.word	0xe000ed04

08007340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800734e:	463a      	mov	r2, r7
 8007350:	1d39      	adds	r1, r7, #4
 8007352:	f107 0308 	add.w	r3, r7, #8
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fc9e 	bl	8005c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	9202      	str	r2, [sp, #8]
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	2300      	movs	r3, #0
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	2300      	movs	r3, #0
 800736c:	460a      	mov	r2, r1
 800736e:	4924      	ldr	r1, [pc, #144]	; (8007400 <vTaskStartScheduler+0xc0>)
 8007370:	4824      	ldr	r0, [pc, #144]	; (8007404 <vTaskStartScheduler+0xc4>)
 8007372:	f7ff fd87 	bl	8006e84 <xTaskCreateStatic>
 8007376:	4603      	mov	r3, r0
 8007378:	4a23      	ldr	r2, [pc, #140]	; (8007408 <vTaskStartScheduler+0xc8>)
 800737a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800737c:	4b22      	ldr	r3, [pc, #136]	; (8007408 <vTaskStartScheduler+0xc8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e001      	b.n	800738e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d102      	bne.n	800739a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007394:	f000 ff52 	bl	800823c <xTimerCreateTimerTask>
 8007398:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d11b      	bne.n	80073d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	613b      	str	r3, [r7, #16]
}
 80073b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073b4:	4b15      	ldr	r3, [pc, #84]	; (800740c <vTaskStartScheduler+0xcc>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3354      	adds	r3, #84	; 0x54
 80073ba:	4a15      	ldr	r2, [pc, #84]	; (8007410 <vTaskStartScheduler+0xd0>)
 80073bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <vTaskStartScheduler+0xd4>)
 80073c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073c6:	4b14      	ldr	r3, [pc, #80]	; (8007418 <vTaskStartScheduler+0xd8>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <vTaskStartScheduler+0xdc>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073d2:	f001 fb0d 	bl	80089f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073d6:	e00e      	b.n	80073f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073de:	d10a      	bne.n	80073f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	60fb      	str	r3, [r7, #12]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <vTaskStartScheduler+0xb4>
}
 80073f6:	bf00      	nop
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	0800a76c 	.word	0x0800a76c
 8007404:	08007a45 	.word	0x08007a45
 8007408:	200035a8 	.word	0x200035a8
 800740c:	200030b0 	.word	0x200030b0
 8007410:	20000018 	.word	0x20000018
 8007414:	200035a4 	.word	0x200035a4
 8007418:	20003590 	.word	0x20003590
 800741c:	20003588 	.word	0x20003588

08007420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <vTaskSuspendAll+0x18>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	4a03      	ldr	r2, [pc, #12]	; (8007438 <vTaskSuspendAll+0x18>)
 800742c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800742e:	bf00      	nop
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	200035ac 	.word	0x200035ac

0800743c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007446:	2300      	movs	r3, #0
 8007448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800744a:	4b42      	ldr	r3, [pc, #264]	; (8007554 <xTaskResumeAll+0x118>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <xTaskResumeAll+0x2c>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	603b      	str	r3, [r7, #0]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007468:	f001 fb64 	bl	8008b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800746c:	4b39      	ldr	r3, [pc, #228]	; (8007554 <xTaskResumeAll+0x118>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3b01      	subs	r3, #1
 8007472:	4a38      	ldr	r2, [pc, #224]	; (8007554 <xTaskResumeAll+0x118>)
 8007474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007476:	4b37      	ldr	r3, [pc, #220]	; (8007554 <xTaskResumeAll+0x118>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d162      	bne.n	8007544 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800747e:	4b36      	ldr	r3, [pc, #216]	; (8007558 <xTaskResumeAll+0x11c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d05e      	beq.n	8007544 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007486:	e02f      	b.n	80074e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007488:	4b34      	ldr	r3, [pc, #208]	; (800755c <xTaskResumeAll+0x120>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3318      	adds	r3, #24
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fcbd 	bl	8005e14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fcb8 	bl	8005e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a8:	4b2d      	ldr	r3, [pc, #180]	; (8007560 <xTaskResumeAll+0x124>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d903      	bls.n	80074b8 <xTaskResumeAll+0x7c>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <xTaskResumeAll+0x124>)
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4a27      	ldr	r2, [pc, #156]	; (8007564 <xTaskResumeAll+0x128>)
 80074c6:	441a      	add	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7fe fc43 	bl	8005d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	4b23      	ldr	r3, [pc, #140]	; (8007568 <xTaskResumeAll+0x12c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	429a      	cmp	r2, r3
 80074e0:	d302      	bcc.n	80074e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074e2:	4b22      	ldr	r3, [pc, #136]	; (800756c <xTaskResumeAll+0x130>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074e8:	4b1c      	ldr	r3, [pc, #112]	; (800755c <xTaskResumeAll+0x120>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1cb      	bne.n	8007488 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074f6:	f000 fb5f 	bl	8007bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <xTaskResumeAll+0x134>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007506:	f000 f847 	bl	8007598 <xTaskIncrementTick>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007510:	4b16      	ldr	r3, [pc, #88]	; (800756c <xTaskResumeAll+0x130>)
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3b01      	subs	r3, #1
 800751a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f1      	bne.n	8007506 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007522:	4b13      	ldr	r3, [pc, #76]	; (8007570 <xTaskResumeAll+0x134>)
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007528:	4b10      	ldr	r3, [pc, #64]	; (800756c <xTaskResumeAll+0x130>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007530:	2301      	movs	r3, #1
 8007532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007534:	4b0f      	ldr	r3, [pc, #60]	; (8007574 <xTaskResumeAll+0x138>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007544:	f001 fb26 	bl	8008b94 <vPortExitCritical>

	return xAlreadyYielded;
 8007548:	68bb      	ldr	r3, [r7, #8]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200035ac 	.word	0x200035ac
 8007558:	20003584 	.word	0x20003584
 800755c:	20003544 	.word	0x20003544
 8007560:	2000358c 	.word	0x2000358c
 8007564:	200030b4 	.word	0x200030b4
 8007568:	200030b0 	.word	0x200030b0
 800756c:	20003598 	.word	0x20003598
 8007570:	20003594 	.word	0x20003594
 8007574:	e000ed04 	.word	0xe000ed04

08007578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <xTaskGetTickCount+0x1c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007584:	687b      	ldr	r3, [r7, #4]
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20003588 	.word	0x20003588

08007598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a2:	4b4f      	ldr	r3, [pc, #316]	; (80076e0 <xTaskIncrementTick+0x148>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 808f 	bne.w	80076ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075ac:	4b4d      	ldr	r3, [pc, #308]	; (80076e4 <xTaskIncrementTick+0x14c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075b4:	4a4b      	ldr	r2, [pc, #300]	; (80076e4 <xTaskIncrementTick+0x14c>)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d120      	bne.n	8007602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075c0:	4b49      	ldr	r3, [pc, #292]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <xTaskIncrementTick+0x46>
 80075e0:	4b41      	ldr	r3, [pc, #260]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	4b41      	ldr	r3, [pc, #260]	; (80076ec <xTaskIncrementTick+0x154>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a3f      	ldr	r2, [pc, #252]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	4a3f      	ldr	r2, [pc, #252]	; (80076ec <xTaskIncrementTick+0x154>)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	4b3e      	ldr	r3, [pc, #248]	; (80076f0 <xTaskIncrementTick+0x158>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	4a3d      	ldr	r2, [pc, #244]	; (80076f0 <xTaskIncrementTick+0x158>)
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	f000 fadb 	bl	8007bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007602:	4b3c      	ldr	r3, [pc, #240]	; (80076f4 <xTaskIncrementTick+0x15c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d349      	bcc.n	80076a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800760c:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <xTaskIncrementTick+0x150>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007616:	4b37      	ldr	r3, [pc, #220]	; (80076f4 <xTaskIncrementTick+0x15c>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800761c:	601a      	str	r2, [r3, #0]
					break;
 800761e:	e03f      	b.n	80076a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007620:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <xTaskIncrementTick+0x150>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d203      	bcs.n	8007640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007638:	4a2e      	ldr	r2, [pc, #184]	; (80076f4 <xTaskIncrementTick+0x15c>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800763e:	e02f      	b.n	80076a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3304      	adds	r3, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fbe5 	bl	8005e14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3318      	adds	r3, #24
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fbdc 	bl	8005e14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <xTaskIncrementTick+0x160>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d903      	bls.n	8007670 <xTaskIncrementTick+0xd8>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a22      	ldr	r2, [pc, #136]	; (80076f8 <xTaskIncrementTick+0x160>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4a1f      	ldr	r2, [pc, #124]	; (80076fc <xTaskIncrementTick+0x164>)
 800767e:	441a      	add	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7fe fb67 	bl	8005d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007690:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <xTaskIncrementTick+0x168>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	429a      	cmp	r2, r3
 8007698:	d3b8      	bcc.n	800760c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800769e:	e7b5      	b.n	800760c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076a0:	4b17      	ldr	r3, [pc, #92]	; (8007700 <xTaskIncrementTick+0x168>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	4915      	ldr	r1, [pc, #84]	; (80076fc <xTaskIncrementTick+0x164>)
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d901      	bls.n	80076bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076bc:	4b11      	ldr	r3, [pc, #68]	; (8007704 <xTaskIncrementTick+0x16c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e004      	b.n	80076d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <xTaskIncrementTick+0x170>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <xTaskIncrementTick+0x170>)
 80076d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076d4:	697b      	ldr	r3, [r7, #20]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200035ac 	.word	0x200035ac
 80076e4:	20003588 	.word	0x20003588
 80076e8:	2000353c 	.word	0x2000353c
 80076ec:	20003540 	.word	0x20003540
 80076f0:	2000359c 	.word	0x2000359c
 80076f4:	200035a4 	.word	0x200035a4
 80076f8:	2000358c 	.word	0x2000358c
 80076fc:	200030b4 	.word	0x200030b4
 8007700:	200030b0 	.word	0x200030b0
 8007704:	20003598 	.word	0x20003598
 8007708:	20003594 	.word	0x20003594

0800770c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007712:	4b2a      	ldr	r3, [pc, #168]	; (80077bc <vTaskSwitchContext+0xb0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800771a:	4b29      	ldr	r3, [pc, #164]	; (80077c0 <vTaskSwitchContext+0xb4>)
 800771c:	2201      	movs	r2, #1
 800771e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007720:	e046      	b.n	80077b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007722:	4b27      	ldr	r3, [pc, #156]	; (80077c0 <vTaskSwitchContext+0xb4>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007728:	4b26      	ldr	r3, [pc, #152]	; (80077c4 <vTaskSwitchContext+0xb8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e010      	b.n	8007752 <vTaskSwitchContext+0x46>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <vTaskSwitchContext+0x40>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	607b      	str	r3, [r7, #4]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <vTaskSwitchContext+0x3e>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3b01      	subs	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	491d      	ldr	r1, [pc, #116]	; (80077c8 <vTaskSwitchContext+0xbc>)
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0e4      	beq.n	8007730 <vTaskSwitchContext+0x24>
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <vTaskSwitchContext+0xbc>)
 8007772:	4413      	add	r3, r2
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	605a      	str	r2, [r3, #4]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	3308      	adds	r3, #8
 8007788:	429a      	cmp	r2, r3
 800778a:	d104      	bne.n	8007796 <vTaskSwitchContext+0x8a>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	605a      	str	r2, [r3, #4]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4a0b      	ldr	r2, [pc, #44]	; (80077cc <vTaskSwitchContext+0xc0>)
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <vTaskSwitchContext+0xb8>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077a6:	4b09      	ldr	r3, [pc, #36]	; (80077cc <vTaskSwitchContext+0xc0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3354      	adds	r3, #84	; 0x54
 80077ac:	4a08      	ldr	r2, [pc, #32]	; (80077d0 <vTaskSwitchContext+0xc4>)
 80077ae:	6013      	str	r3, [r2, #0]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	200035ac 	.word	0x200035ac
 80077c0:	20003598 	.word	0x20003598
 80077c4:	2000358c 	.word	0x2000358c
 80077c8:	200030b4 	.word	0x200030b4
 80077cc:	200030b0 	.word	0x200030b0
 80077d0:	20000018 	.word	0x20000018

080077d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60fb      	str	r3, [r7, #12]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <vTaskPlaceOnEventList+0x44>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3318      	adds	r3, #24
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fe facd 	bl	8005da2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007808:	2101      	movs	r1, #1
 800780a:	6838      	ldr	r0, [r7, #0]
 800780c:	f000 fcc2 	bl	8008194 <prvAddCurrentTaskToDelayedList>
}
 8007810:	bf00      	nop
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	200030b0 	.word	0x200030b0

0800781c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <vTaskPlaceOnEventListRestricted+0x54>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3318      	adds	r3, #24
 800784a:	4619      	mov	r1, r3
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7fe fa84 	bl	8005d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800785c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	68b8      	ldr	r0, [r7, #8]
 8007862:	f000 fc97 	bl	8008194 <prvAddCurrentTaskToDelayedList>
	}
 8007866:	bf00      	nop
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	200030b0 	.word	0x200030b0

08007874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	60fb      	str	r3, [r7, #12]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	3318      	adds	r3, #24
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fab5 	bl	8005e14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078aa:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <xTaskRemoveFromEventList+0xb0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d11d      	bne.n	80078ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe faac 	bl	8005e14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c0:	4b19      	ldr	r3, [pc, #100]	; (8007928 <xTaskRemoveFromEventList+0xb4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d903      	bls.n	80078d0 <xTaskRemoveFromEventList+0x5c>
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	4a16      	ldr	r2, [pc, #88]	; (8007928 <xTaskRemoveFromEventList+0xb4>)
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4a13      	ldr	r2, [pc, #76]	; (800792c <xTaskRemoveFromEventList+0xb8>)
 80078de:	441a      	add	r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f7fe fa37 	bl	8005d5a <vListInsertEnd>
 80078ec:	e005      	b.n	80078fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3318      	adds	r3, #24
 80078f2:	4619      	mov	r1, r3
 80078f4:	480e      	ldr	r0, [pc, #56]	; (8007930 <xTaskRemoveFromEventList+0xbc>)
 80078f6:	f7fe fa30 	bl	8005d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <xTaskRemoveFromEventList+0xc0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	429a      	cmp	r2, r3
 8007906:	d905      	bls.n	8007914 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007908:	2301      	movs	r3, #1
 800790a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800790c:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <xTaskRemoveFromEventList+0xc4>)
 800790e:	2201      	movs	r2, #1
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	e001      	b.n	8007918 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007914:	2300      	movs	r3, #0
 8007916:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007918:	697b      	ldr	r3, [r7, #20]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	200035ac 	.word	0x200035ac
 8007928:	2000358c 	.word	0x2000358c
 800792c:	200030b4 	.word	0x200030b4
 8007930:	20003544 	.word	0x20003544
 8007934:	200030b0 	.word	0x200030b0
 8007938:	20003598 	.word	0x20003598

0800793c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <vTaskInternalSetTimeOutState+0x24>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <vTaskInternalSetTimeOutState+0x28>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	2000359c 	.word	0x2000359c
 8007964:	20003588 	.word	0x20003588

08007968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	613b      	str	r3, [r7, #16]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	60fb      	str	r3, [r7, #12]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80079aa:	f001 f8c3 	bl	8008b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079ae:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <xTaskCheckForTimeOut+0xbc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c6:	d102      	bne.n	80079ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	e023      	b.n	8007a16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <xTaskCheckForTimeOut+0xc0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d007      	beq.n	80079ea <xTaskCheckForTimeOut+0x82>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d302      	bcc.n	80079ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	e015      	b.n	8007a16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d20b      	bcs.n	8007a0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	1ad2      	subs	r2, r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff ff9b 	bl	800793c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
 8007a0a:	e004      	b.n	8007a16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a12:	2301      	movs	r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a16:	f001 f8bd 	bl	8008b94 <vPortExitCritical>

	return xReturn;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20003588 	.word	0x20003588
 8007a28:	2000359c 	.word	0x2000359c

08007a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <vTaskMissedYield+0x14>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]
}
 8007a36:	bf00      	nop
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	20003598 	.word	0x20003598

08007a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a4c:	f000 f852 	bl	8007af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a50:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <prvIdleTask+0x28>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d9f9      	bls.n	8007a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <prvIdleTask+0x2c>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a68:	e7f0      	b.n	8007a4c <prvIdleTask+0x8>
 8007a6a:	bf00      	nop
 8007a6c:	200030b4 	.word	0x200030b4
 8007a70:	e000ed04 	.word	0xe000ed04

08007a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	607b      	str	r3, [r7, #4]
 8007a7e:	e00c      	b.n	8007a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4a12      	ldr	r2, [pc, #72]	; (8007ad4 <prvInitialiseTaskLists+0x60>)
 8007a8c:	4413      	add	r3, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe f936 	bl	8005d00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3301      	adds	r3, #1
 8007a98:	607b      	str	r3, [r7, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b37      	cmp	r3, #55	; 0x37
 8007a9e:	d9ef      	bls.n	8007a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa0:	480d      	ldr	r0, [pc, #52]	; (8007ad8 <prvInitialiseTaskLists+0x64>)
 8007aa2:	f7fe f92d 	bl	8005d00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aa6:	480d      	ldr	r0, [pc, #52]	; (8007adc <prvInitialiseTaskLists+0x68>)
 8007aa8:	f7fe f92a 	bl	8005d00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007aac:	480c      	ldr	r0, [pc, #48]	; (8007ae0 <prvInitialiseTaskLists+0x6c>)
 8007aae:	f7fe f927 	bl	8005d00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ab2:	480c      	ldr	r0, [pc, #48]	; (8007ae4 <prvInitialiseTaskLists+0x70>)
 8007ab4:	f7fe f924 	bl	8005d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ab8:	480b      	ldr	r0, [pc, #44]	; (8007ae8 <prvInitialiseTaskLists+0x74>)
 8007aba:	f7fe f921 	bl	8005d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007abe:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <prvInitialiseTaskLists+0x78>)
 8007ac0:	4a05      	ldr	r2, [pc, #20]	; (8007ad8 <prvInitialiseTaskLists+0x64>)
 8007ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <prvInitialiseTaskLists+0x7c>)
 8007ac6:	4a05      	ldr	r2, [pc, #20]	; (8007adc <prvInitialiseTaskLists+0x68>)
 8007ac8:	601a      	str	r2, [r3, #0]
}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200030b4 	.word	0x200030b4
 8007ad8:	20003514 	.word	0x20003514
 8007adc:	20003528 	.word	0x20003528
 8007ae0:	20003544 	.word	0x20003544
 8007ae4:	20003558 	.word	0x20003558
 8007ae8:	20003570 	.word	0x20003570
 8007aec:	2000353c 	.word	0x2000353c
 8007af0:	20003540 	.word	0x20003540

08007af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007afa:	e019      	b.n	8007b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007afc:	f001 f81a 	bl	8008b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b00:	4b10      	ldr	r3, [pc, #64]	; (8007b44 <prvCheckTasksWaitingTermination+0x50>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe f981 	bl	8005e14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b12:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <prvCheckTasksWaitingTermination+0x54>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	4a0b      	ldr	r2, [pc, #44]	; (8007b48 <prvCheckTasksWaitingTermination+0x54>)
 8007b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <prvCheckTasksWaitingTermination+0x58>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <prvCheckTasksWaitingTermination+0x58>)
 8007b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b26:	f001 f835 	bl	8008b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f810 	bl	8007b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <prvCheckTasksWaitingTermination+0x58>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e1      	bne.n	8007afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20003558 	.word	0x20003558
 8007b48:	20003584 	.word	0x20003584
 8007b4c:	2000356c 	.word	0x2000356c

08007b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3354      	adds	r3, #84	; 0x54
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 fcf9 	bl	8009554 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d108      	bne.n	8007b7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f9cd 	bl	8008f10 <vPortFree>
				vPortFree( pxTCB );
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 f9ca 	bl	8008f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b7c:	e018      	b.n	8007bb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d103      	bne.n	8007b90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 f9c1 	bl	8008f10 <vPortFree>
	}
 8007b8e:	e00f      	b.n	8007bb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d00a      	beq.n	8007bb0 <prvDeleteTCB+0x60>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60fb      	str	r3, [r7, #12]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <prvDeleteTCB+0x5e>
	}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <prvResetNextTaskUnblockTime+0x38>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd0:	e008      	b.n	8007be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <prvResetNextTaskUnblockTime+0x38>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007be2:	6013      	str	r3, [r2, #0]
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	2000353c 	.word	0x2000353c
 8007bf4:	200035a4 	.word	0x200035a4

08007bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <xTaskGetSchedulerState+0x34>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c06:	2301      	movs	r3, #1
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	e008      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0c:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <xTaskGetSchedulerState+0x38>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c14:	2302      	movs	r3, #2
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e001      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c1e:	687b      	ldr	r3, [r7, #4]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	20003590 	.word	0x20003590
 8007c30:	200035ac 	.word	0x200035ac

08007c34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d051      	beq.n	8007cee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d241      	bcs.n	8007cdc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db06      	blt.n	8007c6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c60:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6959      	ldr	r1, [r3, #20]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <xTaskPriorityInherit+0xc8>)
 8007c80:	4413      	add	r3, r2
 8007c82:	4299      	cmp	r1, r3
 8007c84:	d122      	bne.n	8007ccc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe f8c2 	bl	8005e14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c90:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <xTaskPriorityInherit+0xcc>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d903      	bls.n	8007cae <xTaskPriorityInherit+0x7a>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	4a15      	ldr	r2, [pc, #84]	; (8007d00 <xTaskPriorityInherit+0xcc>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4a10      	ldr	r2, [pc, #64]	; (8007cfc <xTaskPriorityInherit+0xc8>)
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7fe f848 	bl	8005d5a <vListInsertEnd>
 8007cca:	e004      	b.n	8007cd6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e008      	b.n	8007cee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d201      	bcs.n	8007cee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007cea:	2301      	movs	r3, #1
 8007cec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cee:	68fb      	ldr	r3, [r7, #12]
	}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200030b0 	.word	0x200030b0
 8007cfc:	200030b4 	.word	0x200030b4
 8007d00:	2000358c 	.word	0x2000358c

08007d04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d056      	beq.n	8007dc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d1a:	4b2e      	ldr	r3, [pc, #184]	; (8007dd4 <xTaskPriorityDisinherit+0xd0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d00a      	beq.n	8007d3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	60fb      	str	r3, [r7, #12]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10a      	bne.n	8007d58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60bb      	str	r3, [r7, #8]
}
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5c:	1e5a      	subs	r2, r3, #1
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d02c      	beq.n	8007dc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d128      	bne.n	8007dc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe f84a 	bl	8005e14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	4b0f      	ldr	r3, [pc, #60]	; (8007dd8 <xTaskPriorityDisinherit+0xd4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d903      	bls.n	8007da8 <xTaskPriorityDisinherit+0xa4>
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <xTaskPriorityDisinherit+0xd4>)
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <xTaskPriorityDisinherit+0xd8>)
 8007db6:	441a      	add	r2, r3
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f7fd ffcb 	bl	8005d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007dc8:	697b      	ldr	r3, [r7, #20]
	}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	200030b0 	.word	0x200030b0
 8007dd8:	2000358c 	.word	0x2000358c
 8007ddc:	200030b4 	.word	0x200030b4

08007de0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007dee:	2301      	movs	r3, #1
 8007df0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d06a      	beq.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60fb      	str	r3, [r7, #12]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d902      	bls.n	8007e26 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	e002      	b.n	8007e2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d04b      	beq.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d146      	bne.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e40:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d10a      	bne.n	8007e60 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	db04      	blt.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	6959      	ldr	r1, [r3, #20]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4a13      	ldr	r2, [pc, #76]	; (8007edc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d11c      	bne.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fd ffbb 	bl	8005e14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea2:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d903      	bls.n	8007eb2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a0c      	ldr	r2, [pc, #48]	; (8007ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4a07      	ldr	r2, [pc, #28]	; (8007edc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ec0:	441a      	add	r2, r3
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7fd ff46 	bl	8005d5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ece:	bf00      	nop
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200030b0 	.word	0x200030b0
 8007edc:	200030b4 	.word	0x200030b4
 8007ee0:	2000358c 	.word	0x2000358c

08007ee4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ef0:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007efa:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8007efc:	681b      	ldr	r3, [r3, #0]
	}
 8007efe:	4618      	mov	r0, r3
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	200030b0 	.word	0x200030b0

08007f0c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007f1a:	f000 fe0b 	bl	8008b34 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007f1e:	4b29      	ldr	r3, [pc, #164]	; (8007fc4 <xTaskNotifyWait+0xb8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d01c      	beq.n	8007f66 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007f2c:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <xTaskNotifyWait+0xb8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	43d2      	mvns	r2, r2
 8007f38:	400a      	ands	r2, r1
 8007f3a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007f3e:	4b21      	ldr	r3, [pc, #132]	; (8007fc4 <xTaskNotifyWait+0xb8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f4e:	2101      	movs	r1, #1
 8007f50:	6838      	ldr	r0, [r7, #0]
 8007f52:	f000 f91f 	bl	8008194 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007f56:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <xTaskNotifyWait+0xbc>)
 8007f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007f66:	f000 fe15 	bl	8008b94 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007f6a:	f000 fde3 	bl	8008b34 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007f74:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <xTaskNotifyWait+0xb8>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007f80:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <xTaskNotifyWait+0xb8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d002      	beq.n	8007f94 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e00a      	b.n	8007faa <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007f94:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <xTaskNotifyWait+0xb8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	43d2      	mvns	r2, r2
 8007fa0:	400a      	ands	r2, r1
 8007fa2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007faa:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <xTaskNotifyWait+0xb8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8007fb4:	f000 fdee 	bl	8008b94 <vPortExitCritical>

		return xReturn;
 8007fb8:	697b      	ldr	r3, [r7, #20]
	}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200030b0 	.word	0x200030b0
 8007fc8:	e000ed04 	.word	0xe000ed04

08007fcc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08e      	sub	sp, #56	; 0x38
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ffc:	f000 fe7c 	bl	8008cf8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008004:	f3ef 8211 	mrs	r2, BASEPRI
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	623a      	str	r2, [r7, #32]
 800801a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800801c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	2202      	movs	r2, #2
 800803e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	2b04      	cmp	r3, #4
 8008046:	d82f      	bhi.n	80080a8 <xTaskGenericNotifyFromISR+0xdc>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <xTaskGenericNotifyFromISR+0x84>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	080080cb 	.word	0x080080cb
 8008054:	08008065 	.word	0x08008065
 8008058:	08008077 	.word	0x08008077
 800805c:	08008087 	.word	0x08008087
 8008060:	08008091 	.word	0x08008091
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	431a      	orrs	r2, r3
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008074:	e02c      	b.n	80080d0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008084:	e024      	b.n	80080d0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800808e:	e01f      	b.n	80080d0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008094:	2b02      	cmp	r3, #2
 8008096:	d004      	beq.n	80080a2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80080a0:	e016      	b.n	80080d0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80080a6:	e013      	b.n	80080d0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b2:	d00c      	beq.n	80080ce <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	61bb      	str	r3, [r7, #24]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80080ca:	bf00      	nop
 80080cc:	e000      	b.n	80080d0 <xTaskGenericNotifyFromISR+0x104>
					break;
 80080ce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80080d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d146      	bne.n	8008166 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	617b      	str	r3, [r7, #20]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f6:	4b21      	ldr	r3, [pc, #132]	; (800817c <xTaskGenericNotifyFromISR+0x1b0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d11d      	bne.n	800813a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	3304      	adds	r3, #4
 8008102:	4618      	mov	r0, r3
 8008104:	f7fd fe86 	bl	8005e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <xTaskGenericNotifyFromISR+0x1b4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d903      	bls.n	800811c <xTaskGenericNotifyFromISR+0x150>
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4a19      	ldr	r2, [pc, #100]	; (8008180 <xTaskGenericNotifyFromISR+0x1b4>)
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4a16      	ldr	r2, [pc, #88]	; (8008184 <xTaskGenericNotifyFromISR+0x1b8>)
 800812a:	441a      	add	r2, r3
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7fd fe11 	bl	8005d5a <vListInsertEnd>
 8008138:	e005      	b.n	8008146 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	3318      	adds	r3, #24
 800813e:	4619      	mov	r1, r3
 8008140:	4811      	ldr	r0, [pc, #68]	; (8008188 <xTaskGenericNotifyFromISR+0x1bc>)
 8008142:	f7fd fe0a 	bl	8005d5a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814a:	4b10      	ldr	r3, [pc, #64]	; (800818c <xTaskGenericNotifyFromISR+0x1c0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	429a      	cmp	r2, r3
 8008152:	d908      	bls.n	8008166 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800815a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815c:	2201      	movs	r2, #1
 800815e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <xTaskGenericNotifyFromISR+0x1c4>)
 8008162:	2201      	movs	r2, #1
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	613b      	str	r3, [r7, #16]
	__asm volatile
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f383 8811 	msr	BASEPRI, r3
}
 8008170:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008174:	4618      	mov	r0, r3
 8008176:	3738      	adds	r7, #56	; 0x38
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200035ac 	.word	0x200035ac
 8008180:	2000358c 	.word	0x2000358c
 8008184:	200030b4 	.word	0x200030b4
 8008188:	20003544 	.word	0x20003544
 800818c:	200030b0 	.word	0x200030b0
 8008190:	20003598 	.word	0x20003598

08008194 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800819e:	4b21      	ldr	r3, [pc, #132]	; (8008224 <prvAddCurrentTaskToDelayedList+0x90>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a4:	4b20      	ldr	r3, [pc, #128]	; (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fd fe32 	bl	8005e14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b6:	d10a      	bne.n	80081ce <prvAddCurrentTaskToDelayedList+0x3a>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4819      	ldr	r0, [pc, #100]	; (800822c <prvAddCurrentTaskToDelayedList+0x98>)
 80081c8:	f7fd fdc7 	bl	8005d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081cc:	e026      	b.n	800821c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4413      	add	r3, r2
 80081d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d209      	bcs.n	80081fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081e6:	4b12      	ldr	r3, [pc, #72]	; (8008230 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7fd fdd5 	bl	8005da2 <vListInsert>
}
 80081f8:	e010      	b.n	800821c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fa:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fd fdcb 	bl	8005da2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	d202      	bcs.n	800821c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008216:	4a08      	ldr	r2, [pc, #32]	; (8008238 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	6013      	str	r3, [r2, #0]
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20003588 	.word	0x20003588
 8008228:	200030b0 	.word	0x200030b0
 800822c:	20003570 	.word	0x20003570
 8008230:	20003540 	.word	0x20003540
 8008234:	2000353c 	.word	0x2000353c
 8008238:	200035a4 	.word	0x200035a4

0800823c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	; 0x28
 8008240:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008246:	f000 fb07 	bl	8008858 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800824a:	4b1c      	ldr	r3, [pc, #112]	; (80082bc <xTimerCreateTimerTask+0x80>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d021      	beq.n	8008296 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800825a:	1d3a      	adds	r2, r7, #4
 800825c:	f107 0108 	add.w	r1, r7, #8
 8008260:	f107 030c 	add.w	r3, r7, #12
 8008264:	4618      	mov	r0, r3
 8008266:	f7fd fd31 	bl	8005ccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	9202      	str	r2, [sp, #8]
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	2302      	movs	r3, #2
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	2300      	movs	r3, #0
 800827a:	460a      	mov	r2, r1
 800827c:	4910      	ldr	r1, [pc, #64]	; (80082c0 <xTimerCreateTimerTask+0x84>)
 800827e:	4811      	ldr	r0, [pc, #68]	; (80082c4 <xTimerCreateTimerTask+0x88>)
 8008280:	f7fe fe00 	bl	8006e84 <xTaskCreateStatic>
 8008284:	4603      	mov	r3, r0
 8008286:	4a10      	ldr	r2, [pc, #64]	; (80082c8 <xTimerCreateTimerTask+0x8c>)
 8008288:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800828a:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <xTimerCreateTimerTask+0x8c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008292:	2301      	movs	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	613b      	str	r3, [r7, #16]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082b2:	697b      	ldr	r3, [r7, #20]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	200035e0 	.word	0x200035e0
 80082c0:	0800a774 	.word	0x0800a774
 80082c4:	08008401 	.word	0x08008401
 80082c8:	200035e4 	.word	0x200035e4

080082cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08a      	sub	sp, #40	; 0x28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082da:	2300      	movs	r3, #0
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	623b      	str	r3, [r7, #32]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082fa:	4b1a      	ldr	r3, [pc, #104]	; (8008364 <xTimerGenericCommand+0x98>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d02a      	beq.n	8008358 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b05      	cmp	r3, #5
 8008312:	dc18      	bgt.n	8008346 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008314:	f7ff fc70 	bl	8007bf8 <xTaskGetSchedulerState>
 8008318:	4603      	mov	r3, r0
 800831a:	2b02      	cmp	r3, #2
 800831c:	d109      	bne.n	8008332 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <xTimerGenericCommand+0x98>)
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	f107 0110 	add.w	r1, r7, #16
 8008326:	2300      	movs	r3, #0
 8008328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832a:	f7fd ff45 	bl	80061b8 <xQueueGenericSend>
 800832e:	6278      	str	r0, [r7, #36]	; 0x24
 8008330:	e012      	b.n	8008358 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008332:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <xTimerGenericCommand+0x98>)
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	f107 0110 	add.w	r1, r7, #16
 800833a:	2300      	movs	r3, #0
 800833c:	2200      	movs	r2, #0
 800833e:	f7fd ff3b 	bl	80061b8 <xQueueGenericSend>
 8008342:	6278      	str	r0, [r7, #36]	; 0x24
 8008344:	e008      	b.n	8008358 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <xTimerGenericCommand+0x98>)
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f107 0110 	add.w	r1, r7, #16
 800834e:	2300      	movs	r3, #0
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	f7fe f82f 	bl	80063b4 <xQueueGenericSendFromISR>
 8008356:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800835a:	4618      	mov	r0, r3
 800835c:	3728      	adds	r7, #40	; 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	200035e0 	.word	0x200035e0

08008368 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af02      	add	r7, sp, #8
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008372:	4b22      	ldr	r3, [pc, #136]	; (80083fc <prvProcessExpiredTimer+0x94>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	3304      	adds	r3, #4
 8008380:	4618      	mov	r0, r3
 8008382:	f7fd fd47 	bl	8005e14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d022      	beq.n	80083da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	699a      	ldr	r2, [r3, #24]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	18d1      	adds	r1, r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	6978      	ldr	r0, [r7, #20]
 80083a2:	f000 f8d1 	bl	8008548 <prvInsertTimerInActiveList>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01f      	beq.n	80083ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083ac:	2300      	movs	r3, #0
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2300      	movs	r3, #0
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	2100      	movs	r1, #0
 80083b6:	6978      	ldr	r0, [r7, #20]
 80083b8:	f7ff ff88 	bl	80082cc <xTimerGenericCommand>
 80083bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d113      	bne.n	80083ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	60fb      	str	r3, [r7, #12]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	6978      	ldr	r0, [r7, #20]
 80083f2:	4798      	blx	r3
}
 80083f4:	bf00      	nop
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200035d8 	.word	0x200035d8

08008400 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008408:	f107 0308 	add.w	r3, r7, #8
 800840c:	4618      	mov	r0, r3
 800840e:	f000 f857 	bl	80084c0 <prvGetNextExpireTime>
 8008412:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	4619      	mov	r1, r3
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 f803 	bl	8008424 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800841e:	f000 f8d5 	bl	80085cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008422:	e7f1      	b.n	8008408 <prvTimerTask+0x8>

08008424 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800842e:	f7fe fff7 	bl	8007420 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008432:	f107 0308 	add.w	r3, r7, #8
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f866 	bl	8008508 <prvSampleTimeNow>
 800843c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d130      	bne.n	80084a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10a      	bne.n	8008460 <prvProcessTimerOrBlockTask+0x3c>
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	429a      	cmp	r2, r3
 8008450:	d806      	bhi.n	8008460 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008452:	f7fe fff3 	bl	800743c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ff85 	bl	8008368 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800845e:	e024      	b.n	80084aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d008      	beq.n	8008478 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008466:	4b13      	ldr	r3, [pc, #76]	; (80084b4 <prvProcessTimerOrBlockTask+0x90>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <prvProcessTimerOrBlockTask+0x50>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <prvProcessTimerOrBlockTask+0x52>
 8008474:	2300      	movs	r3, #0
 8008476:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008478:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <prvProcessTimerOrBlockTask+0x94>)
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	4619      	mov	r1, r3
 8008486:	f7fe fcc9 	bl	8006e1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800848a:	f7fe ffd7 	bl	800743c <xTaskResumeAll>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008494:	4b09      	ldr	r3, [pc, #36]	; (80084bc <prvProcessTimerOrBlockTask+0x98>)
 8008496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	f3bf 8f6f 	isb	sy
}
 80084a4:	e001      	b.n	80084aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084a6:	f7fe ffc9 	bl	800743c <xTaskResumeAll>
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200035dc 	.word	0x200035dc
 80084b8:	200035e0 	.word	0x200035e0
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084c8:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <prvGetNextExpireTime+0x44>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <prvGetNextExpireTime+0x16>
 80084d2:	2201      	movs	r2, #1
 80084d4:	e000      	b.n	80084d8 <prvGetNextExpireTime+0x18>
 80084d6:	2200      	movs	r2, #0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d105      	bne.n	80084f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084e4:	4b07      	ldr	r3, [pc, #28]	; (8008504 <prvGetNextExpireTime+0x44>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	e001      	b.n	80084f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084f4:	68fb      	ldr	r3, [r7, #12]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	200035d8 	.word	0x200035d8

08008508 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008510:	f7ff f832 	bl	8007578 <xTaskGetTickCount>
 8008514:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <prvSampleTimeNow+0x3c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	429a      	cmp	r2, r3
 800851e:	d205      	bcs.n	800852c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008520:	f000 f936 	bl	8008790 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	e002      	b.n	8008532 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008532:	4a04      	ldr	r2, [pc, #16]	; (8008544 <prvSampleTimeNow+0x3c>)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008538:	68fb      	ldr	r3, [r7, #12]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	200035e8 	.word	0x200035e8

08008548 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d812      	bhi.n	8008594 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	429a      	cmp	r2, r3
 800857a:	d302      	bcc.n	8008582 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800857c:	2301      	movs	r3, #1
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	e01b      	b.n	80085ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008582:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <prvInsertTimerInActiveList+0x7c>)
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3304      	adds	r3, #4
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f7fd fc08 	bl	8005da2 <vListInsert>
 8008592:	e012      	b.n	80085ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d206      	bcs.n	80085aa <prvInsertTimerInActiveList+0x62>
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d302      	bcc.n	80085aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	e007      	b.n	80085ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <prvInsertTimerInActiveList+0x80>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4619      	mov	r1, r3
 80085b4:	4610      	mov	r0, r2
 80085b6:	f7fd fbf4 	bl	8005da2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085ba:	697b      	ldr	r3, [r7, #20]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200035dc 	.word	0x200035dc
 80085c8:	200035d8 	.word	0x200035d8

080085cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08e      	sub	sp, #56	; 0x38
 80085d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085d2:	e0ca      	b.n	800876a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	da18      	bge.n	800860c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085da:	1d3b      	adds	r3, r7, #4
 80085dc:	3304      	adds	r3, #4
 80085de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	61fb      	str	r3, [r7, #28]
}
 80085f8:	bf00      	nop
 80085fa:	e7fe      	b.n	80085fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008602:	6850      	ldr	r0, [r2, #4]
 8008604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008606:	6892      	ldr	r2, [r2, #8]
 8008608:	4611      	mov	r1, r2
 800860a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f2c0 80aa 	blt.w	8008768 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	3304      	adds	r3, #4
 8008624:	4618      	mov	r0, r3
 8008626:	f7fd fbf5 	bl	8005e14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800862a:	463b      	mov	r3, r7
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ff6b 	bl	8008508 <prvSampleTimeNow>
 8008632:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b09      	cmp	r3, #9
 8008638:	f200 8097 	bhi.w	800876a <prvProcessReceivedCommands+0x19e>
 800863c:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <prvProcessReceivedCommands+0x78>)
 800863e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008642:	bf00      	nop
 8008644:	0800866d 	.word	0x0800866d
 8008648:	0800866d 	.word	0x0800866d
 800864c:	0800866d 	.word	0x0800866d
 8008650:	080086e1 	.word	0x080086e1
 8008654:	080086f5 	.word	0x080086f5
 8008658:	0800873f 	.word	0x0800873f
 800865c:	0800866d 	.word	0x0800866d
 8008660:	0800866d 	.word	0x0800866d
 8008664:	080086e1 	.word	0x080086e1
 8008668:	080086f5 	.word	0x080086f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	b2da      	uxtb	r2, r3
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	18d1      	adds	r1, r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868c:	f7ff ff5c 	bl	8008548 <prvInsertTimerInActiveList>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d069      	beq.n	800876a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800869c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d05e      	beq.n	800876a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	441a      	add	r2, r3
 80086b4:	2300      	movs	r3, #0
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	2300      	movs	r3, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086be:	f7ff fe05 	bl	80082cc <xTimerGenericCommand>
 80086c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d14f      	bne.n	800876a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	61bb      	str	r3, [r7, #24]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086f2:	e03a      	b.n	800876a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086fa:	f043 0301 	orr.w	r3, r3, #1
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	617b      	str	r3, [r7, #20]
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	18d1      	adds	r1, r2, r3
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008738:	f7ff ff06 	bl	8008548 <prvInsertTimerInActiveList>
					break;
 800873c:	e015      	b.n	800876a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d103      	bne.n	8008754 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800874c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874e:	f000 fbdf 	bl	8008f10 <vPortFree>
 8008752:	e00a      	b.n	800876a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	b2da      	uxtb	r2, r3
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008766:	e000      	b.n	800876a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008768:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800876a:	4b08      	ldr	r3, [pc, #32]	; (800878c <prvProcessReceivedCommands+0x1c0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	1d39      	adds	r1, r7, #4
 8008770:	2200      	movs	r2, #0
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd ff46 	bl	8006604 <xQueueReceive>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	f47f af2a 	bne.w	80085d4 <prvProcessReceivedCommands+0x8>
	}
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	3730      	adds	r7, #48	; 0x30
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200035e0 	.word	0x200035e0

08008790 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008796:	e048      	b.n	800882a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008798:	4b2d      	ldr	r3, [pc, #180]	; (8008850 <prvSwitchTimerLists+0xc0>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a2:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <prvSwitchTimerLists+0xc0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd fb2f 	bl	8005e14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d02e      	beq.n	800882a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4413      	add	r3, r2
 80087d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d90e      	bls.n	80087fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087ea:	4b19      	ldr	r3, [pc, #100]	; (8008850 <prvSwitchTimerLists+0xc0>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7fd fad4 	bl	8005da2 <vListInsert>
 80087fa:	e016      	b.n	800882a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087fc:	2300      	movs	r3, #0
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	2100      	movs	r1, #0
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fd60 	bl	80082cc <xTimerGenericCommand>
 800880c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	603b      	str	r3, [r7, #0]
}
 8008826:	bf00      	nop
 8008828:	e7fe      	b.n	8008828 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <prvSwitchTimerLists+0xc0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1b1      	bne.n	8008798 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <prvSwitchTimerLists+0xc0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800883a:	4b06      	ldr	r3, [pc, #24]	; (8008854 <prvSwitchTimerLists+0xc4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a04      	ldr	r2, [pc, #16]	; (8008850 <prvSwitchTimerLists+0xc0>)
 8008840:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008842:	4a04      	ldr	r2, [pc, #16]	; (8008854 <prvSwitchTimerLists+0xc4>)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	6013      	str	r3, [r2, #0]
}
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	200035d8 	.word	0x200035d8
 8008854:	200035dc 	.word	0x200035dc

08008858 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800885e:	f000 f969 	bl	8008b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <prvCheckForValidListAndQueue+0x60>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d120      	bne.n	80088ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800886a:	4814      	ldr	r0, [pc, #80]	; (80088bc <prvCheckForValidListAndQueue+0x64>)
 800886c:	f7fd fa48 	bl	8005d00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008870:	4813      	ldr	r0, [pc, #76]	; (80088c0 <prvCheckForValidListAndQueue+0x68>)
 8008872:	f7fd fa45 	bl	8005d00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008876:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <prvCheckForValidListAndQueue+0x6c>)
 8008878:	4a10      	ldr	r2, [pc, #64]	; (80088bc <prvCheckForValidListAndQueue+0x64>)
 800887a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800887c:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <prvCheckForValidListAndQueue+0x70>)
 800887e:	4a10      	ldr	r2, [pc, #64]	; (80088c0 <prvCheckForValidListAndQueue+0x68>)
 8008880:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008882:	2300      	movs	r3, #0
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	4b11      	ldr	r3, [pc, #68]	; (80088cc <prvCheckForValidListAndQueue+0x74>)
 8008888:	4a11      	ldr	r2, [pc, #68]	; (80088d0 <prvCheckForValidListAndQueue+0x78>)
 800888a:	2110      	movs	r1, #16
 800888c:	200a      	movs	r0, #10
 800888e:	f7fd fb53 	bl	8005f38 <xQueueGenericCreateStatic>
 8008892:	4603      	mov	r3, r0
 8008894:	4a08      	ldr	r2, [pc, #32]	; (80088b8 <prvCheckForValidListAndQueue+0x60>)
 8008896:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <prvCheckForValidListAndQueue+0x60>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d005      	beq.n	80088ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088a0:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <prvCheckForValidListAndQueue+0x60>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	490b      	ldr	r1, [pc, #44]	; (80088d4 <prvCheckForValidListAndQueue+0x7c>)
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fa64 	bl	8006d74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088ac:	f000 f972 	bl	8008b94 <vPortExitCritical>
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	200035e0 	.word	0x200035e0
 80088bc:	200035b0 	.word	0x200035b0
 80088c0:	200035c4 	.word	0x200035c4
 80088c4:	200035d8 	.word	0x200035d8
 80088c8:	200035dc 	.word	0x200035dc
 80088cc:	2000368c 	.word	0x2000368c
 80088d0:	200035ec 	.word	0x200035ec
 80088d4:	0800a77c 	.word	0x0800a77c

080088d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3b04      	subs	r3, #4
 80088e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3b04      	subs	r3, #4
 80088f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f023 0201 	bic.w	r2, r3, #1
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3b04      	subs	r3, #4
 8008906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008908:	4a0c      	ldr	r2, [pc, #48]	; (800893c <pxPortInitialiseStack+0x64>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3b14      	subs	r3, #20
 8008912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3b04      	subs	r3, #4
 800891e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f06f 0202 	mvn.w	r2, #2
 8008926:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3b20      	subs	r3, #32
 800892c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800892e:	68fb      	ldr	r3, [r7, #12]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	08008941 	.word	0x08008941

08008940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800894a:	4b12      	ldr	r3, [pc, #72]	; (8008994 <prvTaskExitError+0x54>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008952:	d00a      	beq.n	800896a <prvTaskExitError+0x2a>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60fb      	str	r3, [r7, #12]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <prvTaskExitError+0x28>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	60bb      	str	r3, [r7, #8]
}
 800897c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800897e:	bf00      	nop
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0fc      	beq.n	8008980 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	20000014 	.word	0x20000014
	...

080089a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <pxCurrentTCBConst2>)
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	6808      	ldr	r0, [r1, #0]
 80089a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	f380 8809 	msr	PSP, r0
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f04f 0000 	mov.w	r0, #0
 80089b6:	f380 8811 	msr	BASEPRI, r0
 80089ba:	4770      	bx	lr
 80089bc:	f3af 8000 	nop.w

080089c0 <pxCurrentTCBConst2>:
 80089c0:	200030b0 	.word	0x200030b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop

080089c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089c8:	4808      	ldr	r0, [pc, #32]	; (80089ec <prvPortStartFirstTask+0x24>)
 80089ca:	6800      	ldr	r0, [r0, #0]
 80089cc:	6800      	ldr	r0, [r0, #0]
 80089ce:	f380 8808 	msr	MSP, r0
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8814 	msr	CONTROL, r0
 80089da:	b662      	cpsie	i
 80089dc:	b661      	cpsie	f
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	df00      	svc	0
 80089e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089ea:	bf00      	nop
 80089ec:	e000ed08 	.word	0xe000ed08

080089f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089f6:	4b46      	ldr	r3, [pc, #280]	; (8008b10 <xPortStartScheduler+0x120>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a46      	ldr	r2, [pc, #280]	; (8008b14 <xPortStartScheduler+0x124>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d10a      	bne.n	8008a16 <xPortStartScheduler+0x26>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	613b      	str	r3, [r7, #16]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a16:	4b3e      	ldr	r3, [pc, #248]	; (8008b10 <xPortStartScheduler+0x120>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a3f      	ldr	r2, [pc, #252]	; (8008b18 <xPortStartScheduler+0x128>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d10a      	bne.n	8008a36 <xPortStartScheduler+0x46>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	60fb      	str	r3, [r7, #12]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a36:	4b39      	ldr	r3, [pc, #228]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	22ff      	movs	r2, #255	; 0xff
 8008a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <xPortStartScheduler+0x130>)
 8008a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a5e:	4b31      	ldr	r3, [pc, #196]	; (8008b24 <xPortStartScheduler+0x134>)
 8008a60:	2207      	movs	r2, #7
 8008a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a64:	e009      	b.n	8008a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a66:	4b2f      	ldr	r3, [pc, #188]	; (8008b24 <xPortStartScheduler+0x134>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	4a2d      	ldr	r2, [pc, #180]	; (8008b24 <xPortStartScheduler+0x134>)
 8008a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a82:	2b80      	cmp	r3, #128	; 0x80
 8008a84:	d0ef      	beq.n	8008a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a86:	4b27      	ldr	r3, [pc, #156]	; (8008b24 <xPortStartScheduler+0x134>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f1c3 0307 	rsb	r3, r3, #7
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d00a      	beq.n	8008aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60bb      	str	r3, [r7, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008aa8:	4b1e      	ldr	r3, [pc, #120]	; (8008b24 <xPortStartScheduler+0x134>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	021b      	lsls	r3, r3, #8
 8008aae:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <xPortStartScheduler+0x134>)
 8008ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ab2:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <xPortStartScheduler+0x134>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aba:	4a1a      	ldr	r2, [pc, #104]	; (8008b24 <xPortStartScheduler+0x134>)
 8008abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ac6:	4b18      	ldr	r3, [pc, #96]	; (8008b28 <xPortStartScheduler+0x138>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a17      	ldr	r2, [pc, #92]	; (8008b28 <xPortStartScheduler+0x138>)
 8008acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ad2:	4b15      	ldr	r3, [pc, #84]	; (8008b28 <xPortStartScheduler+0x138>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <xPortStartScheduler+0x138>)
 8008ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ade:	f000 f8dd 	bl	8008c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ae2:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <xPortStartScheduler+0x13c>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ae8:	f000 f8fc 	bl	8008ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008aec:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <xPortStartScheduler+0x140>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a0f      	ldr	r2, [pc, #60]	; (8008b30 <xPortStartScheduler+0x140>)
 8008af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008af8:	f7ff ff66 	bl	80089c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008afc:	f7fe fe06 	bl	800770c <vTaskSwitchContext>
	prvTaskExitError();
 8008b00:	f7ff ff1e 	bl	8008940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	e000ed00 	.word	0xe000ed00
 8008b14:	410fc271 	.word	0x410fc271
 8008b18:	410fc270 	.word	0x410fc270
 8008b1c:	e000e400 	.word	0xe000e400
 8008b20:	200036dc 	.word	0x200036dc
 8008b24:	200036e0 	.word	0x200036e0
 8008b28:	e000ed20 	.word	0xe000ed20
 8008b2c:	20000014 	.word	0x20000014
 8008b30:	e000ef34 	.word	0xe000ef34

08008b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	607b      	str	r3, [r7, #4]
}
 8008b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <vPortEnterCritical+0x58>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3301      	adds	r3, #1
 8008b54:	4a0d      	ldr	r2, [pc, #52]	; (8008b8c <vPortEnterCritical+0x58>)
 8008b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <vPortEnterCritical+0x58>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d10f      	bne.n	8008b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <vPortEnterCritical+0x5c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00a      	beq.n	8008b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	603b      	str	r3, [r7, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	e7fe      	b.n	8008b7e <vPortEnterCritical+0x4a>
	}
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	20000014 	.word	0x20000014
 8008b90:	e000ed04 	.word	0xe000ed04

08008b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b9a:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <vPortExitCritical+0x50>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <vPortExitCritical+0x24>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	607b      	str	r3, [r7, #4]
}
 8008bb4:	bf00      	nop
 8008bb6:	e7fe      	b.n	8008bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <vPortExitCritical+0x50>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <vPortExitCritical+0x50>)
 8008bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bc2:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <vPortExitCritical+0x50>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <vPortExitCritical+0x42>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f383 8811 	msr	BASEPRI, r3
}
 8008bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20000014 	.word	0x20000014
	...

08008bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bf0:	f3ef 8009 	mrs	r0, PSP
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <pxCurrentTCBConst>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	f01e 0f10 	tst.w	lr, #16
 8008c00:	bf08      	it	eq
 8008c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0a:	6010      	str	r0, [r2, #0]
 8008c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c14:	f380 8811 	msr	BASEPRI, r0
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f7fe fd74 	bl	800770c <vTaskSwitchContext>
 8008c24:	f04f 0000 	mov.w	r0, #0
 8008c28:	f380 8811 	msr	BASEPRI, r0
 8008c2c:	bc09      	pop	{r0, r3}
 8008c2e:	6819      	ldr	r1, [r3, #0]
 8008c30:	6808      	ldr	r0, [r1, #0]
 8008c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c36:	f01e 0f10 	tst.w	lr, #16
 8008c3a:	bf08      	it	eq
 8008c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c40:	f380 8809 	msr	PSP, r0
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	f3af 8000 	nop.w

08008c50 <pxCurrentTCBConst>:
 8008c50:	200030b0 	.word	0x200030b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop

08008c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	607b      	str	r3, [r7, #4]
}
 8008c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c72:	f7fe fc91 	bl	8007598 <xTaskIncrementTick>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c7c:	4b06      	ldr	r3, [pc, #24]	; (8008c98 <xPortSysTickHandler+0x40>)
 8008c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	2300      	movs	r3, #0
 8008c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f383 8811 	msr	BASEPRI, r3
}
 8008c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <vPortSetupTimerInterrupt+0x34>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <vPortSetupTimerInterrupt+0x38>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <vPortSetupTimerInterrupt+0x3c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <vPortSetupTimerInterrupt+0x40>)
 8008cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb6:	099b      	lsrs	r3, r3, #6
 8008cb8:	4a09      	ldr	r2, [pc, #36]	; (8008ce0 <vPortSetupTimerInterrupt+0x44>)
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cbe:	4b04      	ldr	r3, [pc, #16]	; (8008cd0 <vPortSetupTimerInterrupt+0x34>)
 8008cc0:	2207      	movs	r2, #7
 8008cc2:	601a      	str	r2, [r3, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	e000e010 	.word	0xe000e010
 8008cd4:	e000e018 	.word	0xe000e018
 8008cd8:	20000008 	.word	0x20000008
 8008cdc:	10624dd3 	.word	0x10624dd3
 8008ce0:	e000e014 	.word	0xe000e014

08008ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cf4 <vPortEnableVFP+0x10>
 8008ce8:	6801      	ldr	r1, [r0, #0]
 8008cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cee:	6001      	str	r1, [r0, #0]
 8008cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cf2:	bf00      	nop
 8008cf4:	e000ed88 	.word	0xe000ed88

08008cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cfe:	f3ef 8305 	mrs	r3, IPSR
 8008d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b0f      	cmp	r3, #15
 8008d08:	d914      	bls.n	8008d34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d0a:	4a17      	ldr	r2, [pc, #92]	; (8008d68 <vPortValidateInterruptPriority+0x70>)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4413      	add	r3, r2
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d14:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <vPortValidateInterruptPriority+0x74>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	7afa      	ldrb	r2, [r7, #11]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d20a      	bcs.n	8008d34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	607b      	str	r3, [r7, #4]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d34:	4b0e      	ldr	r3, [pc, #56]	; (8008d70 <vPortValidateInterruptPriority+0x78>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d3c:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <vPortValidateInterruptPriority+0x7c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d90a      	bls.n	8008d5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	603b      	str	r3, [r7, #0]
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <vPortValidateInterruptPriority+0x60>
	}
 8008d5a:	bf00      	nop
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	e000e3f0 	.word	0xe000e3f0
 8008d6c:	200036dc 	.word	0x200036dc
 8008d70:	e000ed0c 	.word	0xe000ed0c
 8008d74:	200036e0 	.word	0x200036e0

08008d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08a      	sub	sp, #40	; 0x28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d80:	2300      	movs	r3, #0
 8008d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d84:	f7fe fb4c 	bl	8007420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d88:	4b5b      	ldr	r3, [pc, #364]	; (8008ef8 <pvPortMalloc+0x180>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d90:	f000 f920 	bl	8008fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d94:	4b59      	ldr	r3, [pc, #356]	; (8008efc <pvPortMalloc+0x184>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 8093 	bne.w	8008ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01d      	beq.n	8008de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008da8:	2208      	movs	r2, #8
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d014      	beq.n	8008de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f023 0307 	bic.w	r3, r3, #7
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <pvPortMalloc+0x6c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	617b      	str	r3, [r7, #20]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d06e      	beq.n	8008ec8 <pvPortMalloc+0x150>
 8008dea:	4b45      	ldr	r3, [pc, #276]	; (8008f00 <pvPortMalloc+0x188>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d869      	bhi.n	8008ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008df4:	4b43      	ldr	r3, [pc, #268]	; (8008f04 <pvPortMalloc+0x18c>)
 8008df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008df8:	4b42      	ldr	r3, [pc, #264]	; (8008f04 <pvPortMalloc+0x18c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfe:	e004      	b.n	8008e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d903      	bls.n	8008e1c <pvPortMalloc+0xa4>
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1f1      	bne.n	8008e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e1c:	4b36      	ldr	r3, [pc, #216]	; (8008ef8 <pvPortMalloc+0x180>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d050      	beq.n	8008ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	4413      	add	r3, r2
 8008e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	2308      	movs	r3, #8
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d91f      	bls.n	8008e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	f003 0307 	and.w	r3, r3, #7
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <pvPortMalloc+0xf8>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	613b      	str	r3, [r7, #16]
}
 8008e6c:	bf00      	nop
 8008e6e:	e7fe      	b.n	8008e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	1ad2      	subs	r2, r2, r3
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e82:	69b8      	ldr	r0, [r7, #24]
 8008e84:	f000 f908 	bl	8009098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e88:	4b1d      	ldr	r3, [pc, #116]	; (8008f00 <pvPortMalloc+0x188>)
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <pvPortMalloc+0x188>)
 8008e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e96:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <pvPortMalloc+0x188>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	; (8008f08 <pvPortMalloc+0x190>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d203      	bcs.n	8008eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ea2:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <pvPortMalloc+0x188>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <pvPortMalloc+0x190>)
 8008ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <pvPortMalloc+0x184>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ebe:	4b13      	ldr	r3, [pc, #76]	; (8008f0c <pvPortMalloc+0x194>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	4a11      	ldr	r2, [pc, #68]	; (8008f0c <pvPortMalloc+0x194>)
 8008ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ec8:	f7fe fab8 	bl	800743c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <pvPortMalloc+0x174>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	60fb      	str	r3, [r7, #12]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <pvPortMalloc+0x172>
	return pvReturn;
 8008eec:	69fb      	ldr	r3, [r7, #28]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3728      	adds	r7, #40	; 0x28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200042a4 	.word	0x200042a4
 8008efc:	200042b8 	.word	0x200042b8
 8008f00:	200042a8 	.word	0x200042a8
 8008f04:	2000429c 	.word	0x2000429c
 8008f08:	200042ac 	.word	0x200042ac
 8008f0c:	200042b0 	.word	0x200042b0

08008f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d04d      	beq.n	8008fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f22:	2308      	movs	r3, #8
 8008f24:	425b      	negs	r3, r3
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	4413      	add	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	4b24      	ldr	r3, [pc, #144]	; (8008fc8 <vPortFree+0xb8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <vPortFree+0x44>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	60fb      	str	r3, [r7, #12]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <vPortFree+0x62>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	60bb      	str	r3, [r7, #8]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <vPortFree+0xb8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01e      	beq.n	8008fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11a      	bne.n	8008fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <vPortFree+0xb8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	401a      	ands	r2, r3
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f98:	f7fe fa42 	bl	8007420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <vPortFree+0xbc>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <vPortFree+0xbc>)
 8008fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008faa:	6938      	ldr	r0, [r7, #16]
 8008fac:	f000 f874 	bl	8009098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <vPortFree+0xc0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4a06      	ldr	r2, [pc, #24]	; (8008fd0 <vPortFree+0xc0>)
 8008fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008fba:	f7fe fa3f 	bl	800743c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fbe:	bf00      	nop
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200042b8 	.word	0x200042b8
 8008fcc:	200042a8 	.word	0x200042a8
 8008fd0:	200042b4 	.word	0x200042b4

08008fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fe0:	4b27      	ldr	r3, [pc, #156]	; (8009080 <prvHeapInit+0xac>)
 8008fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00c      	beq.n	8009008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3307      	adds	r3, #7
 8008ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0307 	bic.w	r3, r3, #7
 8008ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	4a1f      	ldr	r2, [pc, #124]	; (8009080 <prvHeapInit+0xac>)
 8009004:	4413      	add	r3, r2
 8009006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800900c:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <prvHeapInit+0xb0>)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009012:	4b1c      	ldr	r3, [pc, #112]	; (8009084 <prvHeapInit+0xb0>)
 8009014:	2200      	movs	r2, #0
 8009016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009020:	2208      	movs	r2, #8
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 0307 	bic.w	r3, r3, #7
 800902e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a15      	ldr	r2, [pc, #84]	; (8009088 <prvHeapInit+0xb4>)
 8009034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <prvHeapInit+0xb4>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2200      	movs	r2, #0
 800903c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800903e:	4b12      	ldr	r3, [pc, #72]	; (8009088 <prvHeapInit+0xb4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009054:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <prvHeapInit+0xb4>)
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	4a0a      	ldr	r2, [pc, #40]	; (800908c <prvHeapInit+0xb8>)
 8009062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	4a09      	ldr	r2, [pc, #36]	; (8009090 <prvHeapInit+0xbc>)
 800906a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800906c:	4b09      	ldr	r3, [pc, #36]	; (8009094 <prvHeapInit+0xc0>)
 800906e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009072:	601a      	str	r2, [r3, #0]
}
 8009074:	bf00      	nop
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	200036e4 	.word	0x200036e4
 8009084:	2000429c 	.word	0x2000429c
 8009088:	200042a4 	.word	0x200042a4
 800908c:	200042ac 	.word	0x200042ac
 8009090:	200042a8 	.word	0x200042a8
 8009094:	200042b8 	.word	0x200042b8

08009098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090a0:	4b28      	ldr	r3, [pc, #160]	; (8009144 <prvInsertBlockIntoFreeList+0xac>)
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	e002      	b.n	80090ac <prvInsertBlockIntoFreeList+0x14>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d8f7      	bhi.n	80090a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4413      	add	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d108      	bne.n	80090da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	441a      	add	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	441a      	add	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d118      	bne.n	8009120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4b15      	ldr	r3, [pc, #84]	; (8009148 <prvInsertBlockIntoFreeList+0xb0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d00d      	beq.n	8009116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	441a      	add	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e008      	b.n	8009128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009116:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <prvInsertBlockIntoFreeList+0xb0>)
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	e003      	b.n	8009128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	429a      	cmp	r2, r3
 800912e:	d002      	beq.n	8009136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009136:	bf00      	nop
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	2000429c 	.word	0x2000429c
 8009148:	200042a4 	.word	0x200042a4

0800914c <__errno>:
 800914c:	4b01      	ldr	r3, [pc, #4]	; (8009154 <__errno+0x8>)
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20000018 	.word	0x20000018

08009158 <std>:
 8009158:	2300      	movs	r3, #0
 800915a:	b510      	push	{r4, lr}
 800915c:	4604      	mov	r4, r0
 800915e:	e9c0 3300 	strd	r3, r3, [r0]
 8009162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009166:	6083      	str	r3, [r0, #8]
 8009168:	8181      	strh	r1, [r0, #12]
 800916a:	6643      	str	r3, [r0, #100]	; 0x64
 800916c:	81c2      	strh	r2, [r0, #14]
 800916e:	6183      	str	r3, [r0, #24]
 8009170:	4619      	mov	r1, r3
 8009172:	2208      	movs	r2, #8
 8009174:	305c      	adds	r0, #92	; 0x5c
 8009176:	f000 f92a 	bl	80093ce <memset>
 800917a:	4b05      	ldr	r3, [pc, #20]	; (8009190 <std+0x38>)
 800917c:	6263      	str	r3, [r4, #36]	; 0x24
 800917e:	4b05      	ldr	r3, [pc, #20]	; (8009194 <std+0x3c>)
 8009180:	62a3      	str	r3, [r4, #40]	; 0x28
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <std+0x40>)
 8009184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <std+0x44>)
 8009188:	6224      	str	r4, [r4, #32]
 800918a:	6323      	str	r3, [r4, #48]	; 0x30
 800918c:	bd10      	pop	{r4, pc}
 800918e:	bf00      	nop
 8009190:	08009695 	.word	0x08009695
 8009194:	080096b7 	.word	0x080096b7
 8009198:	080096ef 	.word	0x080096ef
 800919c:	08009713 	.word	0x08009713

080091a0 <_cleanup_r>:
 80091a0:	4901      	ldr	r1, [pc, #4]	; (80091a8 <_cleanup_r+0x8>)
 80091a2:	f000 b8af 	b.w	8009304 <_fwalk_reent>
 80091a6:	bf00      	nop
 80091a8:	08009891 	.word	0x08009891

080091ac <__sfmoreglue>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	2268      	movs	r2, #104	; 0x68
 80091b0:	1e4d      	subs	r5, r1, #1
 80091b2:	4355      	muls	r5, r2
 80091b4:	460e      	mov	r6, r1
 80091b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ba:	f000 f931 	bl	8009420 <_malloc_r>
 80091be:	4604      	mov	r4, r0
 80091c0:	b140      	cbz	r0, 80091d4 <__sfmoreglue+0x28>
 80091c2:	2100      	movs	r1, #0
 80091c4:	e9c0 1600 	strd	r1, r6, [r0]
 80091c8:	300c      	adds	r0, #12
 80091ca:	60a0      	str	r0, [r4, #8]
 80091cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091d0:	f000 f8fd 	bl	80093ce <memset>
 80091d4:	4620      	mov	r0, r4
 80091d6:	bd70      	pop	{r4, r5, r6, pc}

080091d8 <__sfp_lock_acquire>:
 80091d8:	4801      	ldr	r0, [pc, #4]	; (80091e0 <__sfp_lock_acquire+0x8>)
 80091da:	f000 b8d8 	b.w	800938e <__retarget_lock_acquire_recursive>
 80091de:	bf00      	nop
 80091e0:	200042bd 	.word	0x200042bd

080091e4 <__sfp_lock_release>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__sfp_lock_release+0x8>)
 80091e6:	f000 b8d3 	b.w	8009390 <__retarget_lock_release_recursive>
 80091ea:	bf00      	nop
 80091ec:	200042bd 	.word	0x200042bd

080091f0 <__sinit_lock_acquire>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__sinit_lock_acquire+0x8>)
 80091f2:	f000 b8cc 	b.w	800938e <__retarget_lock_acquire_recursive>
 80091f6:	bf00      	nop
 80091f8:	200042be 	.word	0x200042be

080091fc <__sinit_lock_release>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sinit_lock_release+0x8>)
 80091fe:	f000 b8c7 	b.w	8009390 <__retarget_lock_release_recursive>
 8009202:	bf00      	nop
 8009204:	200042be 	.word	0x200042be

08009208 <__sinit>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	f7ff fff0 	bl	80091f0 <__sinit_lock_acquire>
 8009210:	69a3      	ldr	r3, [r4, #24]
 8009212:	b11b      	cbz	r3, 800921c <__sinit+0x14>
 8009214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009218:	f7ff bff0 	b.w	80091fc <__sinit_lock_release>
 800921c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009220:	6523      	str	r3, [r4, #80]	; 0x50
 8009222:	4b13      	ldr	r3, [pc, #76]	; (8009270 <__sinit+0x68>)
 8009224:	4a13      	ldr	r2, [pc, #76]	; (8009274 <__sinit+0x6c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	62a2      	str	r2, [r4, #40]	; 0x28
 800922a:	42a3      	cmp	r3, r4
 800922c:	bf04      	itt	eq
 800922e:	2301      	moveq	r3, #1
 8009230:	61a3      	streq	r3, [r4, #24]
 8009232:	4620      	mov	r0, r4
 8009234:	f000 f820 	bl	8009278 <__sfp>
 8009238:	6060      	str	r0, [r4, #4]
 800923a:	4620      	mov	r0, r4
 800923c:	f000 f81c 	bl	8009278 <__sfp>
 8009240:	60a0      	str	r0, [r4, #8]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f818 	bl	8009278 <__sfp>
 8009248:	2200      	movs	r2, #0
 800924a:	60e0      	str	r0, [r4, #12]
 800924c:	2104      	movs	r1, #4
 800924e:	6860      	ldr	r0, [r4, #4]
 8009250:	f7ff ff82 	bl	8009158 <std>
 8009254:	68a0      	ldr	r0, [r4, #8]
 8009256:	2201      	movs	r2, #1
 8009258:	2109      	movs	r1, #9
 800925a:	f7ff ff7d 	bl	8009158 <std>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	2202      	movs	r2, #2
 8009262:	2112      	movs	r1, #18
 8009264:	f7ff ff78 	bl	8009158 <std>
 8009268:	2301      	movs	r3, #1
 800926a:	61a3      	str	r3, [r4, #24]
 800926c:	e7d2      	b.n	8009214 <__sinit+0xc>
 800926e:	bf00      	nop
 8009270:	0800a8c0 	.word	0x0800a8c0
 8009274:	080091a1 	.word	0x080091a1

08009278 <__sfp>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	4607      	mov	r7, r0
 800927c:	f7ff ffac 	bl	80091d8 <__sfp_lock_acquire>
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <__sfp+0x84>)
 8009282:	681e      	ldr	r6, [r3, #0]
 8009284:	69b3      	ldr	r3, [r6, #24]
 8009286:	b913      	cbnz	r3, 800928e <__sfp+0x16>
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff ffbd 	bl	8009208 <__sinit>
 800928e:	3648      	adds	r6, #72	; 0x48
 8009290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009294:	3b01      	subs	r3, #1
 8009296:	d503      	bpl.n	80092a0 <__sfp+0x28>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	b30b      	cbz	r3, 80092e0 <__sfp+0x68>
 800929c:	6836      	ldr	r6, [r6, #0]
 800929e:	e7f7      	b.n	8009290 <__sfp+0x18>
 80092a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092a4:	b9d5      	cbnz	r5, 80092dc <__sfp+0x64>
 80092a6:	4b16      	ldr	r3, [pc, #88]	; (8009300 <__sfp+0x88>)
 80092a8:	60e3      	str	r3, [r4, #12]
 80092aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ae:	6665      	str	r5, [r4, #100]	; 0x64
 80092b0:	f000 f86c 	bl	800938c <__retarget_lock_init_recursive>
 80092b4:	f7ff ff96 	bl	80091e4 <__sfp_lock_release>
 80092b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092c0:	6025      	str	r5, [r4, #0]
 80092c2:	61a5      	str	r5, [r4, #24]
 80092c4:	2208      	movs	r2, #8
 80092c6:	4629      	mov	r1, r5
 80092c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092cc:	f000 f87f 	bl	80093ce <memset>
 80092d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092d8:	4620      	mov	r0, r4
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	3468      	adds	r4, #104	; 0x68
 80092de:	e7d9      	b.n	8009294 <__sfp+0x1c>
 80092e0:	2104      	movs	r1, #4
 80092e2:	4638      	mov	r0, r7
 80092e4:	f7ff ff62 	bl	80091ac <__sfmoreglue>
 80092e8:	4604      	mov	r4, r0
 80092ea:	6030      	str	r0, [r6, #0]
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1d5      	bne.n	800929c <__sfp+0x24>
 80092f0:	f7ff ff78 	bl	80091e4 <__sfp_lock_release>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	e7ee      	b.n	80092d8 <__sfp+0x60>
 80092fa:	bf00      	nop
 80092fc:	0800a8c0 	.word	0x0800a8c0
 8009300:	ffff0001 	.word	0xffff0001

08009304 <_fwalk_reent>:
 8009304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009308:	4606      	mov	r6, r0
 800930a:	4688      	mov	r8, r1
 800930c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009310:	2700      	movs	r7, #0
 8009312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009316:	f1b9 0901 	subs.w	r9, r9, #1
 800931a:	d505      	bpl.n	8009328 <_fwalk_reent+0x24>
 800931c:	6824      	ldr	r4, [r4, #0]
 800931e:	2c00      	cmp	r4, #0
 8009320:	d1f7      	bne.n	8009312 <_fwalk_reent+0xe>
 8009322:	4638      	mov	r0, r7
 8009324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009328:	89ab      	ldrh	r3, [r5, #12]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d907      	bls.n	800933e <_fwalk_reent+0x3a>
 800932e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009332:	3301      	adds	r3, #1
 8009334:	d003      	beq.n	800933e <_fwalk_reent+0x3a>
 8009336:	4629      	mov	r1, r5
 8009338:	4630      	mov	r0, r6
 800933a:	47c0      	blx	r8
 800933c:	4307      	orrs	r7, r0
 800933e:	3568      	adds	r5, #104	; 0x68
 8009340:	e7e9      	b.n	8009316 <_fwalk_reent+0x12>
	...

08009344 <__libc_init_array>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	4d0d      	ldr	r5, [pc, #52]	; (800937c <__libc_init_array+0x38>)
 8009348:	4c0d      	ldr	r4, [pc, #52]	; (8009380 <__libc_init_array+0x3c>)
 800934a:	1b64      	subs	r4, r4, r5
 800934c:	10a4      	asrs	r4, r4, #2
 800934e:	2600      	movs	r6, #0
 8009350:	42a6      	cmp	r6, r4
 8009352:	d109      	bne.n	8009368 <__libc_init_array+0x24>
 8009354:	4d0b      	ldr	r5, [pc, #44]	; (8009384 <__libc_init_array+0x40>)
 8009356:	4c0c      	ldr	r4, [pc, #48]	; (8009388 <__libc_init_array+0x44>)
 8009358:	f001 f936 	bl	800a5c8 <_init>
 800935c:	1b64      	subs	r4, r4, r5
 800935e:	10a4      	asrs	r4, r4, #2
 8009360:	2600      	movs	r6, #0
 8009362:	42a6      	cmp	r6, r4
 8009364:	d105      	bne.n	8009372 <__libc_init_array+0x2e>
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	f855 3b04 	ldr.w	r3, [r5], #4
 800936c:	4798      	blx	r3
 800936e:	3601      	adds	r6, #1
 8009370:	e7ee      	b.n	8009350 <__libc_init_array+0xc>
 8009372:	f855 3b04 	ldr.w	r3, [r5], #4
 8009376:	4798      	blx	r3
 8009378:	3601      	adds	r6, #1
 800937a:	e7f2      	b.n	8009362 <__libc_init_array+0x1e>
 800937c:	0800a900 	.word	0x0800a900
 8009380:	0800a900 	.word	0x0800a900
 8009384:	0800a900 	.word	0x0800a900
 8009388:	0800a904 	.word	0x0800a904

0800938c <__retarget_lock_init_recursive>:
 800938c:	4770      	bx	lr

0800938e <__retarget_lock_acquire_recursive>:
 800938e:	4770      	bx	lr

08009390 <__retarget_lock_release_recursive>:
 8009390:	4770      	bx	lr

08009392 <memcmp>:
 8009392:	b510      	push	{r4, lr}
 8009394:	3901      	subs	r1, #1
 8009396:	4402      	add	r2, r0
 8009398:	4290      	cmp	r0, r2
 800939a:	d101      	bne.n	80093a0 <memcmp+0xe>
 800939c:	2000      	movs	r0, #0
 800939e:	e005      	b.n	80093ac <memcmp+0x1a>
 80093a0:	7803      	ldrb	r3, [r0, #0]
 80093a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80093a6:	42a3      	cmp	r3, r4
 80093a8:	d001      	beq.n	80093ae <memcmp+0x1c>
 80093aa:	1b18      	subs	r0, r3, r4
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	3001      	adds	r0, #1
 80093b0:	e7f2      	b.n	8009398 <memcmp+0x6>

080093b2 <memcpy>:
 80093b2:	440a      	add	r2, r1
 80093b4:	4291      	cmp	r1, r2
 80093b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093ba:	d100      	bne.n	80093be <memcpy+0xc>
 80093bc:	4770      	bx	lr
 80093be:	b510      	push	{r4, lr}
 80093c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c8:	4291      	cmp	r1, r2
 80093ca:	d1f9      	bne.n	80093c0 <memcpy+0xe>
 80093cc:	bd10      	pop	{r4, pc}

080093ce <memset>:
 80093ce:	4402      	add	r2, r0
 80093d0:	4603      	mov	r3, r0
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d100      	bne.n	80093d8 <memset+0xa>
 80093d6:	4770      	bx	lr
 80093d8:	f803 1b01 	strb.w	r1, [r3], #1
 80093dc:	e7f9      	b.n	80093d2 <memset+0x4>
	...

080093e0 <sbrk_aligned>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	4e0e      	ldr	r6, [pc, #56]	; (800941c <sbrk_aligned+0x3c>)
 80093e4:	460c      	mov	r4, r1
 80093e6:	6831      	ldr	r1, [r6, #0]
 80093e8:	4605      	mov	r5, r0
 80093ea:	b911      	cbnz	r1, 80093f2 <sbrk_aligned+0x12>
 80093ec:	f000 f90e 	bl	800960c <_sbrk_r>
 80093f0:	6030      	str	r0, [r6, #0]
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f909 	bl	800960c <_sbrk_r>
 80093fa:	1c43      	adds	r3, r0, #1
 80093fc:	d00a      	beq.n	8009414 <sbrk_aligned+0x34>
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d007      	beq.n	8009418 <sbrk_aligned+0x38>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f000 f8fe 	bl	800960c <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d101      	bne.n	8009418 <sbrk_aligned+0x38>
 8009414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009418:	4620      	mov	r0, r4
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	200042c4 	.word	0x200042c4

08009420 <_malloc_r>:
 8009420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009424:	1ccd      	adds	r5, r1, #3
 8009426:	f025 0503 	bic.w	r5, r5, #3
 800942a:	3508      	adds	r5, #8
 800942c:	2d0c      	cmp	r5, #12
 800942e:	bf38      	it	cc
 8009430:	250c      	movcc	r5, #12
 8009432:	2d00      	cmp	r5, #0
 8009434:	4607      	mov	r7, r0
 8009436:	db01      	blt.n	800943c <_malloc_r+0x1c>
 8009438:	42a9      	cmp	r1, r5
 800943a:	d905      	bls.n	8009448 <_malloc_r+0x28>
 800943c:	230c      	movs	r3, #12
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	2600      	movs	r6, #0
 8009442:	4630      	mov	r0, r6
 8009444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009448:	4e2e      	ldr	r6, [pc, #184]	; (8009504 <_malloc_r+0xe4>)
 800944a:	f000 fa6f 	bl	800992c <__malloc_lock>
 800944e:	6833      	ldr	r3, [r6, #0]
 8009450:	461c      	mov	r4, r3
 8009452:	bb34      	cbnz	r4, 80094a2 <_malloc_r+0x82>
 8009454:	4629      	mov	r1, r5
 8009456:	4638      	mov	r0, r7
 8009458:	f7ff ffc2 	bl	80093e0 <sbrk_aligned>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	4604      	mov	r4, r0
 8009460:	d14d      	bne.n	80094fe <_malloc_r+0xde>
 8009462:	6834      	ldr	r4, [r6, #0]
 8009464:	4626      	mov	r6, r4
 8009466:	2e00      	cmp	r6, #0
 8009468:	d140      	bne.n	80094ec <_malloc_r+0xcc>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	4631      	mov	r1, r6
 800946e:	4638      	mov	r0, r7
 8009470:	eb04 0803 	add.w	r8, r4, r3
 8009474:	f000 f8ca 	bl	800960c <_sbrk_r>
 8009478:	4580      	cmp	r8, r0
 800947a:	d13a      	bne.n	80094f2 <_malloc_r+0xd2>
 800947c:	6821      	ldr	r1, [r4, #0]
 800947e:	3503      	adds	r5, #3
 8009480:	1a6d      	subs	r5, r5, r1
 8009482:	f025 0503 	bic.w	r5, r5, #3
 8009486:	3508      	adds	r5, #8
 8009488:	2d0c      	cmp	r5, #12
 800948a:	bf38      	it	cc
 800948c:	250c      	movcc	r5, #12
 800948e:	4629      	mov	r1, r5
 8009490:	4638      	mov	r0, r7
 8009492:	f7ff ffa5 	bl	80093e0 <sbrk_aligned>
 8009496:	3001      	adds	r0, #1
 8009498:	d02b      	beq.n	80094f2 <_malloc_r+0xd2>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	442b      	add	r3, r5
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	e00e      	b.n	80094c0 <_malloc_r+0xa0>
 80094a2:	6822      	ldr	r2, [r4, #0]
 80094a4:	1b52      	subs	r2, r2, r5
 80094a6:	d41e      	bmi.n	80094e6 <_malloc_r+0xc6>
 80094a8:	2a0b      	cmp	r2, #11
 80094aa:	d916      	bls.n	80094da <_malloc_r+0xba>
 80094ac:	1961      	adds	r1, r4, r5
 80094ae:	42a3      	cmp	r3, r4
 80094b0:	6025      	str	r5, [r4, #0]
 80094b2:	bf18      	it	ne
 80094b4:	6059      	strne	r1, [r3, #4]
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	bf08      	it	eq
 80094ba:	6031      	streq	r1, [r6, #0]
 80094bc:	5162      	str	r2, [r4, r5]
 80094be:	604b      	str	r3, [r1, #4]
 80094c0:	4638      	mov	r0, r7
 80094c2:	f104 060b 	add.w	r6, r4, #11
 80094c6:	f000 fa37 	bl	8009938 <__malloc_unlock>
 80094ca:	f026 0607 	bic.w	r6, r6, #7
 80094ce:	1d23      	adds	r3, r4, #4
 80094d0:	1af2      	subs	r2, r6, r3
 80094d2:	d0b6      	beq.n	8009442 <_malloc_r+0x22>
 80094d4:	1b9b      	subs	r3, r3, r6
 80094d6:	50a3      	str	r3, [r4, r2]
 80094d8:	e7b3      	b.n	8009442 <_malloc_r+0x22>
 80094da:	6862      	ldr	r2, [r4, #4]
 80094dc:	42a3      	cmp	r3, r4
 80094de:	bf0c      	ite	eq
 80094e0:	6032      	streq	r2, [r6, #0]
 80094e2:	605a      	strne	r2, [r3, #4]
 80094e4:	e7ec      	b.n	80094c0 <_malloc_r+0xa0>
 80094e6:	4623      	mov	r3, r4
 80094e8:	6864      	ldr	r4, [r4, #4]
 80094ea:	e7b2      	b.n	8009452 <_malloc_r+0x32>
 80094ec:	4634      	mov	r4, r6
 80094ee:	6876      	ldr	r6, [r6, #4]
 80094f0:	e7b9      	b.n	8009466 <_malloc_r+0x46>
 80094f2:	230c      	movs	r3, #12
 80094f4:	603b      	str	r3, [r7, #0]
 80094f6:	4638      	mov	r0, r7
 80094f8:	f000 fa1e 	bl	8009938 <__malloc_unlock>
 80094fc:	e7a1      	b.n	8009442 <_malloc_r+0x22>
 80094fe:	6025      	str	r5, [r4, #0]
 8009500:	e7de      	b.n	80094c0 <_malloc_r+0xa0>
 8009502:	bf00      	nop
 8009504:	200042c0 	.word	0x200042c0

08009508 <iprintf>:
 8009508:	b40f      	push	{r0, r1, r2, r3}
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <iprintf+0x2c>)
 800950c:	b513      	push	{r0, r1, r4, lr}
 800950e:	681c      	ldr	r4, [r3, #0]
 8009510:	b124      	cbz	r4, 800951c <iprintf+0x14>
 8009512:	69a3      	ldr	r3, [r4, #24]
 8009514:	b913      	cbnz	r3, 800951c <iprintf+0x14>
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff fe76 	bl	8009208 <__sinit>
 800951c:	ab05      	add	r3, sp, #20
 800951e:	9a04      	ldr	r2, [sp, #16]
 8009520:	68a1      	ldr	r1, [r4, #8]
 8009522:	9301      	str	r3, [sp, #4]
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fbdf 	bl	8009ce8 <_vfiprintf_r>
 800952a:	b002      	add	sp, #8
 800952c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009530:	b004      	add	sp, #16
 8009532:	4770      	bx	lr
 8009534:	20000018 	.word	0x20000018

08009538 <cleanup_glue>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	460c      	mov	r4, r1
 800953c:	6809      	ldr	r1, [r1, #0]
 800953e:	4605      	mov	r5, r0
 8009540:	b109      	cbz	r1, 8009546 <cleanup_glue+0xe>
 8009542:	f7ff fff9 	bl	8009538 <cleanup_glue>
 8009546:	4621      	mov	r1, r4
 8009548:	4628      	mov	r0, r5
 800954a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800954e:	f000 b9f9 	b.w	8009944 <_free_r>
	...

08009554 <_reclaim_reent>:
 8009554:	4b2c      	ldr	r3, [pc, #176]	; (8009608 <_reclaim_reent+0xb4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4283      	cmp	r3, r0
 800955a:	b570      	push	{r4, r5, r6, lr}
 800955c:	4604      	mov	r4, r0
 800955e:	d051      	beq.n	8009604 <_reclaim_reent+0xb0>
 8009560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009562:	b143      	cbz	r3, 8009576 <_reclaim_reent+0x22>
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d14a      	bne.n	8009600 <_reclaim_reent+0xac>
 800956a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800956c:	6819      	ldr	r1, [r3, #0]
 800956e:	b111      	cbz	r1, 8009576 <_reclaim_reent+0x22>
 8009570:	4620      	mov	r0, r4
 8009572:	f000 f9e7 	bl	8009944 <_free_r>
 8009576:	6961      	ldr	r1, [r4, #20]
 8009578:	b111      	cbz	r1, 8009580 <_reclaim_reent+0x2c>
 800957a:	4620      	mov	r0, r4
 800957c:	f000 f9e2 	bl	8009944 <_free_r>
 8009580:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009582:	b111      	cbz	r1, 800958a <_reclaim_reent+0x36>
 8009584:	4620      	mov	r0, r4
 8009586:	f000 f9dd 	bl	8009944 <_free_r>
 800958a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800958c:	b111      	cbz	r1, 8009594 <_reclaim_reent+0x40>
 800958e:	4620      	mov	r0, r4
 8009590:	f000 f9d8 	bl	8009944 <_free_r>
 8009594:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009596:	b111      	cbz	r1, 800959e <_reclaim_reent+0x4a>
 8009598:	4620      	mov	r0, r4
 800959a:	f000 f9d3 	bl	8009944 <_free_r>
 800959e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80095a0:	b111      	cbz	r1, 80095a8 <_reclaim_reent+0x54>
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 f9ce 	bl	8009944 <_free_r>
 80095a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80095aa:	b111      	cbz	r1, 80095b2 <_reclaim_reent+0x5e>
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 f9c9 	bl	8009944 <_free_r>
 80095b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80095b4:	b111      	cbz	r1, 80095bc <_reclaim_reent+0x68>
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 f9c4 	bl	8009944 <_free_r>
 80095bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095be:	b111      	cbz	r1, 80095c6 <_reclaim_reent+0x72>
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 f9bf 	bl	8009944 <_free_r>
 80095c6:	69a3      	ldr	r3, [r4, #24]
 80095c8:	b1e3      	cbz	r3, 8009604 <_reclaim_reent+0xb0>
 80095ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80095cc:	4620      	mov	r0, r4
 80095ce:	4798      	blx	r3
 80095d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80095d2:	b1b9      	cbz	r1, 8009604 <_reclaim_reent+0xb0>
 80095d4:	4620      	mov	r0, r4
 80095d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095da:	f7ff bfad 	b.w	8009538 <cleanup_glue>
 80095de:	5949      	ldr	r1, [r1, r5]
 80095e0:	b941      	cbnz	r1, 80095f4 <_reclaim_reent+0xa0>
 80095e2:	3504      	adds	r5, #4
 80095e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e6:	2d80      	cmp	r5, #128	; 0x80
 80095e8:	68d9      	ldr	r1, [r3, #12]
 80095ea:	d1f8      	bne.n	80095de <_reclaim_reent+0x8a>
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 f9a9 	bl	8009944 <_free_r>
 80095f2:	e7ba      	b.n	800956a <_reclaim_reent+0x16>
 80095f4:	680e      	ldr	r6, [r1, #0]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 f9a4 	bl	8009944 <_free_r>
 80095fc:	4631      	mov	r1, r6
 80095fe:	e7ef      	b.n	80095e0 <_reclaim_reent+0x8c>
 8009600:	2500      	movs	r5, #0
 8009602:	e7ef      	b.n	80095e4 <_reclaim_reent+0x90>
 8009604:	bd70      	pop	{r4, r5, r6, pc}
 8009606:	bf00      	nop
 8009608:	20000018 	.word	0x20000018

0800960c <_sbrk_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d06      	ldr	r5, [pc, #24]	; (8009628 <_sbrk_r+0x1c>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7f7 ff8a 	bl	8001530 <_sbrk>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_sbrk_r+0x1a>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_sbrk_r+0x1a>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	200042c8 	.word	0x200042c8

0800962c <sniprintf>:
 800962c:	b40c      	push	{r2, r3}
 800962e:	b530      	push	{r4, r5, lr}
 8009630:	4b17      	ldr	r3, [pc, #92]	; (8009690 <sniprintf+0x64>)
 8009632:	1e0c      	subs	r4, r1, #0
 8009634:	681d      	ldr	r5, [r3, #0]
 8009636:	b09d      	sub	sp, #116	; 0x74
 8009638:	da08      	bge.n	800964c <sniprintf+0x20>
 800963a:	238b      	movs	r3, #139	; 0x8b
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009642:	b01d      	add	sp, #116	; 0x74
 8009644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009648:	b002      	add	sp, #8
 800964a:	4770      	bx	lr
 800964c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009650:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009654:	bf14      	ite	ne
 8009656:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800965a:	4623      	moveq	r3, r4
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	9307      	str	r3, [sp, #28]
 8009660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009664:	9002      	str	r0, [sp, #8]
 8009666:	9006      	str	r0, [sp, #24]
 8009668:	f8ad 3016 	strh.w	r3, [sp, #22]
 800966c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800966e:	ab21      	add	r3, sp, #132	; 0x84
 8009670:	a902      	add	r1, sp, #8
 8009672:	4628      	mov	r0, r5
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	f000 fa0d 	bl	8009a94 <_svfiprintf_r>
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	bfbc      	itt	lt
 800967e:	238b      	movlt	r3, #139	; 0x8b
 8009680:	602b      	strlt	r3, [r5, #0]
 8009682:	2c00      	cmp	r4, #0
 8009684:	d0dd      	beq.n	8009642 <sniprintf+0x16>
 8009686:	9b02      	ldr	r3, [sp, #8]
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	e7d9      	b.n	8009642 <sniprintf+0x16>
 800968e:	bf00      	nop
 8009690:	20000018 	.word	0x20000018

08009694 <__sread>:
 8009694:	b510      	push	{r4, lr}
 8009696:	460c      	mov	r4, r1
 8009698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969c:	f000 fde8 	bl	800a270 <_read_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	bfab      	itete	ge
 80096a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096a6:	89a3      	ldrhlt	r3, [r4, #12]
 80096a8:	181b      	addge	r3, r3, r0
 80096aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ae:	bfac      	ite	ge
 80096b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80096b2:	81a3      	strhlt	r3, [r4, #12]
 80096b4:	bd10      	pop	{r4, pc}

080096b6 <__swrite>:
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	461f      	mov	r7, r3
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	05db      	lsls	r3, r3, #23
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4616      	mov	r6, r2
 80096c6:	d505      	bpl.n	80096d4 <__swrite+0x1e>
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	2302      	movs	r3, #2
 80096ce:	2200      	movs	r2, #0
 80096d0:	f000 f91a 	bl	8009908 <_lseek_r>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	4632      	mov	r2, r6
 80096e2:	463b      	mov	r3, r7
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	f000 b829 	b.w	8009740 <_write_r>

080096ee <__sseek>:
 80096ee:	b510      	push	{r4, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f6:	f000 f907 	bl	8009908 <_lseek_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	bf15      	itete	ne
 8009700:	6560      	strne	r0, [r4, #84]	; 0x54
 8009702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800970a:	81a3      	strheq	r3, [r4, #12]
 800970c:	bf18      	it	ne
 800970e:	81a3      	strhne	r3, [r4, #12]
 8009710:	bd10      	pop	{r4, pc}

08009712 <__sclose>:
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f000 b825 	b.w	8009764 <_close_r>

0800971a <strncpy>:
 800971a:	b510      	push	{r4, lr}
 800971c:	3901      	subs	r1, #1
 800971e:	4603      	mov	r3, r0
 8009720:	b132      	cbz	r2, 8009730 <strncpy+0x16>
 8009722:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009726:	f803 4b01 	strb.w	r4, [r3], #1
 800972a:	3a01      	subs	r2, #1
 800972c:	2c00      	cmp	r4, #0
 800972e:	d1f7      	bne.n	8009720 <strncpy+0x6>
 8009730:	441a      	add	r2, r3
 8009732:	2100      	movs	r1, #0
 8009734:	4293      	cmp	r3, r2
 8009736:	d100      	bne.n	800973a <strncpy+0x20>
 8009738:	bd10      	pop	{r4, pc}
 800973a:	f803 1b01 	strb.w	r1, [r3], #1
 800973e:	e7f9      	b.n	8009734 <strncpy+0x1a>

08009740 <_write_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d07      	ldr	r5, [pc, #28]	; (8009760 <_write_r+0x20>)
 8009744:	4604      	mov	r4, r0
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	2200      	movs	r2, #0
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	f7f7 fe9d 	bl	800148e <_write>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_write_r+0x1e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_write_r+0x1e>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	200042c8 	.word	0x200042c8

08009764 <_close_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d06      	ldr	r5, [pc, #24]	; (8009780 <_close_r+0x1c>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f7 fea9 	bl	80014c6 <_close>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_close_r+0x1a>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_close_r+0x1a>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200042c8 	.word	0x200042c8

08009784 <__sflush_r>:
 8009784:	898a      	ldrh	r2, [r1, #12]
 8009786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978a:	4605      	mov	r5, r0
 800978c:	0710      	lsls	r0, r2, #28
 800978e:	460c      	mov	r4, r1
 8009790:	d458      	bmi.n	8009844 <__sflush_r+0xc0>
 8009792:	684b      	ldr	r3, [r1, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	dc05      	bgt.n	80097a4 <__sflush_r+0x20>
 8009798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800979a:	2b00      	cmp	r3, #0
 800979c:	dc02      	bgt.n	80097a4 <__sflush_r+0x20>
 800979e:	2000      	movs	r0, #0
 80097a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097a6:	2e00      	cmp	r6, #0
 80097a8:	d0f9      	beq.n	800979e <__sflush_r+0x1a>
 80097aa:	2300      	movs	r3, #0
 80097ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097b0:	682f      	ldr	r7, [r5, #0]
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	d032      	beq.n	800981c <__sflush_r+0x98>
 80097b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	075a      	lsls	r2, r3, #29
 80097bc:	d505      	bpl.n	80097ca <__sflush_r+0x46>
 80097be:	6863      	ldr	r3, [r4, #4]
 80097c0:	1ac0      	subs	r0, r0, r3
 80097c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097c4:	b10b      	cbz	r3, 80097ca <__sflush_r+0x46>
 80097c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097c8:	1ac0      	subs	r0, r0, r3
 80097ca:	2300      	movs	r3, #0
 80097cc:	4602      	mov	r2, r0
 80097ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097d0:	6a21      	ldr	r1, [r4, #32]
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b0      	blx	r6
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	d106      	bne.n	80097ea <__sflush_r+0x66>
 80097dc:	6829      	ldr	r1, [r5, #0]
 80097de:	291d      	cmp	r1, #29
 80097e0:	d82c      	bhi.n	800983c <__sflush_r+0xb8>
 80097e2:	4a2a      	ldr	r2, [pc, #168]	; (800988c <__sflush_r+0x108>)
 80097e4:	40ca      	lsrs	r2, r1
 80097e6:	07d6      	lsls	r6, r2, #31
 80097e8:	d528      	bpl.n	800983c <__sflush_r+0xb8>
 80097ea:	2200      	movs	r2, #0
 80097ec:	6062      	str	r2, [r4, #4]
 80097ee:	04d9      	lsls	r1, r3, #19
 80097f0:	6922      	ldr	r2, [r4, #16]
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	d504      	bpl.n	8009800 <__sflush_r+0x7c>
 80097f6:	1c42      	adds	r2, r0, #1
 80097f8:	d101      	bne.n	80097fe <__sflush_r+0x7a>
 80097fa:	682b      	ldr	r3, [r5, #0]
 80097fc:	b903      	cbnz	r3, 8009800 <__sflush_r+0x7c>
 80097fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009802:	602f      	str	r7, [r5, #0]
 8009804:	2900      	cmp	r1, #0
 8009806:	d0ca      	beq.n	800979e <__sflush_r+0x1a>
 8009808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800980c:	4299      	cmp	r1, r3
 800980e:	d002      	beq.n	8009816 <__sflush_r+0x92>
 8009810:	4628      	mov	r0, r5
 8009812:	f000 f897 	bl	8009944 <_free_r>
 8009816:	2000      	movs	r0, #0
 8009818:	6360      	str	r0, [r4, #52]	; 0x34
 800981a:	e7c1      	b.n	80097a0 <__sflush_r+0x1c>
 800981c:	6a21      	ldr	r1, [r4, #32]
 800981e:	2301      	movs	r3, #1
 8009820:	4628      	mov	r0, r5
 8009822:	47b0      	blx	r6
 8009824:	1c41      	adds	r1, r0, #1
 8009826:	d1c7      	bne.n	80097b8 <__sflush_r+0x34>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0c4      	beq.n	80097b8 <__sflush_r+0x34>
 800982e:	2b1d      	cmp	r3, #29
 8009830:	d001      	beq.n	8009836 <__sflush_r+0xb2>
 8009832:	2b16      	cmp	r3, #22
 8009834:	d101      	bne.n	800983a <__sflush_r+0xb6>
 8009836:	602f      	str	r7, [r5, #0]
 8009838:	e7b1      	b.n	800979e <__sflush_r+0x1a>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	e7ad      	b.n	80097a0 <__sflush_r+0x1c>
 8009844:	690f      	ldr	r7, [r1, #16]
 8009846:	2f00      	cmp	r7, #0
 8009848:	d0a9      	beq.n	800979e <__sflush_r+0x1a>
 800984a:	0793      	lsls	r3, r2, #30
 800984c:	680e      	ldr	r6, [r1, #0]
 800984e:	bf08      	it	eq
 8009850:	694b      	ldreq	r3, [r1, #20]
 8009852:	600f      	str	r7, [r1, #0]
 8009854:	bf18      	it	ne
 8009856:	2300      	movne	r3, #0
 8009858:	eba6 0807 	sub.w	r8, r6, r7
 800985c:	608b      	str	r3, [r1, #8]
 800985e:	f1b8 0f00 	cmp.w	r8, #0
 8009862:	dd9c      	ble.n	800979e <__sflush_r+0x1a>
 8009864:	6a21      	ldr	r1, [r4, #32]
 8009866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009868:	4643      	mov	r3, r8
 800986a:	463a      	mov	r2, r7
 800986c:	4628      	mov	r0, r5
 800986e:	47b0      	blx	r6
 8009870:	2800      	cmp	r0, #0
 8009872:	dc06      	bgt.n	8009882 <__sflush_r+0xfe>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009880:	e78e      	b.n	80097a0 <__sflush_r+0x1c>
 8009882:	4407      	add	r7, r0
 8009884:	eba8 0800 	sub.w	r8, r8, r0
 8009888:	e7e9      	b.n	800985e <__sflush_r+0xda>
 800988a:	bf00      	nop
 800988c:	20400001 	.word	0x20400001

08009890 <_fflush_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	690b      	ldr	r3, [r1, #16]
 8009894:	4605      	mov	r5, r0
 8009896:	460c      	mov	r4, r1
 8009898:	b913      	cbnz	r3, 80098a0 <_fflush_r+0x10>
 800989a:	2500      	movs	r5, #0
 800989c:	4628      	mov	r0, r5
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	b118      	cbz	r0, 80098aa <_fflush_r+0x1a>
 80098a2:	6983      	ldr	r3, [r0, #24]
 80098a4:	b90b      	cbnz	r3, 80098aa <_fflush_r+0x1a>
 80098a6:	f7ff fcaf 	bl	8009208 <__sinit>
 80098aa:	4b14      	ldr	r3, [pc, #80]	; (80098fc <_fflush_r+0x6c>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d11b      	bne.n	80098e8 <_fflush_r+0x58>
 80098b0:	686c      	ldr	r4, [r5, #4]
 80098b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0ef      	beq.n	800989a <_fflush_r+0xa>
 80098ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098bc:	07d0      	lsls	r0, r2, #31
 80098be:	d404      	bmi.n	80098ca <_fflush_r+0x3a>
 80098c0:	0599      	lsls	r1, r3, #22
 80098c2:	d402      	bmi.n	80098ca <_fflush_r+0x3a>
 80098c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098c6:	f7ff fd62 	bl	800938e <__retarget_lock_acquire_recursive>
 80098ca:	4628      	mov	r0, r5
 80098cc:	4621      	mov	r1, r4
 80098ce:	f7ff ff59 	bl	8009784 <__sflush_r>
 80098d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098d4:	07da      	lsls	r2, r3, #31
 80098d6:	4605      	mov	r5, r0
 80098d8:	d4e0      	bmi.n	800989c <_fflush_r+0xc>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	059b      	lsls	r3, r3, #22
 80098de:	d4dd      	bmi.n	800989c <_fflush_r+0xc>
 80098e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098e2:	f7ff fd55 	bl	8009390 <__retarget_lock_release_recursive>
 80098e6:	e7d9      	b.n	800989c <_fflush_r+0xc>
 80098e8:	4b05      	ldr	r3, [pc, #20]	; (8009900 <_fflush_r+0x70>)
 80098ea:	429c      	cmp	r4, r3
 80098ec:	d101      	bne.n	80098f2 <_fflush_r+0x62>
 80098ee:	68ac      	ldr	r4, [r5, #8]
 80098f0:	e7df      	b.n	80098b2 <_fflush_r+0x22>
 80098f2:	4b04      	ldr	r3, [pc, #16]	; (8009904 <_fflush_r+0x74>)
 80098f4:	429c      	cmp	r4, r3
 80098f6:	bf08      	it	eq
 80098f8:	68ec      	ldreq	r4, [r5, #12]
 80098fa:	e7da      	b.n	80098b2 <_fflush_r+0x22>
 80098fc:	0800a880 	.word	0x0800a880
 8009900:	0800a8a0 	.word	0x0800a8a0
 8009904:	0800a860 	.word	0x0800a860

08009908 <_lseek_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d07      	ldr	r5, [pc, #28]	; (8009928 <_lseek_r+0x20>)
 800990c:	4604      	mov	r4, r0
 800990e:	4608      	mov	r0, r1
 8009910:	4611      	mov	r1, r2
 8009912:	2200      	movs	r2, #0
 8009914:	602a      	str	r2, [r5, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	f7f7 fdfc 	bl	8001514 <_lseek>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_lseek_r+0x1e>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_lseek_r+0x1e>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	200042c8 	.word	0x200042c8

0800992c <__malloc_lock>:
 800992c:	4801      	ldr	r0, [pc, #4]	; (8009934 <__malloc_lock+0x8>)
 800992e:	f7ff bd2e 	b.w	800938e <__retarget_lock_acquire_recursive>
 8009932:	bf00      	nop
 8009934:	200042bc 	.word	0x200042bc

08009938 <__malloc_unlock>:
 8009938:	4801      	ldr	r0, [pc, #4]	; (8009940 <__malloc_unlock+0x8>)
 800993a:	f7ff bd29 	b.w	8009390 <__retarget_lock_release_recursive>
 800993e:	bf00      	nop
 8009940:	200042bc 	.word	0x200042bc

08009944 <_free_r>:
 8009944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009946:	2900      	cmp	r1, #0
 8009948:	d044      	beq.n	80099d4 <_free_r+0x90>
 800994a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800994e:	9001      	str	r0, [sp, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f1a1 0404 	sub.w	r4, r1, #4
 8009956:	bfb8      	it	lt
 8009958:	18e4      	addlt	r4, r4, r3
 800995a:	f7ff ffe7 	bl	800992c <__malloc_lock>
 800995e:	4a1e      	ldr	r2, [pc, #120]	; (80099d8 <_free_r+0x94>)
 8009960:	9801      	ldr	r0, [sp, #4]
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	b933      	cbnz	r3, 8009974 <_free_r+0x30>
 8009966:	6063      	str	r3, [r4, #4]
 8009968:	6014      	str	r4, [r2, #0]
 800996a:	b003      	add	sp, #12
 800996c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009970:	f7ff bfe2 	b.w	8009938 <__malloc_unlock>
 8009974:	42a3      	cmp	r3, r4
 8009976:	d908      	bls.n	800998a <_free_r+0x46>
 8009978:	6825      	ldr	r5, [r4, #0]
 800997a:	1961      	adds	r1, r4, r5
 800997c:	428b      	cmp	r3, r1
 800997e:	bf01      	itttt	eq
 8009980:	6819      	ldreq	r1, [r3, #0]
 8009982:	685b      	ldreq	r3, [r3, #4]
 8009984:	1949      	addeq	r1, r1, r5
 8009986:	6021      	streq	r1, [r4, #0]
 8009988:	e7ed      	b.n	8009966 <_free_r+0x22>
 800998a:	461a      	mov	r2, r3
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	b10b      	cbz	r3, 8009994 <_free_r+0x50>
 8009990:	42a3      	cmp	r3, r4
 8009992:	d9fa      	bls.n	800998a <_free_r+0x46>
 8009994:	6811      	ldr	r1, [r2, #0]
 8009996:	1855      	adds	r5, r2, r1
 8009998:	42a5      	cmp	r5, r4
 800999a:	d10b      	bne.n	80099b4 <_free_r+0x70>
 800999c:	6824      	ldr	r4, [r4, #0]
 800999e:	4421      	add	r1, r4
 80099a0:	1854      	adds	r4, r2, r1
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	6011      	str	r1, [r2, #0]
 80099a6:	d1e0      	bne.n	800996a <_free_r+0x26>
 80099a8:	681c      	ldr	r4, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	6053      	str	r3, [r2, #4]
 80099ae:	4421      	add	r1, r4
 80099b0:	6011      	str	r1, [r2, #0]
 80099b2:	e7da      	b.n	800996a <_free_r+0x26>
 80099b4:	d902      	bls.n	80099bc <_free_r+0x78>
 80099b6:	230c      	movs	r3, #12
 80099b8:	6003      	str	r3, [r0, #0]
 80099ba:	e7d6      	b.n	800996a <_free_r+0x26>
 80099bc:	6825      	ldr	r5, [r4, #0]
 80099be:	1961      	adds	r1, r4, r5
 80099c0:	428b      	cmp	r3, r1
 80099c2:	bf04      	itt	eq
 80099c4:	6819      	ldreq	r1, [r3, #0]
 80099c6:	685b      	ldreq	r3, [r3, #4]
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	bf04      	itt	eq
 80099cc:	1949      	addeq	r1, r1, r5
 80099ce:	6021      	streq	r1, [r4, #0]
 80099d0:	6054      	str	r4, [r2, #4]
 80099d2:	e7ca      	b.n	800996a <_free_r+0x26>
 80099d4:	b003      	add	sp, #12
 80099d6:	bd30      	pop	{r4, r5, pc}
 80099d8:	200042c0 	.word	0x200042c0

080099dc <__ssputs_r>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	688e      	ldr	r6, [r1, #8]
 80099e2:	429e      	cmp	r6, r3
 80099e4:	4682      	mov	sl, r0
 80099e6:	460c      	mov	r4, r1
 80099e8:	4690      	mov	r8, r2
 80099ea:	461f      	mov	r7, r3
 80099ec:	d838      	bhi.n	8009a60 <__ssputs_r+0x84>
 80099ee:	898a      	ldrh	r2, [r1, #12]
 80099f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099f4:	d032      	beq.n	8009a5c <__ssputs_r+0x80>
 80099f6:	6825      	ldr	r5, [r4, #0]
 80099f8:	6909      	ldr	r1, [r1, #16]
 80099fa:	eba5 0901 	sub.w	r9, r5, r1
 80099fe:	6965      	ldr	r5, [r4, #20]
 8009a00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a08:	3301      	adds	r3, #1
 8009a0a:	444b      	add	r3, r9
 8009a0c:	106d      	asrs	r5, r5, #1
 8009a0e:	429d      	cmp	r5, r3
 8009a10:	bf38      	it	cc
 8009a12:	461d      	movcc	r5, r3
 8009a14:	0553      	lsls	r3, r2, #21
 8009a16:	d531      	bpl.n	8009a7c <__ssputs_r+0xa0>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7ff fd01 	bl	8009420 <_malloc_r>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	b950      	cbnz	r0, 8009a38 <__ssputs_r+0x5c>
 8009a22:	230c      	movs	r3, #12
 8009a24:	f8ca 3000 	str.w	r3, [sl]
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a38:	6921      	ldr	r1, [r4, #16]
 8009a3a:	464a      	mov	r2, r9
 8009a3c:	f7ff fcb9 	bl	80093b2 <memcpy>
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4a:	81a3      	strh	r3, [r4, #12]
 8009a4c:	6126      	str	r6, [r4, #16]
 8009a4e:	6165      	str	r5, [r4, #20]
 8009a50:	444e      	add	r6, r9
 8009a52:	eba5 0509 	sub.w	r5, r5, r9
 8009a56:	6026      	str	r6, [r4, #0]
 8009a58:	60a5      	str	r5, [r4, #8]
 8009a5a:	463e      	mov	r6, r7
 8009a5c:	42be      	cmp	r6, r7
 8009a5e:	d900      	bls.n	8009a62 <__ssputs_r+0x86>
 8009a60:	463e      	mov	r6, r7
 8009a62:	6820      	ldr	r0, [r4, #0]
 8009a64:	4632      	mov	r2, r6
 8009a66:	4641      	mov	r1, r8
 8009a68:	f000 fd3a 	bl	800a4e0 <memmove>
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	1b9b      	subs	r3, r3, r6
 8009a70:	60a3      	str	r3, [r4, #8]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	4433      	add	r3, r6
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	2000      	movs	r0, #0
 8009a7a:	e7db      	b.n	8009a34 <__ssputs_r+0x58>
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	f000 fd49 	bl	800a514 <_realloc_r>
 8009a82:	4606      	mov	r6, r0
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d1e1      	bne.n	8009a4c <__ssputs_r+0x70>
 8009a88:	6921      	ldr	r1, [r4, #16]
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	f7ff ff5a 	bl	8009944 <_free_r>
 8009a90:	e7c7      	b.n	8009a22 <__ssputs_r+0x46>
	...

08009a94 <_svfiprintf_r>:
 8009a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a98:	4698      	mov	r8, r3
 8009a9a:	898b      	ldrh	r3, [r1, #12]
 8009a9c:	061b      	lsls	r3, r3, #24
 8009a9e:	b09d      	sub	sp, #116	; 0x74
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	d50e      	bpl.n	8009ac6 <_svfiprintf_r+0x32>
 8009aa8:	690b      	ldr	r3, [r1, #16]
 8009aaa:	b963      	cbnz	r3, 8009ac6 <_svfiprintf_r+0x32>
 8009aac:	2140      	movs	r1, #64	; 0x40
 8009aae:	f7ff fcb7 	bl	8009420 <_malloc_r>
 8009ab2:	6028      	str	r0, [r5, #0]
 8009ab4:	6128      	str	r0, [r5, #16]
 8009ab6:	b920      	cbnz	r0, 8009ac2 <_svfiprintf_r+0x2e>
 8009ab8:	230c      	movs	r3, #12
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac0:	e0d1      	b.n	8009c66 <_svfiprintf_r+0x1d2>
 8009ac2:	2340      	movs	r3, #64	; 0x40
 8009ac4:	616b      	str	r3, [r5, #20]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aca:	2320      	movs	r3, #32
 8009acc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ad4:	2330      	movs	r3, #48	; 0x30
 8009ad6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c80 <_svfiprintf_r+0x1ec>
 8009ada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ade:	f04f 0901 	mov.w	r9, #1
 8009ae2:	4623      	mov	r3, r4
 8009ae4:	469a      	mov	sl, r3
 8009ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aea:	b10a      	cbz	r2, 8009af0 <_svfiprintf_r+0x5c>
 8009aec:	2a25      	cmp	r2, #37	; 0x25
 8009aee:	d1f9      	bne.n	8009ae4 <_svfiprintf_r+0x50>
 8009af0:	ebba 0b04 	subs.w	fp, sl, r4
 8009af4:	d00b      	beq.n	8009b0e <_svfiprintf_r+0x7a>
 8009af6:	465b      	mov	r3, fp
 8009af8:	4622      	mov	r2, r4
 8009afa:	4629      	mov	r1, r5
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7ff ff6d 	bl	80099dc <__ssputs_r>
 8009b02:	3001      	adds	r0, #1
 8009b04:	f000 80aa 	beq.w	8009c5c <_svfiprintf_r+0x1c8>
 8009b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b0a:	445a      	add	r2, fp
 8009b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 80a2 	beq.w	8009c5c <_svfiprintf_r+0x1c8>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b22:	f10a 0a01 	add.w	sl, sl, #1
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	9307      	str	r3, [sp, #28]
 8009b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b30:	4654      	mov	r4, sl
 8009b32:	2205      	movs	r2, #5
 8009b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b38:	4851      	ldr	r0, [pc, #324]	; (8009c80 <_svfiprintf_r+0x1ec>)
 8009b3a:	f7f6 fb51 	bl	80001e0 <memchr>
 8009b3e:	9a04      	ldr	r2, [sp, #16]
 8009b40:	b9d8      	cbnz	r0, 8009b7a <_svfiprintf_r+0xe6>
 8009b42:	06d0      	lsls	r0, r2, #27
 8009b44:	bf44      	itt	mi
 8009b46:	2320      	movmi	r3, #32
 8009b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b4c:	0711      	lsls	r1, r2, #28
 8009b4e:	bf44      	itt	mi
 8009b50:	232b      	movmi	r3, #43	; 0x2b
 8009b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b56:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5c:	d015      	beq.n	8009b8a <_svfiprintf_r+0xf6>
 8009b5e:	9a07      	ldr	r2, [sp, #28]
 8009b60:	4654      	mov	r4, sl
 8009b62:	2000      	movs	r0, #0
 8009b64:	f04f 0c0a 	mov.w	ip, #10
 8009b68:	4621      	mov	r1, r4
 8009b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b6e:	3b30      	subs	r3, #48	; 0x30
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	d94e      	bls.n	8009c12 <_svfiprintf_r+0x17e>
 8009b74:	b1b0      	cbz	r0, 8009ba4 <_svfiprintf_r+0x110>
 8009b76:	9207      	str	r2, [sp, #28]
 8009b78:	e014      	b.n	8009ba4 <_svfiprintf_r+0x110>
 8009b7a:	eba0 0308 	sub.w	r3, r0, r8
 8009b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b82:	4313      	orrs	r3, r2
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	46a2      	mov	sl, r4
 8009b88:	e7d2      	b.n	8009b30 <_svfiprintf_r+0x9c>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	1d19      	adds	r1, r3, #4
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	9103      	str	r1, [sp, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	bfbb      	ittet	lt
 8009b96:	425b      	neglt	r3, r3
 8009b98:	f042 0202 	orrlt.w	r2, r2, #2
 8009b9c:	9307      	strge	r3, [sp, #28]
 8009b9e:	9307      	strlt	r3, [sp, #28]
 8009ba0:	bfb8      	it	lt
 8009ba2:	9204      	strlt	r2, [sp, #16]
 8009ba4:	7823      	ldrb	r3, [r4, #0]
 8009ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba8:	d10c      	bne.n	8009bc4 <_svfiprintf_r+0x130>
 8009baa:	7863      	ldrb	r3, [r4, #1]
 8009bac:	2b2a      	cmp	r3, #42	; 0x2a
 8009bae:	d135      	bne.n	8009c1c <_svfiprintf_r+0x188>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	1d1a      	adds	r2, r3, #4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	9203      	str	r2, [sp, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bfb8      	it	lt
 8009bbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009bc0:	3402      	adds	r4, #2
 8009bc2:	9305      	str	r3, [sp, #20]
 8009bc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c90 <_svfiprintf_r+0x1fc>
 8009bc8:	7821      	ldrb	r1, [r4, #0]
 8009bca:	2203      	movs	r2, #3
 8009bcc:	4650      	mov	r0, sl
 8009bce:	f7f6 fb07 	bl	80001e0 <memchr>
 8009bd2:	b140      	cbz	r0, 8009be6 <_svfiprintf_r+0x152>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	eba0 000a 	sub.w	r0, r0, sl
 8009bda:	fa03 f000 	lsl.w	r0, r3, r0
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	4303      	orrs	r3, r0
 8009be2:	3401      	adds	r4, #1
 8009be4:	9304      	str	r3, [sp, #16]
 8009be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bea:	4826      	ldr	r0, [pc, #152]	; (8009c84 <_svfiprintf_r+0x1f0>)
 8009bec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bf0:	2206      	movs	r2, #6
 8009bf2:	f7f6 faf5 	bl	80001e0 <memchr>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d038      	beq.n	8009c6c <_svfiprintf_r+0x1d8>
 8009bfa:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <_svfiprintf_r+0x1f4>)
 8009bfc:	bb1b      	cbnz	r3, 8009c46 <_svfiprintf_r+0x1b2>
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	3307      	adds	r3, #7
 8009c02:	f023 0307 	bic.w	r3, r3, #7
 8009c06:	3308      	adds	r3, #8
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c0c:	4433      	add	r3, r6
 8009c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c10:	e767      	b.n	8009ae2 <_svfiprintf_r+0x4e>
 8009c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c16:	460c      	mov	r4, r1
 8009c18:	2001      	movs	r0, #1
 8009c1a:	e7a5      	b.n	8009b68 <_svfiprintf_r+0xd4>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	3401      	adds	r4, #1
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	4619      	mov	r1, r3
 8009c24:	f04f 0c0a 	mov.w	ip, #10
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c2e:	3a30      	subs	r2, #48	; 0x30
 8009c30:	2a09      	cmp	r2, #9
 8009c32:	d903      	bls.n	8009c3c <_svfiprintf_r+0x1a8>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0c5      	beq.n	8009bc4 <_svfiprintf_r+0x130>
 8009c38:	9105      	str	r1, [sp, #20]
 8009c3a:	e7c3      	b.n	8009bc4 <_svfiprintf_r+0x130>
 8009c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c40:	4604      	mov	r4, r0
 8009c42:	2301      	movs	r3, #1
 8009c44:	e7f0      	b.n	8009c28 <_svfiprintf_r+0x194>
 8009c46:	ab03      	add	r3, sp, #12
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <_svfiprintf_r+0x1f8>)
 8009c4e:	a904      	add	r1, sp, #16
 8009c50:	4638      	mov	r0, r7
 8009c52:	f3af 8000 	nop.w
 8009c56:	1c42      	adds	r2, r0, #1
 8009c58:	4606      	mov	r6, r0
 8009c5a:	d1d6      	bne.n	8009c0a <_svfiprintf_r+0x176>
 8009c5c:	89ab      	ldrh	r3, [r5, #12]
 8009c5e:	065b      	lsls	r3, r3, #25
 8009c60:	f53f af2c 	bmi.w	8009abc <_svfiprintf_r+0x28>
 8009c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c66:	b01d      	add	sp, #116	; 0x74
 8009c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6c:	ab03      	add	r3, sp, #12
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	462a      	mov	r2, r5
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <_svfiprintf_r+0x1f8>)
 8009c74:	a904      	add	r1, sp, #16
 8009c76:	4638      	mov	r0, r7
 8009c78:	f000 f9d4 	bl	800a024 <_printf_i>
 8009c7c:	e7eb      	b.n	8009c56 <_svfiprintf_r+0x1c2>
 8009c7e:	bf00      	nop
 8009c80:	0800a8c4 	.word	0x0800a8c4
 8009c84:	0800a8ce 	.word	0x0800a8ce
 8009c88:	00000000 	.word	0x00000000
 8009c8c:	080099dd 	.word	0x080099dd
 8009c90:	0800a8ca 	.word	0x0800a8ca

08009c94 <__sfputc_r>:
 8009c94:	6893      	ldr	r3, [r2, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	b410      	push	{r4}
 8009c9c:	6093      	str	r3, [r2, #8]
 8009c9e:	da08      	bge.n	8009cb2 <__sfputc_r+0x1e>
 8009ca0:	6994      	ldr	r4, [r2, #24]
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	db01      	blt.n	8009caa <__sfputc_r+0x16>
 8009ca6:	290a      	cmp	r1, #10
 8009ca8:	d103      	bne.n	8009cb2 <__sfputc_r+0x1e>
 8009caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cae:	f000 baf1 	b.w	800a294 <__swbuf_r>
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	1c58      	adds	r0, r3, #1
 8009cb6:	6010      	str	r0, [r2, #0]
 8009cb8:	7019      	strb	r1, [r3, #0]
 8009cba:	4608      	mov	r0, r1
 8009cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <__sfputs_r>:
 8009cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	4614      	mov	r4, r2
 8009cca:	18d5      	adds	r5, r2, r3
 8009ccc:	42ac      	cmp	r4, r5
 8009cce:	d101      	bne.n	8009cd4 <__sfputs_r+0x12>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e007      	b.n	8009ce4 <__sfputs_r+0x22>
 8009cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd8:	463a      	mov	r2, r7
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7ff ffda 	bl	8009c94 <__sfputc_r>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d1f3      	bne.n	8009ccc <__sfputs_r+0xa>
 8009ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ce8 <_vfiprintf_r>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	460d      	mov	r5, r1
 8009cee:	b09d      	sub	sp, #116	; 0x74
 8009cf0:	4614      	mov	r4, r2
 8009cf2:	4698      	mov	r8, r3
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	b118      	cbz	r0, 8009d00 <_vfiprintf_r+0x18>
 8009cf8:	6983      	ldr	r3, [r0, #24]
 8009cfa:	b90b      	cbnz	r3, 8009d00 <_vfiprintf_r+0x18>
 8009cfc:	f7ff fa84 	bl	8009208 <__sinit>
 8009d00:	4b89      	ldr	r3, [pc, #548]	; (8009f28 <_vfiprintf_r+0x240>)
 8009d02:	429d      	cmp	r5, r3
 8009d04:	d11b      	bne.n	8009d3e <_vfiprintf_r+0x56>
 8009d06:	6875      	ldr	r5, [r6, #4]
 8009d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d0a:	07d9      	lsls	r1, r3, #31
 8009d0c:	d405      	bmi.n	8009d1a <_vfiprintf_r+0x32>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	059a      	lsls	r2, r3, #22
 8009d12:	d402      	bmi.n	8009d1a <_vfiprintf_r+0x32>
 8009d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d16:	f7ff fb3a 	bl	800938e <__retarget_lock_acquire_recursive>
 8009d1a:	89ab      	ldrh	r3, [r5, #12]
 8009d1c:	071b      	lsls	r3, r3, #28
 8009d1e:	d501      	bpl.n	8009d24 <_vfiprintf_r+0x3c>
 8009d20:	692b      	ldr	r3, [r5, #16]
 8009d22:	b9eb      	cbnz	r3, 8009d60 <_vfiprintf_r+0x78>
 8009d24:	4629      	mov	r1, r5
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 fb06 	bl	800a338 <__swsetup_r>
 8009d2c:	b1c0      	cbz	r0, 8009d60 <_vfiprintf_r+0x78>
 8009d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d30:	07dc      	lsls	r4, r3, #31
 8009d32:	d50e      	bpl.n	8009d52 <_vfiprintf_r+0x6a>
 8009d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d38:	b01d      	add	sp, #116	; 0x74
 8009d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3e:	4b7b      	ldr	r3, [pc, #492]	; (8009f2c <_vfiprintf_r+0x244>)
 8009d40:	429d      	cmp	r5, r3
 8009d42:	d101      	bne.n	8009d48 <_vfiprintf_r+0x60>
 8009d44:	68b5      	ldr	r5, [r6, #8]
 8009d46:	e7df      	b.n	8009d08 <_vfiprintf_r+0x20>
 8009d48:	4b79      	ldr	r3, [pc, #484]	; (8009f30 <_vfiprintf_r+0x248>)
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	bf08      	it	eq
 8009d4e:	68f5      	ldreq	r5, [r6, #12]
 8009d50:	e7da      	b.n	8009d08 <_vfiprintf_r+0x20>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	0598      	lsls	r0, r3, #22
 8009d56:	d4ed      	bmi.n	8009d34 <_vfiprintf_r+0x4c>
 8009d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d5a:	f7ff fb19 	bl	8009390 <__retarget_lock_release_recursive>
 8009d5e:	e7e9      	b.n	8009d34 <_vfiprintf_r+0x4c>
 8009d60:	2300      	movs	r3, #0
 8009d62:	9309      	str	r3, [sp, #36]	; 0x24
 8009d64:	2320      	movs	r3, #32
 8009d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d6e:	2330      	movs	r3, #48	; 0x30
 8009d70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f34 <_vfiprintf_r+0x24c>
 8009d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d78:	f04f 0901 	mov.w	r9, #1
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	469a      	mov	sl, r3
 8009d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d84:	b10a      	cbz	r2, 8009d8a <_vfiprintf_r+0xa2>
 8009d86:	2a25      	cmp	r2, #37	; 0x25
 8009d88:	d1f9      	bne.n	8009d7e <_vfiprintf_r+0x96>
 8009d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d8e:	d00b      	beq.n	8009da8 <_vfiprintf_r+0xc0>
 8009d90:	465b      	mov	r3, fp
 8009d92:	4622      	mov	r2, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff93 	bl	8009cc2 <__sfputs_r>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f000 80aa 	beq.w	8009ef6 <_vfiprintf_r+0x20e>
 8009da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da4:	445a      	add	r2, fp
 8009da6:	9209      	str	r2, [sp, #36]	; 0x24
 8009da8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 80a2 	beq.w	8009ef6 <_vfiprintf_r+0x20e>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dbc:	f10a 0a01 	add.w	sl, sl, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	9307      	str	r3, [sp, #28]
 8009dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8009dca:	4654      	mov	r4, sl
 8009dcc:	2205      	movs	r2, #5
 8009dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd2:	4858      	ldr	r0, [pc, #352]	; (8009f34 <_vfiprintf_r+0x24c>)
 8009dd4:	f7f6 fa04 	bl	80001e0 <memchr>
 8009dd8:	9a04      	ldr	r2, [sp, #16]
 8009dda:	b9d8      	cbnz	r0, 8009e14 <_vfiprintf_r+0x12c>
 8009ddc:	06d1      	lsls	r1, r2, #27
 8009dde:	bf44      	itt	mi
 8009de0:	2320      	movmi	r3, #32
 8009de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de6:	0713      	lsls	r3, r2, #28
 8009de8:	bf44      	itt	mi
 8009dea:	232b      	movmi	r3, #43	; 0x2b
 8009dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009df0:	f89a 3000 	ldrb.w	r3, [sl]
 8009df4:	2b2a      	cmp	r3, #42	; 0x2a
 8009df6:	d015      	beq.n	8009e24 <_vfiprintf_r+0x13c>
 8009df8:	9a07      	ldr	r2, [sp, #28]
 8009dfa:	4654      	mov	r4, sl
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	f04f 0c0a 	mov.w	ip, #10
 8009e02:	4621      	mov	r1, r4
 8009e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e08:	3b30      	subs	r3, #48	; 0x30
 8009e0a:	2b09      	cmp	r3, #9
 8009e0c:	d94e      	bls.n	8009eac <_vfiprintf_r+0x1c4>
 8009e0e:	b1b0      	cbz	r0, 8009e3e <_vfiprintf_r+0x156>
 8009e10:	9207      	str	r2, [sp, #28]
 8009e12:	e014      	b.n	8009e3e <_vfiprintf_r+0x156>
 8009e14:	eba0 0308 	sub.w	r3, r0, r8
 8009e18:	fa09 f303 	lsl.w	r3, r9, r3
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	9304      	str	r3, [sp, #16]
 8009e20:	46a2      	mov	sl, r4
 8009e22:	e7d2      	b.n	8009dca <_vfiprintf_r+0xe2>
 8009e24:	9b03      	ldr	r3, [sp, #12]
 8009e26:	1d19      	adds	r1, r3, #4
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	9103      	str	r1, [sp, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bfbb      	ittet	lt
 8009e30:	425b      	neglt	r3, r3
 8009e32:	f042 0202 	orrlt.w	r2, r2, #2
 8009e36:	9307      	strge	r3, [sp, #28]
 8009e38:	9307      	strlt	r3, [sp, #28]
 8009e3a:	bfb8      	it	lt
 8009e3c:	9204      	strlt	r2, [sp, #16]
 8009e3e:	7823      	ldrb	r3, [r4, #0]
 8009e40:	2b2e      	cmp	r3, #46	; 0x2e
 8009e42:	d10c      	bne.n	8009e5e <_vfiprintf_r+0x176>
 8009e44:	7863      	ldrb	r3, [r4, #1]
 8009e46:	2b2a      	cmp	r3, #42	; 0x2a
 8009e48:	d135      	bne.n	8009eb6 <_vfiprintf_r+0x1ce>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	1d1a      	adds	r2, r3, #4
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	9203      	str	r2, [sp, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	bfb8      	it	lt
 8009e56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e5a:	3402      	adds	r4, #2
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f44 <_vfiprintf_r+0x25c>
 8009e62:	7821      	ldrb	r1, [r4, #0]
 8009e64:	2203      	movs	r2, #3
 8009e66:	4650      	mov	r0, sl
 8009e68:	f7f6 f9ba 	bl	80001e0 <memchr>
 8009e6c:	b140      	cbz	r0, 8009e80 <_vfiprintf_r+0x198>
 8009e6e:	2340      	movs	r3, #64	; 0x40
 8009e70:	eba0 000a 	sub.w	r0, r0, sl
 8009e74:	fa03 f000 	lsl.w	r0, r3, r0
 8009e78:	9b04      	ldr	r3, [sp, #16]
 8009e7a:	4303      	orrs	r3, r0
 8009e7c:	3401      	adds	r4, #1
 8009e7e:	9304      	str	r3, [sp, #16]
 8009e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e84:	482c      	ldr	r0, [pc, #176]	; (8009f38 <_vfiprintf_r+0x250>)
 8009e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e8a:	2206      	movs	r2, #6
 8009e8c:	f7f6 f9a8 	bl	80001e0 <memchr>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d03f      	beq.n	8009f14 <_vfiprintf_r+0x22c>
 8009e94:	4b29      	ldr	r3, [pc, #164]	; (8009f3c <_vfiprintf_r+0x254>)
 8009e96:	bb1b      	cbnz	r3, 8009ee0 <_vfiprintf_r+0x1f8>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	3307      	adds	r3, #7
 8009e9c:	f023 0307 	bic.w	r3, r3, #7
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	9303      	str	r3, [sp, #12]
 8009ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea6:	443b      	add	r3, r7
 8009ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eaa:	e767      	b.n	8009d7c <_vfiprintf_r+0x94>
 8009eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	e7a5      	b.n	8009e02 <_vfiprintf_r+0x11a>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	3401      	adds	r4, #1
 8009eba:	9305      	str	r3, [sp, #20]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	f04f 0c0a 	mov.w	ip, #10
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec8:	3a30      	subs	r2, #48	; 0x30
 8009eca:	2a09      	cmp	r2, #9
 8009ecc:	d903      	bls.n	8009ed6 <_vfiprintf_r+0x1ee>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0c5      	beq.n	8009e5e <_vfiprintf_r+0x176>
 8009ed2:	9105      	str	r1, [sp, #20]
 8009ed4:	e7c3      	b.n	8009e5e <_vfiprintf_r+0x176>
 8009ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eda:	4604      	mov	r4, r0
 8009edc:	2301      	movs	r3, #1
 8009ede:	e7f0      	b.n	8009ec2 <_vfiprintf_r+0x1da>
 8009ee0:	ab03      	add	r3, sp, #12
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	462a      	mov	r2, r5
 8009ee6:	4b16      	ldr	r3, [pc, #88]	; (8009f40 <_vfiprintf_r+0x258>)
 8009ee8:	a904      	add	r1, sp, #16
 8009eea:	4630      	mov	r0, r6
 8009eec:	f3af 8000 	nop.w
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	1c78      	adds	r0, r7, #1
 8009ef4:	d1d6      	bne.n	8009ea4 <_vfiprintf_r+0x1bc>
 8009ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ef8:	07d9      	lsls	r1, r3, #31
 8009efa:	d405      	bmi.n	8009f08 <_vfiprintf_r+0x220>
 8009efc:	89ab      	ldrh	r3, [r5, #12]
 8009efe:	059a      	lsls	r2, r3, #22
 8009f00:	d402      	bmi.n	8009f08 <_vfiprintf_r+0x220>
 8009f02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f04:	f7ff fa44 	bl	8009390 <__retarget_lock_release_recursive>
 8009f08:	89ab      	ldrh	r3, [r5, #12]
 8009f0a:	065b      	lsls	r3, r3, #25
 8009f0c:	f53f af12 	bmi.w	8009d34 <_vfiprintf_r+0x4c>
 8009f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f12:	e711      	b.n	8009d38 <_vfiprintf_r+0x50>
 8009f14:	ab03      	add	r3, sp, #12
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <_vfiprintf_r+0x258>)
 8009f1c:	a904      	add	r1, sp, #16
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f000 f880 	bl	800a024 <_printf_i>
 8009f24:	e7e4      	b.n	8009ef0 <_vfiprintf_r+0x208>
 8009f26:	bf00      	nop
 8009f28:	0800a880 	.word	0x0800a880
 8009f2c:	0800a8a0 	.word	0x0800a8a0
 8009f30:	0800a860 	.word	0x0800a860
 8009f34:	0800a8c4 	.word	0x0800a8c4
 8009f38:	0800a8ce 	.word	0x0800a8ce
 8009f3c:	00000000 	.word	0x00000000
 8009f40:	08009cc3 	.word	0x08009cc3
 8009f44:	0800a8ca 	.word	0x0800a8ca

08009f48 <_printf_common>:
 8009f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	4699      	mov	r9, r3
 8009f50:	688a      	ldr	r2, [r1, #8]
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bfb8      	it	lt
 8009f5c:	4613      	movlt	r3, r2
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f64:	4607      	mov	r7, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b10a      	cbz	r2, 8009f6e <_printf_common+0x26>
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	6033      	str	r3, [r6, #0]
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	0699      	lsls	r1, r3, #26
 8009f72:	bf42      	ittt	mi
 8009f74:	6833      	ldrmi	r3, [r6, #0]
 8009f76:	3302      	addmi	r3, #2
 8009f78:	6033      	strmi	r3, [r6, #0]
 8009f7a:	6825      	ldr	r5, [r4, #0]
 8009f7c:	f015 0506 	ands.w	r5, r5, #6
 8009f80:	d106      	bne.n	8009f90 <_printf_common+0x48>
 8009f82:	f104 0a19 	add.w	sl, r4, #25
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	6832      	ldr	r2, [r6, #0]
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	42ab      	cmp	r3, r5
 8009f8e:	dc26      	bgt.n	8009fde <_printf_common+0x96>
 8009f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f94:	1e13      	subs	r3, r2, #0
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	bf18      	it	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	0692      	lsls	r2, r2, #26
 8009f9e:	d42b      	bmi.n	8009ff8 <_printf_common+0xb0>
 8009fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	3001      	adds	r0, #1
 8009fac:	d01e      	beq.n	8009fec <_printf_common+0xa4>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	68e5      	ldr	r5, [r4, #12]
 8009fb2:	6832      	ldr	r2, [r6, #0]
 8009fb4:	f003 0306 	and.w	r3, r3, #6
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	bf08      	it	eq
 8009fbc:	1aad      	subeq	r5, r5, r2
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	bf0c      	ite	eq
 8009fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc8:	2500      	movne	r5, #0
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	bfc4      	itt	gt
 8009fce:	1a9b      	subgt	r3, r3, r2
 8009fd0:	18ed      	addgt	r5, r5, r3
 8009fd2:	2600      	movs	r6, #0
 8009fd4:	341a      	adds	r4, #26
 8009fd6:	42b5      	cmp	r5, r6
 8009fd8:	d11a      	bne.n	800a010 <_printf_common+0xc8>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e008      	b.n	8009ff0 <_printf_common+0xa8>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	47c0      	blx	r8
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d103      	bne.n	8009ff4 <_printf_common+0xac>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	e7c6      	b.n	8009f86 <_printf_common+0x3e>
 8009ff8:	18e1      	adds	r1, r4, r3
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	2030      	movs	r0, #48	; 0x30
 8009ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a002:	4422      	add	r2, r4
 800a004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a00c:	3302      	adds	r3, #2
 800a00e:	e7c7      	b.n	8009fa0 <_printf_common+0x58>
 800a010:	2301      	movs	r3, #1
 800a012:	4622      	mov	r2, r4
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d0e6      	beq.n	8009fec <_printf_common+0xa4>
 800a01e:	3601      	adds	r6, #1
 800a020:	e7d9      	b.n	8009fd6 <_printf_common+0x8e>
	...

0800a024 <_printf_i>:
 800a024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	7e0f      	ldrb	r7, [r1, #24]
 800a02a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a02c:	2f78      	cmp	r7, #120	; 0x78
 800a02e:	4691      	mov	r9, r2
 800a030:	4680      	mov	r8, r0
 800a032:	460c      	mov	r4, r1
 800a034:	469a      	mov	sl, r3
 800a036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a03a:	d807      	bhi.n	800a04c <_printf_i+0x28>
 800a03c:	2f62      	cmp	r7, #98	; 0x62
 800a03e:	d80a      	bhi.n	800a056 <_printf_i+0x32>
 800a040:	2f00      	cmp	r7, #0
 800a042:	f000 80d8 	beq.w	800a1f6 <_printf_i+0x1d2>
 800a046:	2f58      	cmp	r7, #88	; 0x58
 800a048:	f000 80a3 	beq.w	800a192 <_printf_i+0x16e>
 800a04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a054:	e03a      	b.n	800a0cc <_printf_i+0xa8>
 800a056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a05a:	2b15      	cmp	r3, #21
 800a05c:	d8f6      	bhi.n	800a04c <_printf_i+0x28>
 800a05e:	a101      	add	r1, pc, #4	; (adr r1, 800a064 <_printf_i+0x40>)
 800a060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0d1 	.word	0x0800a0d1
 800a06c:	0800a04d 	.word	0x0800a04d
 800a070:	0800a04d 	.word	0x0800a04d
 800a074:	0800a04d 	.word	0x0800a04d
 800a078:	0800a04d 	.word	0x0800a04d
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a04d 	.word	0x0800a04d
 800a084:	0800a04d 	.word	0x0800a04d
 800a088:	0800a04d 	.word	0x0800a04d
 800a08c:	0800a04d 	.word	0x0800a04d
 800a090:	0800a1dd 	.word	0x0800a1dd
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a1bf 	.word	0x0800a1bf
 800a09c:	0800a04d 	.word	0x0800a04d
 800a0a0:	0800a04d 	.word	0x0800a04d
 800a0a4:	0800a1ff 	.word	0x0800a1ff
 800a0a8:	0800a04d 	.word	0x0800a04d
 800a0ac:	0800a101 	.word	0x0800a101
 800a0b0:	0800a04d 	.word	0x0800a04d
 800a0b4:	0800a04d 	.word	0x0800a04d
 800a0b8:	0800a1c7 	.word	0x0800a1c7
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	1d1a      	adds	r2, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	602a      	str	r2, [r5, #0]
 800a0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e0a3      	b.n	800a218 <_printf_i+0x1f4>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	6829      	ldr	r1, [r5, #0]
 800a0d4:	0606      	lsls	r6, r0, #24
 800a0d6:	f101 0304 	add.w	r3, r1, #4
 800a0da:	d50a      	bpl.n	800a0f2 <_printf_i+0xce>
 800a0dc:	680e      	ldr	r6, [r1, #0]
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	2e00      	cmp	r6, #0
 800a0e2:	da03      	bge.n	800a0ec <_printf_i+0xc8>
 800a0e4:	232d      	movs	r3, #45	; 0x2d
 800a0e6:	4276      	negs	r6, r6
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ec:	485e      	ldr	r0, [pc, #376]	; (800a268 <_printf_i+0x244>)
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	e019      	b.n	800a126 <_printf_i+0x102>
 800a0f2:	680e      	ldr	r6, [r1, #0]
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0fa:	bf18      	it	ne
 800a0fc:	b236      	sxthne	r6, r6
 800a0fe:	e7ef      	b.n	800a0e0 <_printf_i+0xbc>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	1d19      	adds	r1, r3, #4
 800a106:	6029      	str	r1, [r5, #0]
 800a108:	0601      	lsls	r1, r0, #24
 800a10a:	d501      	bpl.n	800a110 <_printf_i+0xec>
 800a10c:	681e      	ldr	r6, [r3, #0]
 800a10e:	e002      	b.n	800a116 <_printf_i+0xf2>
 800a110:	0646      	lsls	r6, r0, #25
 800a112:	d5fb      	bpl.n	800a10c <_printf_i+0xe8>
 800a114:	881e      	ldrh	r6, [r3, #0]
 800a116:	4854      	ldr	r0, [pc, #336]	; (800a268 <_printf_i+0x244>)
 800a118:	2f6f      	cmp	r7, #111	; 0x6f
 800a11a:	bf0c      	ite	eq
 800a11c:	2308      	moveq	r3, #8
 800a11e:	230a      	movne	r3, #10
 800a120:	2100      	movs	r1, #0
 800a122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a126:	6865      	ldr	r5, [r4, #4]
 800a128:	60a5      	str	r5, [r4, #8]
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	bfa2      	ittt	ge
 800a12e:	6821      	ldrge	r1, [r4, #0]
 800a130:	f021 0104 	bicge.w	r1, r1, #4
 800a134:	6021      	strge	r1, [r4, #0]
 800a136:	b90e      	cbnz	r6, 800a13c <_printf_i+0x118>
 800a138:	2d00      	cmp	r5, #0
 800a13a:	d04d      	beq.n	800a1d8 <_printf_i+0x1b4>
 800a13c:	4615      	mov	r5, r2
 800a13e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a142:	fb03 6711 	mls	r7, r3, r1, r6
 800a146:	5dc7      	ldrb	r7, [r0, r7]
 800a148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a14c:	4637      	mov	r7, r6
 800a14e:	42bb      	cmp	r3, r7
 800a150:	460e      	mov	r6, r1
 800a152:	d9f4      	bls.n	800a13e <_printf_i+0x11a>
 800a154:	2b08      	cmp	r3, #8
 800a156:	d10b      	bne.n	800a170 <_printf_i+0x14c>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	07de      	lsls	r6, r3, #31
 800a15c:	d508      	bpl.n	800a170 <_printf_i+0x14c>
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	6861      	ldr	r1, [r4, #4]
 800a162:	4299      	cmp	r1, r3
 800a164:	bfde      	ittt	le
 800a166:	2330      	movle	r3, #48	; 0x30
 800a168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a16c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a170:	1b52      	subs	r2, r2, r5
 800a172:	6122      	str	r2, [r4, #16]
 800a174:	f8cd a000 	str.w	sl, [sp]
 800a178:	464b      	mov	r3, r9
 800a17a:	aa03      	add	r2, sp, #12
 800a17c:	4621      	mov	r1, r4
 800a17e:	4640      	mov	r0, r8
 800a180:	f7ff fee2 	bl	8009f48 <_printf_common>
 800a184:	3001      	adds	r0, #1
 800a186:	d14c      	bne.n	800a222 <_printf_i+0x1fe>
 800a188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a18c:	b004      	add	sp, #16
 800a18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a192:	4835      	ldr	r0, [pc, #212]	; (800a268 <_printf_i+0x244>)
 800a194:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a198:	6829      	ldr	r1, [r5, #0]
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1a0:	6029      	str	r1, [r5, #0]
 800a1a2:	061d      	lsls	r5, r3, #24
 800a1a4:	d514      	bpl.n	800a1d0 <_printf_i+0x1ac>
 800a1a6:	07df      	lsls	r7, r3, #31
 800a1a8:	bf44      	itt	mi
 800a1aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ae:	6023      	strmi	r3, [r4, #0]
 800a1b0:	b91e      	cbnz	r6, 800a1ba <_printf_i+0x196>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	f023 0320 	bic.w	r3, r3, #32
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	e7b0      	b.n	800a120 <_printf_i+0xfc>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f043 0320 	orr.w	r3, r3, #32
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	2378      	movs	r3, #120	; 0x78
 800a1c8:	4828      	ldr	r0, [pc, #160]	; (800a26c <_printf_i+0x248>)
 800a1ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ce:	e7e3      	b.n	800a198 <_printf_i+0x174>
 800a1d0:	0659      	lsls	r1, r3, #25
 800a1d2:	bf48      	it	mi
 800a1d4:	b2b6      	uxthmi	r6, r6
 800a1d6:	e7e6      	b.n	800a1a6 <_printf_i+0x182>
 800a1d8:	4615      	mov	r5, r2
 800a1da:	e7bb      	b.n	800a154 <_printf_i+0x130>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	6826      	ldr	r6, [r4, #0]
 800a1e0:	6961      	ldr	r1, [r4, #20]
 800a1e2:	1d18      	adds	r0, r3, #4
 800a1e4:	6028      	str	r0, [r5, #0]
 800a1e6:	0635      	lsls	r5, r6, #24
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	d501      	bpl.n	800a1f0 <_printf_i+0x1cc>
 800a1ec:	6019      	str	r1, [r3, #0]
 800a1ee:	e002      	b.n	800a1f6 <_printf_i+0x1d2>
 800a1f0:	0670      	lsls	r0, r6, #25
 800a1f2:	d5fb      	bpl.n	800a1ec <_printf_i+0x1c8>
 800a1f4:	8019      	strh	r1, [r3, #0]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	4615      	mov	r5, r2
 800a1fc:	e7ba      	b.n	800a174 <_printf_i+0x150>
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	1d1a      	adds	r2, r3, #4
 800a202:	602a      	str	r2, [r5, #0]
 800a204:	681d      	ldr	r5, [r3, #0]
 800a206:	6862      	ldr	r2, [r4, #4]
 800a208:	2100      	movs	r1, #0
 800a20a:	4628      	mov	r0, r5
 800a20c:	f7f5 ffe8 	bl	80001e0 <memchr>
 800a210:	b108      	cbz	r0, 800a216 <_printf_i+0x1f2>
 800a212:	1b40      	subs	r0, r0, r5
 800a214:	6060      	str	r0, [r4, #4]
 800a216:	6863      	ldr	r3, [r4, #4]
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	2300      	movs	r3, #0
 800a21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a220:	e7a8      	b.n	800a174 <_printf_i+0x150>
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	462a      	mov	r2, r5
 800a226:	4649      	mov	r1, r9
 800a228:	4640      	mov	r0, r8
 800a22a:	47d0      	blx	sl
 800a22c:	3001      	adds	r0, #1
 800a22e:	d0ab      	beq.n	800a188 <_printf_i+0x164>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	079b      	lsls	r3, r3, #30
 800a234:	d413      	bmi.n	800a25e <_printf_i+0x23a>
 800a236:	68e0      	ldr	r0, [r4, #12]
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	4298      	cmp	r0, r3
 800a23c:	bfb8      	it	lt
 800a23e:	4618      	movlt	r0, r3
 800a240:	e7a4      	b.n	800a18c <_printf_i+0x168>
 800a242:	2301      	movs	r3, #1
 800a244:	4632      	mov	r2, r6
 800a246:	4649      	mov	r1, r9
 800a248:	4640      	mov	r0, r8
 800a24a:	47d0      	blx	sl
 800a24c:	3001      	adds	r0, #1
 800a24e:	d09b      	beq.n	800a188 <_printf_i+0x164>
 800a250:	3501      	adds	r5, #1
 800a252:	68e3      	ldr	r3, [r4, #12]
 800a254:	9903      	ldr	r1, [sp, #12]
 800a256:	1a5b      	subs	r3, r3, r1
 800a258:	42ab      	cmp	r3, r5
 800a25a:	dcf2      	bgt.n	800a242 <_printf_i+0x21e>
 800a25c:	e7eb      	b.n	800a236 <_printf_i+0x212>
 800a25e:	2500      	movs	r5, #0
 800a260:	f104 0619 	add.w	r6, r4, #25
 800a264:	e7f5      	b.n	800a252 <_printf_i+0x22e>
 800a266:	bf00      	nop
 800a268:	0800a8d5 	.word	0x0800a8d5
 800a26c:	0800a8e6 	.word	0x0800a8e6

0800a270 <_read_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	; (800a290 <_read_r+0x20>)
 800a274:	4604      	mov	r4, r0
 800a276:	4608      	mov	r0, r1
 800a278:	4611      	mov	r1, r2
 800a27a:	2200      	movs	r2, #0
 800a27c:	602a      	str	r2, [r5, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	f7f7 f8e8 	bl	8001454 <_read>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_read_r+0x1e>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_read_r+0x1e>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	200042c8 	.word	0x200042c8

0800a294 <__swbuf_r>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	460e      	mov	r6, r1
 800a298:	4614      	mov	r4, r2
 800a29a:	4605      	mov	r5, r0
 800a29c:	b118      	cbz	r0, 800a2a6 <__swbuf_r+0x12>
 800a29e:	6983      	ldr	r3, [r0, #24]
 800a2a0:	b90b      	cbnz	r3, 800a2a6 <__swbuf_r+0x12>
 800a2a2:	f7fe ffb1 	bl	8009208 <__sinit>
 800a2a6:	4b21      	ldr	r3, [pc, #132]	; (800a32c <__swbuf_r+0x98>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	d12b      	bne.n	800a304 <__swbuf_r+0x70>
 800a2ac:	686c      	ldr	r4, [r5, #4]
 800a2ae:	69a3      	ldr	r3, [r4, #24]
 800a2b0:	60a3      	str	r3, [r4, #8]
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	071a      	lsls	r2, r3, #28
 800a2b6:	d52f      	bpl.n	800a318 <__swbuf_r+0x84>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	b36b      	cbz	r3, 800a318 <__swbuf_r+0x84>
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	1ac0      	subs	r0, r0, r3
 800a2c2:	6963      	ldr	r3, [r4, #20]
 800a2c4:	b2f6      	uxtb	r6, r6
 800a2c6:	4283      	cmp	r3, r0
 800a2c8:	4637      	mov	r7, r6
 800a2ca:	dc04      	bgt.n	800a2d6 <__swbuf_r+0x42>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7ff fade 	bl	8009890 <_fflush_r>
 800a2d4:	bb30      	cbnz	r0, 800a324 <__swbuf_r+0x90>
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	60a3      	str	r3, [r4, #8]
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	6022      	str	r2, [r4, #0]
 800a2e2:	701e      	strb	r6, [r3, #0]
 800a2e4:	6963      	ldr	r3, [r4, #20]
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	4283      	cmp	r3, r0
 800a2ea:	d004      	beq.n	800a2f6 <__swbuf_r+0x62>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	07db      	lsls	r3, r3, #31
 800a2f0:	d506      	bpl.n	800a300 <__swbuf_r+0x6c>
 800a2f2:	2e0a      	cmp	r6, #10
 800a2f4:	d104      	bne.n	800a300 <__swbuf_r+0x6c>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7ff fac9 	bl	8009890 <_fflush_r>
 800a2fe:	b988      	cbnz	r0, 800a324 <__swbuf_r+0x90>
 800a300:	4638      	mov	r0, r7
 800a302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <__swbuf_r+0x9c>)
 800a306:	429c      	cmp	r4, r3
 800a308:	d101      	bne.n	800a30e <__swbuf_r+0x7a>
 800a30a:	68ac      	ldr	r4, [r5, #8]
 800a30c:	e7cf      	b.n	800a2ae <__swbuf_r+0x1a>
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <__swbuf_r+0xa0>)
 800a310:	429c      	cmp	r4, r3
 800a312:	bf08      	it	eq
 800a314:	68ec      	ldreq	r4, [r5, #12]
 800a316:	e7ca      	b.n	800a2ae <__swbuf_r+0x1a>
 800a318:	4621      	mov	r1, r4
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 f80c 	bl	800a338 <__swsetup_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	d0cb      	beq.n	800a2bc <__swbuf_r+0x28>
 800a324:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a328:	e7ea      	b.n	800a300 <__swbuf_r+0x6c>
 800a32a:	bf00      	nop
 800a32c:	0800a880 	.word	0x0800a880
 800a330:	0800a8a0 	.word	0x0800a8a0
 800a334:	0800a860 	.word	0x0800a860

0800a338 <__swsetup_r>:
 800a338:	4b32      	ldr	r3, [pc, #200]	; (800a404 <__swsetup_r+0xcc>)
 800a33a:	b570      	push	{r4, r5, r6, lr}
 800a33c:	681d      	ldr	r5, [r3, #0]
 800a33e:	4606      	mov	r6, r0
 800a340:	460c      	mov	r4, r1
 800a342:	b125      	cbz	r5, 800a34e <__swsetup_r+0x16>
 800a344:	69ab      	ldr	r3, [r5, #24]
 800a346:	b913      	cbnz	r3, 800a34e <__swsetup_r+0x16>
 800a348:	4628      	mov	r0, r5
 800a34a:	f7fe ff5d 	bl	8009208 <__sinit>
 800a34e:	4b2e      	ldr	r3, [pc, #184]	; (800a408 <__swsetup_r+0xd0>)
 800a350:	429c      	cmp	r4, r3
 800a352:	d10f      	bne.n	800a374 <__swsetup_r+0x3c>
 800a354:	686c      	ldr	r4, [r5, #4]
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a35c:	0719      	lsls	r1, r3, #28
 800a35e:	d42c      	bmi.n	800a3ba <__swsetup_r+0x82>
 800a360:	06dd      	lsls	r5, r3, #27
 800a362:	d411      	bmi.n	800a388 <__swsetup_r+0x50>
 800a364:	2309      	movs	r3, #9
 800a366:	6033      	str	r3, [r6, #0]
 800a368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a36c:	81a3      	strh	r3, [r4, #12]
 800a36e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a372:	e03e      	b.n	800a3f2 <__swsetup_r+0xba>
 800a374:	4b25      	ldr	r3, [pc, #148]	; (800a40c <__swsetup_r+0xd4>)
 800a376:	429c      	cmp	r4, r3
 800a378:	d101      	bne.n	800a37e <__swsetup_r+0x46>
 800a37a:	68ac      	ldr	r4, [r5, #8]
 800a37c:	e7eb      	b.n	800a356 <__swsetup_r+0x1e>
 800a37e:	4b24      	ldr	r3, [pc, #144]	; (800a410 <__swsetup_r+0xd8>)
 800a380:	429c      	cmp	r4, r3
 800a382:	bf08      	it	eq
 800a384:	68ec      	ldreq	r4, [r5, #12]
 800a386:	e7e6      	b.n	800a356 <__swsetup_r+0x1e>
 800a388:	0758      	lsls	r0, r3, #29
 800a38a:	d512      	bpl.n	800a3b2 <__swsetup_r+0x7a>
 800a38c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a38e:	b141      	cbz	r1, 800a3a2 <__swsetup_r+0x6a>
 800a390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a394:	4299      	cmp	r1, r3
 800a396:	d002      	beq.n	800a39e <__swsetup_r+0x66>
 800a398:	4630      	mov	r0, r6
 800a39a:	f7ff fad3 	bl	8009944 <_free_r>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3a8:	81a3      	strh	r3, [r4, #12]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	6923      	ldr	r3, [r4, #16]
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f043 0308 	orr.w	r3, r3, #8
 800a3b8:	81a3      	strh	r3, [r4, #12]
 800a3ba:	6923      	ldr	r3, [r4, #16]
 800a3bc:	b94b      	cbnz	r3, 800a3d2 <__swsetup_r+0x9a>
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c8:	d003      	beq.n	800a3d2 <__swsetup_r+0x9a>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f000 f847 	bl	800a460 <__smakebuf_r>
 800a3d2:	89a0      	ldrh	r0, [r4, #12]
 800a3d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d8:	f010 0301 	ands.w	r3, r0, #1
 800a3dc:	d00a      	beq.n	800a3f4 <__swsetup_r+0xbc>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60a3      	str	r3, [r4, #8]
 800a3e2:	6963      	ldr	r3, [r4, #20]
 800a3e4:	425b      	negs	r3, r3
 800a3e6:	61a3      	str	r3, [r4, #24]
 800a3e8:	6923      	ldr	r3, [r4, #16]
 800a3ea:	b943      	cbnz	r3, 800a3fe <__swsetup_r+0xc6>
 800a3ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3f0:	d1ba      	bne.n	800a368 <__swsetup_r+0x30>
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	0781      	lsls	r1, r0, #30
 800a3f6:	bf58      	it	pl
 800a3f8:	6963      	ldrpl	r3, [r4, #20]
 800a3fa:	60a3      	str	r3, [r4, #8]
 800a3fc:	e7f4      	b.n	800a3e8 <__swsetup_r+0xb0>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e7f7      	b.n	800a3f2 <__swsetup_r+0xba>
 800a402:	bf00      	nop
 800a404:	20000018 	.word	0x20000018
 800a408:	0800a880 	.word	0x0800a880
 800a40c:	0800a8a0 	.word	0x0800a8a0
 800a410:	0800a860 	.word	0x0800a860

0800a414 <__swhatbuf_r>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	460e      	mov	r6, r1
 800a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41c:	2900      	cmp	r1, #0
 800a41e:	b096      	sub	sp, #88	; 0x58
 800a420:	4614      	mov	r4, r2
 800a422:	461d      	mov	r5, r3
 800a424:	da08      	bge.n	800a438 <__swhatbuf_r+0x24>
 800a426:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	061a      	lsls	r2, r3, #24
 800a430:	d410      	bmi.n	800a454 <__swhatbuf_r+0x40>
 800a432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a436:	e00e      	b.n	800a456 <__swhatbuf_r+0x42>
 800a438:	466a      	mov	r2, sp
 800a43a:	f000 f89b 	bl	800a574 <_fstat_r>
 800a43e:	2800      	cmp	r0, #0
 800a440:	dbf1      	blt.n	800a426 <__swhatbuf_r+0x12>
 800a442:	9a01      	ldr	r2, [sp, #4]
 800a444:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a448:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a44c:	425a      	negs	r2, r3
 800a44e:	415a      	adcs	r2, r3
 800a450:	602a      	str	r2, [r5, #0]
 800a452:	e7ee      	b.n	800a432 <__swhatbuf_r+0x1e>
 800a454:	2340      	movs	r3, #64	; 0x40
 800a456:	2000      	movs	r0, #0
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	b016      	add	sp, #88	; 0x58
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a460 <__smakebuf_r>:
 800a460:	898b      	ldrh	r3, [r1, #12]
 800a462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a464:	079d      	lsls	r5, r3, #30
 800a466:	4606      	mov	r6, r0
 800a468:	460c      	mov	r4, r1
 800a46a:	d507      	bpl.n	800a47c <__smakebuf_r+0x1c>
 800a46c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	2301      	movs	r3, #1
 800a476:	6163      	str	r3, [r4, #20]
 800a478:	b002      	add	sp, #8
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	ab01      	add	r3, sp, #4
 800a47e:	466a      	mov	r2, sp
 800a480:	f7ff ffc8 	bl	800a414 <__swhatbuf_r>
 800a484:	9900      	ldr	r1, [sp, #0]
 800a486:	4605      	mov	r5, r0
 800a488:	4630      	mov	r0, r6
 800a48a:	f7fe ffc9 	bl	8009420 <_malloc_r>
 800a48e:	b948      	cbnz	r0, 800a4a4 <__smakebuf_r+0x44>
 800a490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a494:	059a      	lsls	r2, r3, #22
 800a496:	d4ef      	bmi.n	800a478 <__smakebuf_r+0x18>
 800a498:	f023 0303 	bic.w	r3, r3, #3
 800a49c:	f043 0302 	orr.w	r3, r3, #2
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	e7e3      	b.n	800a46c <__smakebuf_r+0xc>
 800a4a4:	4b0d      	ldr	r3, [pc, #52]	; (800a4dc <__smakebuf_r+0x7c>)
 800a4a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	6020      	str	r0, [r4, #0]
 800a4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	9b00      	ldr	r3, [sp, #0]
 800a4b4:	6163      	str	r3, [r4, #20]
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	6120      	str	r0, [r4, #16]
 800a4ba:	b15b      	cbz	r3, 800a4d4 <__smakebuf_r+0x74>
 800a4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f000 f869 	bl	800a598 <_isatty_r>
 800a4c6:	b128      	cbz	r0, 800a4d4 <__smakebuf_r+0x74>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	f043 0301 	orr.w	r3, r3, #1
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	89a0      	ldrh	r0, [r4, #12]
 800a4d6:	4305      	orrs	r5, r0
 800a4d8:	81a5      	strh	r5, [r4, #12]
 800a4da:	e7cd      	b.n	800a478 <__smakebuf_r+0x18>
 800a4dc:	080091a1 	.word	0x080091a1

0800a4e0 <memmove>:
 800a4e0:	4288      	cmp	r0, r1
 800a4e2:	b510      	push	{r4, lr}
 800a4e4:	eb01 0402 	add.w	r4, r1, r2
 800a4e8:	d902      	bls.n	800a4f0 <memmove+0x10>
 800a4ea:	4284      	cmp	r4, r0
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	d807      	bhi.n	800a500 <memmove+0x20>
 800a4f0:	1e43      	subs	r3, r0, #1
 800a4f2:	42a1      	cmp	r1, r4
 800a4f4:	d008      	beq.n	800a508 <memmove+0x28>
 800a4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4fe:	e7f8      	b.n	800a4f2 <memmove+0x12>
 800a500:	4402      	add	r2, r0
 800a502:	4601      	mov	r1, r0
 800a504:	428a      	cmp	r2, r1
 800a506:	d100      	bne.n	800a50a <memmove+0x2a>
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a50e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a512:	e7f7      	b.n	800a504 <memmove+0x24>

0800a514 <_realloc_r>:
 800a514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a518:	4680      	mov	r8, r0
 800a51a:	4614      	mov	r4, r2
 800a51c:	460e      	mov	r6, r1
 800a51e:	b921      	cbnz	r1, 800a52a <_realloc_r+0x16>
 800a520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a524:	4611      	mov	r1, r2
 800a526:	f7fe bf7b 	b.w	8009420 <_malloc_r>
 800a52a:	b92a      	cbnz	r2, 800a538 <_realloc_r+0x24>
 800a52c:	f7ff fa0a 	bl	8009944 <_free_r>
 800a530:	4625      	mov	r5, r4
 800a532:	4628      	mov	r0, r5
 800a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a538:	f000 f83e 	bl	800a5b8 <_malloc_usable_size_r>
 800a53c:	4284      	cmp	r4, r0
 800a53e:	4607      	mov	r7, r0
 800a540:	d802      	bhi.n	800a548 <_realloc_r+0x34>
 800a542:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a546:	d812      	bhi.n	800a56e <_realloc_r+0x5a>
 800a548:	4621      	mov	r1, r4
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7fe ff68 	bl	8009420 <_malloc_r>
 800a550:	4605      	mov	r5, r0
 800a552:	2800      	cmp	r0, #0
 800a554:	d0ed      	beq.n	800a532 <_realloc_r+0x1e>
 800a556:	42bc      	cmp	r4, r7
 800a558:	4622      	mov	r2, r4
 800a55a:	4631      	mov	r1, r6
 800a55c:	bf28      	it	cs
 800a55e:	463a      	movcs	r2, r7
 800a560:	f7fe ff27 	bl	80093b2 <memcpy>
 800a564:	4631      	mov	r1, r6
 800a566:	4640      	mov	r0, r8
 800a568:	f7ff f9ec 	bl	8009944 <_free_r>
 800a56c:	e7e1      	b.n	800a532 <_realloc_r+0x1e>
 800a56e:	4635      	mov	r5, r6
 800a570:	e7df      	b.n	800a532 <_realloc_r+0x1e>
	...

0800a574 <_fstat_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	; (800a594 <_fstat_r+0x20>)
 800a578:	2300      	movs	r3, #0
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	f7f6 ffac 	bl	80014de <_fstat>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d102      	bne.n	800a590 <_fstat_r+0x1c>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b103      	cbz	r3, 800a590 <_fstat_r+0x1c>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	bf00      	nop
 800a594:	200042c8 	.word	0x200042c8

0800a598 <_isatty_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4d06      	ldr	r5, [pc, #24]	; (800a5b4 <_isatty_r+0x1c>)
 800a59c:	2300      	movs	r3, #0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f6 ffab 	bl	80014fe <_isatty>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_isatty_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_isatty_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	200042c8 	.word	0x200042c8

0800a5b8 <_malloc_usable_size_r>:
 800a5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5bc:	1f18      	subs	r0, r3, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bfbc      	itt	lt
 800a5c2:	580b      	ldrlt	r3, [r1, r0]
 800a5c4:	18c0      	addlt	r0, r0, r3
 800a5c6:	4770      	bx	lr

0800a5c8 <_init>:
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	bf00      	nop
 800a5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ce:	bc08      	pop	{r3}
 800a5d0:	469e      	mov	lr, r3
 800a5d2:	4770      	bx	lr

0800a5d4 <_fini>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	bf00      	nop
 800a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5da:	bc08      	pop	{r3}
 800a5dc:	469e      	mov	lr, r3
 800a5de:	4770      	bx	lr
