
Rtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007468  08007468  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007470  08007470  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  20000074  080074ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc8  080074ec  00021fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eed  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003094  00000000  00000000  00035f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00039028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004721  00000000  00000000  0003b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138c6  00000000  00000000  0003f9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf30  00000000  00000000  000532a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e1d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b4  00000000  00000000  0011e228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800726c 	.word	0x0800726c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800726c 	.word	0x0800726c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setleds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setleds(uint16_t ledring) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]

	//uint16_t ledring = 0b1010101010101010;

	for (int i = 0; i < 16; i++) {
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e01f      	b.n	80005d4 <setleds+0x50>

		if (ledring & (1 << i)) {
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	fa42 f303 	asr.w	r3, r2, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <setleds+0x2c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4815      	ldr	r0, [pc, #84]	; (8000600 <setleds+0x7c>)
 80005aa:	f000 feb7 	bl	800131c <HAL_GPIO_WritePin>
 80005ae:	e004      	b.n	80005ba <setleds+0x36>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <setleds+0x7c>)
 80005b6:	f000 feb1 	bl	800131c <HAL_GPIO_WritePin>
		}

		//SCK
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <setleds+0x7c>)
 80005c0:	f000 feac 	bl	800131c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <setleds+0x7c>)
 80005ca:	f000 fea7 	bl	800131c <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	dddc      	ble.n	8000594 <setleds+0x10>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	}

	//Latch
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2101      	movs	r1, #1
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <setleds+0x7c>)
 80005e0:	f000 fe9c 	bl	800131c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <setleds+0x7c>)
 80005ea:	f000 fe97 	bl	800131c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <setleds+0x7c>)
 80005f4:	f000 fe92 	bl	800131c <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000400 	.word	0x48000400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fbab 	bl	8000d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f832 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f8c2 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000614:	f000 f890 	bl	8000738 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f002 fd2e 	bl	8003078 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RotaryEncoderQueue */
  RotaryEncoderQueueHandle = osMessageQueueNew (16, sizeof(InputEvent), &RotaryEncoderQueue_attributes);
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <main+0x50>)
 800061e:	2108      	movs	r1, #8
 8000620:	2010      	movs	r0, #16
 8000622:	f002 fe20 	bl	8003266 <osMessageQueueNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <main+0x54>)
 800062a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <main+0x58>)
 800062e:	2100      	movs	r1, #0
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <main+0x5c>)
 8000632:	f002 fd6b 	bl	800310c <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <main+0x60>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <main+0x64>)
 800063e:	2100      	movs	r1, #0
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <main+0x68>)
 8000642:	f002 fd63 	bl	800310c <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <main+0x6c>)
 800064a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800064c:	f002 fd38 	bl	80030c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000650:	e7fe      	b.n	8000650 <main+0x4c>
 8000652:	bf00      	nop
 8000654:	08007370 	.word	0x08007370
 8000658:	200005d4 	.word	0x200005d4
 800065c:	08007328 	.word	0x08007328
 8000660:	08000861 	.word	0x08000861
 8000664:	20000114 	.word	0x20000114
 8000668:	0800734c 	.word	0x0800734c
 800066c:	080008c5 	.word	0x080008c5
 8000670:	20000374 	.word	0x20000374

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	; 0x58
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2244      	movs	r2, #68	; 0x44
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fc7a 	bl	8005f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000696:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069a:	f000 fe75 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a4:	f000 f9c4 	bl	8000a30 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a8:	f000 fe50 	bl	800134c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <SystemClock_Config+0xc0>)
 80006ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006b2:	4a20      	ldr	r2, [pc, #128]	; (8000734 <SystemClock_Config+0xc0>)
 80006b4:	f023 0318 	bic.w	r3, r3, #24
 80006b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006bc:	2314      	movs	r3, #20
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006cc:	2360      	movs	r3, #96	; 0x60
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d4:	2301      	movs	r3, #1
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006dc:	2310      	movs	r3, #16
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fe9f 	bl	8001434 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f998 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2303      	movs	r3, #3
 8000706:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fa9f 	bl	8001c5c <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000724:	f000 f984 	bl	8000a30 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000728:	f001 feb2 	bl	8002490 <HAL_RCCEx_EnableMSIPLLMode>
}
 800072c:	bf00      	nop
 800072e:	3758      	adds	r7, #88	; 0x58
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART2_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800077c:	f001 ff8a 	bl	8002694 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 f953 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000090 	.word	0x20000090
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a29      	ldr	r2, [pc, #164]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b27      	ldr	r3, [pc, #156]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_GPIO_Init+0xc0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2129      	movs	r1, #41	; 0x29
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_GPIO_Init+0xc4>)
 80007fc:	f000 fd8e 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000800:	2309      	movs	r3, #9
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 fbff 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_5;
 800081a:	2329      	movs	r3, #41	; 0x29
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	480a      	ldr	r0, [pc, #40]	; (800085c <MX_GPIO_Init+0xc4>)
 8000832:	f000 fbf1 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0xc4>)
 800084a:	f000 fbe5 	bl	8001018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400

08000860 <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
		/*setleds(0b1010101010101010);
		 osDelay(1000);
		 setleds(0b0101010101010101);
		 osDelay(1000);*/

		osStatus_t ret = osMessageQueueGet(RotaryEncoderQueueHandle, &event, 0,
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <StartLedTask+0x58>)
 800086a:	6818      	ldr	r0, [r3, #0]
 800086c:	f107 0108 	add.w	r1, r7, #8
 8000870:	230a      	movs	r3, #10
 8000872:	2200      	movs	r2, #0
 8000874:	f002 fdca 	bl	800340c <osMessageQueueGet>
 8000878:	6138      	str	r0, [r7, #16]
				10);
		if (ret != osOK) {
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d003      	beq.n	8000888 <StartLedTask+0x28>
			//something went wrong
			printf("\r\ncannot read item from queue");
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <StartLedTask+0x5c>)
 8000882:	f005 fb83 	bl	8005f8c <iprintf>
 8000886:	e013      	b.n	80008b0 <StartLedTask+0x50>
		} else {
			printf("\r\nread item");
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <StartLedTask+0x60>)
 800088a:	f005 fb7f 	bl	8005f8c <iprintf>

			uint32_t value;

			if (event.button_pressed) { //If 6th bit set, button was pressed -> pause game -> display on leds
 800088e:	7a3b      	ldrb	r3, [r7, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <StartLedTask+0x3c>
				value = 0b1010101010101010;
 8000894:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e004      	b.n	80008a6 <StartLedTask+0x46>
			} else {
				value = 1 << event.counter;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2201      	movs	r2, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	617b      	str	r3, [r7, #20]
			}
			setleds(value);
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe6a 	bl	8000584 <setleds>
		}

		osDelay(2);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f002 fcbd 	bl	8003230 <osDelay>
	for (;;) {
 80008b6:	e7d7      	b.n	8000868 <StartLedTask+0x8>
 80008b8:	200005d4 	.word	0x200005d4
 80008bc:	080072ac 	.word	0x080072ac
 80008c0:	080072cc 	.word	0x080072cc

080008c4 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	uint16_t counter = 8;
 80008cc:	2308      	movs	r3, #8
 80008ce:	86bb      	strh	r3, [r7, #52]	; 0x34
	//uint16_t old_counter = 0;
	uint8_t old_state_a = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state_button = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	InputEvent event;
	event.button_pressed = true;
 80008dc:	2301      	movs	r3, #1
 80008de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	event.counter = LEDSTART;
 80008e2:	2307      	movs	r3, #7
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
	InputEvent oldevent;
	/* Infinite loop */
	for (;;) {

		uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80008e6:	2101      	movs	r1, #1
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fcfe 	bl	80012ec <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80008f6:	2102      	movs	r1, #2
 80008f8:	4847      	ldr	r0, [pc, #284]	; (8000a18 <StartEncoderTask+0x154>)
 80008fa:	f000 fcf7 	bl	80012ec <HAL_GPIO_ReadPin>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint8_t button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000904:	2108      	movs	r1, #8
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f000 fcef 	bl	80012ec <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if (a != old_state_a && event.counter <= 16) {
 8000914:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800091c:	429a      	cmp	r2, r3
 800091e:	d015      	beq.n	800094c <StartEncoderTask+0x88>
 8000920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000922:	2b10      	cmp	r3, #16
 8000924:	dc12      	bgt.n	800094c <StartEncoderTask+0x88>

			if (a != b) {
 8000926:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800092a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800092e:	429a      	cmp	r2, r3
 8000930:	d006      	beq.n	8000940 <StartEncoderTask+0x7c>
				if (LEDMAX > event.counter)
 8000932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000934:	2b0a      	cmp	r3, #10
 8000936:	dc09      	bgt.n	800094c <StartEncoderTask+0x88>
					event.counter++;
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	3301      	adds	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
 800093e:	e005      	b.n	800094c <StartEncoderTask+0x88>

			} else if (LEDMIN != event.counter) {
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	2b03      	cmp	r3, #3
 8000944:	d002      	beq.n	800094c <StartEncoderTask+0x88>
				//if(counter != 3)
				event.counter--;
 8000946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000948:	3b01      	subs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28

			}
		}

		if (old_state_button != button && button) {
 800094c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000950:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000954:	429a      	cmp	r2, r3
 8000956:	d014      	beq.n	8000982 <StartEncoderTask+0xbe>
 8000958:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800095c:	2b00      	cmp	r3, #0
 800095e:	d010      	beq.n	8000982 <StartEncoderTask+0xbe>
			event.button_pressed = !event.button_pressed; //Bit toggle -> XOR -> toggle 6th bit
 8000960:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf14      	ite	ne
 8000968:	2301      	movne	r3, #1
 800096a:	2300      	moveq	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			event.counter = LEDSTART;
 800097e:	2307      	movs	r3, #7
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
			//setleds(0b1010101010101010);
		}

		if (memcmp(&oldevent, &event, sizeof(event))) {
 8000982:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2208      	movs	r2, #8
 800098c:	4618      	mov	r0, r3
 800098e:	f005 fad7 	bl	8005f40 <memcmp>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d02b      	beq.n	80009f0 <StartEncoderTask+0x12c>

			char msg1[16];
			snprintf(msg1, sizeof(msg1), "%d\r\n", event.counter);
 8000998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099a:	f107 000c 	add.w	r0, r7, #12
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <StartEncoderTask+0x158>)
 80009a0:	2110      	movs	r1, #16
 80009a2:	f005 fb0b 	bl	8005fbc <sniprintf>

			HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), 1000);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fc10 	bl	80001d0 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	f107 010c 	add.w	r1, r7, #12
 80009b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009bc:	4818      	ldr	r0, [pc, #96]	; (8000a20 <StartEncoderTask+0x15c>)
 80009be:	f001 feb7 	bl	8002730 <HAL_UART_Transmit>

			//uint32_t leds = 0xFFFF0000;

			//leds = leds >> counter;
			//event.counter = counter;
			osStatus_t ret = osMessageQueuePut(RotaryEncoderQueueHandle,
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <StartEncoderTask+0x160>)
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009ca:	230a      	movs	r3, #10
 80009cc:	2200      	movs	r2, #0
 80009ce:	f002 fcbd 	bl	800334c <osMessageQueuePut>
 80009d2:	62f8      	str	r0, [r7, #44]	; 0x2c
					&event, 0, 10);

			if (ret != osOK) {
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <StartEncoderTask+0x122>
				//something went wrong
				printf("\r\ncannot enqueue item %u", counter);
 80009da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009dc:	4619      	mov	r1, r3
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <StartEncoderTask+0x164>)
 80009e0:	f005 fad4 	bl	8005f8c <iprintf>
 80009e4:	e004      	b.n	80009f0 <StartEncoderTask+0x12c>
			} else {
				printf("\r\nenqueued item %u", counter);
 80009e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009e8:	4619      	mov	r1, r3
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <StartEncoderTask+0x168>)
 80009ec:	f005 face 	bl	8005f8c <iprintf>
			}
		}
		old_state_a = a;
 80009f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		old_state_button = button;
 80009f8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80009fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//old_counter = counter;
		memcpy(&oldevent, &event, sizeof(event));
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a0c:	e883 0003 	stmia.w	r3, {r0, r1}
		osDelay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f002 fc0d 	bl	8003230 <osDelay>
	for (;;) {
 8000a16:	e766      	b.n	80008e6 <StartEncoderTask+0x22>
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	080072d8 	.word	0x080072d8
 8000a20:	20000090 	.word	0x20000090
 8000a24:	200005d4 	.word	0x200005d4
 8000a28:	080072e0 	.word	0x080072e0
 8000a2c:	080072fc 	.word	0x080072fc

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6593      	str	r3, [r2, #88]	; 0x58
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210f      	movs	r1, #15
 8000a76:	f06f 0001 	mvn.w	r0, #1
 8000a7a:	f000 faa4 	bl	8000fc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09e      	sub	sp, #120	; 0x78
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2254      	movs	r2, #84	; 0x54
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 fa65 	bl	8005f7c <memset>
  if(huart->Instance==USART2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <HAL_UART_MspInit+0xcc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d148      	bne.n	8000b4e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 faeb 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff ffac 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fa77 	bl	8001018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fa65 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3778      	adds	r7, #120	; 0x78
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f93c 	bl	8000e0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b94:	f004 f944 	bl	8004e20 <xTaskGetSchedulerState>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d001      	beq.n	8000ba2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b9e:	f004 ff2b 	bl	80059f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e00a      	b.n	8000bce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb8:	f3af 8000 	nop.w
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	60ba      	str	r2, [r7, #8]
 8000bc4:	b2ca      	uxtb	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dbf0      	blt.n	8000bb8 <_read+0x12>
  }

  return len;
 8000bd6:	687b      	ldr	r3, [r7, #4]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e009      	b.n	8000c06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	60ba      	str	r2, [r7, #8]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3301      	adds	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dbf1      	blt.n	8000bf2 <_write+0x12>
  }
  return len;
 8000c0e:	687b      	ldr	r3, [r7, #4]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_close>:

int _close(int file)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c40:	605a      	str	r2, [r3, #4]
  return 0;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_isatty>:

int _isatty(int file)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f005 f91c 	bl	8005eec <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20010000 	.word	0x20010000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	200006a8 	.word	0x200006a8
 8000ce8:	20001fc8 	.word	0x20001fc8

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f005 f8db 	bl	8005ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fc5f 	bl	8000604 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d54:	08007478 	.word	0x08007478
  ldr r2, =_sbss
 8000d58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d5c:	20001fc8 	.word	0x20001fc8

08000d60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_IRQHandler>

08000d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f91f 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d72:	200f      	movs	r0, #15
 8000d74:	f000 f80e 	bl	8000d94 <HAL_InitTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e001      	b.n	8000d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d84:	f7ff fe5a 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_InitTick+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d023      	beq.n	8000df0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_InitTick+0x70>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f91d 	bl	8000ffe <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10f      	bne.n	8000dea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d809      	bhi.n	8000de4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd8:	f000 f8f5 	bl	8000fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0x74>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200006ac 	.word	0x200006ac

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200006ac 	.word	0x200006ac

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff5c 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffb0 	bl	8000f6c <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e148      	b.n	80012ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 813a 	beq.w	80012b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8094 	beq.w	80012b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	; 0x60
 8001198:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x2c4>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1d4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <HAL_GPIO_Init+0x2c8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1d0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1cc>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e4:	2307      	movs	r3, #7
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fe:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x2c4>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120c:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f aeaf 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e001      	b.n	800130e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40007000 	.word	0x40007000

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001396:	d130      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a4:	d038      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	; 0x32
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	e002      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f2      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d110      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e00f      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d007      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	f000 bc02 	b.w	8001c4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001448:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001452:	4b94      	ldr	r3, [pc, #592]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80e4 	beq.w	8001632 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_RCC_OscConfig+0x4c>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	f040 808b 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 8087 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x64>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e3d9      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_RCC_OscConfig+0x7e>
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	e005      	b.n	80014be <HAL_RCC_OscConfig+0x8a>
 80014b2:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014be:	4293      	cmp	r3, r2
 80014c0:	d223      	bcs.n	800150a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd8c 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3ba      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	496d      	ldr	r1, [pc, #436]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4968      	ldr	r1, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e025      	b.n	8001556 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150a:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a65      	ldr	r2, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4960      	ldr	r1, [pc, #384]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	495b      	ldr	r1, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fd4c 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e37a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001556:	f000 fc81 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4950      	ldr	r1, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_RCC_OscConfig+0x278>)
 8001574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001576:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fc0a 	bl	8000d94 <HAL_InitTick>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d052      	beq.n	8001630 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	e35e      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d032      	beq.n	80015fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc47 	bl	8000e34 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015aa:	f7ff fc43 	bl	8000e34 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e347      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a35      	ldr	r2, [pc, #212]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4930      	ldr	r1, [pc, #192]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	492b      	ldr	r1, [pc, #172]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e01a      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc14 	bl	8000e34 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001610:	f7ff fc10 	bl	8000e34 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e314      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1dc>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d073      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x21c>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d10e      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d063      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d15f      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2f1      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x24c>
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e025      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d114      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08007388 	.word	0x08007388
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	4ba0      	ldr	r3, [pc, #640]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fbae 	bl	8000e34 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fbaa 	bl	8000e34 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e2ae      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb9a 	bl	8000e34 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fb96 	bl	8000e34 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e29a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e277      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fb55 	bl	8000e34 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fb51 	bl	8000e34 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e255      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb31 	bl	8000e34 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fb2d 	bl	8000e34 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e231      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fb0c 	bl	8000e34 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fb08 	bl	8000e34 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff faef 	bl	8000e34 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff faeb 	bl	8000e34 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1ef      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fab2 	bl	8000e34 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff faae 	bl	8000e34 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1b2      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9a      	ldr	r3, [pc, #616]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a99      	ldr	r2, [pc, #612]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001950:	4b96      	ldr	r3, [pc, #600]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a95      	ldr	r2, [pc, #596]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fa64 	bl	8000e34 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff fa60 	bl	8000e34 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e162      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff fa4d 	bl	8000e34 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fa49 	bl	8000e34 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e14b      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b78      	ldr	r3, [pc, #480]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	4a77      	ldr	r2, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019e8:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa1c 	bl	8000e34 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a00:	f7ff fa18 	bl	8000e34 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e11c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ef      	beq.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a22:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff f9ff 	bl	8000e34 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3a:	f7ff f9fb 	bl	8000e34 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ff      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80f3 	beq.w	8001c4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 80c9 	bne.w	8001c00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d12c      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d123      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11b      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d113      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d06b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d062      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0ac      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afe:	f7ff f999 	bl	8000e34 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff f995 	bl	8000e34 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e099      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x77c>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b34:	3a01      	subs	r2, #1
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b3e:	0212      	lsls	r2, r2, #8
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b46:	0852      	lsrs	r2, r2, #1
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	0552      	lsls	r2, r2, #21
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b52:	0852      	lsrs	r2, r2, #1
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0652      	lsls	r2, r2, #25
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b5e:	06d2      	lsls	r2, r2, #27
 8001b60:	430a      	orrs	r2, r1
 8001b62:	4912      	ldr	r1, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff f958 	bl	8000e34 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f954 	bl	8000e34 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e058      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba6:	e050      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e04f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d144      	bne.n	8001c4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd8:	f7ff f92c 	bl	8000e34 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f928 	bl	8000e34 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e02c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x7ac>
 8001bfe:	e024      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d01f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f90f 	bl	8000e34 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f90b 	bl	8000e34 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4905      	ldr	r1, [pc, #20]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x824>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e001      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	feeefffc 	.word	0xfeeefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0e7      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 0207 	bic.w	r2, r3, #7
 8001c86:	4970      	ldr	r1, [pc, #448]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0cf      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d908      	bls.n	8001cce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4960      	ldr	r1, [pc, #384]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d04c      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d121      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0a6      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e09a      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e086      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4943      	ldr	r1, [pc, #268]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d44:	f7ff f876 	bl	8000e34 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7ff f872 	bl	8000e34 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e06e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d208      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	492b      	ldr	r1, [pc, #172]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d210      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 0207 	bic.w	r2, r3, #7
 8001db8:	4923      	ldr	r1, [pc, #140]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e036      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4918      	ldr	r1, [pc, #96]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4910      	ldr	r1, [pc, #64]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e10:	f000 f824 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	490b      	ldr	r1, [pc, #44]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1fc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe ffad 	bl	8000d94 <HAL_InitTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08007388 	.word	0x08007388
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d11e      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	e004      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d134      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0xac>
 8001f00:	e005      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f04:	617b      	str	r3, [r7, #20]
      break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	617b      	str	r3, [r7, #20]
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	617b      	str	r3, [r7, #20]
      break;
 8001f12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	3301      	adds	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0e5b      	lsrs	r3, r3, #25
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	3301      	adds	r3, #1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f54:	69bb      	ldr	r3, [r7, #24]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	080073a0 	.word	0x080073a0
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08007398 	.word	0x08007398

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fbc:	f7ff ffda 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4904      	ldr	r1, [pc, #16]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08007398 	.word	0x08007398

08001fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ffc:	f7ff f9b6 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002000:	6178      	str	r0, [r7, #20]
 8002002:	e014      	b.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a24      	ldr	r2, [pc, #144]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff f9a6 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d10b      	bne.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d919      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2ba0      	cmp	r3, #160	; 0xa0
 8002040:	d902      	bls.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002042:	2302      	movs	r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e013      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e010      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d902      	bls.n	800205a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002054:	2303      	movs	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e00a      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b80      	cmp	r3, #128	; 0x80
 800205e:	d102      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e004      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b70      	cmp	r3, #112	; 0x70
 800206a:	d101      	bne.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 0207 	bic.w	r2, r3, #7
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	40022000 	.word	0x40022000

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020ac:	2300      	movs	r3, #0
 80020ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d031      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020c8:	d01a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80020ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020ce:	d814      	bhi.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020d8:	d10f      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4a5c      	ldr	r2, [pc, #368]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e6:	e00c      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f9de 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f8:	e003      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	74fb      	strb	r3, [r7, #19]
      break;
 80020fe:	e000      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10b      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002108:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	494e      	ldr	r1, [pc, #312]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800211e:	e001      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 809e 	beq.w	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	4a3f      	ldr	r2, [pc, #252]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	; 0x58
 8002158:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a39      	ldr	r2, [pc, #228]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002174:	f7fe fe5e 	bl	8000e34 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217a:	e009      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7fe fe5a 	bl	8000e34 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d902      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	74fb      	strb	r3, [r7, #19]
        break;
 800218e:	e005      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d15a      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01e      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d019      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ea:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fe1a 	bl	8000e34 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002202:	e00b      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fe16 	bl	8000e34 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d902      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	74fb      	strb	r3, [r7, #19]
            break;
 800221a:	e006      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ec      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	4904      	ldr	r1, [pc, #16]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002246:	e009      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
 800224c:	e006      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225c:	7c7b      	ldrb	r3, [r7, #17]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b8a      	ldr	r3, [pc, #552]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a89      	ldr	r2, [pc, #548]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227a:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4980      	ldr	r1, [pc, #512]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229c:	4b7b      	ldr	r3, [pc, #492]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f023 020c 	bic.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	4978      	ldr	r1, [pc, #480]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022be:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	496f      	ldr	r1, [pc, #444]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	4967      	ldr	r1, [pc, #412]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002302:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	495e      	ldr	r1, [pc, #376]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	4956      	ldr	r1, [pc, #344]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	494d      	ldr	r1, [pc, #308]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4945      	ldr	r1, [pc, #276]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a3f      	ldr	r2, [pc, #252]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f882 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	492d      	ldr	r1, [pc, #180]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e011      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f853 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002432:	4916      	ldr	r1, [pc, #88]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002442:	d10c      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f830 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002480:	7cbb      	ldrb	r3, [r7, #18]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000

080024b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024be:	4b74      	ldr	r3, [pc, #464]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d018      	beq.n	80024fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ca:	4b71      	ldr	r3, [pc, #452]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10d      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
       ||
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024e2:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
       ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d047      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d018      	beq.n	8002536 <RCCEx_PLLSAI1_Config+0x86>
 8002504:	2b03      	cmp	r3, #3
 8002506:	d825      	bhi.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
 8002508:	2b01      	cmp	r3, #1
 800250a:	d002      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x62>
 800250c:	2b02      	cmp	r3, #2
 800250e:	d009      	beq.n	8002524 <RCCEx_PLLSAI1_Config+0x74>
 8002510:	e020      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11d      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002522:	e01a      	b.n	800255a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002524:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002534:	e013      	b.n	800255e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002552:	e006      	b.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e004      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
 800255c:	e002      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002562:	bf00      	nop
    }

    if(status == HAL_OK)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	430b      	orrs	r3, r1
 8002580:	4943      	ldr	r1, [pc, #268]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d17c      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002598:	f7fe fc4c 	bl	8000e34 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800259e:	e009      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a0:	f7fe fc48 	bl	8000e34 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d902      	bls.n	80025b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	73fb      	strb	r3, [r7, #15]
        break;
 80025b2:	e005      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ef      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d15f      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d110      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	0211      	lsls	r1, r2, #8
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	06d2      	lsls	r2, r2, #27
 80025e4:	430a      	orrs	r2, r1
 80025e6:	492a      	ldr	r1, [pc, #168]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	610b      	str	r3, [r1, #16]
 80025ec:	e027      	b.n	800263e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d112      	bne.n	800261a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6892      	ldr	r2, [r2, #8]
 8002604:	0211      	lsls	r1, r2, #8
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6912      	ldr	r2, [r2, #16]
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0552      	lsls	r2, r2, #21
 8002610:	430a      	orrs	r2, r1
 8002612:	491f      	ldr	r1, [pc, #124]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	610b      	str	r3, [r1, #16]
 8002618:	e011      	b.n	800263e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002622:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	0211      	lsls	r1, r2, #8
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6952      	ldr	r2, [r2, #20]
 8002630:	0852      	lsrs	r2, r2, #1
 8002632:	3a01      	subs	r2, #1
 8002634:	0652      	lsls	r2, r2, #25
 8002636:	430a      	orrs	r2, r1
 8002638:	4915      	ldr	r1, [pc, #84]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002648:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fe fbf3 	bl	8000e34 <HAL_GetTick>
 800264e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002650:	e009      	b.n	8002666 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002652:	f7fe fbef 	bl	8000e34 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d902      	bls.n	8002666 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	73fb      	strb	r3, [r7, #15]
          break;
 8002664:	e005      	b.n	8002672 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ef      	beq.n	8002652 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000

08002694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e040      	b.n	8002728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe f9e8 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8c0 	bl	8002858 <UART_SetConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fae0 	bl	8002cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fb67 	bl	8002df4 <UART_CheckIdleState>
 8002726:	4603      	mov	r3, r0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002744:	2b20      	cmp	r3, #32
 8002746:	f040 8082 	bne.w	800284e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_UART_Transmit+0x26>
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07a      	b.n	8002850 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x38>
 8002764:	2302      	movs	r3, #2
 8002766:	e073      	b.n	8002850 <HAL_UART_Transmit+0x120>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2221      	movs	r2, #33	; 0x21
 800277c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800277e:	f7fe fb59 	bl	8000e34 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	88fa      	ldrh	r2, [r7, #6]
 8002790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279c:	d108      	bne.n	80027b0 <HAL_UART_Transmit+0x80>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	e003      	b.n	80027b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80027c0:	e02d      	b.n	800281e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fb5a 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e039      	b.n	8002850 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10b      	bne.n	80027fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ee:	b292      	uxth	r2, r2
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	3302      	adds	r3, #2
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	e008      	b.n	800280c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b292      	uxth	r2, r2
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1cb      	bne.n	80027c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2140      	movs	r1, #64	; 0x40
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fb26 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e005      	b.n	8002850 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b08a      	sub	sp, #40	; 0x28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4313      	orrs	r3, r2
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4bb4      	ldr	r3, [pc, #720]	; (8002b58 <UART_SetConfig+0x300>)
 8002888:	4013      	ands	r3, r2
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002890:	430b      	orrs	r3, r1
 8002892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4aa9      	ldr	r2, [pc, #676]	; (8002b5c <UART_SetConfig+0x304>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4313      	orrs	r3, r2
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4aa0      	ldr	r2, [pc, #640]	; (8002b60 <UART_SetConfig+0x308>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d126      	bne.n	8002930 <UART_SetConfig+0xd8>
 80028e2:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <UART_SetConfig+0x30c>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d81b      	bhi.n	8002928 <UART_SetConfig+0xd0>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <UART_SetConfig+0xa0>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002919 	.word	0x08002919
 8002900:	08002911 	.word	0x08002911
 8002904:	08002921 	.word	0x08002921
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290e:	e080      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002910:	2302      	movs	r3, #2
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002916:	e07c      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002918:	2304      	movs	r3, #4
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291e:	e078      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002920:	2308      	movs	r3, #8
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002926:	e074      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002928:	2310      	movs	r3, #16
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292e:	e070      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a8c      	ldr	r2, [pc, #560]	; (8002b68 <UART_SetConfig+0x310>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d138      	bne.n	80029ac <UART_SetConfig+0x154>
 800293a:	4b8a      	ldr	r3, [pc, #552]	; (8002b64 <UART_SetConfig+0x30c>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d82d      	bhi.n	80029a4 <UART_SetConfig+0x14c>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <UART_SetConfig+0xf8>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002985 	.word	0x08002985
 8002954:	080029a5 	.word	0x080029a5
 8002958:	080029a5 	.word	0x080029a5
 800295c:	080029a5 	.word	0x080029a5
 8002960:	08002995 	.word	0x08002995
 8002964:	080029a5 	.word	0x080029a5
 8002968:	080029a5 	.word	0x080029a5
 800296c:	080029a5 	.word	0x080029a5
 8002970:	0800298d 	.word	0x0800298d
 8002974:	080029a5 	.word	0x080029a5
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029a5 	.word	0x080029a5
 8002980:	0800299d 	.word	0x0800299d
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800298a:	e042      	b.n	8002a12 <UART_SetConfig+0x1ba>
 800298c:	2302      	movs	r3, #2
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002992:	e03e      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002994:	2304      	movs	r3, #4
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e03a      	b.n	8002a12 <UART_SetConfig+0x1ba>
 800299c:	2308      	movs	r3, #8
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e036      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029a4:	2310      	movs	r3, #16
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029aa:	e032      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <UART_SetConfig+0x304>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d12a      	bne.n	8002a0c <UART_SetConfig+0x1b4>
 80029b6:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <UART_SetConfig+0x30c>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029c4:	d01a      	beq.n	80029fc <UART_SetConfig+0x1a4>
 80029c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029ca:	d81b      	bhi.n	8002a04 <UART_SetConfig+0x1ac>
 80029cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d0:	d00c      	beq.n	80029ec <UART_SetConfig+0x194>
 80029d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d6:	d815      	bhi.n	8002a04 <UART_SetConfig+0x1ac>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <UART_SetConfig+0x18c>
 80029dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e0:	d008      	beq.n	80029f4 <UART_SetConfig+0x19c>
 80029e2:	e00f      	b.n	8002a04 <UART_SetConfig+0x1ac>
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ea:	e012      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029ec:	2302      	movs	r3, #2
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f2:	e00e      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029f4:	2304      	movs	r3, #4
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e00a      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029fc:	2308      	movs	r3, #8
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a02:	e006      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002a04:	2310      	movs	r3, #16
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0a:	e002      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <UART_SetConfig+0x304>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d17a      	bne.n	8002b12 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d824      	bhi.n	8002a6e <UART_SetConfig+0x216>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <UART_SetConfig+0x1d4>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a51 	.word	0x08002a51
 8002a30:	08002a6f 	.word	0x08002a6f
 8002a34:	08002a59 	.word	0x08002a59
 8002a38:	08002a6f 	.word	0x08002a6f
 8002a3c:	08002a5f 	.word	0x08002a5f
 8002a40:	08002a6f 	.word	0x08002a6f
 8002a44:	08002a6f 	.word	0x08002a6f
 8002a48:	08002a6f 	.word	0x08002a6f
 8002a4c:	08002a67 	.word	0x08002a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a50:	f7ff fa9c 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002a54:	61f8      	str	r0, [r7, #28]
        break;
 8002a56:	e010      	b.n	8002a7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a58:	4b44      	ldr	r3, [pc, #272]	; (8002b6c <UART_SetConfig+0x314>)
 8002a5a:	61fb      	str	r3, [r7, #28]
        break;
 8002a5c:	e00d      	b.n	8002a7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5e:	f7ff f9fd 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002a62:	61f8      	str	r0, [r7, #28]
        break;
 8002a64:	e009      	b.n	8002a7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6a:	61fb      	str	r3, [r7, #28]
        break;
 8002a6c:	e005      	b.n	8002a7a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8107 	beq.w	8002c90 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d305      	bcc.n	8002a9e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d903      	bls.n	8002aa6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002aa4:	e0f4      	b.n	8002c90 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	461c      	mov	r4, r3
 8002aac:	4615      	mov	r5, r2
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	022b      	lsls	r3, r5, #8
 8002ab8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002abc:	0222      	lsls	r2, r4, #8
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	6849      	ldr	r1, [r1, #4]
 8002ac2:	0849      	lsrs	r1, r1, #1
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	4688      	mov	r8, r1
 8002ac8:	4681      	mov	r9, r0
 8002aca:	eb12 0a08 	adds.w	sl, r2, r8
 8002ace:	eb43 0b09 	adc.w	fp, r3, r9
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ae0:	4650      	mov	r0, sl
 8002ae2:	4659      	mov	r1, fp
 8002ae4:	f7fd fbcc 	bl	8000280 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4613      	mov	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af6:	d308      	bcc.n	8002b0a <UART_SetConfig+0x2b2>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afe:	d204      	bcs.n	8002b0a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	e0c2      	b.n	8002c90 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b10:	e0be      	b.n	8002c90 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1a:	d16a      	bne.n	8002bf2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d834      	bhi.n	8002b8e <UART_SetConfig+0x336>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x2d4>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b51 	.word	0x08002b51
 8002b30:	08002b71 	.word	0x08002b71
 8002b34:	08002b79 	.word	0x08002b79
 8002b38:	08002b8f 	.word	0x08002b8f
 8002b3c:	08002b7f 	.word	0x08002b7f
 8002b40:	08002b8f 	.word	0x08002b8f
 8002b44:	08002b8f 	.word	0x08002b8f
 8002b48:	08002b8f 	.word	0x08002b8f
 8002b4c:	08002b87 	.word	0x08002b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7ff fa1c 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002b54:	61f8      	str	r0, [r7, #28]
        break;
 8002b56:	e020      	b.n	8002b9a <UART_SetConfig+0x342>
 8002b58:	efff69f3 	.word	0xefff69f3
 8002b5c:	40008000 	.word	0x40008000
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40004400 	.word	0x40004400
 8002b6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff fa22 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002b74:	61f8      	str	r0, [r7, #28]
        break;
 8002b76:	e010      	b.n	8002b9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b78:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <UART_SetConfig+0x454>)
 8002b7a:	61fb      	str	r3, [r7, #28]
        break;
 8002b7c:	e00d      	b.n	8002b9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b7e:	f7ff f96d 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002b82:	61f8      	str	r0, [r7, #28]
        break;
 8002b84:	e009      	b.n	8002b9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8a:	61fb      	str	r3, [r7, #28]
        break;
 8002b8c:	e005      	b.n	8002b9a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d077      	beq.n	8002c90 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005a      	lsls	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	441a      	add	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d916      	bls.n	8002bea <UART_SetConfig+0x392>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d212      	bcs.n	8002bea <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	8afa      	ldrh	r2, [r7, #22]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	e052      	b.n	8002c90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002bf0:	e04e      	b.n	8002c90 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d827      	bhi.n	8002c4a <UART_SetConfig+0x3f2>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <UART_SetConfig+0x3a8>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	08002c35 	.word	0x08002c35
 8002c0c:	08002c4b 	.word	0x08002c4b
 8002c10:	08002c3b 	.word	0x08002c3b
 8002c14:	08002c4b 	.word	0x08002c4b
 8002c18:	08002c4b 	.word	0x08002c4b
 8002c1c:	08002c4b 	.word	0x08002c4b
 8002c20:	08002c43 	.word	0x08002c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff f9b2 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002c28:	61f8      	str	r0, [r7, #28]
        break;
 8002c2a:	e014      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f7ff f9c4 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002c30:	61f8      	str	r0, [r7, #28]
        break;
 8002c32:	e010      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <UART_SetConfig+0x454>)
 8002c36:	61fb      	str	r3, [r7, #28]
        break;
 8002c38:	e00d      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3a:	f7ff f90f 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002c3e:	61f8      	str	r0, [r7, #28]
        break;
 8002c40:	e009      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c46:	61fb      	str	r3, [r7, #28]
        break;
 8002c48:	e005      	b.n	8002c56 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c54:	bf00      	nop
    }

    if (pclk != 0U)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d019      	beq.n	8002c90 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	085a      	lsrs	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	441a      	add	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	d909      	bls.n	8002c8a <UART_SetConfig+0x432>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d205      	bcs.n	8002c8a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
 8002c88:	e002      	b.n	8002c90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	00f42400 	.word	0x00f42400

08002cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01a      	beq.n	8002dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dae:	d10a      	bne.n	8002dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
  }
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e04:	f7fe f816 	bl	8000e34 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d10e      	bne.n	8002e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f82d 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e023      	b.n	8002e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d10e      	bne.n	8002e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f817 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e00d      	b.n	8002e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b09c      	sub	sp, #112	; 0x70
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	e0a5      	b.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9e:	f000 80a1 	beq.w	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fd ffc7 	bl	8000e34 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d13e      	bne.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e6      	bne.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	663b      	str	r3, [r7, #96]	; 0x60
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3308      	adds	r3, #8
 8002f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e5      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e067      	b.n	8003006 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d04f      	beq.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f52:	d147      	bne.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f5c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e6      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3308      	adds	r3, #8
 8002fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fb0:	623a      	str	r2, [r7, #32]
 8002fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	69f9      	ldr	r1, [r7, #28]
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e5      	bne.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e010      	b.n	8003006 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	f43f af4a 	beq.w	8002e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3770      	adds	r7, #112	; 0x70
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <__NVIC_SetPriority>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003068:	2100      	movs	r1, #0
 800306a:	f06f 0004 	mvn.w	r0, #4
 800306e:	f7ff ffcf 	bl	8003010 <__NVIC_SetPriority>
#endif
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800307e:	f3ef 8305 	mrs	r3, IPSR
 8003082:	603b      	str	r3, [r7, #0]
  return(result);
 8003084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800308a:	f06f 0305 	mvn.w	r3, #5
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	e00c      	b.n	80030ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <osKernelInitialize+0x44>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <osKernelInitialize+0x44>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	e002      	b.n	80030ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030ac:	687b      	ldr	r3, [r7, #4]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200006b0 	.word	0x200006b0

080030c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c6:	f3ef 8305 	mrs	r3, IPSR
 80030ca:	603b      	str	r3, [r7, #0]
  return(result);
 80030cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <osKernelStart+0x1a>
    stat = osErrorISR;
 80030d2:	f06f 0305 	mvn.w	r3, #5
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	e010      	b.n	80030fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <osKernelStart+0x48>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d109      	bne.n	80030f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030e2:	f7ff ffbf 	bl	8003064 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <osKernelStart+0x48>)
 80030e8:	2202      	movs	r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030ec:	f001 fa50 	bl	8004590 <vTaskStartScheduler>
      stat = osOK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	e002      	b.n	80030fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030fc:	687b      	ldr	r3, [r7, #4]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200006b0 	.word	0x200006b0

0800310c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b08e      	sub	sp, #56	; 0x38
 8003110:	af04      	add	r7, sp, #16
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800311c:	f3ef 8305 	mrs	r3, IPSR
 8003120:	617b      	str	r3, [r7, #20]
  return(result);
 8003122:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003124:	2b00      	cmp	r3, #0
 8003126:	d17e      	bne.n	8003226 <osThreadNew+0x11a>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d07b      	beq.n	8003226 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003132:	2318      	movs	r3, #24
 8003134:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800313e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d045      	beq.n	80031d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <osThreadNew+0x48>
        name = attr->name;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <osThreadNew+0x6e>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b38      	cmp	r3, #56	; 0x38
 800316c:	d805      	bhi.n	800317a <osThreadNew+0x6e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <osThreadNew+0x72>
        return (NULL);
 800317a:	2300      	movs	r3, #0
 800317c:	e054      	b.n	8003228 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00e      	beq.n	80031b4 <osThreadNew+0xa8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b5b      	cmp	r3, #91	; 0x5b
 800319c:	d90a      	bls.n	80031b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <osThreadNew+0xa8>
        mem = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e010      	b.n	80031d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10c      	bne.n	80031d6 <osThreadNew+0xca>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d108      	bne.n	80031d6 <osThreadNew+0xca>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <osThreadNew+0xca>
          mem = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	e001      	b.n	80031d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d110      	bne.n	80031fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031e4:	9202      	str	r2, [sp, #8]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6a3a      	ldr	r2, [r7, #32]
 80031f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fff6 	bl	80041e4 <xTaskCreateStatic>
 80031f8:	4603      	mov	r3, r0
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	e013      	b.n	8003226 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d110      	bne.n	8003226 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	b29a      	uxth	r2, r3
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f001 f841 	bl	800429e <xTaskCreate>
 800321c:	4603      	mov	r3, r0
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <osThreadNew+0x11a>
            hTask = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003226:	693b      	ldr	r3, [r7, #16]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003238:	f3ef 8305 	mrs	r3, IPSR
 800323c:	60bb      	str	r3, [r7, #8]
  return(result);
 800323e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <osDelay+0x1c>
    stat = osErrorISR;
 8003244:	f06f 0305 	mvn.w	r3, #5
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e007      	b.n	800325c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 f966 	bl	8004528 <vTaskDelay>
    }
  }

  return (stat);
 800325c:	68fb      	ldr	r3, [r7, #12]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003266:	b580      	push	{r7, lr}
 8003268:	b08a      	sub	sp, #40	; 0x28
 800326a:	af02      	add	r7, sp, #8
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003276:	f3ef 8305 	mrs	r3, IPSR
 800327a:	613b      	str	r3, [r7, #16]
  return(result);
 800327c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800327e:	2b00      	cmp	r3, #0
 8003280:	d15f      	bne.n	8003342 <osMessageQueueNew+0xdc>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d05c      	beq.n	8003342 <osMessageQueueNew+0xdc>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d059      	beq.n	8003342 <osMessageQueueNew+0xdc>
    mem = -1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003292:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d029      	beq.n	80032ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d012      	beq.n	80032c8 <osMessageQueueNew+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b4f      	cmp	r3, #79	; 0x4f
 80032a8:	d90e      	bls.n	80032c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <osMessageQueueNew+0x62>
        mem = 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e014      	b.n	80032f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d110      	bne.n	80032f2 <osMessageQueueNew+0x8c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10c      	bne.n	80032f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d108      	bne.n	80032f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e001      	b.n	80032f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10b      	bne.n	8003310 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2100      	movs	r1, #0
 8003302:	9100      	str	r1, [sp, #0]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fa2e 	bl	8003768 <xQueueGenericCreateStatic>
 800330c:	61f8      	str	r0, [r7, #28]
 800330e:	e008      	b.n	8003322 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003316:	2200      	movs	r2, #0
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa9c 	bl	8003858 <xQueueGenericCreate>
 8003320:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <osMessageQueueNew+0xd0>
        name = attr->name;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e001      	b.n	800333a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	69f8      	ldr	r0, [r7, #28]
 800333e:	f000 fef3 	bl	8004128 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003342:	69fb      	ldr	r3, [r7, #28]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003364:	f3ef 8305 	mrs	r3, IPSR
 8003368:	617b      	str	r3, [r7, #20]
  return(result);
 800336a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800336c:	2b00      	cmp	r3, #0
 800336e:	d028      	beq.n	80033c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <osMessageQueuePut+0x36>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <osMessageQueuePut+0x36>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003382:	f06f 0303 	mvn.w	r3, #3
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e038      	b.n	80033fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800338e:	f107 0210 	add.w	r2, r7, #16
 8003392:	2300      	movs	r3, #0
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	69b8      	ldr	r0, [r7, #24]
 8003398:	f000 fbba 	bl	8003b10 <xQueueGenericSendFromISR>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d003      	beq.n	80033aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80033a2:	f06f 0302 	mvn.w	r3, #2
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	e028      	b.n	80033fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d025      	beq.n	80033fc <osMessageQueuePut+0xb0>
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <osMessageQueuePut+0xbc>)
 80033b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	e01c      	b.n	80033fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <osMessageQueuePut+0x82>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80033ce:	f06f 0303 	mvn.w	r3, #3
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	e012      	b.n	80033fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80033d6:	2300      	movs	r3, #0
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	69b8      	ldr	r0, [r7, #24]
 80033de:	f000 fa99 	bl	8003914 <xQueueGenericSend>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d009      	beq.n	80033fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80033ee:	f06f 0301 	mvn.w	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	e002      	b.n	80033fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80033f6:	f06f 0302 	mvn.w	r3, #2
 80033fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80033fc:	69fb      	ldr	r3, [r7, #28]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003422:	f3ef 8305 	mrs	r3, IPSR
 8003426:	617b      	str	r3, [r7, #20]
  return(result);
 8003428:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800342a:	2b00      	cmp	r3, #0
 800342c:	d028      	beq.n	8003480 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <osMessageQueueGet+0x34>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <osMessageQueueGet+0x34>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003440:	f06f 0303 	mvn.w	r3, #3
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e037      	b.n	80034b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800344c:	f107 0310 	add.w	r3, r7, #16
 8003450:	461a      	mov	r2, r3
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	69b8      	ldr	r0, [r7, #24]
 8003456:	f000 fcd7 	bl	8003e08 <xQueueReceiveFromISR>
 800345a:	4603      	mov	r3, r0
 800345c:	2b01      	cmp	r3, #1
 800345e:	d003      	beq.n	8003468 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003460:	f06f 0302 	mvn.w	r3, #2
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	e027      	b.n	80034b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d024      	beq.n	80034b8 <osMessageQueueGet+0xac>
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <osMessageQueueGet+0xb8>)
 8003470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	e01b      	b.n	80034b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <osMessageQueueGet+0x80>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d103      	bne.n	8003494 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800348c:	f06f 0303 	mvn.w	r3, #3
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e011      	b.n	80034b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	69b8      	ldr	r0, [r7, #24]
 800349a:	f000 fbd5 	bl	8003c48 <xQueueReceive>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d009      	beq.n	80034b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80034aa:	f06f 0301 	mvn.w	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	e002      	b.n	80034b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80034b2:	f06f 0302 	mvn.w	r3, #2
 80034b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80034b8:	69fb      	ldr	r3, [r7, #28]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80034d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a06      	ldr	r2, [pc, #24]	; (80034f8 <vApplicationGetIdleTaskMemory+0x30>)
 80034de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	200006b4 	.word	0x200006b4
 80034f8:	20000710 	.word	0x20000710

080034fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <vApplicationGetTimerTaskMemory+0x2c>)
 800350c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a06      	ldr	r2, [pc, #24]	; (800352c <vApplicationGetTimerTaskMemory+0x30>)
 8003512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800351a:	601a      	str	r2, [r3, #0]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000910 	.word	0x20000910
 800352c:	2000096c 	.word	0x2000096c

08003530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f103 0208 	add.w	r2, r3, #8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f103 0208 	add.w	r2, r3, #8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f103 0208 	add.w	r2, r3, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e8:	d103      	bne.n	80035f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e00c      	b.n	800360c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3308      	adds	r3, #8
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e002      	b.n	8003600 <vListInsert+0x2e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	429a      	cmp	r2, r3
 800360a:	d2f6      	bcs.n	80035fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6852      	ldr	r2, [r2, #4]
 8003664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d103      	bne.n	8003678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1e5a      	subs	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036c2:	f002 f907 	bl	80058d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	68f9      	ldr	r1, [r7, #12]
 80036d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	441a      	add	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	3b01      	subs	r3, #1
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	441a      	add	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	22ff      	movs	r2, #255	; 0xff
 8003706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d114      	bne.n	8003742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01a      	beq.n	8003756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3310      	adds	r3, #16
 8003724:	4618      	mov	r0, r3
 8003726:	f001 f9bd 	bl	8004aa4 <xTaskRemoveFromEventList>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d012      	beq.n	8003756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <xQueueGenericReset+0xcc>)
 8003732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	e009      	b.n	8003756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3310      	adds	r3, #16
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fef2 	bl	8003530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3324      	adds	r3, #36	; 0x24
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff feed 	bl	8003530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003756:	f002 f8ed 	bl	8005934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800375a:	2301      	movs	r3, #1
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	; 0x38
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <xQueueGenericCreateStatic+0x52>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <xQueueGenericCreateStatic+0x56>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <xQueueGenericCreateStatic+0x58>
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	623b      	str	r3, [r7, #32]
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <xQueueGenericCreateStatic+0x7e>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <xQueueGenericCreateStatic+0x82>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <xQueueGenericCreateStatic+0x84>
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	61fb      	str	r3, [r7, #28]
}
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003806:	2350      	movs	r3, #80	; 0x50
 8003808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b50      	cmp	r3, #80	; 0x50
 800380e:	d00a      	beq.n	8003826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	61bb      	str	r3, [r7, #24]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800383a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f83f 	bl	80038cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003850:	4618      	mov	r0, r3
 8003852:	3730      	adds	r7, #48	; 0x30
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xQueueGenericCreate+0x2a>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	613b      	str	r3, [r7, #16]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3350      	adds	r3, #80	; 0x50
 8003890:	4618      	mov	r0, r3
 8003892:	f002 f941 	bl	8005b18 <pvPortMalloc>
 8003896:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d011      	beq.n	80038c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3350      	adds	r3, #80	; 0x50
 80038a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038b0:	79fa      	ldrb	r2, [r7, #7]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f805 	bl	80038cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038c2:	69bb      	ldr	r3, [r7, #24]
	}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e002      	b.n	80038ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038fa:	2101      	movs	r1, #1
 80038fc:	69b8      	ldr	r0, [r7, #24]
 80038fe:	f7ff fecb 	bl	8003698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08e      	sub	sp, #56	; 0x38
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <xQueueGenericSend+0x32>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d103      	bne.n	8003954 <xQueueGenericSend+0x40>
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <xQueueGenericSend+0x44>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <xQueueGenericSend+0x46>
 8003958:	2300      	movs	r3, #0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <xQueueGenericSend+0x60>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d103      	bne.n	8003982 <xQueueGenericSend+0x6e>
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <xQueueGenericSend+0x72>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <xQueueGenericSend+0x74>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	623b      	str	r3, [r7, #32]
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039a2:	f001 fa3d 	bl	8004e20 <xTaskGetSchedulerState>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <xQueueGenericSend+0x9e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <xQueueGenericSend+0xa2>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <xQueueGenericSend+0xa4>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	61fb      	str	r3, [r7, #28]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039d2:	f001 ff7f 	bl	80058d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <xQueueGenericSend+0xd4>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d129      	bne.n	8003a3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ee:	f000 fa8b 	bl	8003f08 <prvCopyDataToQueue>
 80039f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 f84f 	bl	8004aa4 <xTaskRemoveFromEventList>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <xQueueGenericSend+0x1f8>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	e00a      	b.n	8003a34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a24:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <xQueueGenericSend+0x1f8>)
 8003a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a34:	f001 ff7e 	bl	8005934 <vPortExitCritical>
				return pdPASS;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e063      	b.n	8003b04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a42:	f001 ff77 	bl	8005934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e05c      	b.n	8003b04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 f889 	bl	8004b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a5e:	f001 ff69 	bl	8005934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a62:	f000 fdfb 	bl	800465c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a66:	f001 ff35 	bl	80058d4 <vPortEnterCritical>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a70:	b25b      	sxtb	r3, r3
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a76:	d103      	bne.n	8003a80 <xQueueGenericSend+0x16c>
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a86:	b25b      	sxtb	r3, r3
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8c:	d103      	bne.n	8003a96 <xQueueGenericSend+0x182>
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a96:	f001 ff4d 	bl	8005934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a9a:	1d3a      	adds	r2, r7, #4
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 f878 	bl	8004b98 <xTaskCheckForTimeOut>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d124      	bne.n	8003af8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab0:	f000 fb22 	bl	80040f8 <prvIsQueueFull>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	3310      	adds	r3, #16
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 ff9e 	bl	8004a04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aca:	f000 faad 	bl	8004028 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ace:	f000 fdd3 	bl	8004678 <xTaskResumeAll>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f47f af7c 	bne.w	80039d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <xQueueGenericSend+0x1f8>)
 8003adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	e772      	b.n	80039d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aee:	f000 fa9b 	bl	8004028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003af2:	f000 fdc1 	bl	8004678 <xTaskResumeAll>
 8003af6:	e76c      	b.n	80039d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afa:	f000 fa95 	bl	8004028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003afe:	f000 fdbb 	bl	8004678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3738      	adds	r7, #56	; 0x38
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	; 0x40
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <xQueueGenericSendFromISR+0x3c>
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <xQueueGenericSendFromISR+0x40>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <xQueueGenericSendFromISR+0x42>
 8003b50:	2300      	movs	r3, #0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSendFromISR+0x6a>
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <xQueueGenericSendFromISR+0x6e>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <xQueueGenericSendFromISR+0x70>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	623b      	str	r3, [r7, #32]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b9a:	f001 ff7d 	bl	8005a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <xQueueGenericSendFromISR+0xbc>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d12f      	bne.n	8003c2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003be2:	f000 f991 	bl	8003f08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003be6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bee:	d112      	bne.n	8003c16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d016      	beq.n	8003c26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 ff51 	bl	8004aa4 <xTaskRemoveFromEventList>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00e      	beq.n	8003c26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e007      	b.n	8003c26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	b25a      	sxtb	r2, r3
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c26:	2301      	movs	r3, #1
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c2a:	e001      	b.n	8003c30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3740      	adds	r7, #64	; 0x40
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xQueueReceive+0x30>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	623b      	str	r3, [r7, #32]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <xQueueReceive+0x3e>
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <xQueueReceive+0x42>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueReceive+0x44>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xQueueReceive+0x5e>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	61fb      	str	r3, [r7, #28]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ca6:	f001 f8bb 	bl	8004e20 <xTaskGetSchedulerState>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <xQueueReceive+0x6e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <xQueueReceive+0x72>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <xQueueReceive+0x74>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xQueueReceive+0x8e>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	61bb      	str	r3, [r7, #24]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cd6:	f001 fdfd 	bl	80058d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01f      	beq.n	8003d26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cea:	f000 f977 	bl	8003fdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00f      	beq.n	8003d1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	3310      	adds	r3, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fece 	bl	8004aa4 <xTaskRemoveFromEventList>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <xQueueReceive+0x1bc>)
 8003d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d1e:	f001 fe09 	bl	8005934 <vPortExitCritical>
				return pdPASS;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e069      	b.n	8003dfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d2c:	f001 fe02 	bl	8005934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e062      	b.n	8003dfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d3a:	f107 0310 	add.w	r3, r7, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 ff14 	bl	8004b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d48:	f001 fdf4 	bl	8005934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d4c:	f000 fc86 	bl	800465c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d50:	f001 fdc0 	bl	80058d4 <vPortEnterCritical>
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d60:	d103      	bne.n	8003d6a <xQueueReceive+0x122>
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d76:	d103      	bne.n	8003d80 <xQueueReceive+0x138>
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d80:	f001 fdd8 	bl	8005934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d84:	1d3a      	adds	r2, r7, #4
 8003d86:	f107 0310 	add.w	r3, r7, #16
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 ff03 	bl	8004b98 <xTaskCheckForTimeOut>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d123      	bne.n	8003de0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f000 f997 	bl	80040cc <prvIsQueueEmpty>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	3324      	adds	r3, #36	; 0x24
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fe29 	bl	8004a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db4:	f000 f938 	bl	8004028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003db8:	f000 fc5e 	bl	8004678 <xTaskResumeAll>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d189      	bne.n	8003cd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <xQueueReceive+0x1bc>)
 8003dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	e780      	b.n	8003cd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd6:	f000 f927 	bl	8004028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dda:	f000 fc4d 	bl	8004678 <xTaskResumeAll>
 8003dde:	e77a      	b.n	8003cd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de2:	f000 f921 	bl	8004028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003de6:	f000 fc47 	bl	8004678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dec:	f000 f96e 	bl	80040cc <prvIsQueueEmpty>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f43f af6f 	beq.w	8003cd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003df8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3730      	adds	r7, #48	; 0x30
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08e      	sub	sp, #56	; 0x38
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	623b      	str	r3, [r7, #32]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <xQueueReceiveFromISR+0x3a>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <xQueueReceiveFromISR+0x3e>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <xQueueReceiveFromISR+0x40>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	61fb      	str	r3, [r7, #28]
}
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e62:	f001 fe19 	bl	8005a98 <vPortValidateInterruptPriority>
	__asm volatile
 8003e66:	f3ef 8211 	mrs	r2, BASEPRI
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	61ba      	str	r2, [r7, #24]
 8003e7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02f      	beq.n	8003eee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9c:	f000 f89e 	bl	8003fdc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	1e5a      	subs	r2, r3, #1
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ea8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb0:	d112      	bne.n	8003ed8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fdf0 	bl	8004aa4 <xTaskRemoveFromEventList>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e007      	b.n	8003ee8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003edc:	3301      	adds	r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	b25a      	sxtb	r2, r3
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
 8003eec:	e001      	b.n	8003ef2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f383 8811 	msr	BASEPRI, r3
}
 8003efc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3738      	adds	r7, #56	; 0x38
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d14d      	bne.n	8003fca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 ff92 	bl	8004e5c <xTaskPriorityDisinherit>
 8003f38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e043      	b.n	8003fca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d119      	bne.n	8003f7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6858      	ldr	r0, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	461a      	mov	r2, r3
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	f002 f804 	bl	8005f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	441a      	add	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d32b      	bcc.n	8003fca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	e026      	b.n	8003fca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68d8      	ldr	r0, [r3, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	461a      	mov	r2, r3
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	f001 ffea 	bl	8005f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	425b      	negs	r3, r3
 8003f96:	441a      	add	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d207      	bcs.n	8003fb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d105      	bne.n	8003fca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fd2:	697b      	ldr	r3, [r7, #20]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	d303      	bcc.n	8004010 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68d9      	ldr	r1, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	461a      	mov	r2, r3
 800401a:	6838      	ldr	r0, [r7, #0]
 800401c:	f001 ffa0 	bl	8005f60 <memcpy>
	}
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004030:	f001 fc50 	bl	80058d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800403a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800403c:	e011      	b.n	8004062 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fd2a 	bl	8004aa4 <xTaskRemoveFromEventList>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004056:	f000 fe01 	bl	8004c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	3b01      	subs	r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	dce9      	bgt.n	800403e <prvUnlockQueue+0x16>
 800406a:	e000      	b.n	800406e <prvUnlockQueue+0x46>
					break;
 800406c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	22ff      	movs	r2, #255	; 0xff
 8004072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004076:	f001 fc5d 	bl	8005934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800407a:	f001 fc2b 	bl	80058d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004084:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004086:	e011      	b.n	80040ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3310      	adds	r3, #16
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fd05 	bl	8004aa4 <xTaskRemoveFromEventList>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040a0:	f000 fddc 	bl	8004c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040a4:	7bbb      	ldrb	r3, [r7, #14]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	dce9      	bgt.n	8004088 <prvUnlockQueue+0x60>
 80040b4:	e000      	b.n	80040b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	22ff      	movs	r2, #255	; 0xff
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040c0:	f001 fc38 	bl	8005934 <vPortExitCritical>
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040d4:	f001 fbfe 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e001      	b.n	80040ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ea:	f001 fc23 	bl	8005934 <vPortExitCritical>

	return xReturn;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004100:	f001 fbe8 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	429a      	cmp	r2, r3
 800410e:	d102      	bne.n	8004116 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e001      	b.n	800411a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800411a:	f001 fc0b 	bl	8005934 <vPortExitCritical>

	return xReturn;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e014      	b.n	8004162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004138:	4a0f      	ldr	r2, [pc, #60]	; (8004178 <vQueueAddToRegistry+0x50>)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <vQueueAddToRegistry+0x50>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <vQueueAddToRegistry+0x50>)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800415a:	e006      	b.n	800416a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b07      	cmp	r3, #7
 8004166:	d9e7      	bls.n	8004138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000d6c 	.word	0x20000d6c

0800417c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800418c:	f001 fba2 	bl	80058d4 <vPortEnterCritical>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800419c:	d103      	bne.n	80041a6 <vQueueWaitForMessageRestricted+0x2a>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b2:	d103      	bne.n	80041bc <vQueueWaitForMessageRestricted+0x40>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041bc:	f001 fbba 	bl	8005934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3324      	adds	r3, #36	; 0x24
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fc3b 	bl	8004a4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ff26 	bl	8004028 <prvUnlockQueue>
	}
 80041dc:	bf00      	nop
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08e      	sub	sp, #56	; 0x38
 80041e8:	af04      	add	r7, sp, #16
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xTaskCreateStatic+0x2a>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	623b      	str	r3, [r7, #32]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xTaskCreateStatic+0x46>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	61fb      	str	r3, [r7, #28]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800422a:	235c      	movs	r3, #92	; 0x5c
 800422c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b5c      	cmp	r3, #92	; 0x5c
 8004232:	d00a      	beq.n	800424a <xTaskCreateStatic+0x66>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	61bb      	str	r3, [r7, #24]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800424a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01e      	beq.n	8004290 <xTaskCreateStatic+0xac>
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01b      	beq.n	8004290 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004260:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	2202      	movs	r2, #2
 8004266:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800426a:	2300      	movs	r3, #0
 800426c:	9303      	str	r3, [sp, #12]
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	9302      	str	r3, [sp, #8]
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f850 	bl	8004328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800428a:	f000 f8dd 	bl	8004448 <prvAddNewTaskToReadyList>
 800428e:	e001      	b.n	8004294 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004294:	697b      	ldr	r3, [r7, #20]
	}
 8004296:	4618      	mov	r0, r3
 8004298:	3728      	adds	r7, #40	; 0x28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b08c      	sub	sp, #48	; 0x30
 80042a2:	af04      	add	r7, sp, #16
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fc30 	bl	8005b18 <pvPortMalloc>
 80042b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00e      	beq.n	80042de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042c0:	205c      	movs	r0, #92	; 0x5c
 80042c2:	f001 fc29 	bl	8005b18 <pvPortMalloc>
 80042c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
 80042d4:	e005      	b.n	80042e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f001 fcea 	bl	8005cb0 <vPortFree>
 80042dc:	e001      	b.n	80042e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d017      	beq.n	8004318 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	2300      	movs	r3, #0
 80042f4:	9303      	str	r3, [sp, #12]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	9302      	str	r3, [sp, #8]
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f80e 	bl	8004328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800430c:	69f8      	ldr	r0, [r7, #28]
 800430e:	f000 f89b 	bl	8004448 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	e002      	b.n	800431e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800431c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800431e:	69bb      	ldr	r3, [r7, #24]
	}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	21a5      	movs	r1, #165	; 0xa5
 8004342:	f001 fe1b 	bl	8005f7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004350:	3b01      	subs	r3, #1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f023 0307 	bic.w	r3, r3, #7
 800435e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <prvInitialiseNewTask+0x58>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	617b      	str	r3, [r7, #20]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01f      	beq.n	80043c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	e012      	b.n	80043b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	7819      	ldrb	r1, [r3, #0]
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	3334      	adds	r3, #52	; 0x34
 800439c:	460a      	mov	r2, r1
 800439e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	2b0f      	cmp	r3, #15
 80043b6:	d9e9      	bls.n	800438c <prvInitialiseNewTask+0x64>
 80043b8:	e000      	b.n	80043bc <prvInitialiseNewTask+0x94>
			{
				break;
 80043ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c4:	e003      	b.n	80043ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	2b37      	cmp	r3, #55	; 0x37
 80043d2:	d901      	bls.n	80043d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043d4:	2337      	movs	r3, #55	; 0x37
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	2200      	movs	r2, #0
 80043e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	3304      	adds	r3, #4
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff f8be 	bl	8003570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	3318      	adds	r3, #24
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff f8b9 	bl	8003570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	2200      	movs	r2, #0
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	68f9      	ldr	r1, [r7, #12]
 8004426:	69b8      	ldr	r0, [r7, #24]
 8004428:	f001 f928 	bl	800567c <pxPortInitialiseStack>
 800442c:	4602      	mov	r2, r0
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800443e:	bf00      	nop
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004450:	f001 fa40 	bl	80058d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004454:	4b2d      	ldr	r3, [pc, #180]	; (800450c <prvAddNewTaskToReadyList+0xc4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	4a2c      	ldr	r2, [pc, #176]	; (800450c <prvAddNewTaskToReadyList+0xc4>)
 800445c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800445e:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <prvAddNewTaskToReadyList+0xc8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004466:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <prvAddNewTaskToReadyList+0xc8>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800446c:	4b27      	ldr	r3, [pc, #156]	; (800450c <prvAddNewTaskToReadyList+0xc4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d110      	bne.n	8004496 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004474:	f000 fc16 	bl	8004ca4 <prvInitialiseTaskLists>
 8004478:	e00d      	b.n	8004496 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <prvAddNewTaskToReadyList+0xcc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <prvAddNewTaskToReadyList+0xc8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	429a      	cmp	r2, r3
 800448e:	d802      	bhi.n	8004496 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <prvAddNewTaskToReadyList+0xc8>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <prvAddNewTaskToReadyList+0xd0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <prvAddNewTaskToReadyList+0xd0>)
 800449e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <prvAddNewTaskToReadyList+0xd0>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <prvAddNewTaskToReadyList+0xd4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d903      	bls.n	80044bc <prvAddNewTaskToReadyList+0x74>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a18      	ldr	r2, [pc, #96]	; (800451c <prvAddNewTaskToReadyList+0xd4>)
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <prvAddNewTaskToReadyList+0xd8>)
 80044ca:	441a      	add	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f7ff f859 	bl	800358a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044d8:	f001 fa2c 	bl	8005934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <prvAddNewTaskToReadyList+0xcc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00e      	beq.n	8004502 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <prvAddNewTaskToReadyList+0xc8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d207      	bcs.n	8004502 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <prvAddNewTaskToReadyList+0xdc>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20001280 	.word	0x20001280
 8004510:	20000dac 	.word	0x20000dac
 8004514:	2000128c 	.word	0x2000128c
 8004518:	2000129c 	.word	0x2000129c
 800451c:	20001288 	.word	0x20001288
 8004520:	20000db0 	.word	0x20000db0
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d017      	beq.n	800456a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <vTaskDelay+0x60>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <vTaskDelay+0x30>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60bb      	str	r3, [r7, #8]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004558:	f000 f880 	bl	800465c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800455c:	2100      	movs	r1, #0
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fcea 	bl	8004f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004564:	f000 f888 	bl	8004678 <xTaskResumeAll>
 8004568:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <vTaskDelay+0x64>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200012a8 	.word	0x200012a8
 800458c:	e000ed04 	.word	0xe000ed04

08004590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800459e:	463a      	mov	r2, r7
 80045a0:	1d39      	adds	r1, r7, #4
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe ff8e 	bl	80034c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	9202      	str	r2, [sp, #8]
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	2300      	movs	r3, #0
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	460a      	mov	r2, r1
 80045be:	4921      	ldr	r1, [pc, #132]	; (8004644 <vTaskStartScheduler+0xb4>)
 80045c0:	4821      	ldr	r0, [pc, #132]	; (8004648 <vTaskStartScheduler+0xb8>)
 80045c2:	f7ff fe0f 	bl	80041e4 <xTaskCreateStatic>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4a20      	ldr	r2, [pc, #128]	; (800464c <vTaskStartScheduler+0xbc>)
 80045ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <vTaskStartScheduler+0xbc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e001      	b.n	80045de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d102      	bne.n	80045ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045e4:	f000 fcfc 	bl	8004fe0 <xTimerCreateTimerTask>
 80045e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d116      	bne.n	800461e <vTaskStartScheduler+0x8e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	613b      	str	r3, [r7, #16]
}
 8004602:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <vTaskStartScheduler+0xc0>)
 8004606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800460a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <vTaskStartScheduler+0xc4>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <vTaskStartScheduler+0xc8>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004618:	f001 f8ba 	bl	8005790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800461c:	e00e      	b.n	800463c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004624:	d10a      	bne.n	800463c <vTaskStartScheduler+0xac>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60fb      	str	r3, [r7, #12]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <vTaskStartScheduler+0xaa>
}
 800463c:	bf00      	nop
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	08007310 	.word	0x08007310
 8004648:	08004c75 	.word	0x08004c75
 800464c:	200012a4 	.word	0x200012a4
 8004650:	200012a0 	.word	0x200012a0
 8004654:	2000128c 	.word	0x2000128c
 8004658:	20001284 	.word	0x20001284

0800465c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <vTaskSuspendAll+0x18>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	4a03      	ldr	r2, [pc, #12]	; (8004674 <vTaskSuspendAll+0x18>)
 8004668:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800466a:	bf00      	nop
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	200012a8 	.word	0x200012a8

08004678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004686:	4b42      	ldr	r3, [pc, #264]	; (8004790 <xTaskResumeAll+0x118>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	603b      	str	r3, [r7, #0]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046a4:	f001 f916 	bl	80058d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046a8:	4b39      	ldr	r3, [pc, #228]	; (8004790 <xTaskResumeAll+0x118>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4a38      	ldr	r2, [pc, #224]	; (8004790 <xTaskResumeAll+0x118>)
 80046b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <xTaskResumeAll+0x118>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d162      	bne.n	8004780 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <xTaskResumeAll+0x11c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d05e      	beq.n	8004780 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c2:	e02f      	b.n	8004724 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c4:	4b34      	ldr	r3, [pc, #208]	; (8004798 <xTaskResumeAll+0x120>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3318      	adds	r3, #24
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe ffb7 	bl	8003644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3304      	adds	r3, #4
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe ffb2 	bl	8003644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b2d      	ldr	r3, [pc, #180]	; (800479c <xTaskResumeAll+0x124>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d903      	bls.n	80046f4 <xTaskResumeAll+0x7c>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <xTaskResumeAll+0x124>)
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <xTaskResumeAll+0x128>)
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7fe ff3d 	bl	800358a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <xTaskResumeAll+0x12c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800471e:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <xTaskResumeAll+0x130>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004724:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <xTaskResumeAll+0x120>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1cb      	bne.n	80046c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004732:	f000 fb55 	bl	8004de0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <xTaskResumeAll+0x134>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004742:	f000 f847 	bl	80047d4 <xTaskIncrementTick>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <xTaskResumeAll+0x130>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3b01      	subs	r3, #1
 8004756:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f1      	bne.n	8004742 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <xTaskResumeAll+0x134>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <xTaskResumeAll+0x130>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800476c:	2301      	movs	r3, #1
 800476e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <xTaskResumeAll+0x138>)
 8004772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004780:	f001 f8d8 	bl	8005934 <vPortExitCritical>

	return xAlreadyYielded;
 8004784:	68bb      	ldr	r3, [r7, #8]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	200012a8 	.word	0x200012a8
 8004794:	20001280 	.word	0x20001280
 8004798:	20001240 	.word	0x20001240
 800479c:	20001288 	.word	0x20001288
 80047a0:	20000db0 	.word	0x20000db0
 80047a4:	20000dac 	.word	0x20000dac
 80047a8:	20001294 	.word	0x20001294
 80047ac:	20001290 	.word	0x20001290
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <xTaskGetTickCount+0x1c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047c0:	687b      	ldr	r3, [r7, #4]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20001284 	.word	0x20001284

080047d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047de:	4b4f      	ldr	r3, [pc, #316]	; (800491c <xTaskIncrementTick+0x148>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 808f 	bne.w	8004906 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047e8:	4b4d      	ldr	r3, [pc, #308]	; (8004920 <xTaskIncrementTick+0x14c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047f0:	4a4b      	ldr	r2, [pc, #300]	; (8004920 <xTaskIncrementTick+0x14c>)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d120      	bne.n	800483e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047fc:	4b49      	ldr	r3, [pc, #292]	; (8004924 <xTaskIncrementTick+0x150>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <xTaskIncrementTick+0x48>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	603b      	str	r3, [r7, #0]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <xTaskIncrementTick+0x46>
 800481c:	4b41      	ldr	r3, [pc, #260]	; (8004924 <xTaskIncrementTick+0x150>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <xTaskIncrementTick+0x154>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <xTaskIncrementTick+0x150>)
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4a3f      	ldr	r2, [pc, #252]	; (8004928 <xTaskIncrementTick+0x154>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b3e      	ldr	r3, [pc, #248]	; (800492c <xTaskIncrementTick+0x158>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a3d      	ldr	r2, [pc, #244]	; (800492c <xTaskIncrementTick+0x158>)
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	f000 fad1 	bl	8004de0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <xTaskIncrementTick+0x15c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d349      	bcc.n	80048dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <xTaskIncrementTick+0x150>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <xTaskIncrementTick+0x15c>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004858:	601a      	str	r2, [r3, #0]
					break;
 800485a:	e03f      	b.n	80048dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485c:	4b31      	ldr	r3, [pc, #196]	; (8004924 <xTaskIncrementTick+0x150>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d203      	bcs.n	800487c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004874:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <xTaskIncrementTick+0x15c>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800487a:	e02f      	b.n	80048dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe fedf 	bl	8003644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3318      	adds	r3, #24
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fed6 	bl	8003644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	4b25      	ldr	r3, [pc, #148]	; (8004934 <xTaskIncrementTick+0x160>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <xTaskIncrementTick+0xd8>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <xTaskIncrementTick+0x160>)
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <xTaskIncrementTick+0x164>)
 80048ba:	441a      	add	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f7fe fe61 	bl	800358a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <xTaskIncrementTick+0x168>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d3b8      	bcc.n	8004848 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048da:	e7b5      	b.n	8004848 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <xTaskIncrementTick+0x168>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	4915      	ldr	r1, [pc, #84]	; (8004938 <xTaskIncrementTick+0x164>)
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d901      	bls.n	80048f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048f8:	4b11      	ldr	r3, [pc, #68]	; (8004940 <xTaskIncrementTick+0x16c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e004      	b.n	8004910 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <xTaskIncrementTick+0x170>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <xTaskIncrementTick+0x170>)
 800490e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004910:	697b      	ldr	r3, [r7, #20]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200012a8 	.word	0x200012a8
 8004920:	20001284 	.word	0x20001284
 8004924:	20001238 	.word	0x20001238
 8004928:	2000123c 	.word	0x2000123c
 800492c:	20001298 	.word	0x20001298
 8004930:	200012a0 	.word	0x200012a0
 8004934:	20001288 	.word	0x20001288
 8004938:	20000db0 	.word	0x20000db0
 800493c:	20000dac 	.word	0x20000dac
 8004940:	20001294 	.word	0x20001294
 8004944:	20001290 	.word	0x20001290

08004948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800494e:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <vTaskSwitchContext+0xa8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004956:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <vTaskSwitchContext+0xac>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800495c:	e041      	b.n	80049e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800495e:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <vTaskSwitchContext+0xac>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <vTaskSwitchContext+0xb0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e010      	b.n	800498e <vTaskSwitchContext+0x46>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <vTaskSwitchContext+0x40>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vTaskSwitchContext+0x3e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b01      	subs	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	491b      	ldr	r1, [pc, #108]	; (80049fc <vTaskSwitchContext+0xb4>)
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0e4      	beq.n	800496c <vTaskSwitchContext+0x24>
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <vTaskSwitchContext+0xb4>)
 80049ae:	4413      	add	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	3308      	adds	r3, #8
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d104      	bne.n	80049d2 <vTaskSwitchContext+0x8a>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <vTaskSwitchContext+0xb8>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <vTaskSwitchContext+0xb0>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6013      	str	r3, [r2, #0]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	200012a8 	.word	0x200012a8
 80049f4:	20001294 	.word	0x20001294
 80049f8:	20001288 	.word	0x20001288
 80049fc:	20000db0 	.word	0x20000db0
 8004a00:	20000dac 	.word	0x20000dac

08004a04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	60fb      	str	r3, [r7, #12]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <vTaskPlaceOnEventList+0x44>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3318      	adds	r3, #24
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fe fdcd 	bl	80035d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a38:	2101      	movs	r1, #1
 8004a3a:	6838      	ldr	r0, [r7, #0]
 8004a3c:	f000 fa7c 	bl	8004f38 <prvAddCurrentTaskToDelayedList>
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000dac 	.word	0x20000dac

08004a4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	617b      	str	r3, [r7, #20]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3318      	adds	r3, #24
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7fe fd84 	bl	800358a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	68b8      	ldr	r0, [r7, #8]
 8004a92:	f000 fa51 	bl	8004f38 <prvAddCurrentTaskToDelayedList>
	}
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000dac 	.word	0x20000dac

08004aa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	60fb      	str	r3, [r7, #12]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	3318      	adds	r3, #24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe fdb5 	bl	8003644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ada:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <xTaskRemoveFromEventList+0xb0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11d      	bne.n	8004b1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fdac 	bl	8003644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <xTaskRemoveFromEventList+0xb4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d903      	bls.n	8004b00 <xTaskRemoveFromEventList+0x5c>
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <xTaskRemoveFromEventList+0xb4>)
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <xTaskRemoveFromEventList+0xb8>)
 8004b0e:	441a      	add	r2, r3
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fe fd37 	bl	800358a <vListInsertEnd>
 8004b1c:	e005      	b.n	8004b2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3318      	adds	r3, #24
 8004b22:	4619      	mov	r1, r3
 8004b24:	480e      	ldr	r0, [pc, #56]	; (8004b60 <xTaskRemoveFromEventList+0xbc>)
 8004b26:	f7fe fd30 	bl	800358a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <xTaskRemoveFromEventList+0xc0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d905      	bls.n	8004b44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <xTaskRemoveFromEventList+0xc4>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e001      	b.n	8004b48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b48:	697b      	ldr	r3, [r7, #20]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	200012a8 	.word	0x200012a8
 8004b58:	20001288 	.word	0x20001288
 8004b5c:	20000db0 	.word	0x20000db0
 8004b60:	20001240 	.word	0x20001240
 8004b64:	20000dac 	.word	0x20000dac
 8004b68:	20001294 	.word	0x20001294

08004b6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <vTaskInternalSetTimeOutState+0x24>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <vTaskInternalSetTimeOutState+0x28>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20001298 	.word	0x20001298
 8004b94:	20001284 	.word	0x20001284

08004b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	613b      	str	r3, [r7, #16]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004bda:	f000 fe7b 	bl	80058d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bde:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <xTaskCheckForTimeOut+0xbc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf6:	d102      	bne.n	8004bfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e023      	b.n	8004c46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <xTaskCheckForTimeOut+0xc0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d007      	beq.n	8004c1a <xTaskCheckForTimeOut+0x82>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	e015      	b.n	8004c46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d20b      	bcs.n	8004c3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ff9b 	bl	8004b6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e004      	b.n	8004c46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c42:	2301      	movs	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c46:	f000 fe75 	bl	8005934 <vPortExitCritical>

	return xReturn;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20001284 	.word	0x20001284
 8004c58:	20001298 	.word	0x20001298

08004c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <vTaskMissedYield+0x14>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20001294 	.word	0x20001294

08004c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c7c:	f000 f852 	bl	8004d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <prvIdleTask+0x28>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d9f9      	bls.n	8004c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <prvIdleTask+0x2c>)
 8004c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c98:	e7f0      	b.n	8004c7c <prvIdleTask+0x8>
 8004c9a:	bf00      	nop
 8004c9c:	20000db0 	.word	0x20000db0
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	e00c      	b.n	8004cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <prvInitialiseTaskLists+0x60>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fc36 	bl	8003530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b37      	cmp	r3, #55	; 0x37
 8004cce:	d9ef      	bls.n	8004cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cd0:	480d      	ldr	r0, [pc, #52]	; (8004d08 <prvInitialiseTaskLists+0x64>)
 8004cd2:	f7fe fc2d 	bl	8003530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cd6:	480d      	ldr	r0, [pc, #52]	; (8004d0c <prvInitialiseTaskLists+0x68>)
 8004cd8:	f7fe fc2a 	bl	8003530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cdc:	480c      	ldr	r0, [pc, #48]	; (8004d10 <prvInitialiseTaskLists+0x6c>)
 8004cde:	f7fe fc27 	bl	8003530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ce2:	480c      	ldr	r0, [pc, #48]	; (8004d14 <prvInitialiseTaskLists+0x70>)
 8004ce4:	f7fe fc24 	bl	8003530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ce8:	480b      	ldr	r0, [pc, #44]	; (8004d18 <prvInitialiseTaskLists+0x74>)
 8004cea:	f7fe fc21 	bl	8003530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <prvInitialiseTaskLists+0x78>)
 8004cf0:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <prvInitialiseTaskLists+0x64>)
 8004cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvInitialiseTaskLists+0x7c>)
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <prvInitialiseTaskLists+0x68>)
 8004cf8:	601a      	str	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000db0 	.word	0x20000db0
 8004d08:	20001210 	.word	0x20001210
 8004d0c:	20001224 	.word	0x20001224
 8004d10:	20001240 	.word	0x20001240
 8004d14:	20001254 	.word	0x20001254
 8004d18:	2000126c 	.word	0x2000126c
 8004d1c:	20001238 	.word	0x20001238
 8004d20:	2000123c 	.word	0x2000123c

08004d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d2a:	e019      	b.n	8004d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d2c:	f000 fdd2 	bl	80058d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d30:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <prvCheckTasksWaitingTermination+0x50>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fc81 	bl	8003644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d42:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <prvCheckTasksWaitingTermination+0x54>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <prvCheckTasksWaitingTermination+0x54>)
 8004d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <prvCheckTasksWaitingTermination+0x58>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <prvCheckTasksWaitingTermination+0x58>)
 8004d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d56:	f000 fded 	bl	8005934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f810 	bl	8004d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <prvCheckTasksWaitingTermination+0x58>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e1      	bne.n	8004d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20001254 	.word	0x20001254
 8004d78:	20001280 	.word	0x20001280
 8004d7c:	20001268 	.word	0x20001268

08004d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d108      	bne.n	8004da4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 ff8a 	bl	8005cb0 <vPortFree>
				vPortFree( pxTCB );
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 ff87 	bl	8005cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004da2:	e018      	b.n	8004dd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d103      	bne.n	8004db6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 ff7e 	bl	8005cb0 <vPortFree>
	}
 8004db4:	e00f      	b.n	8004dd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d00a      	beq.n	8004dd6 <prvDeleteTCB+0x56>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <prvDeleteTCB+0x54>
	}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvResetNextTaskUnblockTime+0x38>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <prvResetNextTaskUnblockTime+0x3c>)
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004df8:	e008      	b.n	8004e0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <prvResetNextTaskUnblockTime+0x38>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <prvResetNextTaskUnblockTime+0x3c>)
 8004e0a:	6013      	str	r3, [r2, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	20001238 	.word	0x20001238
 8004e1c:	200012a0 	.word	0x200012a0

08004e20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <xTaskGetSchedulerState+0x34>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	607b      	str	r3, [r7, #4]
 8004e32:	e008      	b.n	8004e46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <xTaskGetSchedulerState+0x38>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	e001      	b.n	8004e46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e46:	687b      	ldr	r3, [r7, #4]
	}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	2000128c 	.word	0x2000128c
 8004e58:	200012a8 	.word	0x200012a8

08004e5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d056      	beq.n	8004f20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e72:	4b2e      	ldr	r3, [pc, #184]	; (8004f2c <xTaskPriorityDisinherit+0xd0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d00a      	beq.n	8004e92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60fb      	str	r3, [r7, #12]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	60bb      	str	r3, [r7, #8]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d02c      	beq.n	8004f20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d128      	bne.n	8004f20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fbb6 	bl	8003644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <xTaskPriorityDisinherit+0xd4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d903      	bls.n	8004f00 <xTaskPriorityDisinherit+0xa4>
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <xTaskPriorityDisinherit+0xd4>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <xTaskPriorityDisinherit+0xd8>)
 8004f0e:	441a      	add	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7fe fb37 	bl	800358a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f20:	697b      	ldr	r3, [r7, #20]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000dac 	.word	0x20000dac
 8004f30:	20001288 	.word	0x20001288
 8004f34:	20000db0 	.word	0x20000db0

08004f38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f42:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f48:	4b20      	ldr	r3, [pc, #128]	; (8004fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe fb78 	bl	8003644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5a:	d10a      	bne.n	8004f72 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4819      	ldr	r0, [pc, #100]	; (8004fd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f6c:	f7fe fb0d 	bl	800358a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f70:	e026      	b.n	8004fc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d209      	bcs.n	8004f9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe fb1b 	bl	80035d2 <vListInsert>
}
 8004f9c:	e010      	b.n	8004fc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fe fb11 	bl	80035d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d202      	bcs.n	8004fc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fba:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6013      	str	r3, [r2, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20001284 	.word	0x20001284
 8004fcc:	20000dac 	.word	0x20000dac
 8004fd0:	2000126c 	.word	0x2000126c
 8004fd4:	2000123c 	.word	0x2000123c
 8004fd8:	20001238 	.word	0x20001238
 8004fdc:	200012a0 	.word	0x200012a0

08004fe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	; 0x28
 8004fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fea:	f000 fb07 	bl	80055fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fee:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <xTimerCreateTimerTask+0x80>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d021      	beq.n	800503a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ffe:	1d3a      	adds	r2, r7, #4
 8005000:	f107 0108 	add.w	r1, r7, #8
 8005004:	f107 030c 	add.w	r3, r7, #12
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe fa77 	bl	80034fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	9202      	str	r2, [sp, #8]
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	2302      	movs	r3, #2
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2300      	movs	r3, #0
 800501e:	460a      	mov	r2, r1
 8005020:	4910      	ldr	r1, [pc, #64]	; (8005064 <xTimerCreateTimerTask+0x84>)
 8005022:	4811      	ldr	r0, [pc, #68]	; (8005068 <xTimerCreateTimerTask+0x88>)
 8005024:	f7ff f8de 	bl	80041e4 <xTaskCreateStatic>
 8005028:	4603      	mov	r3, r0
 800502a:	4a10      	ldr	r2, [pc, #64]	; (800506c <xTimerCreateTimerTask+0x8c>)
 800502c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <xTimerCreateTimerTask+0x8c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005036:	2301      	movs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005056:	697b      	ldr	r3, [r7, #20]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	200012dc 	.word	0x200012dc
 8005064:	08007318 	.word	0x08007318
 8005068:	080051a5 	.word	0x080051a5
 800506c:	200012e0 	.word	0x200012e0

08005070 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	623b      	str	r3, [r7, #32]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800509e:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <xTimerGenericCommand+0x98>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d02a      	beq.n	80050fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	dc18      	bgt.n	80050ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050b8:	f7ff feb2 	bl	8004e20 <xTaskGetSchedulerState>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d109      	bne.n	80050d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <xTimerGenericCommand+0x98>)
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f107 0110 	add.w	r1, r7, #16
 80050ca:	2300      	movs	r3, #0
 80050cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ce:	f7fe fc21 	bl	8003914 <xQueueGenericSend>
 80050d2:	6278      	str	r0, [r7, #36]	; 0x24
 80050d4:	e012      	b.n	80050fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <xTimerGenericCommand+0x98>)
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	f107 0110 	add.w	r1, r7, #16
 80050de:	2300      	movs	r3, #0
 80050e0:	2200      	movs	r2, #0
 80050e2:	f7fe fc17 	bl	8003914 <xQueueGenericSend>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24
 80050e8:	e008      	b.n	80050fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <xTimerGenericCommand+0x98>)
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f107 0110 	add.w	r1, r7, #16
 80050f2:	2300      	movs	r3, #0
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	f7fe fd0b 	bl	8003b10 <xQueueGenericSendFromISR>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200012dc 	.word	0x200012dc

0800510c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <prvProcessExpiredTimer+0x94>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	3304      	adds	r3, #4
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fa8d 	bl	8003644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d022      	beq.n	800517e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	18d1      	adds	r1, r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	f000 f8d1 	bl	80052ec <prvInsertTimerInActiveList>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01f      	beq.n	8005190 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005150:	2300      	movs	r3, #0
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	2100      	movs	r1, #0
 800515a:	6978      	ldr	r0, [r7, #20]
 800515c:	f7ff ff88 	bl	8005070 <xTimerGenericCommand>
 8005160:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d113      	bne.n	8005190 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	60fb      	str	r3, [r7, #12]
}
 800517a:	bf00      	nop
 800517c:	e7fe      	b.n	800517c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	6978      	ldr	r0, [r7, #20]
 8005196:	4798      	blx	r3
}
 8005198:	bf00      	nop
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200012d4 	.word	0x200012d4

080051a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f857 	bl	8005264 <prvGetNextExpireTime>
 80051b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f803 	bl	80051c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051c2:	f000 f8d5 	bl	8005370 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051c6:	e7f1      	b.n	80051ac <prvTimerTask+0x8>

080051c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051d2:	f7ff fa43 	bl	800465c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f866 	bl	80052ac <prvSampleTimeNow>
 80051e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d130      	bne.n	800524a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <prvProcessTimerOrBlockTask+0x3c>
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d806      	bhi.n	8005204 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051f6:	f7ff fa3f 	bl	8004678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ff85 	bl	800510c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005202:	e024      	b.n	800524e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <prvProcessTimerOrBlockTask+0x90>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <prvProcessTimerOrBlockTask+0x50>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <prvProcessTimerOrBlockTask+0x52>
 8005218:	2300      	movs	r3, #0
 800521a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800521c:	4b0f      	ldr	r3, [pc, #60]	; (800525c <prvProcessTimerOrBlockTask+0x94>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	f7fe ffa7 	bl	800417c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800522e:	f7ff fa23 	bl	8004678 <xTaskResumeAll>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <prvProcessTimerOrBlockTask+0x98>)
 800523a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	f3bf 8f6f 	isb	sy
}
 8005248:	e001      	b.n	800524e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800524a:	f7ff fa15 	bl	8004678 <xTaskResumeAll>
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	200012d8 	.word	0x200012d8
 800525c:	200012dc 	.word	0x200012dc
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800526c:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <prvGetNextExpireTime+0x44>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <prvGetNextExpireTime+0x16>
 8005276:	2201      	movs	r2, #1
 8005278:	e000      	b.n	800527c <prvGetNextExpireTime+0x18>
 800527a:	2200      	movs	r2, #0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <prvGetNextExpireTime+0x44>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e001      	b.n	8005298 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005298:	68fb      	ldr	r3, [r7, #12]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	200012d4 	.word	0x200012d4

080052ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052b4:	f7ff fa7e 	bl	80047b4 <xTaskGetTickCount>
 80052b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <prvSampleTimeNow+0x3c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d205      	bcs.n	80052d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052c4:	f000 f936 	bl	8005534 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e002      	b.n	80052d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052d6:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <prvSampleTimeNow+0x3c>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200012e4 	.word	0x200012e4

080052ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d812      	bhi.n	8005338 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005320:	2301      	movs	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e01b      	b.n	800535e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <prvInsertTimerInActiveList+0x7c>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7fe f94e 	bl	80035d2 <vListInsert>
 8005336:	e012      	b.n	800535e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d206      	bcs.n	800534e <prvInsertTimerInActiveList+0x62>
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e007      	b.n	800535e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <prvInsertTimerInActiveList+0x80>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3304      	adds	r3, #4
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f7fe f93a 	bl	80035d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800535e:	697b      	ldr	r3, [r7, #20]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200012d8 	.word	0x200012d8
 800536c:	200012d4 	.word	0x200012d4

08005370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005376:	e0ca      	b.n	800550e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	da18      	bge.n	80053b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	3304      	adds	r3, #4
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	61fb      	str	r3, [r7, #28]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a6:	6850      	ldr	r0, [r2, #4]
 80053a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	4611      	mov	r1, r2
 80053ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f2c0 80aa 	blt.w	800550c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	3304      	adds	r3, #4
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe f93b 	bl	8003644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ce:	463b      	mov	r3, r7
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff ff6b 	bl	80052ac <prvSampleTimeNow>
 80053d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b09      	cmp	r3, #9
 80053dc:	f200 8097 	bhi.w	800550e <prvProcessReceivedCommands+0x19e>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <prvProcessReceivedCommands+0x78>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005411 	.word	0x08005411
 80053f4:	08005485 	.word	0x08005485
 80053f8:	08005499 	.word	0x08005499
 80053fc:	080054e3 	.word	0x080054e3
 8005400:	08005411 	.word	0x08005411
 8005404:	08005411 	.word	0x08005411
 8005408:	08005485 	.word	0x08005485
 800540c:	08005499 	.word	0x08005499
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	b2da      	uxtb	r2, r3
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	18d1      	adds	r1, r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005430:	f7ff ff5c 	bl	80052ec <prvInsertTimerInActiveList>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d069      	beq.n	800550e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005440:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d05e      	beq.n	800550e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	441a      	add	r2, r3
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2300      	movs	r3, #0
 800545e:	2100      	movs	r1, #0
 8005460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005462:	f7ff fe05 	bl	8005070 <xTimerGenericCommand>
 8005466:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d14f      	bne.n	800550e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	61bb      	str	r3, [r7, #24]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005496:	e03a      	b.n	800550e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	617b      	str	r3, [r7, #20]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	18d1      	adds	r1, r2, r3
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054dc:	f7ff ff06 	bl	80052ec <prvInsertTimerInActiveList>
					break;
 80054e0:	e015      	b.n	800550e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d103      	bne.n	80054f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80054f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f2:	f000 fbdd 	bl	8005cb0 <vPortFree>
 80054f6:	e00a      	b.n	800550e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800550a:	e000      	b.n	800550e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800550c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <prvProcessReceivedCommands+0x1c0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	1d39      	adds	r1, r7, #4
 8005514:	2200      	movs	r2, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fb96 	bl	8003c48 <xQueueReceive>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	f47f af2a 	bne.w	8005378 <prvProcessReceivedCommands+0x8>
	}
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	3730      	adds	r7, #48	; 0x30
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200012dc 	.word	0x200012dc

08005534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800553a:	e048      	b.n	80055ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800553c:	4b2d      	ldr	r3, [pc, #180]	; (80055f4 <prvSwitchTimerLists+0xc0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005546:	4b2b      	ldr	r3, [pc, #172]	; (80055f4 <prvSwitchTimerLists+0xc0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3304      	adds	r3, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe f875 	bl	8003644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d02e      	beq.n	80055ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	429a      	cmp	r2, r3
 8005580:	d90e      	bls.n	80055a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800558e:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <prvSwitchTimerLists+0xc0>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7fe f81a 	bl	80035d2 <vListInsert>
 800559e:	e016      	b.n	80055ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055a0:	2300      	movs	r3, #0
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	2100      	movs	r1, #0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fd60 	bl	8005070 <xTimerGenericCommand>
 80055b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	603b      	str	r3, [r7, #0]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <prvSwitchTimerLists+0xc0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1b1      	bne.n	800553c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <prvSwitchTimerLists+0xc0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <prvSwitchTimerLists+0xc4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <prvSwitchTimerLists+0xc0>)
 80055e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <prvSwitchTimerLists+0xc4>)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	200012d4 	.word	0x200012d4
 80055f8:	200012d8 	.word	0x200012d8

080055fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005602:	f000 f967 	bl	80058d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005606:	4b15      	ldr	r3, [pc, #84]	; (800565c <prvCheckForValidListAndQueue+0x60>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d120      	bne.n	8005650 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800560e:	4814      	ldr	r0, [pc, #80]	; (8005660 <prvCheckForValidListAndQueue+0x64>)
 8005610:	f7fd ff8e 	bl	8003530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005614:	4813      	ldr	r0, [pc, #76]	; (8005664 <prvCheckForValidListAndQueue+0x68>)
 8005616:	f7fd ff8b 	bl	8003530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <prvCheckForValidListAndQueue+0x6c>)
 800561c:	4a10      	ldr	r2, [pc, #64]	; (8005660 <prvCheckForValidListAndQueue+0x64>)
 800561e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005620:	4b12      	ldr	r3, [pc, #72]	; (800566c <prvCheckForValidListAndQueue+0x70>)
 8005622:	4a10      	ldr	r2, [pc, #64]	; (8005664 <prvCheckForValidListAndQueue+0x68>)
 8005624:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005626:	2300      	movs	r3, #0
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4b11      	ldr	r3, [pc, #68]	; (8005670 <prvCheckForValidListAndQueue+0x74>)
 800562c:	4a11      	ldr	r2, [pc, #68]	; (8005674 <prvCheckForValidListAndQueue+0x78>)
 800562e:	2110      	movs	r1, #16
 8005630:	200a      	movs	r0, #10
 8005632:	f7fe f899 	bl	8003768 <xQueueGenericCreateStatic>
 8005636:	4603      	mov	r3, r0
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <prvCheckForValidListAndQueue+0x60>)
 800563a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <prvCheckForValidListAndQueue+0x60>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <prvCheckForValidListAndQueue+0x60>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	490b      	ldr	r1, [pc, #44]	; (8005678 <prvCheckForValidListAndQueue+0x7c>)
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fd6c 	bl	8004128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005650:	f000 f970 	bl	8005934 <vPortExitCritical>
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200012dc 	.word	0x200012dc
 8005660:	200012ac 	.word	0x200012ac
 8005664:	200012c0 	.word	0x200012c0
 8005668:	200012d4 	.word	0x200012d4
 800566c:	200012d8 	.word	0x200012d8
 8005670:	20001388 	.word	0x20001388
 8005674:	200012e8 	.word	0x200012e8
 8005678:	08007320 	.word	0x08007320

0800567c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3b04      	subs	r3, #4
 800568c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b04      	subs	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f023 0201 	bic.w	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b04      	subs	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056ac:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <pxPortInitialiseStack+0x64>)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3b14      	subs	r3, #20
 80056b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3b04      	subs	r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f06f 0202 	mvn.w	r2, #2
 80056ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b20      	subs	r3, #32
 80056d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056d2:	68fb      	ldr	r3, [r7, #12]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	080056e5 	.word	0x080056e5

080056e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <prvTaskExitError+0x54>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f6:	d00a      	beq.n	800570e <prvTaskExitError+0x2a>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60fb      	str	r3, [r7, #12]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <prvTaskExitError+0x28>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60bb      	str	r3, [r7, #8]
}
 8005720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005722:	bf00      	nop
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0fc      	beq.n	8005724 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	2000000c 	.word	0x2000000c
 800573c:	00000000 	.word	0x00000000

08005740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <pxCurrentTCBConst2>)
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	6808      	ldr	r0, [r1, #0]
 8005746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	f380 8809 	msr	PSP, r0
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8811 	msr	BASEPRI, r0
 800575a:	4770      	bx	lr
 800575c:	f3af 8000 	nop.w

08005760 <pxCurrentTCBConst2>:
 8005760:	20000dac 	.word	0x20000dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop

08005768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005768:	4808      	ldr	r0, [pc, #32]	; (800578c <prvPortStartFirstTask+0x24>)
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	6800      	ldr	r0, [r0, #0]
 800576e:	f380 8808 	msr	MSP, r0
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8814 	msr	CONTROL, r0
 800577a:	b662      	cpsie	i
 800577c:	b661      	cpsie	f
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	df00      	svc	0
 8005788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800578a:	bf00      	nop
 800578c:	e000ed08 	.word	0xe000ed08

08005790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <xPortStartScheduler+0x120>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a46      	ldr	r2, [pc, #280]	; (80058b4 <xPortStartScheduler+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10a      	bne.n	80057b6 <xPortStartScheduler+0x26>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	613b      	str	r3, [r7, #16]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057b6:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <xPortStartScheduler+0x120>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a3f      	ldr	r2, [pc, #252]	; (80058b8 <xPortStartScheduler+0x128>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10a      	bne.n	80057d6 <xPortStartScheduler+0x46>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	60fb      	str	r3, [r7, #12]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057d6:	4b39      	ldr	r3, [pc, #228]	; (80058bc <xPortStartScheduler+0x12c>)
 80057d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <xPortStartScheduler+0x130>)
 80057fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057fe:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <xPortStartScheduler+0x134>)
 8005800:	2207      	movs	r2, #7
 8005802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005804:	e009      	b.n	800581a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005806:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <xPortStartScheduler+0x134>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3b01      	subs	r3, #1
 800580c:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <xPortStartScheduler+0x134>)
 800580e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d0ef      	beq.n	8005806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <xPortStartScheduler+0x134>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1c3 0307 	rsb	r3, r3, #7
 800582e:	2b04      	cmp	r3, #4
 8005830:	d00a      	beq.n	8005848 <xPortStartScheduler+0xb8>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60bb      	str	r3, [r7, #8]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005848:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <xPortStartScheduler+0x134>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <xPortStartScheduler+0x134>)
 8005850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <xPortStartScheduler+0x134>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800585a:	4a1a      	ldr	r2, [pc, #104]	; (80058c4 <xPortStartScheduler+0x134>)
 800585c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005866:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <xPortStartScheduler+0x138>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <xPortStartScheduler+0x138>)
 800586c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <xPortStartScheduler+0x138>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <xPortStartScheduler+0x138>)
 8005878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800587c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800587e:	f000 f8dd 	bl	8005a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <xPortStartScheduler+0x13c>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005888:	f000 f8fc 	bl	8005a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <xPortStartScheduler+0x140>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <xPortStartScheduler+0x140>)
 8005892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005898:	f7ff ff66 	bl	8005768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800589c:	f7ff f854 	bl	8004948 <vTaskSwitchContext>
	prvTaskExitError();
 80058a0:	f7ff ff20 	bl	80056e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	e000ed00 	.word	0xe000ed00
 80058b4:	410fc271 	.word	0x410fc271
 80058b8:	410fc270 	.word	0x410fc270
 80058bc:	e000e400 	.word	0xe000e400
 80058c0:	200013d8 	.word	0x200013d8
 80058c4:	200013dc 	.word	0x200013dc
 80058c8:	e000ed20 	.word	0xe000ed20
 80058cc:	2000000c 	.word	0x2000000c
 80058d0:	e000ef34 	.word	0xe000ef34

080058d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <vPortEnterCritical+0x58>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	4a0d      	ldr	r2, [pc, #52]	; (800592c <vPortEnterCritical+0x58>)
 80058f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <vPortEnterCritical+0x58>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d10f      	bne.n	8005920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <vPortEnterCritical+0x5c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <vPortEnterCritical+0x4c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <vPortEnterCritical+0x4a>
	}
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	2000000c 	.word	0x2000000c
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <vPortExitCritical+0x50>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <vPortExitCritical+0x24>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	607b      	str	r3, [r7, #4]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <vPortExitCritical+0x50>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3b01      	subs	r3, #1
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <vPortExitCritical+0x50>)
 8005960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005962:	4b08      	ldr	r3, [pc, #32]	; (8005984 <vPortExitCritical+0x50>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <vPortExitCritical+0x42>
 800596a:	2300      	movs	r3, #0
 800596c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f383 8811 	msr	BASEPRI, r3
}
 8005974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000000c 	.word	0x2000000c
	...

08005990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005990:	f3ef 8009 	mrs	r0, PSP
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <pxCurrentTCBConst>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f01e 0f10 	tst.w	lr, #16
 80059a0:	bf08      	it	eq
 80059a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059b4:	f380 8811 	msr	BASEPRI, r0
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f7fe ffc2 	bl	8004948 <vTaskSwitchContext>
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f380 8811 	msr	BASEPRI, r0
 80059cc:	bc09      	pop	{r0, r3}
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	6808      	ldr	r0, [r1, #0]
 80059d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f01e 0f10 	tst.w	lr, #16
 80059da:	bf08      	it	eq
 80059dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e0:	f380 8809 	msr	PSP, r0
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst>:
 80059f0:	20000dac 	.word	0x20000dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
}
 8005a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a12:	f7fe fedf 	bl	80047d4 <xTaskIncrementTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <xPortSysTickHandler+0x40>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <vPortSetupTimerInterrupt+0x38>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <vPortSetupTimerInterrupt+0x3c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <vPortSetupTimerInterrupt+0x40>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <vPortSetupTimerInterrupt+0x44>)
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	e000e010 	.word	0xe000e010
 8005a74:	e000e018 	.word	0xe000e018
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	10624dd3 	.word	0x10624dd3
 8005a80:	e000e014 	.word	0xe000e014

08005a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a94 <vPortEnableVFP+0x10>
 8005a88:	6801      	ldr	r1, [r0, #0]
 8005a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a8e:	6001      	str	r1, [r0, #0]
 8005a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a92:	bf00      	nop
 8005a94:	e000ed88 	.word	0xe000ed88

08005a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a9e:	f3ef 8305 	mrs	r3, IPSR
 8005aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b0f      	cmp	r3, #15
 8005aa8:	d914      	bls.n	8005ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aaa:	4a17      	ldr	r2, [pc, #92]	; (8005b08 <vPortValidateInterruptPriority+0x70>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <vPortValidateInterruptPriority+0x74>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	7afa      	ldrb	r2, [r7, #11]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d20a      	bcs.n	8005ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	607b      	str	r3, [r7, #4]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <vPortValidateInterruptPriority+0x78>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <vPortValidateInterruptPriority+0x7c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d90a      	bls.n	8005afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	603b      	str	r3, [r7, #0]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <vPortValidateInterruptPriority+0x60>
	}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	e000e3f0 	.word	0xe000e3f0
 8005b0c:	200013d8 	.word	0x200013d8
 8005b10:	e000ed0c 	.word	0xe000ed0c
 8005b14:	200013dc 	.word	0x200013dc

08005b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b24:	f7fe fd9a 	bl	800465c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b28:	4b5b      	ldr	r3, [pc, #364]	; (8005c98 <pvPortMalloc+0x180>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b30:	f000 f920 	bl	8005d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b34:	4b59      	ldr	r3, [pc, #356]	; (8005c9c <pvPortMalloc+0x184>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 8093 	bne.w	8005c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01d      	beq.n	8005b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b48:	2208      	movs	r2, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d014      	beq.n	8005b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f023 0307 	bic.w	r3, r3, #7
 8005b60:	3308      	adds	r3, #8
 8005b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <pvPortMalloc+0x6c>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	617b      	str	r3, [r7, #20]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d06e      	beq.n	8005c68 <pvPortMalloc+0x150>
 8005b8a:	4b45      	ldr	r3, [pc, #276]	; (8005ca0 <pvPortMalloc+0x188>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d869      	bhi.n	8005c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b94:	4b43      	ldr	r3, [pc, #268]	; (8005ca4 <pvPortMalloc+0x18c>)
 8005b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b98:	4b42      	ldr	r3, [pc, #264]	; (8005ca4 <pvPortMalloc+0x18c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b9e:	e004      	b.n	8005baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d903      	bls.n	8005bbc <pvPortMalloc+0xa4>
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f1      	bne.n	8005ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bbc:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <pvPortMalloc+0x180>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d050      	beq.n	8005c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2208      	movs	r2, #8
 8005bcc:	4413      	add	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	2308      	movs	r3, #8
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d91f      	bls.n	8005c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <pvPortMalloc+0xf8>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	613b      	str	r3, [r7, #16]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c22:	69b8      	ldr	r0, [r7, #24]
 8005c24:	f000 f908 	bl	8005e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c28:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <pvPortMalloc+0x188>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <pvPortMalloc+0x188>)
 8005c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c36:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <pvPortMalloc+0x188>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <pvPortMalloc+0x190>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d203      	bcs.n	8005c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c42:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <pvPortMalloc+0x188>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <pvPortMalloc+0x190>)
 8005c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <pvPortMalloc+0x184>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <pvPortMalloc+0x194>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	4a11      	ldr	r2, [pc, #68]	; (8005cac <pvPortMalloc+0x194>)
 8005c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c68:	f7fe fd06 	bl	8004678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <pvPortMalloc+0x174>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	60fb      	str	r3, [r7, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <pvPortMalloc+0x172>
	return pvReturn;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3728      	adds	r7, #40	; 0x28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20001fa0 	.word	0x20001fa0
 8005c9c:	20001fb4 	.word	0x20001fb4
 8005ca0:	20001fa4 	.word	0x20001fa4
 8005ca4:	20001f98 	.word	0x20001f98
 8005ca8:	20001fa8 	.word	0x20001fa8
 8005cac:	20001fac 	.word	0x20001fac

08005cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04d      	beq.n	8005d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <vPortFree+0xb8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <vPortFree+0x44>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <vPortFree+0x62>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60bb      	str	r3, [r7, #8]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <vPortFree+0xb8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01e      	beq.n	8005d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d11a      	bne.n	8005d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <vPortFree+0xb8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	401a      	ands	r2, r3
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d38:	f7fe fc90 	bl	800465c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <vPortFree+0xbc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4413      	add	r3, r2
 8005d46:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <vPortFree+0xbc>)
 8005d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d4a:	6938      	ldr	r0, [r7, #16]
 8005d4c:	f000 f874 	bl	8005e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d50:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <vPortFree+0xc0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	4a06      	ldr	r2, [pc, #24]	; (8005d70 <vPortFree+0xc0>)
 8005d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d5a:	f7fe fc8d 	bl	8004678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d5e:	bf00      	nop
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20001fb4 	.word	0x20001fb4
 8005d6c:	20001fa4 	.word	0x20001fa4
 8005d70:	20001fb0 	.word	0x20001fb0

08005d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d80:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <prvHeapInit+0xac>)
 8005d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00c      	beq.n	8005da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3307      	adds	r3, #7
 8005d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0307 	bic.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <prvHeapInit+0xac>)
 8005da4:	4413      	add	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dac:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <prvHeapInit+0xb0>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005db2:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <prvHeapInit+0xb0>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a15      	ldr	r2, [pc, #84]	; (8005e28 <prvHeapInit+0xb4>)
 8005dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dd6:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <prvHeapInit+0xb4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dde:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <prvHeapInit+0xb4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	1ad2      	subs	r2, r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <prvHeapInit+0xb4>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <prvHeapInit+0xb8>)
 8005e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <prvHeapInit+0xbc>)
 8005e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <prvHeapInit+0xc0>)
 8005e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	200013e0 	.word	0x200013e0
 8005e24:	20001f98 	.word	0x20001f98
 8005e28:	20001fa0 	.word	0x20001fa0
 8005e2c:	20001fa8 	.word	0x20001fa8
 8005e30:	20001fa4 	.word	0x20001fa4
 8005e34:	20001fb4 	.word	0x20001fb4

08005e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e40:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <prvInsertBlockIntoFreeList+0xac>)
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e002      	b.n	8005e4c <prvInsertBlockIntoFreeList+0x14>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d8f7      	bhi.n	8005e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4413      	add	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d108      	bne.n	8005e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	441a      	add	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d118      	bne.n	8005ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d00d      	beq.n	8005eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e008      	b.n	8005ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e003      	b.n	8005ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d002      	beq.n	8005ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20001f98 	.word	0x20001f98
 8005ee8:	20001fa0 	.word	0x20001fa0

08005eec <__errno>:
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <__errno+0x8>)
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000010 	.word	0x20000010

08005ef8 <__libc_init_array>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	4d0d      	ldr	r5, [pc, #52]	; (8005f30 <__libc_init_array+0x38>)
 8005efc:	4c0d      	ldr	r4, [pc, #52]	; (8005f34 <__libc_init_array+0x3c>)
 8005efe:	1b64      	subs	r4, r4, r5
 8005f00:	10a4      	asrs	r4, r4, #2
 8005f02:	2600      	movs	r6, #0
 8005f04:	42a6      	cmp	r6, r4
 8005f06:	d109      	bne.n	8005f1c <__libc_init_array+0x24>
 8005f08:	4d0b      	ldr	r5, [pc, #44]	; (8005f38 <__libc_init_array+0x40>)
 8005f0a:	4c0c      	ldr	r4, [pc, #48]	; (8005f3c <__libc_init_array+0x44>)
 8005f0c:	f001 f9ae 	bl	800726c <_init>
 8005f10:	1b64      	subs	r4, r4, r5
 8005f12:	10a4      	asrs	r4, r4, #2
 8005f14:	2600      	movs	r6, #0
 8005f16:	42a6      	cmp	r6, r4
 8005f18:	d105      	bne.n	8005f26 <__libc_init_array+0x2e>
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f20:	4798      	blx	r3
 8005f22:	3601      	adds	r6, #1
 8005f24:	e7ee      	b.n	8005f04 <__libc_init_array+0xc>
 8005f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2a:	4798      	blx	r3
 8005f2c:	3601      	adds	r6, #1
 8005f2e:	e7f2      	b.n	8005f16 <__libc_init_array+0x1e>
 8005f30:	08007470 	.word	0x08007470
 8005f34:	08007470 	.word	0x08007470
 8005f38:	08007470 	.word	0x08007470
 8005f3c:	08007474 	.word	0x08007474

08005f40 <memcmp>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	3901      	subs	r1, #1
 8005f44:	4402      	add	r2, r0
 8005f46:	4290      	cmp	r0, r2
 8005f48:	d101      	bne.n	8005f4e <memcmp+0xe>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e005      	b.n	8005f5a <memcmp+0x1a>
 8005f4e:	7803      	ldrb	r3, [r0, #0]
 8005f50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d001      	beq.n	8005f5c <memcmp+0x1c>
 8005f58:	1b18      	subs	r0, r3, r4
 8005f5a:	bd10      	pop	{r4, pc}
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	e7f2      	b.n	8005f46 <memcmp+0x6>

08005f60 <memcpy>:
 8005f60:	440a      	add	r2, r1
 8005f62:	4291      	cmp	r1, r2
 8005f64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f68:	d100      	bne.n	8005f6c <memcpy+0xc>
 8005f6a:	4770      	bx	lr
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f76:	4291      	cmp	r1, r2
 8005f78:	d1f9      	bne.n	8005f6e <memcpy+0xe>
 8005f7a:	bd10      	pop	{r4, pc}

08005f7c <memset>:
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d100      	bne.n	8005f86 <memset+0xa>
 8005f84:	4770      	bx	lr
 8005f86:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8a:	e7f9      	b.n	8005f80 <memset+0x4>

08005f8c <iprintf>:
 8005f8c:	b40f      	push	{r0, r1, r2, r3}
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <iprintf+0x2c>)
 8005f90:	b513      	push	{r0, r1, r4, lr}
 8005f92:	681c      	ldr	r4, [r3, #0]
 8005f94:	b124      	cbz	r4, 8005fa0 <iprintf+0x14>
 8005f96:	69a3      	ldr	r3, [r4, #24]
 8005f98:	b913      	cbnz	r3, 8005fa0 <iprintf+0x14>
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f89a 	bl	80060d4 <__sinit>
 8005fa0:	ab05      	add	r3, sp, #20
 8005fa2:	9a04      	ldr	r2, [sp, #16]
 8005fa4:	68a1      	ldr	r1, [r4, #8]
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 fb4d 	bl	8006648 <_vfiprintf_r>
 8005fae:	b002      	add	sp, #8
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	b004      	add	sp, #16
 8005fb6:	4770      	bx	lr
 8005fb8:	20000010 	.word	0x20000010

08005fbc <sniprintf>:
 8005fbc:	b40c      	push	{r2, r3}
 8005fbe:	b530      	push	{r4, r5, lr}
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <sniprintf+0x64>)
 8005fc2:	1e0c      	subs	r4, r1, #0
 8005fc4:	681d      	ldr	r5, [r3, #0]
 8005fc6:	b09d      	sub	sp, #116	; 0x74
 8005fc8:	da08      	bge.n	8005fdc <sniprintf+0x20>
 8005fca:	238b      	movs	r3, #139	; 0x8b
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fd2:	b01d      	add	sp, #116	; 0x74
 8005fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fd8:	b002      	add	sp, #8
 8005fda:	4770      	bx	lr
 8005fdc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005fe0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fe4:	bf14      	ite	ne
 8005fe6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005fea:	4623      	moveq	r3, r4
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	9307      	str	r3, [sp, #28]
 8005ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff4:	9002      	str	r0, [sp, #8]
 8005ff6:	9006      	str	r0, [sp, #24]
 8005ff8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ffc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ffe:	ab21      	add	r3, sp, #132	; 0x84
 8006000:	a902      	add	r1, sp, #8
 8006002:	4628      	mov	r0, r5
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f000 f9f5 	bl	80063f4 <_svfiprintf_r>
 800600a:	1c43      	adds	r3, r0, #1
 800600c:	bfbc      	itt	lt
 800600e:	238b      	movlt	r3, #139	; 0x8b
 8006010:	602b      	strlt	r3, [r5, #0]
 8006012:	2c00      	cmp	r4, #0
 8006014:	d0dd      	beq.n	8005fd2 <sniprintf+0x16>
 8006016:	9b02      	ldr	r3, [sp, #8]
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	e7d9      	b.n	8005fd2 <sniprintf+0x16>
 800601e:	bf00      	nop
 8006020:	20000010 	.word	0x20000010

08006024 <std>:
 8006024:	2300      	movs	r3, #0
 8006026:	b510      	push	{r4, lr}
 8006028:	4604      	mov	r4, r0
 800602a:	e9c0 3300 	strd	r3, r3, [r0]
 800602e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006032:	6083      	str	r3, [r0, #8]
 8006034:	8181      	strh	r1, [r0, #12]
 8006036:	6643      	str	r3, [r0, #100]	; 0x64
 8006038:	81c2      	strh	r2, [r0, #14]
 800603a:	6183      	str	r3, [r0, #24]
 800603c:	4619      	mov	r1, r3
 800603e:	2208      	movs	r2, #8
 8006040:	305c      	adds	r0, #92	; 0x5c
 8006042:	f7ff ff9b 	bl	8005f7c <memset>
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <std+0x38>)
 8006048:	6263      	str	r3, [r4, #36]	; 0x24
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <std+0x3c>)
 800604c:	62a3      	str	r3, [r4, #40]	; 0x28
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <std+0x40>)
 8006050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006052:	4b05      	ldr	r3, [pc, #20]	; (8006068 <std+0x44>)
 8006054:	6224      	str	r4, [r4, #32]
 8006056:	6323      	str	r3, [r4, #48]	; 0x30
 8006058:	bd10      	pop	{r4, pc}
 800605a:	bf00      	nop
 800605c:	08006bf1 	.word	0x08006bf1
 8006060:	08006c13 	.word	0x08006c13
 8006064:	08006c4b 	.word	0x08006c4b
 8006068:	08006c6f 	.word	0x08006c6f

0800606c <_cleanup_r>:
 800606c:	4901      	ldr	r1, [pc, #4]	; (8006074 <_cleanup_r+0x8>)
 800606e:	f000 b8af 	b.w	80061d0 <_fwalk_reent>
 8006072:	bf00      	nop
 8006074:	08006f49 	.word	0x08006f49

08006078 <__sfmoreglue>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	2268      	movs	r2, #104	; 0x68
 800607c:	1e4d      	subs	r5, r1, #1
 800607e:	4355      	muls	r5, r2
 8006080:	460e      	mov	r6, r1
 8006082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006086:	f000 f8e5 	bl	8006254 <_malloc_r>
 800608a:	4604      	mov	r4, r0
 800608c:	b140      	cbz	r0, 80060a0 <__sfmoreglue+0x28>
 800608e:	2100      	movs	r1, #0
 8006090:	e9c0 1600 	strd	r1, r6, [r0]
 8006094:	300c      	adds	r0, #12
 8006096:	60a0      	str	r0, [r4, #8]
 8006098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800609c:	f7ff ff6e 	bl	8005f7c <memset>
 80060a0:	4620      	mov	r0, r4
 80060a2:	bd70      	pop	{r4, r5, r6, pc}

080060a4 <__sfp_lock_acquire>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__sfp_lock_acquire+0x8>)
 80060a6:	f000 b8b3 	b.w	8006210 <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	20001fb9 	.word	0x20001fb9

080060b0 <__sfp_lock_release>:
 80060b0:	4801      	ldr	r0, [pc, #4]	; (80060b8 <__sfp_lock_release+0x8>)
 80060b2:	f000 b8ae 	b.w	8006212 <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	20001fb9 	.word	0x20001fb9

080060bc <__sinit_lock_acquire>:
 80060bc:	4801      	ldr	r0, [pc, #4]	; (80060c4 <__sinit_lock_acquire+0x8>)
 80060be:	f000 b8a7 	b.w	8006210 <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	20001fba 	.word	0x20001fba

080060c8 <__sinit_lock_release>:
 80060c8:	4801      	ldr	r0, [pc, #4]	; (80060d0 <__sinit_lock_release+0x8>)
 80060ca:	f000 b8a2 	b.w	8006212 <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	20001fba 	.word	0x20001fba

080060d4 <__sinit>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4604      	mov	r4, r0
 80060d8:	f7ff fff0 	bl	80060bc <__sinit_lock_acquire>
 80060dc:	69a3      	ldr	r3, [r4, #24]
 80060de:	b11b      	cbz	r3, 80060e8 <__sinit+0x14>
 80060e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e4:	f7ff bff0 	b.w	80060c8 <__sinit_lock_release>
 80060e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060ec:	6523      	str	r3, [r4, #80]	; 0x50
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <__sinit+0x68>)
 80060f0:	4a13      	ldr	r2, [pc, #76]	; (8006140 <__sinit+0x6c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	bf04      	itt	eq
 80060fa:	2301      	moveq	r3, #1
 80060fc:	61a3      	streq	r3, [r4, #24]
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 f820 	bl	8006144 <__sfp>
 8006104:	6060      	str	r0, [r4, #4]
 8006106:	4620      	mov	r0, r4
 8006108:	f000 f81c 	bl	8006144 <__sfp>
 800610c:	60a0      	str	r0, [r4, #8]
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f818 	bl	8006144 <__sfp>
 8006114:	2200      	movs	r2, #0
 8006116:	60e0      	str	r0, [r4, #12]
 8006118:	2104      	movs	r1, #4
 800611a:	6860      	ldr	r0, [r4, #4]
 800611c:	f7ff ff82 	bl	8006024 <std>
 8006120:	68a0      	ldr	r0, [r4, #8]
 8006122:	2201      	movs	r2, #1
 8006124:	2109      	movs	r1, #9
 8006126:	f7ff ff7d 	bl	8006024 <std>
 800612a:	68e0      	ldr	r0, [r4, #12]
 800612c:	2202      	movs	r2, #2
 800612e:	2112      	movs	r1, #18
 8006130:	f7ff ff78 	bl	8006024 <std>
 8006134:	2301      	movs	r3, #1
 8006136:	61a3      	str	r3, [r4, #24]
 8006138:	e7d2      	b.n	80060e0 <__sinit+0xc>
 800613a:	bf00      	nop
 800613c:	080073d0 	.word	0x080073d0
 8006140:	0800606d 	.word	0x0800606d

08006144 <__sfp>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	4607      	mov	r7, r0
 8006148:	f7ff ffac 	bl	80060a4 <__sfp_lock_acquire>
 800614c:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <__sfp+0x84>)
 800614e:	681e      	ldr	r6, [r3, #0]
 8006150:	69b3      	ldr	r3, [r6, #24]
 8006152:	b913      	cbnz	r3, 800615a <__sfp+0x16>
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff ffbd 	bl	80060d4 <__sinit>
 800615a:	3648      	adds	r6, #72	; 0x48
 800615c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	d503      	bpl.n	800616c <__sfp+0x28>
 8006164:	6833      	ldr	r3, [r6, #0]
 8006166:	b30b      	cbz	r3, 80061ac <__sfp+0x68>
 8006168:	6836      	ldr	r6, [r6, #0]
 800616a:	e7f7      	b.n	800615c <__sfp+0x18>
 800616c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006170:	b9d5      	cbnz	r5, 80061a8 <__sfp+0x64>
 8006172:	4b16      	ldr	r3, [pc, #88]	; (80061cc <__sfp+0x88>)
 8006174:	60e3      	str	r3, [r4, #12]
 8006176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800617a:	6665      	str	r5, [r4, #100]	; 0x64
 800617c:	f000 f847 	bl	800620e <__retarget_lock_init_recursive>
 8006180:	f7ff ff96 	bl	80060b0 <__sfp_lock_release>
 8006184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800618c:	6025      	str	r5, [r4, #0]
 800618e:	61a5      	str	r5, [r4, #24]
 8006190:	2208      	movs	r2, #8
 8006192:	4629      	mov	r1, r5
 8006194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006198:	f7ff fef0 	bl	8005f7c <memset>
 800619c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061a4:	4620      	mov	r0, r4
 80061a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a8:	3468      	adds	r4, #104	; 0x68
 80061aa:	e7d9      	b.n	8006160 <__sfp+0x1c>
 80061ac:	2104      	movs	r1, #4
 80061ae:	4638      	mov	r0, r7
 80061b0:	f7ff ff62 	bl	8006078 <__sfmoreglue>
 80061b4:	4604      	mov	r4, r0
 80061b6:	6030      	str	r0, [r6, #0]
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d1d5      	bne.n	8006168 <__sfp+0x24>
 80061bc:	f7ff ff78 	bl	80060b0 <__sfp_lock_release>
 80061c0:	230c      	movs	r3, #12
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	e7ee      	b.n	80061a4 <__sfp+0x60>
 80061c6:	bf00      	nop
 80061c8:	080073d0 	.word	0x080073d0
 80061cc:	ffff0001 	.word	0xffff0001

080061d0 <_fwalk_reent>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4606      	mov	r6, r0
 80061d6:	4688      	mov	r8, r1
 80061d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061dc:	2700      	movs	r7, #0
 80061de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061e2:	f1b9 0901 	subs.w	r9, r9, #1
 80061e6:	d505      	bpl.n	80061f4 <_fwalk_reent+0x24>
 80061e8:	6824      	ldr	r4, [r4, #0]
 80061ea:	2c00      	cmp	r4, #0
 80061ec:	d1f7      	bne.n	80061de <_fwalk_reent+0xe>
 80061ee:	4638      	mov	r0, r7
 80061f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f4:	89ab      	ldrh	r3, [r5, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d907      	bls.n	800620a <_fwalk_reent+0x3a>
 80061fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fe:	3301      	adds	r3, #1
 8006200:	d003      	beq.n	800620a <_fwalk_reent+0x3a>
 8006202:	4629      	mov	r1, r5
 8006204:	4630      	mov	r0, r6
 8006206:	47c0      	blx	r8
 8006208:	4307      	orrs	r7, r0
 800620a:	3568      	adds	r5, #104	; 0x68
 800620c:	e7e9      	b.n	80061e2 <_fwalk_reent+0x12>

0800620e <__retarget_lock_init_recursive>:
 800620e:	4770      	bx	lr

08006210 <__retarget_lock_acquire_recursive>:
 8006210:	4770      	bx	lr

08006212 <__retarget_lock_release_recursive>:
 8006212:	4770      	bx	lr

08006214 <sbrk_aligned>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4e0e      	ldr	r6, [pc, #56]	; (8006250 <sbrk_aligned+0x3c>)
 8006218:	460c      	mov	r4, r1
 800621a:	6831      	ldr	r1, [r6, #0]
 800621c:	4605      	mov	r5, r0
 800621e:	b911      	cbnz	r1, 8006226 <sbrk_aligned+0x12>
 8006220:	f000 fcd6 	bl	8006bd0 <_sbrk_r>
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	4621      	mov	r1, r4
 8006228:	4628      	mov	r0, r5
 800622a:	f000 fcd1 	bl	8006bd0 <_sbrk_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d00a      	beq.n	8006248 <sbrk_aligned+0x34>
 8006232:	1cc4      	adds	r4, r0, #3
 8006234:	f024 0403 	bic.w	r4, r4, #3
 8006238:	42a0      	cmp	r0, r4
 800623a:	d007      	beq.n	800624c <sbrk_aligned+0x38>
 800623c:	1a21      	subs	r1, r4, r0
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fcc6 	bl	8006bd0 <_sbrk_r>
 8006244:	3001      	adds	r0, #1
 8006246:	d101      	bne.n	800624c <sbrk_aligned+0x38>
 8006248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800624c:	4620      	mov	r0, r4
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	20001fc0 	.word	0x20001fc0

08006254 <_malloc_r>:
 8006254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006258:	1ccd      	adds	r5, r1, #3
 800625a:	f025 0503 	bic.w	r5, r5, #3
 800625e:	3508      	adds	r5, #8
 8006260:	2d0c      	cmp	r5, #12
 8006262:	bf38      	it	cc
 8006264:	250c      	movcc	r5, #12
 8006266:	2d00      	cmp	r5, #0
 8006268:	4607      	mov	r7, r0
 800626a:	db01      	blt.n	8006270 <_malloc_r+0x1c>
 800626c:	42a9      	cmp	r1, r5
 800626e:	d905      	bls.n	800627c <_malloc_r+0x28>
 8006270:	230c      	movs	r3, #12
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	2600      	movs	r6, #0
 8006276:	4630      	mov	r0, r6
 8006278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800627c:	4e2e      	ldr	r6, [pc, #184]	; (8006338 <_malloc_r+0xe4>)
 800627e:	f000 ff31 	bl	80070e4 <__malloc_lock>
 8006282:	6833      	ldr	r3, [r6, #0]
 8006284:	461c      	mov	r4, r3
 8006286:	bb34      	cbnz	r4, 80062d6 <_malloc_r+0x82>
 8006288:	4629      	mov	r1, r5
 800628a:	4638      	mov	r0, r7
 800628c:	f7ff ffc2 	bl	8006214 <sbrk_aligned>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	4604      	mov	r4, r0
 8006294:	d14d      	bne.n	8006332 <_malloc_r+0xde>
 8006296:	6834      	ldr	r4, [r6, #0]
 8006298:	4626      	mov	r6, r4
 800629a:	2e00      	cmp	r6, #0
 800629c:	d140      	bne.n	8006320 <_malloc_r+0xcc>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	4631      	mov	r1, r6
 80062a2:	4638      	mov	r0, r7
 80062a4:	eb04 0803 	add.w	r8, r4, r3
 80062a8:	f000 fc92 	bl	8006bd0 <_sbrk_r>
 80062ac:	4580      	cmp	r8, r0
 80062ae:	d13a      	bne.n	8006326 <_malloc_r+0xd2>
 80062b0:	6821      	ldr	r1, [r4, #0]
 80062b2:	3503      	adds	r5, #3
 80062b4:	1a6d      	subs	r5, r5, r1
 80062b6:	f025 0503 	bic.w	r5, r5, #3
 80062ba:	3508      	adds	r5, #8
 80062bc:	2d0c      	cmp	r5, #12
 80062be:	bf38      	it	cc
 80062c0:	250c      	movcc	r5, #12
 80062c2:	4629      	mov	r1, r5
 80062c4:	4638      	mov	r0, r7
 80062c6:	f7ff ffa5 	bl	8006214 <sbrk_aligned>
 80062ca:	3001      	adds	r0, #1
 80062cc:	d02b      	beq.n	8006326 <_malloc_r+0xd2>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	442b      	add	r3, r5
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	e00e      	b.n	80062f4 <_malloc_r+0xa0>
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	1b52      	subs	r2, r2, r5
 80062da:	d41e      	bmi.n	800631a <_malloc_r+0xc6>
 80062dc:	2a0b      	cmp	r2, #11
 80062de:	d916      	bls.n	800630e <_malloc_r+0xba>
 80062e0:	1961      	adds	r1, r4, r5
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	6025      	str	r5, [r4, #0]
 80062e6:	bf18      	it	ne
 80062e8:	6059      	strne	r1, [r3, #4]
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	bf08      	it	eq
 80062ee:	6031      	streq	r1, [r6, #0]
 80062f0:	5162      	str	r2, [r4, r5]
 80062f2:	604b      	str	r3, [r1, #4]
 80062f4:	4638      	mov	r0, r7
 80062f6:	f104 060b 	add.w	r6, r4, #11
 80062fa:	f000 fef9 	bl	80070f0 <__malloc_unlock>
 80062fe:	f026 0607 	bic.w	r6, r6, #7
 8006302:	1d23      	adds	r3, r4, #4
 8006304:	1af2      	subs	r2, r6, r3
 8006306:	d0b6      	beq.n	8006276 <_malloc_r+0x22>
 8006308:	1b9b      	subs	r3, r3, r6
 800630a:	50a3      	str	r3, [r4, r2]
 800630c:	e7b3      	b.n	8006276 <_malloc_r+0x22>
 800630e:	6862      	ldr	r2, [r4, #4]
 8006310:	42a3      	cmp	r3, r4
 8006312:	bf0c      	ite	eq
 8006314:	6032      	streq	r2, [r6, #0]
 8006316:	605a      	strne	r2, [r3, #4]
 8006318:	e7ec      	b.n	80062f4 <_malloc_r+0xa0>
 800631a:	4623      	mov	r3, r4
 800631c:	6864      	ldr	r4, [r4, #4]
 800631e:	e7b2      	b.n	8006286 <_malloc_r+0x32>
 8006320:	4634      	mov	r4, r6
 8006322:	6876      	ldr	r6, [r6, #4]
 8006324:	e7b9      	b.n	800629a <_malloc_r+0x46>
 8006326:	230c      	movs	r3, #12
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4638      	mov	r0, r7
 800632c:	f000 fee0 	bl	80070f0 <__malloc_unlock>
 8006330:	e7a1      	b.n	8006276 <_malloc_r+0x22>
 8006332:	6025      	str	r5, [r4, #0]
 8006334:	e7de      	b.n	80062f4 <_malloc_r+0xa0>
 8006336:	bf00      	nop
 8006338:	20001fbc 	.word	0x20001fbc

0800633c <__ssputs_r>:
 800633c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006340:	688e      	ldr	r6, [r1, #8]
 8006342:	429e      	cmp	r6, r3
 8006344:	4682      	mov	sl, r0
 8006346:	460c      	mov	r4, r1
 8006348:	4690      	mov	r8, r2
 800634a:	461f      	mov	r7, r3
 800634c:	d838      	bhi.n	80063c0 <__ssputs_r+0x84>
 800634e:	898a      	ldrh	r2, [r1, #12]
 8006350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006354:	d032      	beq.n	80063bc <__ssputs_r+0x80>
 8006356:	6825      	ldr	r5, [r4, #0]
 8006358:	6909      	ldr	r1, [r1, #16]
 800635a:	eba5 0901 	sub.w	r9, r5, r1
 800635e:	6965      	ldr	r5, [r4, #20]
 8006360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006368:	3301      	adds	r3, #1
 800636a:	444b      	add	r3, r9
 800636c:	106d      	asrs	r5, r5, #1
 800636e:	429d      	cmp	r5, r3
 8006370:	bf38      	it	cc
 8006372:	461d      	movcc	r5, r3
 8006374:	0553      	lsls	r3, r2, #21
 8006376:	d531      	bpl.n	80063dc <__ssputs_r+0xa0>
 8006378:	4629      	mov	r1, r5
 800637a:	f7ff ff6b 	bl	8006254 <_malloc_r>
 800637e:	4606      	mov	r6, r0
 8006380:	b950      	cbnz	r0, 8006398 <__ssputs_r+0x5c>
 8006382:	230c      	movs	r3, #12
 8006384:	f8ca 3000 	str.w	r3, [sl]
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006398:	6921      	ldr	r1, [r4, #16]
 800639a:	464a      	mov	r2, r9
 800639c:	f7ff fde0 	bl	8005f60 <memcpy>
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	6126      	str	r6, [r4, #16]
 80063ae:	6165      	str	r5, [r4, #20]
 80063b0:	444e      	add	r6, r9
 80063b2:	eba5 0509 	sub.w	r5, r5, r9
 80063b6:	6026      	str	r6, [r4, #0]
 80063b8:	60a5      	str	r5, [r4, #8]
 80063ba:	463e      	mov	r6, r7
 80063bc:	42be      	cmp	r6, r7
 80063be:	d900      	bls.n	80063c2 <__ssputs_r+0x86>
 80063c0:	463e      	mov	r6, r7
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	4632      	mov	r2, r6
 80063c6:	4641      	mov	r1, r8
 80063c8:	f000 fe72 	bl	80070b0 <memmove>
 80063cc:	68a3      	ldr	r3, [r4, #8]
 80063ce:	1b9b      	subs	r3, r3, r6
 80063d0:	60a3      	str	r3, [r4, #8]
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	4433      	add	r3, r6
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	2000      	movs	r0, #0
 80063da:	e7db      	b.n	8006394 <__ssputs_r+0x58>
 80063dc:	462a      	mov	r2, r5
 80063de:	f000 fed9 	bl	8007194 <_realloc_r>
 80063e2:	4606      	mov	r6, r0
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d1e1      	bne.n	80063ac <__ssputs_r+0x70>
 80063e8:	6921      	ldr	r1, [r4, #16]
 80063ea:	4650      	mov	r0, sl
 80063ec:	f000 fe86 	bl	80070fc <_free_r>
 80063f0:	e7c7      	b.n	8006382 <__ssputs_r+0x46>
	...

080063f4 <_svfiprintf_r>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	4698      	mov	r8, r3
 80063fa:	898b      	ldrh	r3, [r1, #12]
 80063fc:	061b      	lsls	r3, r3, #24
 80063fe:	b09d      	sub	sp, #116	; 0x74
 8006400:	4607      	mov	r7, r0
 8006402:	460d      	mov	r5, r1
 8006404:	4614      	mov	r4, r2
 8006406:	d50e      	bpl.n	8006426 <_svfiprintf_r+0x32>
 8006408:	690b      	ldr	r3, [r1, #16]
 800640a:	b963      	cbnz	r3, 8006426 <_svfiprintf_r+0x32>
 800640c:	2140      	movs	r1, #64	; 0x40
 800640e:	f7ff ff21 	bl	8006254 <_malloc_r>
 8006412:	6028      	str	r0, [r5, #0]
 8006414:	6128      	str	r0, [r5, #16]
 8006416:	b920      	cbnz	r0, 8006422 <_svfiprintf_r+0x2e>
 8006418:	230c      	movs	r3, #12
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006420:	e0d1      	b.n	80065c6 <_svfiprintf_r+0x1d2>
 8006422:	2340      	movs	r3, #64	; 0x40
 8006424:	616b      	str	r3, [r5, #20]
 8006426:	2300      	movs	r3, #0
 8006428:	9309      	str	r3, [sp, #36]	; 0x24
 800642a:	2320      	movs	r3, #32
 800642c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006430:	f8cd 800c 	str.w	r8, [sp, #12]
 8006434:	2330      	movs	r3, #48	; 0x30
 8006436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065e0 <_svfiprintf_r+0x1ec>
 800643a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800643e:	f04f 0901 	mov.w	r9, #1
 8006442:	4623      	mov	r3, r4
 8006444:	469a      	mov	sl, r3
 8006446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800644a:	b10a      	cbz	r2, 8006450 <_svfiprintf_r+0x5c>
 800644c:	2a25      	cmp	r2, #37	; 0x25
 800644e:	d1f9      	bne.n	8006444 <_svfiprintf_r+0x50>
 8006450:	ebba 0b04 	subs.w	fp, sl, r4
 8006454:	d00b      	beq.n	800646e <_svfiprintf_r+0x7a>
 8006456:	465b      	mov	r3, fp
 8006458:	4622      	mov	r2, r4
 800645a:	4629      	mov	r1, r5
 800645c:	4638      	mov	r0, r7
 800645e:	f7ff ff6d 	bl	800633c <__ssputs_r>
 8006462:	3001      	adds	r0, #1
 8006464:	f000 80aa 	beq.w	80065bc <_svfiprintf_r+0x1c8>
 8006468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800646a:	445a      	add	r2, fp
 800646c:	9209      	str	r2, [sp, #36]	; 0x24
 800646e:	f89a 3000 	ldrb.w	r3, [sl]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80a2 	beq.w	80065bc <_svfiprintf_r+0x1c8>
 8006478:	2300      	movs	r3, #0
 800647a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800647e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006482:	f10a 0a01 	add.w	sl, sl, #1
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	9307      	str	r3, [sp, #28]
 800648a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800648e:	931a      	str	r3, [sp, #104]	; 0x68
 8006490:	4654      	mov	r4, sl
 8006492:	2205      	movs	r2, #5
 8006494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006498:	4851      	ldr	r0, [pc, #324]	; (80065e0 <_svfiprintf_r+0x1ec>)
 800649a:	f7f9 fea1 	bl	80001e0 <memchr>
 800649e:	9a04      	ldr	r2, [sp, #16]
 80064a0:	b9d8      	cbnz	r0, 80064da <_svfiprintf_r+0xe6>
 80064a2:	06d0      	lsls	r0, r2, #27
 80064a4:	bf44      	itt	mi
 80064a6:	2320      	movmi	r3, #32
 80064a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ac:	0711      	lsls	r1, r2, #28
 80064ae:	bf44      	itt	mi
 80064b0:	232b      	movmi	r3, #43	; 0x2b
 80064b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064b6:	f89a 3000 	ldrb.w	r3, [sl]
 80064ba:	2b2a      	cmp	r3, #42	; 0x2a
 80064bc:	d015      	beq.n	80064ea <_svfiprintf_r+0xf6>
 80064be:	9a07      	ldr	r2, [sp, #28]
 80064c0:	4654      	mov	r4, sl
 80064c2:	2000      	movs	r0, #0
 80064c4:	f04f 0c0a 	mov.w	ip, #10
 80064c8:	4621      	mov	r1, r4
 80064ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ce:	3b30      	subs	r3, #48	; 0x30
 80064d0:	2b09      	cmp	r3, #9
 80064d2:	d94e      	bls.n	8006572 <_svfiprintf_r+0x17e>
 80064d4:	b1b0      	cbz	r0, 8006504 <_svfiprintf_r+0x110>
 80064d6:	9207      	str	r2, [sp, #28]
 80064d8:	e014      	b.n	8006504 <_svfiprintf_r+0x110>
 80064da:	eba0 0308 	sub.w	r3, r0, r8
 80064de:	fa09 f303 	lsl.w	r3, r9, r3
 80064e2:	4313      	orrs	r3, r2
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	46a2      	mov	sl, r4
 80064e8:	e7d2      	b.n	8006490 <_svfiprintf_r+0x9c>
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	1d19      	adds	r1, r3, #4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	9103      	str	r1, [sp, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bfbb      	ittet	lt
 80064f6:	425b      	neglt	r3, r3
 80064f8:	f042 0202 	orrlt.w	r2, r2, #2
 80064fc:	9307      	strge	r3, [sp, #28]
 80064fe:	9307      	strlt	r3, [sp, #28]
 8006500:	bfb8      	it	lt
 8006502:	9204      	strlt	r2, [sp, #16]
 8006504:	7823      	ldrb	r3, [r4, #0]
 8006506:	2b2e      	cmp	r3, #46	; 0x2e
 8006508:	d10c      	bne.n	8006524 <_svfiprintf_r+0x130>
 800650a:	7863      	ldrb	r3, [r4, #1]
 800650c:	2b2a      	cmp	r3, #42	; 0x2a
 800650e:	d135      	bne.n	800657c <_svfiprintf_r+0x188>
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	1d1a      	adds	r2, r3, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	9203      	str	r2, [sp, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	bfb8      	it	lt
 800651c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006520:	3402      	adds	r4, #2
 8006522:	9305      	str	r3, [sp, #20]
 8006524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065f0 <_svfiprintf_r+0x1fc>
 8006528:	7821      	ldrb	r1, [r4, #0]
 800652a:	2203      	movs	r2, #3
 800652c:	4650      	mov	r0, sl
 800652e:	f7f9 fe57 	bl	80001e0 <memchr>
 8006532:	b140      	cbz	r0, 8006546 <_svfiprintf_r+0x152>
 8006534:	2340      	movs	r3, #64	; 0x40
 8006536:	eba0 000a 	sub.w	r0, r0, sl
 800653a:	fa03 f000 	lsl.w	r0, r3, r0
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	4303      	orrs	r3, r0
 8006542:	3401      	adds	r4, #1
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654a:	4826      	ldr	r0, [pc, #152]	; (80065e4 <_svfiprintf_r+0x1f0>)
 800654c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006550:	2206      	movs	r2, #6
 8006552:	f7f9 fe45 	bl	80001e0 <memchr>
 8006556:	2800      	cmp	r0, #0
 8006558:	d038      	beq.n	80065cc <_svfiprintf_r+0x1d8>
 800655a:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <_svfiprintf_r+0x1f4>)
 800655c:	bb1b      	cbnz	r3, 80065a6 <_svfiprintf_r+0x1b2>
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	3307      	adds	r3, #7
 8006562:	f023 0307 	bic.w	r3, r3, #7
 8006566:	3308      	adds	r3, #8
 8006568:	9303      	str	r3, [sp, #12]
 800656a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656c:	4433      	add	r3, r6
 800656e:	9309      	str	r3, [sp, #36]	; 0x24
 8006570:	e767      	b.n	8006442 <_svfiprintf_r+0x4e>
 8006572:	fb0c 3202 	mla	r2, ip, r2, r3
 8006576:	460c      	mov	r4, r1
 8006578:	2001      	movs	r0, #1
 800657a:	e7a5      	b.n	80064c8 <_svfiprintf_r+0xd4>
 800657c:	2300      	movs	r3, #0
 800657e:	3401      	adds	r4, #1
 8006580:	9305      	str	r3, [sp, #20]
 8006582:	4619      	mov	r1, r3
 8006584:	f04f 0c0a 	mov.w	ip, #10
 8006588:	4620      	mov	r0, r4
 800658a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800658e:	3a30      	subs	r2, #48	; 0x30
 8006590:	2a09      	cmp	r2, #9
 8006592:	d903      	bls.n	800659c <_svfiprintf_r+0x1a8>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0c5      	beq.n	8006524 <_svfiprintf_r+0x130>
 8006598:	9105      	str	r1, [sp, #20]
 800659a:	e7c3      	b.n	8006524 <_svfiprintf_r+0x130>
 800659c:	fb0c 2101 	mla	r1, ip, r1, r2
 80065a0:	4604      	mov	r4, r0
 80065a2:	2301      	movs	r3, #1
 80065a4:	e7f0      	b.n	8006588 <_svfiprintf_r+0x194>
 80065a6:	ab03      	add	r3, sp, #12
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	462a      	mov	r2, r5
 80065ac:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <_svfiprintf_r+0x1f8>)
 80065ae:	a904      	add	r1, sp, #16
 80065b0:	4638      	mov	r0, r7
 80065b2:	f3af 8000 	nop.w
 80065b6:	1c42      	adds	r2, r0, #1
 80065b8:	4606      	mov	r6, r0
 80065ba:	d1d6      	bne.n	800656a <_svfiprintf_r+0x176>
 80065bc:	89ab      	ldrh	r3, [r5, #12]
 80065be:	065b      	lsls	r3, r3, #25
 80065c0:	f53f af2c 	bmi.w	800641c <_svfiprintf_r+0x28>
 80065c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065c6:	b01d      	add	sp, #116	; 0x74
 80065c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065cc:	ab03      	add	r3, sp, #12
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	462a      	mov	r2, r5
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <_svfiprintf_r+0x1f8>)
 80065d4:	a904      	add	r1, sp, #16
 80065d6:	4638      	mov	r0, r7
 80065d8:	f000 f9d4 	bl	8006984 <_printf_i>
 80065dc:	e7eb      	b.n	80065b6 <_svfiprintf_r+0x1c2>
 80065de:	bf00      	nop
 80065e0:	08007434 	.word	0x08007434
 80065e4:	0800743e 	.word	0x0800743e
 80065e8:	00000000 	.word	0x00000000
 80065ec:	0800633d 	.word	0x0800633d
 80065f0:	0800743a 	.word	0x0800743a

080065f4 <__sfputc_r>:
 80065f4:	6893      	ldr	r3, [r2, #8]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	b410      	push	{r4}
 80065fc:	6093      	str	r3, [r2, #8]
 80065fe:	da08      	bge.n	8006612 <__sfputc_r+0x1e>
 8006600:	6994      	ldr	r4, [r2, #24]
 8006602:	42a3      	cmp	r3, r4
 8006604:	db01      	blt.n	800660a <__sfputc_r+0x16>
 8006606:	290a      	cmp	r1, #10
 8006608:	d103      	bne.n	8006612 <__sfputc_r+0x1e>
 800660a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800660e:	f000 bb33 	b.w	8006c78 <__swbuf_r>
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	1c58      	adds	r0, r3, #1
 8006616:	6010      	str	r0, [r2, #0]
 8006618:	7019      	strb	r1, [r3, #0]
 800661a:	4608      	mov	r0, r1
 800661c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006620:	4770      	bx	lr

08006622 <__sfputs_r>:
 8006622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006624:	4606      	mov	r6, r0
 8006626:	460f      	mov	r7, r1
 8006628:	4614      	mov	r4, r2
 800662a:	18d5      	adds	r5, r2, r3
 800662c:	42ac      	cmp	r4, r5
 800662e:	d101      	bne.n	8006634 <__sfputs_r+0x12>
 8006630:	2000      	movs	r0, #0
 8006632:	e007      	b.n	8006644 <__sfputs_r+0x22>
 8006634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006638:	463a      	mov	r2, r7
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff ffda 	bl	80065f4 <__sfputc_r>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d1f3      	bne.n	800662c <__sfputs_r+0xa>
 8006644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006648 <_vfiprintf_r>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	460d      	mov	r5, r1
 800664e:	b09d      	sub	sp, #116	; 0x74
 8006650:	4614      	mov	r4, r2
 8006652:	4698      	mov	r8, r3
 8006654:	4606      	mov	r6, r0
 8006656:	b118      	cbz	r0, 8006660 <_vfiprintf_r+0x18>
 8006658:	6983      	ldr	r3, [r0, #24]
 800665a:	b90b      	cbnz	r3, 8006660 <_vfiprintf_r+0x18>
 800665c:	f7ff fd3a 	bl	80060d4 <__sinit>
 8006660:	4b89      	ldr	r3, [pc, #548]	; (8006888 <_vfiprintf_r+0x240>)
 8006662:	429d      	cmp	r5, r3
 8006664:	d11b      	bne.n	800669e <_vfiprintf_r+0x56>
 8006666:	6875      	ldr	r5, [r6, #4]
 8006668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800666a:	07d9      	lsls	r1, r3, #31
 800666c:	d405      	bmi.n	800667a <_vfiprintf_r+0x32>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	059a      	lsls	r2, r3, #22
 8006672:	d402      	bmi.n	800667a <_vfiprintf_r+0x32>
 8006674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006676:	f7ff fdcb 	bl	8006210 <__retarget_lock_acquire_recursive>
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	071b      	lsls	r3, r3, #28
 800667e:	d501      	bpl.n	8006684 <_vfiprintf_r+0x3c>
 8006680:	692b      	ldr	r3, [r5, #16]
 8006682:	b9eb      	cbnz	r3, 80066c0 <_vfiprintf_r+0x78>
 8006684:	4629      	mov	r1, r5
 8006686:	4630      	mov	r0, r6
 8006688:	f000 fb5a 	bl	8006d40 <__swsetup_r>
 800668c:	b1c0      	cbz	r0, 80066c0 <_vfiprintf_r+0x78>
 800668e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006690:	07dc      	lsls	r4, r3, #31
 8006692:	d50e      	bpl.n	80066b2 <_vfiprintf_r+0x6a>
 8006694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006698:	b01d      	add	sp, #116	; 0x74
 800669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669e:	4b7b      	ldr	r3, [pc, #492]	; (800688c <_vfiprintf_r+0x244>)
 80066a0:	429d      	cmp	r5, r3
 80066a2:	d101      	bne.n	80066a8 <_vfiprintf_r+0x60>
 80066a4:	68b5      	ldr	r5, [r6, #8]
 80066a6:	e7df      	b.n	8006668 <_vfiprintf_r+0x20>
 80066a8:	4b79      	ldr	r3, [pc, #484]	; (8006890 <_vfiprintf_r+0x248>)
 80066aa:	429d      	cmp	r5, r3
 80066ac:	bf08      	it	eq
 80066ae:	68f5      	ldreq	r5, [r6, #12]
 80066b0:	e7da      	b.n	8006668 <_vfiprintf_r+0x20>
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	0598      	lsls	r0, r3, #22
 80066b6:	d4ed      	bmi.n	8006694 <_vfiprintf_r+0x4c>
 80066b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ba:	f7ff fdaa 	bl	8006212 <__retarget_lock_release_recursive>
 80066be:	e7e9      	b.n	8006694 <_vfiprintf_r+0x4c>
 80066c0:	2300      	movs	r3, #0
 80066c2:	9309      	str	r3, [sp, #36]	; 0x24
 80066c4:	2320      	movs	r3, #32
 80066c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ce:	2330      	movs	r3, #48	; 0x30
 80066d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006894 <_vfiprintf_r+0x24c>
 80066d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066d8:	f04f 0901 	mov.w	r9, #1
 80066dc:	4623      	mov	r3, r4
 80066de:	469a      	mov	sl, r3
 80066e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e4:	b10a      	cbz	r2, 80066ea <_vfiprintf_r+0xa2>
 80066e6:	2a25      	cmp	r2, #37	; 0x25
 80066e8:	d1f9      	bne.n	80066de <_vfiprintf_r+0x96>
 80066ea:	ebba 0b04 	subs.w	fp, sl, r4
 80066ee:	d00b      	beq.n	8006708 <_vfiprintf_r+0xc0>
 80066f0:	465b      	mov	r3, fp
 80066f2:	4622      	mov	r2, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	4630      	mov	r0, r6
 80066f8:	f7ff ff93 	bl	8006622 <__sfputs_r>
 80066fc:	3001      	adds	r0, #1
 80066fe:	f000 80aa 	beq.w	8006856 <_vfiprintf_r+0x20e>
 8006702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006704:	445a      	add	r2, fp
 8006706:	9209      	str	r2, [sp, #36]	; 0x24
 8006708:	f89a 3000 	ldrb.w	r3, [sl]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a2 	beq.w	8006856 <_vfiprintf_r+0x20e>
 8006712:	2300      	movs	r3, #0
 8006714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800671c:	f10a 0a01 	add.w	sl, sl, #1
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006728:	931a      	str	r3, [sp, #104]	; 0x68
 800672a:	4654      	mov	r4, sl
 800672c:	2205      	movs	r2, #5
 800672e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006732:	4858      	ldr	r0, [pc, #352]	; (8006894 <_vfiprintf_r+0x24c>)
 8006734:	f7f9 fd54 	bl	80001e0 <memchr>
 8006738:	9a04      	ldr	r2, [sp, #16]
 800673a:	b9d8      	cbnz	r0, 8006774 <_vfiprintf_r+0x12c>
 800673c:	06d1      	lsls	r1, r2, #27
 800673e:	bf44      	itt	mi
 8006740:	2320      	movmi	r3, #32
 8006742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006746:	0713      	lsls	r3, r2, #28
 8006748:	bf44      	itt	mi
 800674a:	232b      	movmi	r3, #43	; 0x2b
 800674c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006750:	f89a 3000 	ldrb.w	r3, [sl]
 8006754:	2b2a      	cmp	r3, #42	; 0x2a
 8006756:	d015      	beq.n	8006784 <_vfiprintf_r+0x13c>
 8006758:	9a07      	ldr	r2, [sp, #28]
 800675a:	4654      	mov	r4, sl
 800675c:	2000      	movs	r0, #0
 800675e:	f04f 0c0a 	mov.w	ip, #10
 8006762:	4621      	mov	r1, r4
 8006764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006768:	3b30      	subs	r3, #48	; 0x30
 800676a:	2b09      	cmp	r3, #9
 800676c:	d94e      	bls.n	800680c <_vfiprintf_r+0x1c4>
 800676e:	b1b0      	cbz	r0, 800679e <_vfiprintf_r+0x156>
 8006770:	9207      	str	r2, [sp, #28]
 8006772:	e014      	b.n	800679e <_vfiprintf_r+0x156>
 8006774:	eba0 0308 	sub.w	r3, r0, r8
 8006778:	fa09 f303 	lsl.w	r3, r9, r3
 800677c:	4313      	orrs	r3, r2
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	46a2      	mov	sl, r4
 8006782:	e7d2      	b.n	800672a <_vfiprintf_r+0xe2>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	1d19      	adds	r1, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	9103      	str	r1, [sp, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfbb      	ittet	lt
 8006790:	425b      	neglt	r3, r3
 8006792:	f042 0202 	orrlt.w	r2, r2, #2
 8006796:	9307      	strge	r3, [sp, #28]
 8006798:	9307      	strlt	r3, [sp, #28]
 800679a:	bfb8      	it	lt
 800679c:	9204      	strlt	r2, [sp, #16]
 800679e:	7823      	ldrb	r3, [r4, #0]
 80067a0:	2b2e      	cmp	r3, #46	; 0x2e
 80067a2:	d10c      	bne.n	80067be <_vfiprintf_r+0x176>
 80067a4:	7863      	ldrb	r3, [r4, #1]
 80067a6:	2b2a      	cmp	r3, #42	; 0x2a
 80067a8:	d135      	bne.n	8006816 <_vfiprintf_r+0x1ce>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	9203      	str	r2, [sp, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfb8      	it	lt
 80067b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067ba:	3402      	adds	r4, #2
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068a4 <_vfiprintf_r+0x25c>
 80067c2:	7821      	ldrb	r1, [r4, #0]
 80067c4:	2203      	movs	r2, #3
 80067c6:	4650      	mov	r0, sl
 80067c8:	f7f9 fd0a 	bl	80001e0 <memchr>
 80067cc:	b140      	cbz	r0, 80067e0 <_vfiprintf_r+0x198>
 80067ce:	2340      	movs	r3, #64	; 0x40
 80067d0:	eba0 000a 	sub.w	r0, r0, sl
 80067d4:	fa03 f000 	lsl.w	r0, r3, r0
 80067d8:	9b04      	ldr	r3, [sp, #16]
 80067da:	4303      	orrs	r3, r0
 80067dc:	3401      	adds	r4, #1
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e4:	482c      	ldr	r0, [pc, #176]	; (8006898 <_vfiprintf_r+0x250>)
 80067e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ea:	2206      	movs	r2, #6
 80067ec:	f7f9 fcf8 	bl	80001e0 <memchr>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d03f      	beq.n	8006874 <_vfiprintf_r+0x22c>
 80067f4:	4b29      	ldr	r3, [pc, #164]	; (800689c <_vfiprintf_r+0x254>)
 80067f6:	bb1b      	cbnz	r3, 8006840 <_vfiprintf_r+0x1f8>
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	3307      	adds	r3, #7
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	3308      	adds	r3, #8
 8006802:	9303      	str	r3, [sp, #12]
 8006804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006806:	443b      	add	r3, r7
 8006808:	9309      	str	r3, [sp, #36]	; 0x24
 800680a:	e767      	b.n	80066dc <_vfiprintf_r+0x94>
 800680c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006810:	460c      	mov	r4, r1
 8006812:	2001      	movs	r0, #1
 8006814:	e7a5      	b.n	8006762 <_vfiprintf_r+0x11a>
 8006816:	2300      	movs	r3, #0
 8006818:	3401      	adds	r4, #1
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	4619      	mov	r1, r3
 800681e:	f04f 0c0a 	mov.w	ip, #10
 8006822:	4620      	mov	r0, r4
 8006824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006828:	3a30      	subs	r2, #48	; 0x30
 800682a:	2a09      	cmp	r2, #9
 800682c:	d903      	bls.n	8006836 <_vfiprintf_r+0x1ee>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0c5      	beq.n	80067be <_vfiprintf_r+0x176>
 8006832:	9105      	str	r1, [sp, #20]
 8006834:	e7c3      	b.n	80067be <_vfiprintf_r+0x176>
 8006836:	fb0c 2101 	mla	r1, ip, r1, r2
 800683a:	4604      	mov	r4, r0
 800683c:	2301      	movs	r3, #1
 800683e:	e7f0      	b.n	8006822 <_vfiprintf_r+0x1da>
 8006840:	ab03      	add	r3, sp, #12
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	462a      	mov	r2, r5
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <_vfiprintf_r+0x258>)
 8006848:	a904      	add	r1, sp, #16
 800684a:	4630      	mov	r0, r6
 800684c:	f3af 8000 	nop.w
 8006850:	4607      	mov	r7, r0
 8006852:	1c78      	adds	r0, r7, #1
 8006854:	d1d6      	bne.n	8006804 <_vfiprintf_r+0x1bc>
 8006856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006858:	07d9      	lsls	r1, r3, #31
 800685a:	d405      	bmi.n	8006868 <_vfiprintf_r+0x220>
 800685c:	89ab      	ldrh	r3, [r5, #12]
 800685e:	059a      	lsls	r2, r3, #22
 8006860:	d402      	bmi.n	8006868 <_vfiprintf_r+0x220>
 8006862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006864:	f7ff fcd5 	bl	8006212 <__retarget_lock_release_recursive>
 8006868:	89ab      	ldrh	r3, [r5, #12]
 800686a:	065b      	lsls	r3, r3, #25
 800686c:	f53f af12 	bmi.w	8006694 <_vfiprintf_r+0x4c>
 8006870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006872:	e711      	b.n	8006698 <_vfiprintf_r+0x50>
 8006874:	ab03      	add	r3, sp, #12
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	462a      	mov	r2, r5
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <_vfiprintf_r+0x258>)
 800687c:	a904      	add	r1, sp, #16
 800687e:	4630      	mov	r0, r6
 8006880:	f000 f880 	bl	8006984 <_printf_i>
 8006884:	e7e4      	b.n	8006850 <_vfiprintf_r+0x208>
 8006886:	bf00      	nop
 8006888:	080073f4 	.word	0x080073f4
 800688c:	08007414 	.word	0x08007414
 8006890:	080073d4 	.word	0x080073d4
 8006894:	08007434 	.word	0x08007434
 8006898:	0800743e 	.word	0x0800743e
 800689c:	00000000 	.word	0x00000000
 80068a0:	08006623 	.word	0x08006623
 80068a4:	0800743a 	.word	0x0800743a

080068a8 <_printf_common>:
 80068a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	4616      	mov	r6, r2
 80068ae:	4699      	mov	r9, r3
 80068b0:	688a      	ldr	r2, [r1, #8]
 80068b2:	690b      	ldr	r3, [r1, #16]
 80068b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068b8:	4293      	cmp	r3, r2
 80068ba:	bfb8      	it	lt
 80068bc:	4613      	movlt	r3, r2
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068c4:	4607      	mov	r7, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	b10a      	cbz	r2, 80068ce <_printf_common+0x26>
 80068ca:	3301      	adds	r3, #1
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	0699      	lsls	r1, r3, #26
 80068d2:	bf42      	ittt	mi
 80068d4:	6833      	ldrmi	r3, [r6, #0]
 80068d6:	3302      	addmi	r3, #2
 80068d8:	6033      	strmi	r3, [r6, #0]
 80068da:	6825      	ldr	r5, [r4, #0]
 80068dc:	f015 0506 	ands.w	r5, r5, #6
 80068e0:	d106      	bne.n	80068f0 <_printf_common+0x48>
 80068e2:	f104 0a19 	add.w	sl, r4, #25
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	6832      	ldr	r2, [r6, #0]
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dc26      	bgt.n	800693e <_printf_common+0x96>
 80068f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068f4:	1e13      	subs	r3, r2, #0
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	bf18      	it	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	0692      	lsls	r2, r2, #26
 80068fe:	d42b      	bmi.n	8006958 <_printf_common+0xb0>
 8006900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006904:	4649      	mov	r1, r9
 8006906:	4638      	mov	r0, r7
 8006908:	47c0      	blx	r8
 800690a:	3001      	adds	r0, #1
 800690c:	d01e      	beq.n	800694c <_printf_common+0xa4>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	68e5      	ldr	r5, [r4, #12]
 8006912:	6832      	ldr	r2, [r6, #0]
 8006914:	f003 0306 	and.w	r3, r3, #6
 8006918:	2b04      	cmp	r3, #4
 800691a:	bf08      	it	eq
 800691c:	1aad      	subeq	r5, r5, r2
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	6922      	ldr	r2, [r4, #16]
 8006922:	bf0c      	ite	eq
 8006924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006928:	2500      	movne	r5, #0
 800692a:	4293      	cmp	r3, r2
 800692c:	bfc4      	itt	gt
 800692e:	1a9b      	subgt	r3, r3, r2
 8006930:	18ed      	addgt	r5, r5, r3
 8006932:	2600      	movs	r6, #0
 8006934:	341a      	adds	r4, #26
 8006936:	42b5      	cmp	r5, r6
 8006938:	d11a      	bne.n	8006970 <_printf_common+0xc8>
 800693a:	2000      	movs	r0, #0
 800693c:	e008      	b.n	8006950 <_printf_common+0xa8>
 800693e:	2301      	movs	r3, #1
 8006940:	4652      	mov	r2, sl
 8006942:	4649      	mov	r1, r9
 8006944:	4638      	mov	r0, r7
 8006946:	47c0      	blx	r8
 8006948:	3001      	adds	r0, #1
 800694a:	d103      	bne.n	8006954 <_printf_common+0xac>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006954:	3501      	adds	r5, #1
 8006956:	e7c6      	b.n	80068e6 <_printf_common+0x3e>
 8006958:	18e1      	adds	r1, r4, r3
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	2030      	movs	r0, #48	; 0x30
 800695e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006962:	4422      	add	r2, r4
 8006964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800696c:	3302      	adds	r3, #2
 800696e:	e7c7      	b.n	8006900 <_printf_common+0x58>
 8006970:	2301      	movs	r3, #1
 8006972:	4622      	mov	r2, r4
 8006974:	4649      	mov	r1, r9
 8006976:	4638      	mov	r0, r7
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d0e6      	beq.n	800694c <_printf_common+0xa4>
 800697e:	3601      	adds	r6, #1
 8006980:	e7d9      	b.n	8006936 <_printf_common+0x8e>
	...

08006984 <_printf_i>:
 8006984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	7e0f      	ldrb	r7, [r1, #24]
 800698a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800698c:	2f78      	cmp	r7, #120	; 0x78
 800698e:	4691      	mov	r9, r2
 8006990:	4680      	mov	r8, r0
 8006992:	460c      	mov	r4, r1
 8006994:	469a      	mov	sl, r3
 8006996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800699a:	d807      	bhi.n	80069ac <_printf_i+0x28>
 800699c:	2f62      	cmp	r7, #98	; 0x62
 800699e:	d80a      	bhi.n	80069b6 <_printf_i+0x32>
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	f000 80d8 	beq.w	8006b56 <_printf_i+0x1d2>
 80069a6:	2f58      	cmp	r7, #88	; 0x58
 80069a8:	f000 80a3 	beq.w	8006af2 <_printf_i+0x16e>
 80069ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069b4:	e03a      	b.n	8006a2c <_printf_i+0xa8>
 80069b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ba:	2b15      	cmp	r3, #21
 80069bc:	d8f6      	bhi.n	80069ac <_printf_i+0x28>
 80069be:	a101      	add	r1, pc, #4	; (adr r1, 80069c4 <_printf_i+0x40>)
 80069c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069c4:	08006a1d 	.word	0x08006a1d
 80069c8:	08006a31 	.word	0x08006a31
 80069cc:	080069ad 	.word	0x080069ad
 80069d0:	080069ad 	.word	0x080069ad
 80069d4:	080069ad 	.word	0x080069ad
 80069d8:	080069ad 	.word	0x080069ad
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	080069ad 	.word	0x080069ad
 80069e4:	080069ad 	.word	0x080069ad
 80069e8:	080069ad 	.word	0x080069ad
 80069ec:	080069ad 	.word	0x080069ad
 80069f0:	08006b3d 	.word	0x08006b3d
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006b1f 	.word	0x08006b1f
 80069fc:	080069ad 	.word	0x080069ad
 8006a00:	080069ad 	.word	0x080069ad
 8006a04:	08006b5f 	.word	0x08006b5f
 8006a08:	080069ad 	.word	0x080069ad
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	080069ad 	.word	0x080069ad
 8006a14:	080069ad 	.word	0x080069ad
 8006a18:	08006b27 	.word	0x08006b27
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	1d1a      	adds	r2, r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	602a      	str	r2, [r5, #0]
 8006a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0a3      	b.n	8006b78 <_printf_i+0x1f4>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	6829      	ldr	r1, [r5, #0]
 8006a34:	0606      	lsls	r6, r0, #24
 8006a36:	f101 0304 	add.w	r3, r1, #4
 8006a3a:	d50a      	bpl.n	8006a52 <_printf_i+0xce>
 8006a3c:	680e      	ldr	r6, [r1, #0]
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	2e00      	cmp	r6, #0
 8006a42:	da03      	bge.n	8006a4c <_printf_i+0xc8>
 8006a44:	232d      	movs	r3, #45	; 0x2d
 8006a46:	4276      	negs	r6, r6
 8006a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4c:	485e      	ldr	r0, [pc, #376]	; (8006bc8 <_printf_i+0x244>)
 8006a4e:	230a      	movs	r3, #10
 8006a50:	e019      	b.n	8006a86 <_printf_i+0x102>
 8006a52:	680e      	ldr	r6, [r1, #0]
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a5a:	bf18      	it	ne
 8006a5c:	b236      	sxthne	r6, r6
 8006a5e:	e7ef      	b.n	8006a40 <_printf_i+0xbc>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	6820      	ldr	r0, [r4, #0]
 8006a64:	1d19      	adds	r1, r3, #4
 8006a66:	6029      	str	r1, [r5, #0]
 8006a68:	0601      	lsls	r1, r0, #24
 8006a6a:	d501      	bpl.n	8006a70 <_printf_i+0xec>
 8006a6c:	681e      	ldr	r6, [r3, #0]
 8006a6e:	e002      	b.n	8006a76 <_printf_i+0xf2>
 8006a70:	0646      	lsls	r6, r0, #25
 8006a72:	d5fb      	bpl.n	8006a6c <_printf_i+0xe8>
 8006a74:	881e      	ldrh	r6, [r3, #0]
 8006a76:	4854      	ldr	r0, [pc, #336]	; (8006bc8 <_printf_i+0x244>)
 8006a78:	2f6f      	cmp	r7, #111	; 0x6f
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2308      	moveq	r3, #8
 8006a7e:	230a      	movne	r3, #10
 8006a80:	2100      	movs	r1, #0
 8006a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a86:	6865      	ldr	r5, [r4, #4]
 8006a88:	60a5      	str	r5, [r4, #8]
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	bfa2      	ittt	ge
 8006a8e:	6821      	ldrge	r1, [r4, #0]
 8006a90:	f021 0104 	bicge.w	r1, r1, #4
 8006a94:	6021      	strge	r1, [r4, #0]
 8006a96:	b90e      	cbnz	r6, 8006a9c <_printf_i+0x118>
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	d04d      	beq.n	8006b38 <_printf_i+0x1b4>
 8006a9c:	4615      	mov	r5, r2
 8006a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8006aa6:	5dc7      	ldrb	r7, [r0, r7]
 8006aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aac:	4637      	mov	r7, r6
 8006aae:	42bb      	cmp	r3, r7
 8006ab0:	460e      	mov	r6, r1
 8006ab2:	d9f4      	bls.n	8006a9e <_printf_i+0x11a>
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d10b      	bne.n	8006ad0 <_printf_i+0x14c>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	07de      	lsls	r6, r3, #31
 8006abc:	d508      	bpl.n	8006ad0 <_printf_i+0x14c>
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	6861      	ldr	r1, [r4, #4]
 8006ac2:	4299      	cmp	r1, r3
 8006ac4:	bfde      	ittt	le
 8006ac6:	2330      	movle	r3, #48	; 0x30
 8006ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006acc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ad0:	1b52      	subs	r2, r2, r5
 8006ad2:	6122      	str	r2, [r4, #16]
 8006ad4:	f8cd a000 	str.w	sl, [sp]
 8006ad8:	464b      	mov	r3, r9
 8006ada:	aa03      	add	r2, sp, #12
 8006adc:	4621      	mov	r1, r4
 8006ade:	4640      	mov	r0, r8
 8006ae0:	f7ff fee2 	bl	80068a8 <_printf_common>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d14c      	bne.n	8006b82 <_printf_i+0x1fe>
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aec:	b004      	add	sp, #16
 8006aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af2:	4835      	ldr	r0, [pc, #212]	; (8006bc8 <_printf_i+0x244>)
 8006af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006af8:	6829      	ldr	r1, [r5, #0]
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b00:	6029      	str	r1, [r5, #0]
 8006b02:	061d      	lsls	r5, r3, #24
 8006b04:	d514      	bpl.n	8006b30 <_printf_i+0x1ac>
 8006b06:	07df      	lsls	r7, r3, #31
 8006b08:	bf44      	itt	mi
 8006b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0e:	6023      	strmi	r3, [r4, #0]
 8006b10:	b91e      	cbnz	r6, 8006b1a <_printf_i+0x196>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	f023 0320 	bic.w	r3, r3, #32
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	2310      	movs	r3, #16
 8006b1c:	e7b0      	b.n	8006a80 <_printf_i+0xfc>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f043 0320 	orr.w	r3, r3, #32
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	2378      	movs	r3, #120	; 0x78
 8006b28:	4828      	ldr	r0, [pc, #160]	; (8006bcc <_printf_i+0x248>)
 8006b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b2e:	e7e3      	b.n	8006af8 <_printf_i+0x174>
 8006b30:	0659      	lsls	r1, r3, #25
 8006b32:	bf48      	it	mi
 8006b34:	b2b6      	uxthmi	r6, r6
 8006b36:	e7e6      	b.n	8006b06 <_printf_i+0x182>
 8006b38:	4615      	mov	r5, r2
 8006b3a:	e7bb      	b.n	8006ab4 <_printf_i+0x130>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	6826      	ldr	r6, [r4, #0]
 8006b40:	6961      	ldr	r1, [r4, #20]
 8006b42:	1d18      	adds	r0, r3, #4
 8006b44:	6028      	str	r0, [r5, #0]
 8006b46:	0635      	lsls	r5, r6, #24
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	d501      	bpl.n	8006b50 <_printf_i+0x1cc>
 8006b4c:	6019      	str	r1, [r3, #0]
 8006b4e:	e002      	b.n	8006b56 <_printf_i+0x1d2>
 8006b50:	0670      	lsls	r0, r6, #25
 8006b52:	d5fb      	bpl.n	8006b4c <_printf_i+0x1c8>
 8006b54:	8019      	strh	r1, [r3, #0]
 8006b56:	2300      	movs	r3, #0
 8006b58:	6123      	str	r3, [r4, #16]
 8006b5a:	4615      	mov	r5, r2
 8006b5c:	e7ba      	b.n	8006ad4 <_printf_i+0x150>
 8006b5e:	682b      	ldr	r3, [r5, #0]
 8006b60:	1d1a      	adds	r2, r3, #4
 8006b62:	602a      	str	r2, [r5, #0]
 8006b64:	681d      	ldr	r5, [r3, #0]
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f7f9 fb38 	bl	80001e0 <memchr>
 8006b70:	b108      	cbz	r0, 8006b76 <_printf_i+0x1f2>
 8006b72:	1b40      	subs	r0, r0, r5
 8006b74:	6060      	str	r0, [r4, #4]
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	6123      	str	r3, [r4, #16]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b80:	e7a8      	b.n	8006ad4 <_printf_i+0x150>
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	462a      	mov	r2, r5
 8006b86:	4649      	mov	r1, r9
 8006b88:	4640      	mov	r0, r8
 8006b8a:	47d0      	blx	sl
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d0ab      	beq.n	8006ae8 <_printf_i+0x164>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	079b      	lsls	r3, r3, #30
 8006b94:	d413      	bmi.n	8006bbe <_printf_i+0x23a>
 8006b96:	68e0      	ldr	r0, [r4, #12]
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	4298      	cmp	r0, r3
 8006b9c:	bfb8      	it	lt
 8006b9e:	4618      	movlt	r0, r3
 8006ba0:	e7a4      	b.n	8006aec <_printf_i+0x168>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	4640      	mov	r0, r8
 8006baa:	47d0      	blx	sl
 8006bac:	3001      	adds	r0, #1
 8006bae:	d09b      	beq.n	8006ae8 <_printf_i+0x164>
 8006bb0:	3501      	adds	r5, #1
 8006bb2:	68e3      	ldr	r3, [r4, #12]
 8006bb4:	9903      	ldr	r1, [sp, #12]
 8006bb6:	1a5b      	subs	r3, r3, r1
 8006bb8:	42ab      	cmp	r3, r5
 8006bba:	dcf2      	bgt.n	8006ba2 <_printf_i+0x21e>
 8006bbc:	e7eb      	b.n	8006b96 <_printf_i+0x212>
 8006bbe:	2500      	movs	r5, #0
 8006bc0:	f104 0619 	add.w	r6, r4, #25
 8006bc4:	e7f5      	b.n	8006bb2 <_printf_i+0x22e>
 8006bc6:	bf00      	nop
 8006bc8:	08007445 	.word	0x08007445
 8006bcc:	08007456 	.word	0x08007456

08006bd0 <_sbrk_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4d06      	ldr	r5, [pc, #24]	; (8006bec <_sbrk_r+0x1c>)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	4608      	mov	r0, r1
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	f7fa f850 	bl	8000c80 <_sbrk>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d102      	bne.n	8006bea <_sbrk_r+0x1a>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	b103      	cbz	r3, 8006bea <_sbrk_r+0x1a>
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	bd38      	pop	{r3, r4, r5, pc}
 8006bec:	20001fc4 	.word	0x20001fc4

08006bf0 <__sread>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf8:	f000 fafc 	bl	80071f4 <_read_r>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	bfab      	itete	ge
 8006c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c02:	89a3      	ldrhlt	r3, [r4, #12]
 8006c04:	181b      	addge	r3, r3, r0
 8006c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c0a:	bfac      	ite	ge
 8006c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c0e:	81a3      	strhlt	r3, [r4, #12]
 8006c10:	bd10      	pop	{r4, pc}

08006c12 <__swrite>:
 8006c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c16:	461f      	mov	r7, r3
 8006c18:	898b      	ldrh	r3, [r1, #12]
 8006c1a:	05db      	lsls	r3, r3, #23
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	4616      	mov	r6, r2
 8006c22:	d505      	bpl.n	8006c30 <__swrite+0x1e>
 8006c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c28:	2302      	movs	r3, #2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f000 f9c8 	bl	8006fc0 <_lseek_r>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	463b      	mov	r3, r7
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	f000 b869 	b.w	8006d1c <_write_r>

08006c4a <__sseek>:
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c52:	f000 f9b5 	bl	8006fc0 <_lseek_r>
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	bf15      	itete	ne
 8006c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c66:	81a3      	strheq	r3, [r4, #12]
 8006c68:	bf18      	it	ne
 8006c6a:	81a3      	strhne	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__sclose>:
 8006c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c72:	f000 b8d3 	b.w	8006e1c <_close_r>
	...

08006c78 <__swbuf_r>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	460e      	mov	r6, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	4605      	mov	r5, r0
 8006c80:	b118      	cbz	r0, 8006c8a <__swbuf_r+0x12>
 8006c82:	6983      	ldr	r3, [r0, #24]
 8006c84:	b90b      	cbnz	r3, 8006c8a <__swbuf_r+0x12>
 8006c86:	f7ff fa25 	bl	80060d4 <__sinit>
 8006c8a:	4b21      	ldr	r3, [pc, #132]	; (8006d10 <__swbuf_r+0x98>)
 8006c8c:	429c      	cmp	r4, r3
 8006c8e:	d12b      	bne.n	8006ce8 <__swbuf_r+0x70>
 8006c90:	686c      	ldr	r4, [r5, #4]
 8006c92:	69a3      	ldr	r3, [r4, #24]
 8006c94:	60a3      	str	r3, [r4, #8]
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	071a      	lsls	r2, r3, #28
 8006c9a:	d52f      	bpl.n	8006cfc <__swbuf_r+0x84>
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	b36b      	cbz	r3, 8006cfc <__swbuf_r+0x84>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	6820      	ldr	r0, [r4, #0]
 8006ca4:	1ac0      	subs	r0, r0, r3
 8006ca6:	6963      	ldr	r3, [r4, #20]
 8006ca8:	b2f6      	uxtb	r6, r6
 8006caa:	4283      	cmp	r3, r0
 8006cac:	4637      	mov	r7, r6
 8006cae:	dc04      	bgt.n	8006cba <__swbuf_r+0x42>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f948 	bl	8006f48 <_fflush_r>
 8006cb8:	bb30      	cbnz	r0, 8006d08 <__swbuf_r+0x90>
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	60a3      	str	r3, [r4, #8]
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	701e      	strb	r6, [r3, #0]
 8006cc8:	6963      	ldr	r3, [r4, #20]
 8006cca:	3001      	adds	r0, #1
 8006ccc:	4283      	cmp	r3, r0
 8006cce:	d004      	beq.n	8006cda <__swbuf_r+0x62>
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	07db      	lsls	r3, r3, #31
 8006cd4:	d506      	bpl.n	8006ce4 <__swbuf_r+0x6c>
 8006cd6:	2e0a      	cmp	r6, #10
 8006cd8:	d104      	bne.n	8006ce4 <__swbuf_r+0x6c>
 8006cda:	4621      	mov	r1, r4
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 f933 	bl	8006f48 <_fflush_r>
 8006ce2:	b988      	cbnz	r0, 8006d08 <__swbuf_r+0x90>
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <__swbuf_r+0x9c>)
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d101      	bne.n	8006cf2 <__swbuf_r+0x7a>
 8006cee:	68ac      	ldr	r4, [r5, #8]
 8006cf0:	e7cf      	b.n	8006c92 <__swbuf_r+0x1a>
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <__swbuf_r+0xa0>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	bf08      	it	eq
 8006cf8:	68ec      	ldreq	r4, [r5, #12]
 8006cfa:	e7ca      	b.n	8006c92 <__swbuf_r+0x1a>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 f81e 	bl	8006d40 <__swsetup_r>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d0cb      	beq.n	8006ca0 <__swbuf_r+0x28>
 8006d08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d0c:	e7ea      	b.n	8006ce4 <__swbuf_r+0x6c>
 8006d0e:	bf00      	nop
 8006d10:	080073f4 	.word	0x080073f4
 8006d14:	08007414 	.word	0x08007414
 8006d18:	080073d4 	.word	0x080073d4

08006d1c <_write_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	; (8006d3c <_write_r+0x20>)
 8006d20:	4604      	mov	r4, r0
 8006d22:	4608      	mov	r0, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	602a      	str	r2, [r5, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f7f9 ff58 	bl	8000be0 <_write>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_write_r+0x1e>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_write_r+0x1e>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20001fc4 	.word	0x20001fc4

08006d40 <__swsetup_r>:
 8006d40:	4b32      	ldr	r3, [pc, #200]	; (8006e0c <__swsetup_r+0xcc>)
 8006d42:	b570      	push	{r4, r5, r6, lr}
 8006d44:	681d      	ldr	r5, [r3, #0]
 8006d46:	4606      	mov	r6, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	b125      	cbz	r5, 8006d56 <__swsetup_r+0x16>
 8006d4c:	69ab      	ldr	r3, [r5, #24]
 8006d4e:	b913      	cbnz	r3, 8006d56 <__swsetup_r+0x16>
 8006d50:	4628      	mov	r0, r5
 8006d52:	f7ff f9bf 	bl	80060d4 <__sinit>
 8006d56:	4b2e      	ldr	r3, [pc, #184]	; (8006e10 <__swsetup_r+0xd0>)
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	d10f      	bne.n	8006d7c <__swsetup_r+0x3c>
 8006d5c:	686c      	ldr	r4, [r5, #4]
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d64:	0719      	lsls	r1, r3, #28
 8006d66:	d42c      	bmi.n	8006dc2 <__swsetup_r+0x82>
 8006d68:	06dd      	lsls	r5, r3, #27
 8006d6a:	d411      	bmi.n	8006d90 <__swsetup_r+0x50>
 8006d6c:	2309      	movs	r3, #9
 8006d6e:	6033      	str	r3, [r6, #0]
 8006d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d7a:	e03e      	b.n	8006dfa <__swsetup_r+0xba>
 8006d7c:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <__swsetup_r+0xd4>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	d101      	bne.n	8006d86 <__swsetup_r+0x46>
 8006d82:	68ac      	ldr	r4, [r5, #8]
 8006d84:	e7eb      	b.n	8006d5e <__swsetup_r+0x1e>
 8006d86:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <__swsetup_r+0xd8>)
 8006d88:	429c      	cmp	r4, r3
 8006d8a:	bf08      	it	eq
 8006d8c:	68ec      	ldreq	r4, [r5, #12]
 8006d8e:	e7e6      	b.n	8006d5e <__swsetup_r+0x1e>
 8006d90:	0758      	lsls	r0, r3, #29
 8006d92:	d512      	bpl.n	8006dba <__swsetup_r+0x7a>
 8006d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d96:	b141      	cbz	r1, 8006daa <__swsetup_r+0x6a>
 8006d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	d002      	beq.n	8006da6 <__swsetup_r+0x66>
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 f9ab 	bl	80070fc <_free_r>
 8006da6:	2300      	movs	r3, #0
 8006da8:	6363      	str	r3, [r4, #52]	; 0x34
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	2300      	movs	r3, #0
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f043 0308 	orr.w	r3, r3, #8
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	b94b      	cbnz	r3, 8006dda <__swsetup_r+0x9a>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd0:	d003      	beq.n	8006dda <__swsetup_r+0x9a>
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f000 f92b 	bl	8007030 <__smakebuf_r>
 8006dda:	89a0      	ldrh	r0, [r4, #12]
 8006ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006de0:	f010 0301 	ands.w	r3, r0, #1
 8006de4:	d00a      	beq.n	8006dfc <__swsetup_r+0xbc>
 8006de6:	2300      	movs	r3, #0
 8006de8:	60a3      	str	r3, [r4, #8]
 8006dea:	6963      	ldr	r3, [r4, #20]
 8006dec:	425b      	negs	r3, r3
 8006dee:	61a3      	str	r3, [r4, #24]
 8006df0:	6923      	ldr	r3, [r4, #16]
 8006df2:	b943      	cbnz	r3, 8006e06 <__swsetup_r+0xc6>
 8006df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006df8:	d1ba      	bne.n	8006d70 <__swsetup_r+0x30>
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	0781      	lsls	r1, r0, #30
 8006dfe:	bf58      	it	pl
 8006e00:	6963      	ldrpl	r3, [r4, #20]
 8006e02:	60a3      	str	r3, [r4, #8]
 8006e04:	e7f4      	b.n	8006df0 <__swsetup_r+0xb0>
 8006e06:	2000      	movs	r0, #0
 8006e08:	e7f7      	b.n	8006dfa <__swsetup_r+0xba>
 8006e0a:	bf00      	nop
 8006e0c:	20000010 	.word	0x20000010
 8006e10:	080073f4 	.word	0x080073f4
 8006e14:	08007414 	.word	0x08007414
 8006e18:	080073d4 	.word	0x080073d4

08006e1c <_close_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_close_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7f9 fef6 	bl	8000c18 <_close>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_close_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_close_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20001fc4 	.word	0x20001fc4

08006e3c <__sflush_r>:
 8006e3c:	898a      	ldrh	r2, [r1, #12]
 8006e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e42:	4605      	mov	r5, r0
 8006e44:	0710      	lsls	r0, r2, #28
 8006e46:	460c      	mov	r4, r1
 8006e48:	d458      	bmi.n	8006efc <__sflush_r+0xc0>
 8006e4a:	684b      	ldr	r3, [r1, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dc05      	bgt.n	8006e5c <__sflush_r+0x20>
 8006e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dc02      	bgt.n	8006e5c <__sflush_r+0x20>
 8006e56:	2000      	movs	r0, #0
 8006e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d0f9      	beq.n	8006e56 <__sflush_r+0x1a>
 8006e62:	2300      	movs	r3, #0
 8006e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e68:	682f      	ldr	r7, [r5, #0]
 8006e6a:	602b      	str	r3, [r5, #0]
 8006e6c:	d032      	beq.n	8006ed4 <__sflush_r+0x98>
 8006e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	075a      	lsls	r2, r3, #29
 8006e74:	d505      	bpl.n	8006e82 <__sflush_r+0x46>
 8006e76:	6863      	ldr	r3, [r4, #4]
 8006e78:	1ac0      	subs	r0, r0, r3
 8006e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e7c:	b10b      	cbz	r3, 8006e82 <__sflush_r+0x46>
 8006e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e80:	1ac0      	subs	r0, r0, r3
 8006e82:	2300      	movs	r3, #0
 8006e84:	4602      	mov	r2, r0
 8006e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e88:	6a21      	ldr	r1, [r4, #32]
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b0      	blx	r6
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	d106      	bne.n	8006ea2 <__sflush_r+0x66>
 8006e94:	6829      	ldr	r1, [r5, #0]
 8006e96:	291d      	cmp	r1, #29
 8006e98:	d82c      	bhi.n	8006ef4 <__sflush_r+0xb8>
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <__sflush_r+0x108>)
 8006e9c:	40ca      	lsrs	r2, r1
 8006e9e:	07d6      	lsls	r6, r2, #31
 8006ea0:	d528      	bpl.n	8006ef4 <__sflush_r+0xb8>
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	6062      	str	r2, [r4, #4]
 8006ea6:	04d9      	lsls	r1, r3, #19
 8006ea8:	6922      	ldr	r2, [r4, #16]
 8006eaa:	6022      	str	r2, [r4, #0]
 8006eac:	d504      	bpl.n	8006eb8 <__sflush_r+0x7c>
 8006eae:	1c42      	adds	r2, r0, #1
 8006eb0:	d101      	bne.n	8006eb6 <__sflush_r+0x7a>
 8006eb2:	682b      	ldr	r3, [r5, #0]
 8006eb4:	b903      	cbnz	r3, 8006eb8 <__sflush_r+0x7c>
 8006eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8006eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eba:	602f      	str	r7, [r5, #0]
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d0ca      	beq.n	8006e56 <__sflush_r+0x1a>
 8006ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	d002      	beq.n	8006ece <__sflush_r+0x92>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f917 	bl	80070fc <_free_r>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ed2:	e7c1      	b.n	8006e58 <__sflush_r+0x1c>
 8006ed4:	6a21      	ldr	r1, [r4, #32]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	1c41      	adds	r1, r0, #1
 8006ede:	d1c7      	bne.n	8006e70 <__sflush_r+0x34>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c4      	beq.n	8006e70 <__sflush_r+0x34>
 8006ee6:	2b1d      	cmp	r3, #29
 8006ee8:	d001      	beq.n	8006eee <__sflush_r+0xb2>
 8006eea:	2b16      	cmp	r3, #22
 8006eec:	d101      	bne.n	8006ef2 <__sflush_r+0xb6>
 8006eee:	602f      	str	r7, [r5, #0]
 8006ef0:	e7b1      	b.n	8006e56 <__sflush_r+0x1a>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	e7ad      	b.n	8006e58 <__sflush_r+0x1c>
 8006efc:	690f      	ldr	r7, [r1, #16]
 8006efe:	2f00      	cmp	r7, #0
 8006f00:	d0a9      	beq.n	8006e56 <__sflush_r+0x1a>
 8006f02:	0793      	lsls	r3, r2, #30
 8006f04:	680e      	ldr	r6, [r1, #0]
 8006f06:	bf08      	it	eq
 8006f08:	694b      	ldreq	r3, [r1, #20]
 8006f0a:	600f      	str	r7, [r1, #0]
 8006f0c:	bf18      	it	ne
 8006f0e:	2300      	movne	r3, #0
 8006f10:	eba6 0807 	sub.w	r8, r6, r7
 8006f14:	608b      	str	r3, [r1, #8]
 8006f16:	f1b8 0f00 	cmp.w	r8, #0
 8006f1a:	dd9c      	ble.n	8006e56 <__sflush_r+0x1a>
 8006f1c:	6a21      	ldr	r1, [r4, #32]
 8006f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f20:	4643      	mov	r3, r8
 8006f22:	463a      	mov	r2, r7
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b0      	blx	r6
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	dc06      	bgt.n	8006f3a <__sflush_r+0xfe>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f38:	e78e      	b.n	8006e58 <__sflush_r+0x1c>
 8006f3a:	4407      	add	r7, r0
 8006f3c:	eba8 0800 	sub.w	r8, r8, r0
 8006f40:	e7e9      	b.n	8006f16 <__sflush_r+0xda>
 8006f42:	bf00      	nop
 8006f44:	20400001 	.word	0x20400001

08006f48 <_fflush_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	690b      	ldr	r3, [r1, #16]
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	b913      	cbnz	r3, 8006f58 <_fflush_r+0x10>
 8006f52:	2500      	movs	r5, #0
 8006f54:	4628      	mov	r0, r5
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	b118      	cbz	r0, 8006f62 <_fflush_r+0x1a>
 8006f5a:	6983      	ldr	r3, [r0, #24]
 8006f5c:	b90b      	cbnz	r3, 8006f62 <_fflush_r+0x1a>
 8006f5e:	f7ff f8b9 	bl	80060d4 <__sinit>
 8006f62:	4b14      	ldr	r3, [pc, #80]	; (8006fb4 <_fflush_r+0x6c>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	d11b      	bne.n	8006fa0 <_fflush_r+0x58>
 8006f68:	686c      	ldr	r4, [r5, #4]
 8006f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0ef      	beq.n	8006f52 <_fflush_r+0xa>
 8006f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f74:	07d0      	lsls	r0, r2, #31
 8006f76:	d404      	bmi.n	8006f82 <_fflush_r+0x3a>
 8006f78:	0599      	lsls	r1, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_fflush_r+0x3a>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f7e:	f7ff f947 	bl	8006210 <__retarget_lock_acquire_recursive>
 8006f82:	4628      	mov	r0, r5
 8006f84:	4621      	mov	r1, r4
 8006f86:	f7ff ff59 	bl	8006e3c <__sflush_r>
 8006f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f8c:	07da      	lsls	r2, r3, #31
 8006f8e:	4605      	mov	r5, r0
 8006f90:	d4e0      	bmi.n	8006f54 <_fflush_r+0xc>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	059b      	lsls	r3, r3, #22
 8006f96:	d4dd      	bmi.n	8006f54 <_fflush_r+0xc>
 8006f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9a:	f7ff f93a 	bl	8006212 <__retarget_lock_release_recursive>
 8006f9e:	e7d9      	b.n	8006f54 <_fflush_r+0xc>
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <_fflush_r+0x70>)
 8006fa2:	429c      	cmp	r4, r3
 8006fa4:	d101      	bne.n	8006faa <_fflush_r+0x62>
 8006fa6:	68ac      	ldr	r4, [r5, #8]
 8006fa8:	e7df      	b.n	8006f6a <_fflush_r+0x22>
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <_fflush_r+0x74>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	bf08      	it	eq
 8006fb0:	68ec      	ldreq	r4, [r5, #12]
 8006fb2:	e7da      	b.n	8006f6a <_fflush_r+0x22>
 8006fb4:	080073f4 	.word	0x080073f4
 8006fb8:	08007414 	.word	0x08007414
 8006fbc:	080073d4 	.word	0x080073d4

08006fc0 <_lseek_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d07      	ldr	r5, [pc, #28]	; (8006fe0 <_lseek_r+0x20>)
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	4611      	mov	r1, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	602a      	str	r2, [r5, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f7f9 fe49 	bl	8000c66 <_lseek>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_lseek_r+0x1e>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_lseek_r+0x1e>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20001fc4 	.word	0x20001fc4

08006fe4 <__swhatbuf_r>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	460e      	mov	r6, r1
 8006fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fec:	2900      	cmp	r1, #0
 8006fee:	b096      	sub	sp, #88	; 0x58
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	461d      	mov	r5, r3
 8006ff4:	da08      	bge.n	8007008 <__swhatbuf_r+0x24>
 8006ff6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	061a      	lsls	r2, r3, #24
 8007000:	d410      	bmi.n	8007024 <__swhatbuf_r+0x40>
 8007002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007006:	e00e      	b.n	8007026 <__swhatbuf_r+0x42>
 8007008:	466a      	mov	r2, sp
 800700a:	f000 f905 	bl	8007218 <_fstat_r>
 800700e:	2800      	cmp	r0, #0
 8007010:	dbf1      	blt.n	8006ff6 <__swhatbuf_r+0x12>
 8007012:	9a01      	ldr	r2, [sp, #4]
 8007014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800701c:	425a      	negs	r2, r3
 800701e:	415a      	adcs	r2, r3
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	e7ee      	b.n	8007002 <__swhatbuf_r+0x1e>
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	2000      	movs	r0, #0
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	b016      	add	sp, #88	; 0x58
 800702c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007030 <__smakebuf_r>:
 8007030:	898b      	ldrh	r3, [r1, #12]
 8007032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007034:	079d      	lsls	r5, r3, #30
 8007036:	4606      	mov	r6, r0
 8007038:	460c      	mov	r4, r1
 800703a:	d507      	bpl.n	800704c <__smakebuf_r+0x1c>
 800703c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	2301      	movs	r3, #1
 8007046:	6163      	str	r3, [r4, #20]
 8007048:	b002      	add	sp, #8
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	ab01      	add	r3, sp, #4
 800704e:	466a      	mov	r2, sp
 8007050:	f7ff ffc8 	bl	8006fe4 <__swhatbuf_r>
 8007054:	9900      	ldr	r1, [sp, #0]
 8007056:	4605      	mov	r5, r0
 8007058:	4630      	mov	r0, r6
 800705a:	f7ff f8fb 	bl	8006254 <_malloc_r>
 800705e:	b948      	cbnz	r0, 8007074 <__smakebuf_r+0x44>
 8007060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007064:	059a      	lsls	r2, r3, #22
 8007066:	d4ef      	bmi.n	8007048 <__smakebuf_r+0x18>
 8007068:	f023 0303 	bic.w	r3, r3, #3
 800706c:	f043 0302 	orr.w	r3, r3, #2
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	e7e3      	b.n	800703c <__smakebuf_r+0xc>
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <__smakebuf_r+0x7c>)
 8007076:	62b3      	str	r3, [r6, #40]	; 0x28
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	6020      	str	r0, [r4, #0]
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	9b00      	ldr	r3, [sp, #0]
 8007084:	6163      	str	r3, [r4, #20]
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	6120      	str	r0, [r4, #16]
 800708a:	b15b      	cbz	r3, 80070a4 <__smakebuf_r+0x74>
 800708c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007090:	4630      	mov	r0, r6
 8007092:	f000 f8d3 	bl	800723c <_isatty_r>
 8007096:	b128      	cbz	r0, 80070a4 <__smakebuf_r+0x74>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	89a0      	ldrh	r0, [r4, #12]
 80070a6:	4305      	orrs	r5, r0
 80070a8:	81a5      	strh	r5, [r4, #12]
 80070aa:	e7cd      	b.n	8007048 <__smakebuf_r+0x18>
 80070ac:	0800606d 	.word	0x0800606d

080070b0 <memmove>:
 80070b0:	4288      	cmp	r0, r1
 80070b2:	b510      	push	{r4, lr}
 80070b4:	eb01 0402 	add.w	r4, r1, r2
 80070b8:	d902      	bls.n	80070c0 <memmove+0x10>
 80070ba:	4284      	cmp	r4, r0
 80070bc:	4623      	mov	r3, r4
 80070be:	d807      	bhi.n	80070d0 <memmove+0x20>
 80070c0:	1e43      	subs	r3, r0, #1
 80070c2:	42a1      	cmp	r1, r4
 80070c4:	d008      	beq.n	80070d8 <memmove+0x28>
 80070c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ce:	e7f8      	b.n	80070c2 <memmove+0x12>
 80070d0:	4402      	add	r2, r0
 80070d2:	4601      	mov	r1, r0
 80070d4:	428a      	cmp	r2, r1
 80070d6:	d100      	bne.n	80070da <memmove+0x2a>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070e2:	e7f7      	b.n	80070d4 <memmove+0x24>

080070e4 <__malloc_lock>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__malloc_lock+0x8>)
 80070e6:	f7ff b893 	b.w	8006210 <__retarget_lock_acquire_recursive>
 80070ea:	bf00      	nop
 80070ec:	20001fb8 	.word	0x20001fb8

080070f0 <__malloc_unlock>:
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <__malloc_unlock+0x8>)
 80070f2:	f7ff b88e 	b.w	8006212 <__retarget_lock_release_recursive>
 80070f6:	bf00      	nop
 80070f8:	20001fb8 	.word	0x20001fb8

080070fc <_free_r>:
 80070fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070fe:	2900      	cmp	r1, #0
 8007100:	d044      	beq.n	800718c <_free_r+0x90>
 8007102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007106:	9001      	str	r0, [sp, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f1a1 0404 	sub.w	r4, r1, #4
 800710e:	bfb8      	it	lt
 8007110:	18e4      	addlt	r4, r4, r3
 8007112:	f7ff ffe7 	bl	80070e4 <__malloc_lock>
 8007116:	4a1e      	ldr	r2, [pc, #120]	; (8007190 <_free_r+0x94>)
 8007118:	9801      	ldr	r0, [sp, #4]
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	b933      	cbnz	r3, 800712c <_free_r+0x30>
 800711e:	6063      	str	r3, [r4, #4]
 8007120:	6014      	str	r4, [r2, #0]
 8007122:	b003      	add	sp, #12
 8007124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007128:	f7ff bfe2 	b.w	80070f0 <__malloc_unlock>
 800712c:	42a3      	cmp	r3, r4
 800712e:	d908      	bls.n	8007142 <_free_r+0x46>
 8007130:	6825      	ldr	r5, [r4, #0]
 8007132:	1961      	adds	r1, r4, r5
 8007134:	428b      	cmp	r3, r1
 8007136:	bf01      	itttt	eq
 8007138:	6819      	ldreq	r1, [r3, #0]
 800713a:	685b      	ldreq	r3, [r3, #4]
 800713c:	1949      	addeq	r1, r1, r5
 800713e:	6021      	streq	r1, [r4, #0]
 8007140:	e7ed      	b.n	800711e <_free_r+0x22>
 8007142:	461a      	mov	r2, r3
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b10b      	cbz	r3, 800714c <_free_r+0x50>
 8007148:	42a3      	cmp	r3, r4
 800714a:	d9fa      	bls.n	8007142 <_free_r+0x46>
 800714c:	6811      	ldr	r1, [r2, #0]
 800714e:	1855      	adds	r5, r2, r1
 8007150:	42a5      	cmp	r5, r4
 8007152:	d10b      	bne.n	800716c <_free_r+0x70>
 8007154:	6824      	ldr	r4, [r4, #0]
 8007156:	4421      	add	r1, r4
 8007158:	1854      	adds	r4, r2, r1
 800715a:	42a3      	cmp	r3, r4
 800715c:	6011      	str	r1, [r2, #0]
 800715e:	d1e0      	bne.n	8007122 <_free_r+0x26>
 8007160:	681c      	ldr	r4, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	6053      	str	r3, [r2, #4]
 8007166:	4421      	add	r1, r4
 8007168:	6011      	str	r1, [r2, #0]
 800716a:	e7da      	b.n	8007122 <_free_r+0x26>
 800716c:	d902      	bls.n	8007174 <_free_r+0x78>
 800716e:	230c      	movs	r3, #12
 8007170:	6003      	str	r3, [r0, #0]
 8007172:	e7d6      	b.n	8007122 <_free_r+0x26>
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1961      	adds	r1, r4, r5
 8007178:	428b      	cmp	r3, r1
 800717a:	bf04      	itt	eq
 800717c:	6819      	ldreq	r1, [r3, #0]
 800717e:	685b      	ldreq	r3, [r3, #4]
 8007180:	6063      	str	r3, [r4, #4]
 8007182:	bf04      	itt	eq
 8007184:	1949      	addeq	r1, r1, r5
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	6054      	str	r4, [r2, #4]
 800718a:	e7ca      	b.n	8007122 <_free_r+0x26>
 800718c:	b003      	add	sp, #12
 800718e:	bd30      	pop	{r4, r5, pc}
 8007190:	20001fbc 	.word	0x20001fbc

08007194 <_realloc_r>:
 8007194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007198:	4680      	mov	r8, r0
 800719a:	4614      	mov	r4, r2
 800719c:	460e      	mov	r6, r1
 800719e:	b921      	cbnz	r1, 80071aa <_realloc_r+0x16>
 80071a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	4611      	mov	r1, r2
 80071a6:	f7ff b855 	b.w	8006254 <_malloc_r>
 80071aa:	b92a      	cbnz	r2, 80071b8 <_realloc_r+0x24>
 80071ac:	f7ff ffa6 	bl	80070fc <_free_r>
 80071b0:	4625      	mov	r5, r4
 80071b2:	4628      	mov	r0, r5
 80071b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b8:	f000 f850 	bl	800725c <_malloc_usable_size_r>
 80071bc:	4284      	cmp	r4, r0
 80071be:	4607      	mov	r7, r0
 80071c0:	d802      	bhi.n	80071c8 <_realloc_r+0x34>
 80071c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071c6:	d812      	bhi.n	80071ee <_realloc_r+0x5a>
 80071c8:	4621      	mov	r1, r4
 80071ca:	4640      	mov	r0, r8
 80071cc:	f7ff f842 	bl	8006254 <_malloc_r>
 80071d0:	4605      	mov	r5, r0
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d0ed      	beq.n	80071b2 <_realloc_r+0x1e>
 80071d6:	42bc      	cmp	r4, r7
 80071d8:	4622      	mov	r2, r4
 80071da:	4631      	mov	r1, r6
 80071dc:	bf28      	it	cs
 80071de:	463a      	movcs	r2, r7
 80071e0:	f7fe febe 	bl	8005f60 <memcpy>
 80071e4:	4631      	mov	r1, r6
 80071e6:	4640      	mov	r0, r8
 80071e8:	f7ff ff88 	bl	80070fc <_free_r>
 80071ec:	e7e1      	b.n	80071b2 <_realloc_r+0x1e>
 80071ee:	4635      	mov	r5, r6
 80071f0:	e7df      	b.n	80071b2 <_realloc_r+0x1e>
	...

080071f4 <_read_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	; (8007214 <_read_r+0x20>)
 80071f8:	4604      	mov	r4, r0
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7f9 fccf 	bl	8000ba6 <_read>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_read_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_read_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	20001fc4 	.word	0x20001fc4

08007218 <_fstat_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d07      	ldr	r5, [pc, #28]	; (8007238 <_fstat_r+0x20>)
 800721c:	2300      	movs	r3, #0
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	4611      	mov	r1, r2
 8007224:	602b      	str	r3, [r5, #0]
 8007226:	f7f9 fd03 	bl	8000c30 <_fstat>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	d102      	bne.n	8007234 <_fstat_r+0x1c>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	b103      	cbz	r3, 8007234 <_fstat_r+0x1c>
 8007232:	6023      	str	r3, [r4, #0]
 8007234:	bd38      	pop	{r3, r4, r5, pc}
 8007236:	bf00      	nop
 8007238:	20001fc4 	.word	0x20001fc4

0800723c <_isatty_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d06      	ldr	r5, [pc, #24]	; (8007258 <_isatty_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7f9 fd02 	bl	8000c50 <_isatty>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_isatty_r+0x1a>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_isatty_r+0x1a>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20001fc4 	.word	0x20001fc4

0800725c <_malloc_usable_size_r>:
 800725c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007260:	1f18      	subs	r0, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	bfbc      	itt	lt
 8007266:	580b      	ldrlt	r3, [r1, r0]
 8007268:	18c0      	addlt	r0, r0, r3
 800726a:	4770      	bx	lr

0800726c <_init>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr

08007278 <_fini>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr
