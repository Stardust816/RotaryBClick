
Rtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800a590  0800a590  0001a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a860  0800a860  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a868  0800a868  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a868  0800a868  0001a868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004250  2000007c  0800a8ec  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042cc  0800a8ec  000242cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb67  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3b  00000000  00000000  0003fc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00043b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00045438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a99  00000000  00000000  00046ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b46b  00000000  00000000  0004b641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d70ea  00000000  00000000  00066aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013db96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007228  00000000  00000000  0013dbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a578 	.word	0x0800a578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800a578 	.word	0x0800a578

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	e853 3f00 	ldrex	r3, [r3]
 8000596:	60bb      	str	r3, [r7, #8]
   return(result);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	69fa      	ldr	r2, [r7, #28]
 80005a4:	61ba      	str	r2, [r7, #24]
 80005a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005a8:	6979      	ldr	r1, [r7, #20]
 80005aa:	69ba      	ldr	r2, [r7, #24]
 80005ac:	e841 2300 	strex	r3, r2, [r1]
 80005b0:	613b      	str	r3, [r7, #16]
   return(result);
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1e9      	bne.n	800058c <LL_USART_EnableIT_IDLE+0x8>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3724      	adds	r7, #36	; 0x24
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <setleds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setleds(uint16_t ledring) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]

	//uint16_t ledring = 0b1010101010101010;

	for (int i = 0; i < 16; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e01f      	b.n	8000618 <setleds+0x50>

		if (ledring & (1 << i)) {
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <setleds+0x2c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <setleds+0x7c>)
 80005ee:	f001 fcfb 	bl	8001fe8 <HAL_GPIO_WritePin>
 80005f2:	e004      	b.n	80005fe <setleds+0x36>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2120      	movs	r1, #32
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <setleds+0x7c>)
 80005fa:	f001 fcf5 	bl	8001fe8 <HAL_GPIO_WritePin>
		}

		//SCK
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2108      	movs	r1, #8
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <setleds+0x7c>)
 8000604:	f001 fcf0 	bl	8001fe8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2108      	movs	r1, #8
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <setleds+0x7c>)
 800060e:	f001 fceb 	bl	8001fe8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b0f      	cmp	r3, #15
 800061c:	dddc      	ble.n	80005d8 <setleds+0x10>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	}

	//Latch
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2101      	movs	r1, #1
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <setleds+0x7c>)
 8000624:	f001 fce0 	bl	8001fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <setleds+0x7c>)
 800062e:	f001 fcdb 	bl	8001fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <setleds+0x7c>)
 8000638:	f001 fcd6 	bl	8001fe8 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	48000400 	.word	0x48000400

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 ffb9 	bl	80015c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f852 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f930 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000658:	f000 f910 	bl	800087c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f8de 	bl	800081c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f8ac 	bl	80007bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000664:	f004 ffa2 	bl	80055ac <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSema */
  uartSemaHandle = osSemaphoreNew(1, 1, &uartSema_attributes);
 8000668:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <main+0x7c>)
 800066a:	2101      	movs	r1, #1
 800066c:	2001      	movs	r0, #1
 800066e:	f005 f89a 	bl	80057a6 <osSemaphoreNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <main+0x80>)
 8000676:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RotaryEncoderQueue */
  RotaryEncoderQueueHandle = osMessageQueueNew (16, sizeof(InputEvent), &RotaryEncoderQueue_attributes);
 8000678:	4a14      	ldr	r2, [pc, #80]	; (80006cc <main+0x84>)
 800067a:	2108      	movs	r1, #8
 800067c:	2010      	movs	r0, #16
 800067e:	f005 f9b1 	bl	80059e4 <osMessageQueueNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <main+0x88>)
 8000686:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <main+0x8c>)
 800068a:	2100      	movs	r1, #0
 800068c:	4812      	ldr	r0, [pc, #72]	; (80006d8 <main+0x90>)
 800068e:	f004 ffd7 	bl	8005640 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a11      	ldr	r2, [pc, #68]	; (80006dc <main+0x94>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <main+0x98>)
 800069a:	2100      	movs	r1, #0
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <main+0x9c>)
 800069e:	f004 ffcf 	bl	8005640 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <main+0xa0>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <main+0xa4>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <main+0xa8>)
 80006ae:	f004 ffc7 	bl	8005640 <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <main+0xac>)
 80006b6:	6013      	str	r3, [r2, #0]
  StartTcpServer();
 80006b8:	f000 f996 	bl	80009e8 <StartTcpServer>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006bc:	f004 ff9a 	bl	80055f4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006c0:	e7fe      	b.n	80006c0 <main+0x78>
 80006c2:	bf00      	nop
 80006c4:	0800a770 	.word	0x0800a770
 80006c8:	20000840 	.word	0x20000840
 80006cc:	0800a758 	.word	0x0800a758
 80006d0:	2000076c 	.word	0x2000076c
 80006d4:	0800a6ec 	.word	0x0800a6ec
 80006d8:	08000ced 	.word	0x08000ced
 80006dc:	200001e8 	.word	0x200001e8
 80006e0:	0800a710 	.word	0x0800a710
 80006e4:	08000d51 	.word	0x08000d51
 80006e8:	200004a8 	.word	0x200004a8
 80006ec:	0800a734 	.word	0x0800a734
 80006f0:	08000edd 	.word	0x08000edd
 80006f4:	20000768 	.word	0x20000768

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b096      	sub	sp, #88	; 0x58
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2244      	movs	r2, #68	; 0x44
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f008 fe39 	bl	800937e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071e:	f001 fc99 	bl	8002054 <HAL_PWREx_ControlVoltageScaling>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000728:	f000 fc46 	bl	8000fb8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072c:	f001 fc74 	bl	8002018 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <SystemClock_Config+0xc0>)
 8000732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <SystemClock_Config+0xc0>)
 8000738:	f023 0318 	bic.w	r3, r3, #24
 800073c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000740:	2314      	movs	r3, #20
 8000742:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000758:	2301      	movs	r3, #1
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000760:	2310      	movs	r3, #16
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000764:	2307      	movs	r3, #7
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fcc3 	bl	8002100 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000780:	f000 fc1a 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f002 f8c3 	bl	8002928 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a8:	f000 fc06 	bl	8000fb8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007ac:	f002 fd08 	bl	80031c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007b0:	bf00      	nop
 80007b2:	3758      	adds	r7, #88	; 0x58
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <MX_USART1_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART1_UART_Init+0x58>)
 8000800:	f003 f860 	bl	80038c4 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 fbd5 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000098 	.word	0x20000098
 8000818:	40013800 	.word	0x40013800

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_USART2_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000860:	f003 f830 	bl	80038c4 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 fba5 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000011c 	.word	0x2000011c
 8000878:	40004400 	.word	0x40004400

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DMA_Init+0x38>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <MX_DMA_Init+0x38>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6493      	str	r3, [r2, #72]	; 0x48
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DMA_Init+0x38>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2105      	movs	r1, #5
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 ff80 	bl	80017a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008a4:	200f      	movs	r0, #15
 80008a6:	f000 ff99 	bl	80017dc <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a29      	ldr	r2, [pc, #164]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0xc0>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <MX_GPIO_Init+0xc0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_GPIO_Init+0xc0>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2129      	movs	r1, #41	; 0x29
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_GPIO_Init+0xc4>)
 800091c:	f001 fb64 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000920:	2309      	movs	r3, #9
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 f9d5 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_5;
 800093a:	2329      	movs	r3, #41	; 0x29
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <MX_GPIO_Init+0xc4>)
 8000952:	f001 f9c7 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000956:	2302      	movs	r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0xc4>)
 800096a:	f001 f9bb 	bl	8001ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400

08000980 <SendATCommand>:

/* USER CODE BEGIN 4 */

void SendATCommand(char *command) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	// The command sent MUST NOT contain a newline, otherwise it might be error-prone
	uint8_t cmd_length = strlen(command); // If your string is not NULL-Terminated this will cause errors!
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fc21 	bl	80001d0 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]
	uint8_t *buffer = (uint8_t*)pvPortMalloc(sizeof(char)*cmd_length+2);
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3302      	adds	r3, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f008 f9c6 	bl	8008d28 <pvPortMalloc>
 800099c:	60b8      	str	r0, [r7, #8]
	strncpy((char*)buffer, command, cmd_length);
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	461a      	mov	r2, r3
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f008 fe90 	bl	80096ca <strncpy>
	buffer[cmd_length] = '\r';
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	220d      	movs	r2, #13
 80009b2:	701a      	strb	r2, [r3, #0]
	buffer[cmd_length+1] = '\n';
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	3301      	adds	r3, #1
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	220a      	movs	r2, #10
 80009be:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, cmd_length+2, HAL_MAX_DELAY);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3302      	adds	r3, #2
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <SendATCommand+0x64>)
 80009d0:	f002 ffc6 	bl	8003960 <HAL_UART_Transmit>
	vPortFree(buffer);
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f008 fa73 	bl	8008ec0 <vPortFree>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000098 	.word	0x20000098

080009e8 <StartTcpServer>:

void StartTcpServer(void) {
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* Debugging by jD */
	strcpy((char*)uart1Buffer, "start tcp server!\n\r");
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <StartTcpServer+0x8c>)
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <StartTcpServer+0x90>)
 80009f0:	4614      	mov	r4, r2
 80009f2:	461d      	mov	r5, r3
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	6023      	str	r3, [r4, #0]
	// semaComment
	if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <StartTcpServer+0x94>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	210a      	movs	r1, #10
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 ff58 	bl	80058b8 <osSemaphoreAcquire>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10f      	bne.n	8000a2e <StartTcpServer+0x46>
		HAL_UART_Transmit(&huart2, uart1Buffer, strlen((char*)uart1Buffer), HAL_MAX_DELAY);
 8000a0e:	4819      	ldr	r0, [pc, #100]	; (8000a74 <StartTcpServer+0x8c>)
 8000a10:	f7ff fbde 	bl	80001d0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1c:	4915      	ldr	r1, [pc, #84]	; (8000a74 <StartTcpServer+0x8c>)
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <StartTcpServer+0x98>)
 8000a20:	f002 ff9e 	bl	8003960 <HAL_UART_Transmit>
		osSemaphoreRelease(uartSemaHandle);
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <StartTcpServer+0x94>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 ff97 	bl	800595c <osSemaphoreRelease>
	}
	strcpy((char*)uart1Buffer, "\0");
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <StartTcpServer+0x8c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]

	// Configure Station+AP Mode
	SendATCommand("AT+CWMODE=3");
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <StartTcpServer+0x9c>)
 8000a36:	f7ff ffa3 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f004 fe98 	bl	8005770 <osDelay>

	// Allow multiple connections
	SendATCommand("AT+CIPMUX=1");
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <StartTcpServer+0xa0>)
 8000a42:	f7ff ff9d 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f004 fe92 	bl	8005770 <osDelay>

	// Start TCP server on Port 80
	SendATCommand("AT+CIPSERVER=1,80");
 8000a4c:	480f      	ldr	r0, [pc, #60]	; (8000a8c <StartTcpServer+0xa4>)
 8000a4e:	f7ff ff97 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a52:	200a      	movs	r0, #10
 8000a54:	f004 fe8c 	bl	8005770 <osDelay>

	// create Server
	SendATCommand("AT+CWSAP=\"TheDrive\",\"1234567890\",5,3");
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <StartTcpServer+0xa8>)
 8000a5a:	f7ff ff91 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f004 fe86 	bl	8005770 <osDelay>

	// AT+CIPSEND=0,4
	SendATCommand("AT+CIPSTATUS");
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <StartTcpServer+0xac>)
 8000a66:	f7ff ff8b 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f004 fe80 	bl	8005770 <osDelay>

	/* home
	// SendATCommand("AT+CWJAP=\"w4t4w15z4t1R4h4z5\",\"c47np9373R\"");
	SendATCommand("AT+CWJAP=\"Fairphone 4 5G_8331\",\"zahsakb5p26dz2p\"");
	osDelay(10); */
}
 8000a70:	bf00      	nop
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	20000894 	.word	0x20000894
 8000a78:	0800a5e0 	.word	0x0800a5e0
 8000a7c:	20000840 	.word	0x20000840
 8000a80:	2000011c 	.word	0x2000011c
 8000a84:	0800a5f4 	.word	0x0800a5f4
 8000a88:	0800a600 	.word	0x0800a600
 8000a8c:	0800a60c 	.word	0x0800a60c
 8000a90:	0800a620 	.word	0x0800a620
 8000a94:	0800a648 	.word	0x0800a648

08000a98 <UartHandlerTask>:

void UartHandlerTask(void *argument) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
	static size_t old_pos = 0;  // Track the position of last character processed

	while(1) {
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8000aa0:	f107 020c 	add.w	r2, r7, #12
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aac:	2000      	movs	r0, #0
 8000aae:	f007 fa05 	bl	8007ebc <xTaskNotifyWait>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1f3      	bne.n	8000aa0 <UartHandlerTask+0x8>

			if(ulNotificationValue & UART1_IDLE_EVENT) { // Received message from UART1
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d068      	beq.n	8000b94 <UartHandlerTask+0xfc>

				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR; // huart1->hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 8000ac2:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <UartHandlerTask+0x1c8>)
 8000ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000ace:	617b      	str	r3, [r7, #20]
				size_t length;

				if(new_pos != old_pos) { // Check if any new data is received
 8000ad0:	4b64      	ldr	r3, [pc, #400]	; (8000c64 <UartHandlerTask+0x1cc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d05c      	beq.n	8000b94 <UartHandlerTask+0xfc>
					// The transmissions here are also in blocking mode, otherwise output is cutoff!
					// If received data is BIGGER than buffer size, then output will be cutoff! (=> Increase buffer size)

					if (new_pos > old_pos) { // If data does not wrap around the buffer
 8000ada:	4b62      	ldr	r3, [pc, #392]	; (8000c64 <UartHandlerTask+0x1cc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d91e      	bls.n	8000b22 <UartHandlerTask+0x8a>
						length = new_pos - old_pos;
 8000ae4:	4b5f      	ldr	r3, [pc, #380]	; (8000c64 <UartHandlerTask+0x1cc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	613b      	str	r3, [r7, #16]
						// Process your data => uart1Buffer[old_pos] TO uart1Buffer[old_pos+length] == Received DATA

						// semaComment
						if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000aee:	4b5e      	ldr	r3, [pc, #376]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	210a      	movs	r1, #10
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 fedf 	bl	80058b8 <osSemaphoreAcquire>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d146      	bne.n	8000b8e <UartHandlerTask+0xf6>
							HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8000b00:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <UartHandlerTask+0x1cc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <UartHandlerTask+0x1d4>)
 8000b06:	1899      	adds	r1, r3, r2
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b10:	4857      	ldr	r0, [pc, #348]	; (8000c70 <UartHandlerTask+0x1d8>)
 8000b12:	f002 ff25 	bl	8003960 <HAL_UART_Transmit>
							osSemaphoreRelease(uartSemaHandle);
 8000b16:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 ff1e 	bl	800595c <osSemaphoreRelease>
 8000b20:	e035      	b.n	8000b8e <UartHandlerTask+0xf6>

					} else { // If data wraps around the buffer
						// If you process data in here, you'll need to partially construct your data

						// First transmit the data until the end of the buffer
						length = BUFFER_SIZE - old_pos;
 8000b22:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <UartHandlerTask+0x1cc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000b2a:	613b      	str	r3, [r7, #16]

						// semaComment
						if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000b2c:	4b4e      	ldr	r3, [pc, #312]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	210a      	movs	r1, #10
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 fec0 	bl	80058b8 <osSemaphoreAcquire>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10f      	bne.n	8000b5e <UartHandlerTask+0xc6>
							HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <UartHandlerTask+0x1cc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a4a      	ldr	r2, [pc, #296]	; (8000c6c <UartHandlerTask+0x1d4>)
 8000b44:	1899      	adds	r1, r3, r2
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4e:	4848      	ldr	r0, [pc, #288]	; (8000c70 <UartHandlerTask+0x1d8>)
 8000b50:	f002 ff06 	bl	8003960 <HAL_UART_Transmit>
							osSemaphoreRelease(uartSemaHandle);
 8000b54:	4b44      	ldr	r3, [pc, #272]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 feff 	bl	800595c <osSemaphoreRelease>
						}

						// Then transmit the remaining data from the beginning of the buffer
						length = new_pos;
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	613b      	str	r3, [r7, #16]

						// semaComment
						if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000b62:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	210a      	movs	r1, #10
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fea5 	bl	80058b8 <osSemaphoreAcquire>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10c      	bne.n	8000b8e <UartHandlerTask+0xf6>
							HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7c:	493b      	ldr	r1, [pc, #236]	; (8000c6c <UartHandlerTask+0x1d4>)
 8000b7e:	483c      	ldr	r0, [pc, #240]	; (8000c70 <UartHandlerTask+0x1d8>)
 8000b80:	f002 feee 	bl	8003960 <HAL_UART_Transmit>
							osSemaphoreRelease(uartSemaHandle);
 8000b84:	4b38      	ldr	r3, [pc, #224]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 fee7 	bl	800595c <osSemaphoreRelease>
						}
					}

					old_pos = new_pos;  // Update the position of the last character processed
 8000b8e:	4a35      	ldr	r2, [pc, #212]	; (8000c64 <UartHandlerTask+0x1cc>)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	6013      	str	r3, [r2, #0]
				}
			}

			if (ulNotificationValue & UART2_EVENT) { // Received CHARACTER from UART2
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d080      	beq.n	8000aa0 <UartHandlerTask+0x8>
				char c = (char)uart2_rx_char;
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <UartHandlerTask+0x1dc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	72fb      	strb	r3, [r7, #11]

				// Echo back the character to the terminal
				// semaComment
				if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	210a      	movs	r1, #10
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fe84 	bl	80058b8 <osSemaphoreAcquire>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10b      	bne.n	8000bce <UartHandlerTask+0x136>
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 8000bb6:	f107 030b 	add.w	r3, r7, #11
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	482c      	ldr	r0, [pc, #176]	; (8000c70 <UartHandlerTask+0x1d8>)
 8000bc0:	f002 ff62 	bl	8003a88 <HAL_UART_Transmit_IT>
					osSemaphoreRelease(uartSemaHandle);
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fec7 	bl	800595c <osSemaphoreRelease>
				}

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r') {
 8000bce:	7afb      	ldrb	r3, [r7, #11]
 8000bd0:	2b0d      	cmp	r3, #13
 8000bd2:	d13a      	bne.n	8000c4a <UartHandlerTask+0x1b2>
					uart2Buffer[uart2BufferIndex++] = '\r';
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	b291      	uxth	r1, r2
 8000bdc:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000bde:	8011      	strh	r1, [r2, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <UartHandlerTask+0x1e4>)
 8000be4:	210d      	movs	r1, #13
 8000be6:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	b291      	uxth	r1, r2
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000bf2:	8011      	strh	r1, [r2, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <UartHandlerTask+0x1e4>)
 8000bf8:	210a      	movs	r1, #10
 8000bfa:	5499      	strb	r1, [r3, r2]

					// semaComment
					if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	210a      	movs	r1, #10
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 fe58 	bl	80058b8 <osSemaphoreAcquire>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10b      	bne.n	8000c26 <UartHandlerTask+0x18e>
						HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <UartHandlerTask+0x1e8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2202      	movs	r2, #2
 8000c14:	4619      	mov	r1, r3
 8000c16:	4816      	ldr	r0, [pc, #88]	; (8000c70 <UartHandlerTask+0x1d8>)
 8000c18:	f002 ff36 	bl	8003a88 <HAL_UART_Transmit_IT>
						osSemaphoreRelease(uartSemaHandle);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <UartHandlerTask+0x1d0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f004 fe9b 	bl	800595c <osSemaphoreRelease>
					}

					// This call will be made in blocking mode, because we'll clear the buffer!
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2e:	4913      	ldr	r1, [pc, #76]	; (8000c7c <UartHandlerTask+0x1e4>)
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <UartHandlerTask+0x1c8>)
 8000c32:	f002 fe95 	bl	8003960 <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 8000c36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <UartHandlerTask+0x1e4>)
 8000c3e:	f008 fb9e 	bl	800937e <memset>
					uart2BufferIndex = 0;
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	801a      	strh	r2, [r3, #0]
 8000c48:	e72a      	b.n	8000aa0 <UartHandlerTask+0x8>

				} else {
					// Add character to buffer
					uart2Buffer[uart2BufferIndex++] = c;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	b291      	uxth	r1, r2
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <UartHandlerTask+0x1e0>)
 8000c54:	8011      	strh	r1, [r2, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	7af9      	ldrb	r1, [r7, #11]
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <UartHandlerTask+0x1e4>)
 8000c5c:	5499      	strb	r1, [r3, r2]
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8000c5e:	e71f      	b.n	8000aa0 <UartHandlerTask+0x8>
 8000c60:	20000098 	.word	0x20000098
 8000c64:	2000289c 	.word	0x2000289c
 8000c68:	20000840 	.word	0x20000840
 8000c6c:	20000894 	.word	0x20000894
 8000c70:	2000011c 	.word	0x2000011c
 8000c74:	20002896 	.word	0x20002896
 8000c78:	20002894 	.word	0x20002894
 8000c7c:	20001894 	.word	0x20001894
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_UART_RxCpltCallback>:
	}
}

/*
Interrupt callback routine for UART */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_UART_RxCpltCallback+0x54>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d11b      	bne.n	8000cce <HAL_UART_RxCpltCallback+0x4a>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_UART_RxCpltCallback+0x58>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2102      	movs	r1, #2
 8000caa:	f007 f967 	bl	8007f7c <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d007      	beq.n	8000cc4 <HAL_UART_RxCpltCallback+0x40>
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_UART_RxCpltCallback+0x5c>)
 8000cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	f3bf 8f4f 	dsb	sy
 8000cc0:	f3bf 8f6f 	isb	sy

		// Restart reception with interrupt
		HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <HAL_UART_RxCpltCallback+0x60>)
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <HAL_UART_RxCpltCallback+0x64>)
 8000cca:	f002 ff4b 	bl	8003b64 <HAL_UART_Receive_IT>
	}
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	20002898 	.word	0x20002898
 8000ce0:	e000ed04 	.word	0xe000ed04
 8000ce4:	20002896 	.word	0x20002896
 8000ce8:	2000011c 	.word	0x2000011c

08000cec <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
		/*setleds(0b1010101010101010);
		 osDelay(1000);
		 setleds(0b0101010101010101);
		 osDelay(1000);*/

		osStatus_t ret = osMessageQueueGet(RotaryEncoderQueueHandle, &event, 0,
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <StartLedTask+0x58>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	f107 0108 	add.w	r1, r7, #8
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f004 ff44 	bl	8005b8c <osMessageQueueGet>
 8000d04:	6138      	str	r0, [r7, #16]
				10);
		if (ret != osOK) {
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <StartLedTask+0x28>
			//something went wrong
			printf("\r\ncannot read item from queue");
 8000d0c:	480e      	ldr	r0, [pc, #56]	; (8000d48 <StartLedTask+0x5c>)
 8000d0e:	f008 fbd3 	bl	80094b8 <iprintf>
 8000d12:	e013      	b.n	8000d3c <StartLedTask+0x50>
		} else {
			printf("\r\nread item");
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <StartLedTask+0x60>)
 8000d16:	f008 fbcf 	bl	80094b8 <iprintf>

			uint32_t value;

			if (event.button_pressed) { //If 6th bit set, button was pressed -> pause game -> display on leds
 8000d1a:	7a3b      	ldrb	r3, [r7, #8]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <StartLedTask+0x3c>
				value = 0b1010101010101010;
 8000d20:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e004      	b.n	8000d32 <StartLedTask+0x46>
			} else {
				value = 1 << event.counter;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	617b      	str	r3, [r7, #20]
			}
			setleds(value);
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc46 	bl	80005c8 <setleds>
		}

		osDelay(2);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f004 fd17 	bl	8005770 <osDelay>
	for (;;) {
 8000d42:	e7d7      	b.n	8000cf4 <StartLedTask+0x8>
 8000d44:	2000076c 	.word	0x2000076c
 8000d48:	0800a658 	.word	0x0800a658
 8000d4c:	0800a678 	.word	0x0800a678

08000d50 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	; 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	uint16_t counter = 8;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	86bb      	strh	r3, [r7, #52]	; 0x34
	//uint16_t old_counter = 0;
	uint8_t old_state_a = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state_button = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	InputEvent event;
	event.button_pressed = true;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	event.counter = LEDSTART;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
	InputEvent oldevent;
	/* Infinite loop */
	for (;;) {

		uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000d72:	2101      	movs	r1, #1
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f001 f91e 	bl	8001fb8 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000d82:	2102      	movs	r1, #2
 8000d84:	484e      	ldr	r0, [pc, #312]	; (8000ec0 <StartEncoderTask+0x170>)
 8000d86:	f001 f917 	bl	8001fb8 <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint8_t button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000d90:	2108      	movs	r1, #8
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f001 f90f 	bl	8001fb8 <HAL_GPIO_ReadPin>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if (a != old_state_a && event.counter <= 16) {
 8000da0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000da4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d015      	beq.n	8000dd8 <StartEncoderTask+0x88>
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	dc12      	bgt.n	8000dd8 <StartEncoderTask+0x88>

			if (a != b) {
 8000db2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000db6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d006      	beq.n	8000dcc <StartEncoderTask+0x7c>
				if (LEDMAX > event.counter)
 8000dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	dc09      	bgt.n	8000dd8 <StartEncoderTask+0x88>
					event.counter++;
 8000dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dca:	e005      	b.n	8000dd8 <StartEncoderTask+0x88>

			} else if (LEDMIN != event.counter) {
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d002      	beq.n	8000dd8 <StartEncoderTask+0x88>
				//if(counter != 3)
				event.counter--;
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28

			}
		}

		if (old_state_button != button && button) {
 8000dd8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000ddc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d014      	beq.n	8000e0e <StartEncoderTask+0xbe>
 8000de4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d010      	beq.n	8000e0e <StartEncoderTask+0xbe>
			event.button_pressed = !event.button_pressed; //Bit toggle -> XOR -> toggle 6th bit
 8000dec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f083 0301 	eor.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			event.counter = LEDSTART;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
			//setleds(0b1010101010101010);
		}

		if (memcmp(&oldevent, &event, sizeof(event))) {
 8000e0e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2208      	movs	r2, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f008 fa92 	bl	8009342 <memcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d039      	beq.n	8000e98 <StartEncoderTask+0x148>

			char msg1[16];
			snprintf(msg1, sizeof(msg1), "%d\r\n", event.counter);
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	f107 000c 	add.w	r0, r7, #12
 8000e2a:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <StartEncoderTask+0x174>)
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	f008 fbd5 	bl	80095dc <sniprintf>

			// semaComment
			if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <StartEncoderTask+0x178>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	210a      	movs	r1, #10
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fd3d 	bl	80058b8 <osSemaphoreAcquire>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d112      	bne.n	8000e6a <StartEncoderTask+0x11a>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), 1000);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff f9c1 	bl	80001d0 <strlen>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f107 010c 	add.w	r1, r7, #12
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <StartEncoderTask+0x17c>)
 8000e5c:	f002 fd80 	bl	8003960 <HAL_UART_Transmit>
				osSemaphoreRelease(uartSemaHandle);
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <StartEncoderTask+0x178>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 fd79 	bl	800595c <osSemaphoreRelease>

			//uint32_t leds = 0xFFFF0000;

			//leds = leds >> counter;
			//event.counter = counter;
			osStatus_t ret = osMessageQueuePut(RotaryEncoderQueueHandle,
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <StartEncoderTask+0x180>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e72:	230a      	movs	r3, #10
 8000e74:	2200      	movs	r2, #0
 8000e76:	f004 fe29 	bl	8005acc <osMessageQueuePut>
 8000e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
					&event, 0, 10);

			if (ret != osOK) {
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <StartEncoderTask+0x13e>
				//something went wrong
				printf("\r\ncannot enqueue item %u", counter);
 8000e82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000e84:	4619      	mov	r1, r3
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <StartEncoderTask+0x184>)
 8000e88:	f008 fb16 	bl	80094b8 <iprintf>
 8000e8c:	e004      	b.n	8000e98 <StartEncoderTask+0x148>
			} else {
				printf("\r\nenqueued item %u", counter);
 8000e8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000e90:	4619      	mov	r1, r3
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <StartEncoderTask+0x188>)
 8000e94:	f008 fb10 	bl	80094b8 <iprintf>
			}
		}
		old_state_a = a;
 8000e98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		old_state_button = button;
 8000ea0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000ea4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//old_counter = counter;
		memcpy(&oldevent, &event, sizeof(event));
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e883 0003 	stmia.w	r3, {r0, r1}
		osDelay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f004 fc59 	bl	8005770 <osDelay>
	for (;;) {
 8000ebe:	e758      	b.n	8000d72 <StartEncoderTask+0x22>
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	0800a684 	.word	0x0800a684
 8000ec8:	20000840 	.word	0x20000840
 8000ecc:	2000011c 	.word	0x2000011c
 8000ed0:	2000076c 	.word	0x2000076c
 8000ed4:	0800a68c 	.word	0x0800a68c
 8000ed8:	0800a6a8 	.word	0x0800a6a8

08000edc <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	/* Debugging by jD */
	strcpy((char*)uart1Buffer, "start broadcaster!\n\r");
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <StartDefaultTask+0x90>)
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <StartDefaultTask+0x94>)
 8000ee8:	4614      	mov	r4, r2
 8000eea:	461d      	mov	r5, r3
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef4:	6020      	str	r0, [r4, #0]
 8000ef6:	3404      	adds	r4, #4
 8000ef8:	7021      	strb	r1, [r4, #0]

	// semaComment
	if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <StartDefaultTask+0x98>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	210a      	movs	r1, #10
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fcd9 	bl	80058b8 <osSemaphoreAcquire>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <StartDefaultTask+0x50>
		HAL_UART_Transmit(&huart2, uart1Buffer, strlen((char*)uart1Buffer), HAL_MAX_DELAY);
 8000f0c:	4817      	ldr	r0, [pc, #92]	; (8000f6c <StartDefaultTask+0x90>)
 8000f0e:	f7ff f95f 	bl	80001d0 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1a:	4914      	ldr	r1, [pc, #80]	; (8000f6c <StartDefaultTask+0x90>)
 8000f1c:	4816      	ldr	r0, [pc, #88]	; (8000f78 <StartDefaultTask+0x9c>)
 8000f1e:	f002 fd1f 	bl	8003960 <HAL_UART_Transmit>
		osSemaphoreRelease(uartSemaHandle);
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <StartDefaultTask+0x98>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 fd18 	bl	800595c <osSemaphoreRelease>
	}
	strcpy((char*)uart1Buffer, "\0");
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <StartDefaultTask+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]

	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 128, NULL, osPriorityNormal1, &xUartTaskHandle);
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <StartDefaultTask+0xa0>)
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <StartDefaultTask+0xa4>)
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	2319      	movs	r3, #25
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	4810      	ldr	r0, [pc, #64]	; (8000f84 <StartDefaultTask+0xa8>)
 8000f44:	f005 ffd3 	bl	8006eee <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <StartDefaultTask+0xac>)
 8000f4a:	f7ff fb1b 	bl	8000584 <LL_USART_EnableIT_IDLE>
	// NOTE: Please check stm32l4xx_it.c for the USER-CODE that handles the IDLE Line Interrupt!!
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 8000f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f52:	4906      	ldr	r1, [pc, #24]	; (8000f6c <StartDefaultTask+0x90>)
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <StartDefaultTask+0xb0>)
 8000f56:	f002 fe5b 	bl	8003c10 <HAL_UART_Receive_DMA>

	StartTcpServer();
 8000f5a:	f7ff fd45 	bl	80009e8 <StartTcpServer>

	HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	490b      	ldr	r1, [pc, #44]	; (8000f90 <StartDefaultTask+0xb4>)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <StartDefaultTask+0x9c>)
 8000f64:	f002 fdfe 	bl	8003b64 <HAL_UART_Receive_IT>

	osThreadExit();
 8000f68:	f004 fbfc 	bl	8005764 <osThreadExit>
 8000f6c:	20000894 	.word	0x20000894
 8000f70:	0800a6bc 	.word	0x0800a6bc
 8000f74:	20000840 	.word	0x20000840
 8000f78:	2000011c 	.word	0x2000011c
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20002898 	.word	0x20002898
 8000f84:	08000a99 	.word	0x08000a99
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	20000098 	.word	0x20000098
 8000f90:	20002896 	.word	0x20002896

08000f94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fa6:	f000 fb25 	bl	80015f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40001000 	.word	0x40001000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_MspInit+0x4c>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_MspInit+0x4c>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_MspInit+0x4c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	f06f 0001 	mvn.w	r0, #1
 8001002:	f000 fbcf 	bl	80017a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a0      	sub	sp, #128	; 0x80
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	2254      	movs	r2, #84	; 0x54
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f008 f9a2 	bl	800937e <memset>
  if(huart->Instance==USART1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5f      	ldr	r2, [pc, #380]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d169      	bne.n	8001118 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	4618      	mov	r0, r3
 8001052:	f001 febf 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800105c:	f7ff ffac 	bl	8000fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001060:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001064:	4a56      	ldr	r2, [pc, #344]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6613      	str	r3, [r2, #96]	; 0x60
 800106c:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001090:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001094:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a2:	2307      	movs	r3, #7
 80010a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f000 fe18 	bl	8001ce4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010b6:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <HAL_UART_MspInit+0x1b4>)
 80010b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010bc:	2202      	movs	r2, #2
 80010be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d8:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010e0:	2220      	movs	r2, #32
 80010e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010ec:	f000 fb84 	bl	80017f8 <HAL_DMA_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80010f6:	f7ff ff5f 	bl	8000fb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010fe:	671a      	str	r2, [r3, #112]	; 0x70
 8001100:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	2025      	movs	r0, #37	; 0x25
 800110c:	f000 fb4a 	bl	80017a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001110:	2025      	movs	r0, #37	; 0x25
 8001112:	f000 fb63 	bl	80017dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001116:	e04d      	b.n	80011b4 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2b      	ldr	r2, [pc, #172]	; (80011cc <HAL_UART_MspInit+0x1b8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d148      	bne.n	80011b4 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fe50 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800113a:	f7ff ff3d 	bl	8000fb8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800116e:	2304      	movs	r3, #4
 8001170:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f000 fdaa 	bl	8001ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001194:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011a2:	2303      	movs	r3, #3
 80011a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f000 fd98 	bl	8001ce4 <HAL_GPIO_Init>
}
 80011b4:	bf00      	nop
 80011b6:	3780      	adds	r7, #128	; 0x80
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	200001a0 	.word	0x200001a0
 80011c8:	40020058 	.word	0x40020058
 80011cc:	40004400 	.word	0x40004400

080011d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_InitTick+0xe0>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <HAL_InitTick+0xe0>)
 80011e4:	f043 0310 	orr.w	r3, r3, #16
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <HAL_InitTick+0xe0>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f6:	f107 0210 	add.w	r2, r7, #16
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fd55 	bl	8002cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	2b00      	cmp	r3, #0
 800120e:	d103      	bne.n	8001218 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001210:	f001 fd22 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 8001214:	6378      	str	r0, [r7, #52]	; 0x34
 8001216:	e004      	b.n	8001222 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001218:	f001 fd1e 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 800121c:	4603      	mov	r3, r0
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001224:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <HAL_InitTick+0xe4>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3b01      	subs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_InitTick+0xe8>)
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_InitTick+0xec>)
 8001234:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_InitTick+0xe8>)
 8001238:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_InitTick+0xe8>)
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_InitTick+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_InitTick+0xe8>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_InitTick+0xe8>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <HAL_InitTick+0xe8>)
 8001258:	f002 f8b4 	bl	80033c4 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001262:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001266:	2b00      	cmp	r3, #0
 8001268:	d11b      	bne.n	80012a2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <HAL_InitTick+0xe8>)
 800126c:	f002 f90c 	bl	8003488 <HAL_TIM_Base_Start_IT>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001276:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127a:	2b00      	cmp	r3, #0
 800127c:	d111      	bne.n	80012a2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800127e:	2036      	movs	r0, #54	; 0x36
 8001280:	f000 faac 	bl	80017dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d808      	bhi.n	800129c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800128a:	2200      	movs	r2, #0
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	2036      	movs	r0, #54	; 0x36
 8001290:	f000 fa88 	bl	80017a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0xf0>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e002      	b.n	80012a2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3738      	adds	r7, #56	; 0x38
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	200028a0 	.word	0x200028a0
 80012bc:	40001000 	.word	0x40001000
 80012c0:	2000000c 	.word	0x2000000c

080012c4 <LL_USART_IsActiveFlag_IDLE>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	d101      	bne.n	80012dc <LL_USART_IsActiveFlag_IDLE+0x18>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <LL_USART_IsActiveFlag_IDLE+0x1a>
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_USART_ClearFlag_IDLE>:
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2210      	movs	r2, #16
 80012f6:	621a      	str	r2, [r3, #32]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b10      	cmp	r3, #16
 8001316:	d101      	bne.n	800131c <LL_USART_IsEnabledIT_IDLE+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_USART_IsEnabledIT_IDLE+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800132e:	e7fe      	b.n	800132e <NMI_Handler+0x4>

08001330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <HardFault_Handler+0x4>

08001336 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <BusFault_Handler+0x4>

08001342 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <UsageFault_Handler+0x4>

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA1_Channel5_IRQHandler+0x10>)
 800135e:	f000 fbe2 	bl	8001b26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001a0 	.word	0x200001a0

0800136c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001372:	4816      	ldr	r0, [pc, #88]	; (80013cc <USART1_IRQHandler+0x60>)
 8001374:	f002 fca2 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 8001378:	4815      	ldr	r0, [pc, #84]	; (80013d0 <USART1_IRQHandler+0x64>)
 800137a:	f7ff ffc3 	bl	8001304 <LL_USART_IsEnabledIT_IDLE>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01e      	beq.n	80013c2 <USART1_IRQHandler+0x56>
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <USART1_IRQHandler+0x64>)
 8001386:	f7ff ff9d 	bl	80012c4 <LL_USART_IsActiveFlag_IDLE>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d018      	beq.n	80013c2 <USART1_IRQHandler+0x56>

	  LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <USART1_IRQHandler+0x64>)
 8001392:	f7ff ffaa 	bl	80012ea <LL_USART_ClearFlag_IDLE>
	  // Give a task notification to the UART2 Task
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
	  xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <USART1_IRQHandler+0x68>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2300      	movs	r3, #0
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	f006 fde8 	bl	8007f7c <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <USART1_IRQHandler+0x56>
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <USART1_IRQHandler+0x6c>)
 80013b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f3bf 8f4f 	dsb	sy
 80013be:	f3bf 8f6f 	isb	sy
  }

  /* USER CODE END USART1_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000098 	.word	0x20000098
 80013d0:	40013800 	.word	0x40013800
 80013d4:	20002898 	.word	0x20002898
 80013d8:	e000ed04 	.word	0xe000ed04

080013dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <USART2_IRQHandler+0x10>)
 80013e2:	f002 fc6b 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000011c 	.word	0x2000011c

080013f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM6_DAC_IRQHandler+0x10>)
 80013f6:	f002 f89b 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200028a0 	.word	0x200028a0

08001404 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
  }

  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e009      	b.n	8001464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf1      	blt.n	8001450 <_write+0x12>
  }
  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	605a      	str	r2, [r3, #4]
  return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f007 fdf4 	bl	80090fc <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20010000 	.word	0x20010000
 8001540:	00000400 	.word	0x00000400
 8001544:	200028ec 	.word	0x200028ec
 8001548:	200042d0 	.word	0x200042d0

0800154c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff ffea 	bl	800154c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	; (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	; (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f007 fea9 	bl	80092f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a2:	f7ff f851 	bl	8000648 <main>

080015a6 <LoopForever>:

LoopForever:
    b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80015b4:	0800a870 	.word	0x0800a870
  ldr r2, =_sbss
 80015b8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80015bc:	200042cc 	.word	0x200042cc

080015c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_IRQHandler>

080015c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f8de 	bl	800178e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d2:	200f      	movs	r0, #15
 80015d4:	f7ff fdfc 	bl	80011d0 <HAL_InitTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	e001      	b.n	80015e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015e4:	f7ff fcee 	bl	8000fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015e8:	79fb      	ldrb	r3, [r7, #7]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000010 	.word	0x20000010
 8001618:	200028f0 	.word	0x200028f0

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200028f0 	.word	0x200028f0

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff4c 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b6:	f7ff ff61 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	6978      	ldr	r0, [r7, #20]
 80017c2:	f7ff ffb1 	bl	8001728 <NVIC_EncodePriority>
 80017c6:	4602      	mov	r2, r0
 80017c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff80 	bl	80016d4 <__NVIC_SetPriority>
}
 80017d4:	bf00      	nop
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff54 	bl	8001698 <__NVIC_EnableIRQ>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e098      	b.n	800193c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_DMA_Init+0x150>)
 8001812:	429a      	cmp	r2, r3
 8001814:	d80f      	bhi.n	8001836 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <HAL_DMA_Init+0x154>)
 800181e:	4413      	add	r3, r2
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_DMA_Init+0x158>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	009a      	lsls	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a48      	ldr	r2, [pc, #288]	; (8001954 <HAL_DMA_Init+0x15c>)
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
 8001834:	e00e      	b.n	8001854 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_DMA_Init+0x160>)
 800183e:	4413      	add	r3, r2
 8001840:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_DMA_Init+0x158>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <HAL_DMA_Init+0x164>)
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800186a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ae:	d039      	beq.n	8001924 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_DMA_Init+0x15c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d11a      	bne.n	80018f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_DMA_Init+0x168>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f003 031c 	and.w	r3, r3, #28
 80018c6:	210f      	movs	r1, #15
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <HAL_DMA_Init+0x168>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_DMA_Init+0x168>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f003 031c 	and.w	r3, r3, #28
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	491d      	ldr	r1, [pc, #116]	; (8001960 <HAL_DMA_Init+0x168>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
 80018ee:	e019      	b.n	8001924 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_DMA_Init+0x16c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f003 031c 	and.w	r3, r3, #28
 80018fc:	210f      	movs	r1, #15
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	4917      	ldr	r1, [pc, #92]	; (8001964 <HAL_DMA_Init+0x16c>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_DMA_Init+0x16c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f003 031c 	and.w	r3, r3, #28
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	4911      	ldr	r1, [pc, #68]	; (8001964 <HAL_DMA_Init+0x16c>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40020407 	.word	0x40020407
 800194c:	bffdfff8 	.word	0xbffdfff8
 8001950:	cccccccd 	.word	0xcccccccd
 8001954:	40020000 	.word	0x40020000
 8001958:	bffdfbf8 	.word	0xbffdfbf8
 800195c:	40020400 	.word	0x40020400
 8001960:	400200a8 	.word	0x400200a8
 8001964:	400204a8 	.word	0x400204a8

08001968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Start_IT+0x20>
 8001984:	2302      	movs	r3, #2
 8001986:	e04b      	b.n	8001a20 <HAL_DMA_Start_IT+0xb8>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d13a      	bne.n	8001a12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f95f 	bl	8001c84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 020e 	orr.w	r2, r2, #14
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e00f      	b.n	8001a00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 020a 	orr.w	r2, r2, #10
 80019fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e005      	b.n	8001a1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d008      	beq.n	8001a52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2204      	movs	r2, #4
 8001a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e022      	b.n	8001a98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 020e 	bic.w	r2, r2, #14
 8001a60:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 021c 	and.w	r2, r3, #28
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d005      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e029      	b.n	8001b1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 020e 	bic.w	r2, r2, #14
 8001ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	f003 021c 	and.w	r2, r3, #28
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
    }
  }
  return status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f003 031c 	and.w	r3, r3, #28
 8001b46:	2204      	movs	r2, #4
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d026      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x7a>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d021      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0204 	bic.w	r2, r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f003 021c 	and.w	r2, r3, #28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2104      	movs	r1, #4
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d071      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001b9e:	e06c      	b.n	8001c7a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	f003 031c 	and.w	r3, r3, #28
 8001ba8:	2202      	movs	r2, #2
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d02e      	beq.n	8001c12 <HAL_DMA_IRQHandler+0xec>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d029      	beq.n	8001c12 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10b      	bne.n	8001be4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020a 	bic.w	r2, r2, #10
 8001bda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	f003 021c 	and.w	r2, r3, #28
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d038      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c10:	e033      	b.n	8001c7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f003 031c 	and.w	r3, r3, #28
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d02a      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x156>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d025      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 020e 	bic.w	r2, r2, #14
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f003 021c 	and.w	r2, r3, #28
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
}
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f003 021c 	and.w	r2, r3, #28
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d108      	bne.n	8001cc8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cc6:	e007      	b.n	8001cd8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e148      	b.n	8001f86 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	4013      	ands	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 813a 	beq.w	8001f80 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d005      	beq.n	8001d24 <HAL_GPIO_Init+0x40>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d130      	bne.n	8001d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 0201 	and.w	r2, r3, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d017      	beq.n	8001dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d123      	bne.n	8001e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	6939      	ldr	r1, [r7, #16]
 8001e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0203 	and.w	r2, r3, #3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8094 	beq.w	8001f80 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e58:	4b52      	ldr	r3, [pc, #328]	; (8001fa4 <HAL_GPIO_Init+0x2c0>)
 8001e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_GPIO_Init+0x2c0>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6613      	str	r3, [r2, #96]	; 0x60
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x2c0>)
 8001e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e70:	4a4d      	ldr	r2, [pc, #308]	; (8001fa8 <HAL_GPIO_Init+0x2c4>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_GPIO_Init+0x1d4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a43      	ldr	r2, [pc, #268]	; (8001fac <HAL_GPIO_Init+0x2c8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_GPIO_Init+0x1d0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a42      	ldr	r2, [pc, #264]	; (8001fb0 <HAL_GPIO_Init+0x2cc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <HAL_GPIO_Init+0x1cc>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_Init+0x1d6>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eca:	4937      	ldr	r1, [pc, #220]	; (8001fa8 <HAL_GPIO_Init+0x2c4>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001efc:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f02:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f26:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f aeaf 	bne.w	8001cf4 <HAL_GPIO_Init+0x10>
  }
}
 8001f96:	bf00      	nop
 8001f98:	bf00      	nop
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	48000800 	.word	0x48000800
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e001      	b.n	8001fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002004:	e002      	b.n	800200c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40007000 	.word	0x40007000

08002038 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_PWREx_GetVoltageRange+0x18>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002062:	d130      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002070:	d038      	beq.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800207a:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002080:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2232      	movs	r2, #50	; 0x32
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	3301      	adds	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002098:	e002      	b.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3b01      	subs	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ac:	d102      	bne.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f2      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	d110      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e00f      	b.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d2:	d007      	beq.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020dc:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40007000 	.word	0x40007000
 80020f8:	20000008 	.word	0x20000008
 80020fc:	431bde83 	.word	0x431bde83

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	f000 bc02 	b.w	8002918 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002114:	4b96      	ldr	r3, [pc, #600]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211e:	4b94      	ldr	r3, [pc, #592]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80e4 	beq.w	80022fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_RCC_OscConfig+0x4c>
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	f040 808b 	bne.w	800225a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	f040 8087 	bne.w	800225a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800214c:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_OscConfig+0x64>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e3d9      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <HAL_RCC_OscConfig+0x7e>
 8002174:	4b7e      	ldr	r3, [pc, #504]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217c:	e005      	b.n	800218a <HAL_RCC_OscConfig+0x8a>
 800217e:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218a:	4293      	cmp	r3, r2
 800218c:	d223      	bcs.n	80021d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fdbe 	bl	8002d14 <RCC_SetFlashLatencyFromMSIRange>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e3ba      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a2:	4b73      	ldr	r3, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a72      	ldr	r2, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b70      	ldr	r3, [pc, #448]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	496d      	ldr	r1, [pc, #436]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c0:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4968      	ldr	r1, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
 80021d4:	e025      	b.n	8002222 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d6:	4b66      	ldr	r3, [pc, #408]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a65      	ldr	r2, [pc, #404]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4960      	ldr	r1, [pc, #384]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f4:	4b5e      	ldr	r3, [pc, #376]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	495b      	ldr	r1, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fd7e 	bl	8002d14 <RCC_SetFlashLatencyFromMSIRange>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e37a      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002222:	f000 fc81 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002226:	4602      	mov	r2, r0
 8002228:	4b51      	ldr	r3, [pc, #324]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	4950      	ldr	r1, [pc, #320]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 8002234:	5ccb      	ldrb	r3, [r1, r3]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_RCC_OscConfig+0x278>)
 8002240:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002242:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_RCC_OscConfig+0x27c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe ffc2 	bl	80011d0 <HAL_InitTick>
 800224c:	4603      	mov	r3, r0
 800224e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d052      	beq.n	80022fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	e35e      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d032      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a42      	ldr	r2, [pc, #264]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800226e:	f7ff f9d5 	bl	800161c <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002276:	f7ff f9d1 	bl	800161c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e347      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a35      	ldr	r2, [pc, #212]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800229a:	f043 0308 	orr.w	r3, r3, #8
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4930      	ldr	r1, [pc, #192]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	492b      	ldr	r1, [pc, #172]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
 80022c6:	e01a      	b.n	80022fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a28      	ldr	r2, [pc, #160]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022d4:	f7ff f9a2 	bl	800161c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022dc:	f7ff f99e 	bl	800161c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e314      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1dc>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d073      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d005      	beq.n	800231c <HAL_RCC_OscConfig+0x21c>
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d10e      	bne.n	8002334 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d10b      	bne.n	8002334 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d063      	beq.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d15f      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e2f1      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x24c>
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e025      	b.n	8002398 <HAL_RCC_OscConfig+0x298>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002354:	d114      	bne.n	8002380 <HAL_RCC_OscConfig+0x280>
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a02      	ldr	r2, [pc, #8]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e013      	b.n	8002398 <HAL_RCC_OscConfig+0x298>
 8002370:	40021000 	.word	0x40021000
 8002374:	0800a780 	.word	0x0800a780
 8002378:	20000008 	.word	0x20000008
 800237c:	2000000c 	.word	0x2000000c
 8002380:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a9f      	ldr	r2, [pc, #636]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b9d      	ldr	r3, [pc, #628]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a9c      	ldr	r2, [pc, #624]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f93c 	bl	800161c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff f938 	bl	800161c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e2ae      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x2a8>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f928 	bl	800161c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff f924 	bl	800161c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e29a      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x2d0>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d060      	beq.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x310>
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d119      	bne.n	800243e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d116      	bne.n	800243e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002410:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x328>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e277      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	4973      	ldr	r1, [pc, #460]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243c:	e040      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d023      	beq.n	800248e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002446:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6e      	ldr	r2, [pc, #440]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7ff f8e3 	bl	800161c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245a:	f7ff f8df 	bl	800161c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e255      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b62      	ldr	r3, [pc, #392]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	495f      	ldr	r1, [pc, #380]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e018      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a5c      	ldr	r2, [pc, #368]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f8bf 	bl	800161c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff f8bb 	bl	800161c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e231      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03c      	beq.n	8002546 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff f89a 	bl	800161c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff f896 	bl	800161c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e20c      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ef      	beq.n	80024ec <HAL_RCC_OscConfig+0x3ec>
 800250c:	e01b      	b.n	8002546 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002514:	4a3b      	ldr	r2, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7ff f87d 	bl	800161c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7ff f879 	bl	800161c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1ef      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ef      	bne.n	8002526 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80a6 	beq.w	80026a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257c:	2301      	movs	r3, #1
 800257e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d118      	bne.n	80025be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002598:	f7ff f840 	bl	800161c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7ff f83c 	bl	800161c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1b2      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCC_OscConfig+0x508>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4d8>
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d6:	e029      	b.n	800262c <HAL_RCC_OscConfig+0x52c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d115      	bne.n	800260c <HAL_RCC_OscConfig+0x50c>
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	4a03      	ldr	r2, [pc, #12]	; (8002604 <HAL_RCC_OscConfig+0x504>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002600:	e014      	b.n	800262c <HAL_RCC_OscConfig+0x52c>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	40007000 	.word	0x40007000
 800260c:	4b9a      	ldr	r3, [pc, #616]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	4a99      	ldr	r2, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800261c:	4b96      	ldr	r3, [pc, #600]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	4a95      	ldr	r2, [pc, #596]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d016      	beq.n	8002662 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe fff2 	bl	800161c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fe ffee 	bl	800161c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e162      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002652:	4b89      	ldr	r3, [pc, #548]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ed      	beq.n	800263c <HAL_RCC_OscConfig+0x53c>
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe ffdb 	bl	800161c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe ffd7 	bl	800161c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e14b      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002680:	4b7d      	ldr	r3, [pc, #500]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ed      	bne.n	800266a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268e:	7ffb      	ldrb	r3, [r7, #31]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	4a77      	ldr	r2, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d03c      	beq.n	8002726 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01c      	beq.n	80026ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026b4:	4b70      	ldr	r3, [pc, #448]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80026b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ba:	4a6f      	ldr	r2, [pc, #444]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe ffaa 	bl	800161c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026cc:	f7fe ffa6 	bl	800161c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e11c      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026de:	4b66      	ldr	r3, [pc, #408]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80026e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCC_OscConfig+0x5cc>
 80026ec:	e01b      	b.n	8002726 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ee:	4b62      	ldr	r3, [pc, #392]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80026f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026f4:	4a60      	ldr	r2, [pc, #384]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7fe ff8d 	bl	800161c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002706:	f7fe ff89 	bl	800161c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0ff      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002718:	4b57      	ldr	r3, [pc, #348]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 800271a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80f3 	beq.w	8002916 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	2b02      	cmp	r3, #2
 8002736:	f040 80c9 	bne.w	80028cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800273a:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	429a      	cmp	r2, r3
 800274c:	d12c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	3b01      	subs	r3, #1
 800275a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d123      	bne.n	80027a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d11b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d113      	bne.n	80027a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d06b      	beq.n	8002880 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	d062      	beq.n	8002874 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ae:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0ac      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80027c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ca:	f7fe ff27 	bl	800161c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe ff23 	bl	800161c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e099      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x77c>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002800:	3a01      	subs	r2, #1
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	4311      	orrs	r1, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800280a:	0212      	lsls	r2, r2, #8
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002812:	0852      	lsrs	r2, r2, #1
 8002814:	3a01      	subs	r2, #1
 8002816:	0552      	lsls	r2, r2, #21
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800281e:	0852      	lsrs	r2, r2, #1
 8002820:	3a01      	subs	r2, #1
 8002822:	0652      	lsls	r2, r2, #25
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800282a:	06d2      	lsls	r2, r2, #27
 800282c:	430a      	orrs	r2, r1
 800282e:	4912      	ldr	r1, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002830:	4313      	orrs	r3, r2
 8002832:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800284c:	f7fe fee6 	bl	800161c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fee2 	bl	800161c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e058      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_RCC_OscConfig+0x778>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002872:	e050      	b.n	8002916 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e04f      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
 8002878:	40021000 	.word	0x40021000
 800287c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d144      	bne.n	8002916 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a4:	f7fe feba 	bl	800161c <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe feb6 	bl	800161c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e02c      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x7ac>
 80028ca:	e024      	b.n	8002916 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d01f      	beq.n	8002912 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 80028d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fe9d 	bl	800161c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fe99 	bl	800161c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e00f      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	4905      	ldr	r1, [pc, #20]	; (8002920 <HAL_RCC_OscConfig+0x820>)
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_OscConfig+0x824>)
 800290c:	4013      	ands	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e001      	b.n	8002916 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	feeefffc 	.word	0xfeeefffc

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0e7      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b72      	ldr	r3, [pc, #456]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4970      	ldr	r1, [pc, #448]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b6e      	ldr	r3, [pc, #440]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cf      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d010      	beq.n	800299a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002984:	429a      	cmp	r2, r3
 8002986:	d908      	bls.n	800299a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b63      	ldr	r3, [pc, #396]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4960      	ldr	r1, [pc, #384]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d04c      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d121      	bne.n	80029fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0a6      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d115      	bne.n	80029fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e09a      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029de:	4b4e      	ldr	r3, [pc, #312]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e08e      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ee:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e086      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4943      	ldr	r1, [pc, #268]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fe04 	bl	800161c <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe fe00 	bl	800161c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e06e      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d208      	bcs.n	8002a6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	492b      	ldr	r1, [pc, #172]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6e:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d210      	bcs.n	8002a9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 0207 	bic.w	r2, r3, #7
 8002a84:	4923      	ldr	r1, [pc, #140]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_ClockConfig+0x1ec>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e036      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4918      	ldr	r1, [pc, #96]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4910      	ldr	r1, [pc, #64]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002adc:	f000 f824 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	490b      	ldr	r1, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x1f4>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1f8>)
 8002afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1fc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe fb65 	bl	80011d0 <HAL_InitTick>
 8002b06:	4603      	mov	r3, r0
 8002b08:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	0800a780 	.word	0x0800a780
 8002b20:	20000008 	.word	0x20000008
 8002b24:	2000000c 	.word	0x2000000c

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b36:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x34>
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d121      	bne.n	8002b9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d11e      	bne.n	8002b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b5c:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b68:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e005      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b84:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e004      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d134      	bne.n	8002c20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0xa6>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d003      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xac>
 8002bcc:	e005      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bd0:	617b      	str	r3, [r7, #20]
      break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bd6:	617b      	str	r3, [r7, #20]
      break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	617b      	str	r3, [r7, #20]
      break;
 8002bde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	3301      	adds	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	fb03 f202 	mul.w	r2, r3, r2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	0e5b      	lsrs	r3, r3, #25
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	3301      	adds	r3, #1
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c20:	69bb      	ldr	r3, [r7, #24]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	0800a798 	.word	0x0800a798
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c5c:	f7ff fff0 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4904      	ldr	r1, [pc, #16]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	0800a790 	.word	0x0800a790

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c88:	f7ff ffda 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0adb      	lsrs	r3, r3, #11
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	0800a790 	.word	0x0800a790

08002cb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_RCC_GetClockConfig+0x60>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0207 	and.w	r2, r3, #7
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40022000 	.word	0x40022000

08002d14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d2c:	f7ff f984 	bl	8002038 <HAL_PWREx_GetVoltageRange>
 8002d30:	6178      	str	r0, [r7, #20]
 8002d32:	e014      	b.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d4c:	f7ff f974 	bl	8002038 <HAL_PWREx_GetVoltageRange>
 8002d50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d64:	d10b      	bne.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b80      	cmp	r3, #128	; 0x80
 8002d6a:	d919      	bls.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d70:	d902      	bls.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d72:	2302      	movs	r3, #2
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	e013      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d78:	2301      	movs	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e010      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b80      	cmp	r3, #128	; 0x80
 8002d82:	d902      	bls.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d84:	2303      	movs	r3, #3
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e00a      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d102      	bne.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d90:	2302      	movs	r3, #2
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e004      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b70      	cmp	r3, #112	; 0x70
 8002d9a:	d101      	bne.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 0207 	bic.w	r2, r3, #7
 8002da8:	4909      	ldr	r1, [pc, #36]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d001      	beq.n	8002dc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40022000 	.word	0x40022000

08002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de0:	2300      	movs	r3, #0
 8002de2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d031      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002df8:	d01a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002dfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dfe:	d814      	bhi.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4a5c      	ldr	r2, [pc, #368]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e16:	e00c      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f9de 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e28:	e003      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e2e:	e000      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e38:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	494e      	ldr	r1, [pc, #312]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e4e:	e001      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 809e 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e66:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e76:	2300      	movs	r3, #0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6593      	str	r3, [r2, #88]	; 0x58
 8002e88:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e94:	2301      	movs	r3, #1
 8002e96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e98:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fbba 	bl	800161c <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fe fbb6 	bl	800161c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d902      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ebe:	e005      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ef      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d15a      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002edc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01e      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d019      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fb76 	bl	800161c <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	e00b      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe fb72 	bl	800161c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d902      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	74fb      	strb	r3, [r7, #19]
            break;
 8002f4a:	e006      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ec      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f5a:	7cfb      	ldrb	r3, [r7, #19]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6e:	4904      	ldr	r1, [pc, #16]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8c:	7c7b      	ldrb	r3, [r7, #17]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b8a      	ldr	r3, [pc, #552]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	4a89      	ldr	r2, [pc, #548]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002faa:	4b84      	ldr	r3, [pc, #528]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 0203 	bic.w	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4980      	ldr	r1, [pc, #512]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 020c 	bic.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	4978      	ldr	r1, [pc, #480]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	496f      	ldr	r1, [pc, #444]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	4967      	ldr	r1, [pc, #412]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003032:	4b62      	ldr	r3, [pc, #392]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	495e      	ldr	r1, [pc, #376]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	4956      	ldr	r1, [pc, #344]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d028      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003098:	4b48      	ldr	r3, [pc, #288]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4945      	ldr	r1, [pc, #276]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b6:	d106      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b8:	4b40      	ldr	r3, [pc, #256]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a3f      	ldr	r2, [pc, #252]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c2:	60d3      	str	r3, [r2, #12]
 80030c4:	e011      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ce:	d10c      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f882 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030e6:	7cfb      	ldrb	r3, [r7, #19]
 80030e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d028      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	492d      	ldr	r1, [pc, #180]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003114:	d106      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003120:	60d3      	str	r3, [r2, #12]
 8003122:	e011      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800312c:	d10c      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f853 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01c      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003162:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003172:	d10c      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f830 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	4904      	ldr	r1, [pc, #16]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000

080031e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ee:	4b74      	ldr	r3, [pc, #464]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d018      	beq.n	800322c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031fa:	4b71      	ldr	r3, [pc, #452]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0203 	and.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d10d      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
       ||
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003212:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
       ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d047      	beq.n	80032b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e044      	b.n	80032b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d018      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0x86>
 8003234:	2b03      	cmp	r3, #3
 8003236:	d825      	bhi.n	8003284 <RCCEx_PLLSAI1_Config+0xa4>
 8003238:	2b01      	cmp	r3, #1
 800323a:	d002      	beq.n	8003242 <RCCEx_PLLSAI1_Config+0x62>
 800323c:	2b02      	cmp	r3, #2
 800323e:	d009      	beq.n	8003254 <RCCEx_PLLSAI1_Config+0x74>
 8003240:	e020      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003242:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11d      	bne.n	800328a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003252:	e01a      	b.n	800328a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003254:	4b5a      	ldr	r3, [pc, #360]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e013      	b.n	800328e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003272:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003282:	e006      	b.n	8003292 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      break;
 8003288:	e004      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003292:	bf00      	nop
    }

    if(status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800329a:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	430b      	orrs	r3, r1
 80032b0:	4943      	ldr	r1, [pc, #268]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d17c      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032bc:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3f      	ldr	r2, [pc, #252]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7fe f9a8 	bl	800161c <HAL_GetTick>
 80032cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ce:	e009      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d0:	f7fe f9a4 	bl	800161c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d902      	bls.n	80032e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	73fb      	strb	r3, [r7, #15]
        break;
 80032e2:	e005      	b.n	80032f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ef      	bne.n	80032d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d15f      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d110      	bne.n	800331e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fc:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	0211      	lsls	r1, r2, #8
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	06d2      	lsls	r2, r2, #27
 8003314:	430a      	orrs	r2, r1
 8003316:	492a      	ldr	r1, [pc, #168]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
 800331c:	e027      	b.n	800336e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d112      	bne.n	800334a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800332c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6892      	ldr	r2, [r2, #8]
 8003334:	0211      	lsls	r1, r2, #8
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6912      	ldr	r2, [r2, #16]
 800333a:	0852      	lsrs	r2, r2, #1
 800333c:	3a01      	subs	r2, #1
 800333e:	0552      	lsls	r2, r2, #21
 8003340:	430a      	orrs	r2, r1
 8003342:	491f      	ldr	r1, [pc, #124]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003344:	4313      	orrs	r3, r2
 8003346:	610b      	str	r3, [r1, #16]
 8003348:	e011      	b.n	800336e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003352:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	0211      	lsls	r1, r2, #8
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6952      	ldr	r2, [r2, #20]
 8003360:	0852      	lsrs	r2, r2, #1
 8003362:	3a01      	subs	r2, #1
 8003364:	0652      	lsls	r2, r2, #25
 8003366:	430a      	orrs	r2, r1
 8003368:	4915      	ldr	r1, [pc, #84]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003378:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe f94f 	bl	800161c <HAL_GetTick>
 800337e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003380:	e009      	b.n	8003396 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003382:	f7fe f94b 	bl	800161c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d902      	bls.n	8003396 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	73fb      	strb	r3, [r7, #15]
          break;
 8003394:	e005      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ef      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	4903      	ldr	r1, [pc, #12]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e049      	b.n	800346a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f841 	bl	8003472 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 f9dc 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d001      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e03b      	b.n	8003518 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a19      	ldr	r2, [pc, #100]	; (8003524 <HAL_TIM_Base_Start_IT+0x9c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x4e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d004      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x4e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a15      	ldr	r2, [pc, #84]	; (8003528 <HAL_TIM_Base_Start_IT+0xa0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d115      	bne.n	8003502 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_TIM_Base_Start_IT+0xa4>)
 80034de:	4013      	ands	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b06      	cmp	r3, #6
 80034e6:	d015      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x8c>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ee:	d011      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	e008      	b.n	8003514 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e000      	b.n	8003516 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003514:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40014000 	.word	0x40014000
 800352c:	00010007 	.word	0x00010007

08003530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d122      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d11b      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0202 	mvn.w	r2, #2
 800355c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f905 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8f7 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f908 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0204 	mvn.w	r2, #4
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8db 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8cd 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8de 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d122      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d11b      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0208 	mvn.w	r2, #8
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2204      	movs	r2, #4
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8b1 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8a3 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f8b4 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0210 	mvn.w	r2, #16
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2208      	movs	r2, #8
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f887 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f879 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f88a 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0201 	mvn.w	r2, #1
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fc70 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8de 	bl	800389c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ee:	d10e      	bne.n	800370e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d107      	bne.n	800370e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8d1 	bl	80038b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d10e      	bne.n	800373a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d107      	bne.n	800373a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f838 	bl	80037aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b20      	cmp	r3, #32
 8003746:	d10e      	bne.n	8003766 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b20      	cmp	r3, #32
 8003754:	d107      	bne.n	8003766 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0220 	mvn.w	r2, #32
 800375e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f891 	bl	8003888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a2a      	ldr	r2, [pc, #168]	; (800387c <TIM_Base_SetConfig+0xbc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <TIM_Base_SetConfig+0x20>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d108      	bne.n	80037f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a21      	ldr	r2, [pc, #132]	; (800387c <TIM_Base_SetConfig+0xbc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <TIM_Base_SetConfig+0x52>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003800:	d007      	beq.n	8003812 <TIM_Base_SetConfig+0x52>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <TIM_Base_SetConfig+0xc0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_Base_SetConfig+0x52>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <TIM_Base_SetConfig+0xc4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0c      	ldr	r2, [pc, #48]	; (800387c <TIM_Base_SetConfig+0xbc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_Base_SetConfig+0xa0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <TIM_Base_SetConfig+0xc0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_Base_SetConfig+0xa0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <TIM_Base_SetConfig+0xc4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	615a      	str	r2, [r3, #20]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400

08003888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e040      	b.n	8003958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fb94 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fce6 	bl	80042d4 <UART_SetConfig>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e022      	b.n	8003958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 ff06 	bl	800472c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800392e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800393e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 ff8d 	bl	8004870 <UART_CheckIdleState>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003974:	2b20      	cmp	r3, #32
 8003976:	f040 8082 	bne.w	8003a7e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_UART_Transmit+0x26>
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e07a      	b.n	8003a80 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_UART_Transmit+0x38>
 8003994:	2302      	movs	r3, #2
 8003996:	e073      	b.n	8003a80 <HAL_UART_Transmit+0x120>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2221      	movs	r2, #33	; 0x21
 80039ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ae:	f7fd fe35 	bl	800161c <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d108      	bne.n	80039e0 <HAL_UART_Transmit+0x80>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d104      	bne.n	80039e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e003      	b.n	80039e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80039f0:	e02d      	b.n	8003a4e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 ff80 	bl	8004902 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e039      	b.n	8003a80 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	3302      	adds	r3, #2
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	e008      	b.n	8003a3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	b292      	uxth	r2, r2
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1cb      	bne.n	80039f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 ff4c 	bl	8004902 <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e005      	b.n	8003a80 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b08b      	sub	sp, #44	; 0x2c
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d156      	bne.n	8003b4c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_UART_Transmit_IT+0x22>
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e04f      	b.n	8003b4e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Transmit_IT+0x34>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e048      	b.n	8003b4e <HAL_UART_Transmit_IT+0xc6>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2221      	movs	r2, #33	; 0x21
 8003aec:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	d107      	bne.n	8003b08 <HAL_UART_Transmit_IT+0x80>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_UART_Transmit_IT+0xd4>)
 8003b04:	669a      	str	r2, [r3, #104]	; 0x68
 8003b06:	e002      	b.n	8003b0e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <HAL_UART_Transmit_IT+0xd8>)
 8003b0c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	613b      	str	r3, [r7, #16]
   return(result);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	372c      	adds	r7, #44	; 0x2c
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	0800513b 	.word	0x0800513b
 8003b60:	08005083 	.word	0x08005083

08003b64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d142      	bne.n	8003c00 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_Receive_IT+0x22>
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e03b      	b.n	8003c02 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Receive_IT+0x34>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e034      	b.n	8003c02 <HAL_UART_Receive_IT+0x9e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_UART_Receive_IT+0xa8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d01f      	beq.n	8003bf0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d018      	beq.n	8003bf0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	613b      	str	r3, [r7, #16]
   return(result);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	69f9      	ldr	r1, [r7, #28]
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e6      	bne.n	8003bbe <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 ff48 	bl	8004a8c <UART_Start_Receive_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40008000 	.word	0x40008000

08003c10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d142      	bne.n	8003cac <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_UART_Receive_DMA+0x22>
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e03b      	b.n	8003cae <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Receive_DMA+0x34>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e034      	b.n	8003cae <HAL_UART_Receive_DMA+0x9e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_UART_Receive_DMA+0xa8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d01f      	beq.n	8003c9c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	613b      	str	r3, [r7, #16]
   return(result);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	69f9      	ldr	r1, [r7, #28]
 8003c8e:	6a3a      	ldr	r2, [r7, #32]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e6      	bne.n	8003c6a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 ffbc 	bl	8004c20 <UART_Start_Receive_DMA>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	e000      	b.n	8003cae <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3728      	adds	r7, #40	; 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40008000 	.word	0x40008000

08003cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b0ba      	sub	sp, #232	; 0xe8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ce2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ce6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cea:	4013      	ands	r3, r2
 8003cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d115      	bne.n	8003d24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00f      	beq.n	8003d24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 82a6 	beq.w	8004266 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
      }
      return;
 8003d22:	e2a0      	b.n	8004266 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8117 	beq.w	8003f5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d3e:	4b85      	ldr	r3, [pc, #532]	; (8003f54 <HAL_UART_IRQHandler+0x298>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 810a 	beq.w	8003f5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d011      	beq.n	8003d78 <HAL_UART_IRQHandler+0xbc>
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00b      	beq.n	8003d78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d011      	beq.n	8003da8 <HAL_UART_IRQHandler+0xec>
 8003d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2202      	movs	r2, #2
 8003d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9e:	f043 0204 	orr.w	r2, r3, #4
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d011      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x11c>
 8003db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00b      	beq.n	8003e14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2208      	movs	r2, #8
 8003e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0a:	f043 0208 	orr.w	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d012      	beq.n	8003e46 <HAL_UART_IRQHandler+0x18a>
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00c      	beq.n	8003e46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 820c 	beq.w	800426a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d04f      	beq.n	8003f3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 ff8a 	bl	8004db8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d141      	bne.n	8003f36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ede:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1d9      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d013      	beq.n	8003f2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <HAL_UART_IRQHandler+0x29c>)
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fdc6 	bl	8001aa4 <HAL_DMA_Abort_IT>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e00f      	b.n	8003f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9ba 	bl	80042a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e00b      	b.n	8003f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9b6 	bl	80042a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	e007      	b.n	8003f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9b2 	bl	80042a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f4c:	e18d      	b.n	800426a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4e:	bf00      	nop
    return;
 8003f50:	e18b      	b.n	800426a <HAL_UART_IRQHandler+0x5ae>
 8003f52:	bf00      	nop
 8003f54:	04000120 	.word	0x04000120
 8003f58:	08005057 	.word	0x08005057

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 8146 	bne.w	80041f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 813f 	beq.w	80041f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8138 	beq.w	80041f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2210      	movs	r2, #16
 8003f88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	f040 80b4 	bne.w	8004102 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 815f 	beq.w	800426e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	f080 8157 	bcs.w	800426e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 8085 	bne.w	80040e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800400a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004012:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800401e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1da      	bne.n	8003fdc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3308      	adds	r3, #8
 800402c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800404a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800404e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800405c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e1      	bne.n	8004026 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800408c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e3      	bne.n	8004062 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e4      	bne.n	80040a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd fca1 	bl	8001a28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8de 	bl	80042bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004100:	e0b5      	b.n	800426e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410e:	b29b      	uxth	r3, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80a7 	beq.w	8004272 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a2 	beq.w	8004272 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
 8004152:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e4      	bne.n	800412e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	623b      	str	r3, [r7, #32]
   return(result);
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004188:	633a      	str	r2, [r7, #48]	; 0x30
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e3      	bne.n	8004164 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	617b      	str	r3, [r7, #20]
   return(result);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e4      	bne.n	80041ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f866 	bl	80042bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f0:	e03f      	b.n	8004272 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00e      	beq.n	800421c <HAL_UART_IRQHandler+0x560>
 80041fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f001 f97a 	bl	800550e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800421a:	e02d      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
    }
    return;
 8004244:	e017      	b.n	8004276 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_UART_IRQHandler+0x5bc>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 ffcb 	bl	80051fa <UART_EndTransmit_IT>
    return;
 8004264:	e008      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004266:	bf00      	nop
 8004268:	e006      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
    return;
 800426a:	bf00      	nop
 800426c:	e004      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
      return;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004276:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004278:	37e8      	adds	r7, #232	; 0xe8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop

08004280 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4bb4      	ldr	r3, [pc, #720]	; (80045d4 <UART_SetConfig+0x300>)
 8004304:	4013      	ands	r3, r2
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800430c:	430b      	orrs	r3, r1
 800430e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4aa9      	ldr	r2, [pc, #676]	; (80045d8 <UART_SetConfig+0x304>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	4313      	orrs	r3, r2
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4aa0      	ldr	r2, [pc, #640]	; (80045dc <UART_SetConfig+0x308>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d126      	bne.n	80043ac <UART_SetConfig+0xd8>
 800435e:	4ba0      	ldr	r3, [pc, #640]	; (80045e0 <UART_SetConfig+0x30c>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b03      	cmp	r3, #3
 800436a:	d81b      	bhi.n	80043a4 <UART_SetConfig+0xd0>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0xa0>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004385 	.word	0x08004385
 8004378:	08004395 	.word	0x08004395
 800437c:	0800438d 	.word	0x0800438d
 8004380:	0800439d 	.word	0x0800439d
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e080      	b.n	800448e <UART_SetConfig+0x1ba>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e07c      	b.n	800448e <UART_SetConfig+0x1ba>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e078      	b.n	800448e <UART_SetConfig+0x1ba>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e074      	b.n	800448e <UART_SetConfig+0x1ba>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e070      	b.n	800448e <UART_SetConfig+0x1ba>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a8c      	ldr	r2, [pc, #560]	; (80045e4 <UART_SetConfig+0x310>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d138      	bne.n	8004428 <UART_SetConfig+0x154>
 80043b6:	4b8a      	ldr	r3, [pc, #552]	; (80045e0 <UART_SetConfig+0x30c>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d82d      	bhi.n	8004420 <UART_SetConfig+0x14c>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0xf8>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004421 	.word	0x08004421
 80043d4:	08004421 	.word	0x08004421
 80043d8:	08004421 	.word	0x08004421
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004421 	.word	0x08004421
 80043e4:	08004421 	.word	0x08004421
 80043e8:	08004421 	.word	0x08004421
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004421 	.word	0x08004421
 80043f4:	08004421 	.word	0x08004421
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004419 	.word	0x08004419
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e042      	b.n	800448e <UART_SetConfig+0x1ba>
 8004408:	2302      	movs	r3, #2
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e03e      	b.n	800448e <UART_SetConfig+0x1ba>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e03a      	b.n	800448e <UART_SetConfig+0x1ba>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e036      	b.n	800448e <UART_SetConfig+0x1ba>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e032      	b.n	800448e <UART_SetConfig+0x1ba>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <UART_SetConfig+0x304>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d12a      	bne.n	8004488 <UART_SetConfig+0x1b4>
 8004432:	4b6b      	ldr	r3, [pc, #428]	; (80045e0 <UART_SetConfig+0x30c>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800443c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004440:	d01a      	beq.n	8004478 <UART_SetConfig+0x1a4>
 8004442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004446:	d81b      	bhi.n	8004480 <UART_SetConfig+0x1ac>
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444c:	d00c      	beq.n	8004468 <UART_SetConfig+0x194>
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004452:	d815      	bhi.n	8004480 <UART_SetConfig+0x1ac>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <UART_SetConfig+0x18c>
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d008      	beq.n	8004470 <UART_SetConfig+0x19c>
 800445e:	e00f      	b.n	8004480 <UART_SetConfig+0x1ac>
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e012      	b.n	800448e <UART_SetConfig+0x1ba>
 8004468:	2302      	movs	r3, #2
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e00e      	b.n	800448e <UART_SetConfig+0x1ba>
 8004470:	2304      	movs	r3, #4
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e00a      	b.n	800448e <UART_SetConfig+0x1ba>
 8004478:	2308      	movs	r3, #8
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447e:	e006      	b.n	800448e <UART_SetConfig+0x1ba>
 8004480:	2310      	movs	r3, #16
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e002      	b.n	800448e <UART_SetConfig+0x1ba>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <UART_SetConfig+0x304>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d17a      	bne.n	800458e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800449c:	2b08      	cmp	r3, #8
 800449e:	d824      	bhi.n	80044ea <UART_SetConfig+0x216>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x1d4>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044db 	.word	0x080044db
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	080044eb 	.word	0x080044eb
 80044c4:	080044eb 	.word	0x080044eb
 80044c8:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe fbc4 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 80044d0:	61f8      	str	r0, [r7, #28]
        break;
 80044d2:	e010      	b.n	80044f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <UART_SetConfig+0x314>)
 80044d6:	61fb      	str	r3, [r7, #28]
        break;
 80044d8:	e00d      	b.n	80044f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7fe fb25 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 80044de:	61f8      	str	r0, [r7, #28]
        break;
 80044e0:	e009      	b.n	80044f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e005      	b.n	80044f6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8107 	beq.w	800470c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d305      	bcc.n	800451a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004520:	e0f4      	b.n	800470c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2200      	movs	r2, #0
 8004526:	461c      	mov	r4, r3
 8004528:	4615      	mov	r5, r2
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	022b      	lsls	r3, r5, #8
 8004534:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004538:	0222      	lsls	r2, r4, #8
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	6849      	ldr	r1, [r1, #4]
 800453e:	0849      	lsrs	r1, r1, #1
 8004540:	2000      	movs	r0, #0
 8004542:	4688      	mov	r8, r1
 8004544:	4681      	mov	r9, r0
 8004546:	eb12 0a08 	adds.w	sl, r2, r8
 800454a:	eb43 0b09 	adc.w	fp, r3, r9
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800455c:	4650      	mov	r0, sl
 800455e:	4659      	mov	r1, fp
 8004560:	f7fb fe8e 	bl	8000280 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4613      	mov	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004572:	d308      	bcc.n	8004586 <UART_SetConfig+0x2b2>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457a:	d204      	bcs.n	8004586 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	60da      	str	r2, [r3, #12]
 8004584:	e0c2      	b.n	800470c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800458c:	e0be      	b.n	800470c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004596:	d16a      	bne.n	800466e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800459c:	2b08      	cmp	r3, #8
 800459e:	d834      	bhi.n	800460a <UART_SetConfig+0x336>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x2d4>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	080045f5 	.word	0x080045f5
 80045b4:	0800460b 	.word	0x0800460b
 80045b8:	080045fb 	.word	0x080045fb
 80045bc:	0800460b 	.word	0x0800460b
 80045c0:	0800460b 	.word	0x0800460b
 80045c4:	0800460b 	.word	0x0800460b
 80045c8:	08004603 	.word	0x08004603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7fe fb44 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 80045d0:	61f8      	str	r0, [r7, #28]
        break;
 80045d2:	e020      	b.n	8004616 <UART_SetConfig+0x342>
 80045d4:	efff69f3 	.word	0xefff69f3
 80045d8:	40008000 	.word	0x40008000
 80045dc:	40013800 	.word	0x40013800
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40004400 	.word	0x40004400
 80045e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7fe fb4a 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80045f0:	61f8      	str	r0, [r7, #28]
        break;
 80045f2:	e010      	b.n	8004616 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b4c      	ldr	r3, [pc, #304]	; (8004728 <UART_SetConfig+0x454>)
 80045f6:	61fb      	str	r3, [r7, #28]
        break;
 80045f8:	e00d      	b.n	8004616 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fa:	f7fe fa95 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 80045fe:	61f8      	str	r0, [r7, #28]
        break;
 8004600:	e009      	b.n	8004616 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	61fb      	str	r3, [r7, #28]
        break;
 8004608:	e005      	b.n	8004616 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d077      	beq.n	800470c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	005a      	lsls	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b0f      	cmp	r3, #15
 8004636:	d916      	bls.n	8004666 <UART_SetConfig+0x392>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463e:	d212      	bcs.n	8004666 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f023 030f 	bic.w	r3, r3, #15
 8004648:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	b29b      	uxth	r3, r3
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	b29a      	uxth	r2, r3
 8004656:	8afb      	ldrh	r3, [r7, #22]
 8004658:	4313      	orrs	r3, r2
 800465a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	8afa      	ldrh	r2, [r7, #22]
 8004662:	60da      	str	r2, [r3, #12]
 8004664:	e052      	b.n	800470c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800466c:	e04e      	b.n	800470c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800466e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004672:	2b08      	cmp	r3, #8
 8004674:	d827      	bhi.n	80046c6 <UART_SetConfig+0x3f2>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0x3a8>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	080046c7 	.word	0x080046c7
 800468c:	080046b7 	.word	0x080046b7
 8004690:	080046c7 	.word	0x080046c7
 8004694:	080046c7 	.word	0x080046c7
 8004698:	080046c7 	.word	0x080046c7
 800469c:	080046bf 	.word	0x080046bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a0:	f7fe fada 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 80046a4:	61f8      	str	r0, [r7, #28]
        break;
 80046a6:	e014      	b.n	80046d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a8:	f7fe faec 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80046ac:	61f8      	str	r0, [r7, #28]
        break;
 80046ae:	e010      	b.n	80046d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <UART_SetConfig+0x454>)
 80046b2:	61fb      	str	r3, [r7, #28]
        break;
 80046b4:	e00d      	b.n	80046d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b6:	f7fe fa37 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 80046ba:	61f8      	str	r0, [r7, #28]
        break;
 80046bc:	e009      	b.n	80046d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c2:	61fb      	str	r3, [r7, #28]
        break;
 80046c4:	e005      	b.n	80046d2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046d0:	bf00      	nop
    }

    if (pclk != 0U)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d019      	beq.n	800470c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	085a      	lsrs	r2, r3, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	441a      	add	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b0f      	cmp	r3, #15
 80046f0:	d909      	bls.n	8004706 <UART_SetConfig+0x432>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d205      	bcs.n	8004706 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60da      	str	r2, [r3, #12]
 8004704:	e002      	b.n	800470c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004718:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800471c:	4618      	mov	r0, r3
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004726:	bf00      	nop
 8004728:	00f42400 	.word	0x00f42400

0800472c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01a      	beq.n	8004842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482a:	d10a      	bne.n	8004842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
  }
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af02      	add	r7, sp, #8
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004880:	f7fc fecc 	bl	800161c <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b08      	cmp	r3, #8
 8004892:	d10e      	bne.n	80048b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f82d 	bl	8004902 <UART_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e023      	b.n	80048fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d10e      	bne.n	80048de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f817 	bl	8004902 <UART_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e00d      	b.n	80048fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b09c      	sub	sp, #112	; 0x70
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4613      	mov	r3, r2
 8004910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004912:	e0a5      	b.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800491a:	f000 80a1 	beq.w	8004a60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fc fe7d 	bl	800161c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <UART_WaitOnFlagUntilTimeout+0x32>
 800492e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004930:	2b00      	cmp	r3, #0
 8004932:	d13e      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004948:	667b      	str	r3, [r7, #100]	; 0x64
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004954:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e6      	bne.n	8004934 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3308      	adds	r3, #8
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	663b      	str	r3, [r7, #96]	; 0x60
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004986:	64ba      	str	r2, [r7, #72]	; 0x48
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800498c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e5      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e067      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d04f      	beq.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	d147      	bne.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
 80049fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e6      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3308      	adds	r3, #8
 8004a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a2c:	623a      	str	r2, [r7, #32]
 8004a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	69f9      	ldr	r1, [r7, #28]
 8004a32:	6a3a      	ldr	r2, [r7, #32]
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e010      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	f43f af4a 	beq.w	8004914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3770      	adds	r7, #112	; 0x70
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b097      	sub	sp, #92	; 0x5c
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	d10e      	bne.n	8004ade <UART_Start_Receive_IT+0x52>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <UART_Start_Receive_IT+0x48>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ad2:	e02d      	b.n	8004b30 <UART_Start_Receive_IT+0xa4>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	22ff      	movs	r2, #255	; 0xff
 8004ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004adc:	e028      	b.n	8004b30 <UART_Start_Receive_IT+0xa4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <UART_Start_Receive_IT+0x76>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <UART_Start_Receive_IT+0x6c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004af6:	e01b      	b.n	8004b30 <UART_Start_Receive_IT+0xa4>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	227f      	movs	r2, #127	; 0x7f
 8004afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b00:	e016      	b.n	8004b30 <UART_Start_Receive_IT+0xa4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0a:	d10d      	bne.n	8004b28 <UART_Start_Receive_IT+0x9c>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <UART_Start_Receive_IT+0x92>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	227f      	movs	r2, #127	; 0x7f
 8004b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b1c:	e008      	b.n	8004b30 <UART_Start_Receive_IT+0xa4>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	223f      	movs	r2, #63	; 0x3f
 8004b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b26:	e003      	b.n	8004b30 <UART_Start_Receive_IT+0xa4>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2222      	movs	r2, #34	; 0x22
 8004b3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3308      	adds	r3, #8
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	657b      	str	r3, [r7, #84]	; 0x54
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e5      	bne.n	8004b3e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d107      	bne.n	8004b8c <UART_Start_Receive_IT+0x100>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d103      	bne.n	8004b8c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <UART_Start_Receive_IT+0x18c>)
 8004b88:	665a      	str	r2, [r3, #100]	; 0x64
 8004b8a:	e002      	b.n	8004b92 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a23      	ldr	r2, [pc, #140]	; (8004c1c <UART_Start_Receive_IT+0x190>)
 8004b90:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d019      	beq.n	8004bd6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e6      	bne.n	8004ba2 <UART_Start_Receive_IT+0x116>
 8004bd4:	e018      	b.n	8004c08 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	613b      	str	r3, [r7, #16]
   return(result);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f043 0320 	orr.w	r3, r3, #32
 8004bea:	653b      	str	r3, [r7, #80]	; 0x50
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf4:	623b      	str	r3, [r7, #32]
 8004bf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	69f9      	ldr	r1, [r7, #28]
 8004bfa:	6a3a      	ldr	r2, [r7, #32]
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e6      	bne.n	8004bd6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	375c      	adds	r7, #92	; 0x5c
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	080053af 	.word	0x080053af
 8004c1c:	0800524f 	.word	0x0800524f

08004c20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b096      	sub	sp, #88	; 0x58
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2222      	movs	r2, #34	; 0x22
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d02b      	beq.n	8004caa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a42      	ldr	r2, [pc, #264]	; (8004d60 <UART_Start_Receive_DMA+0x140>)
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a41      	ldr	r2, [pc, #260]	; (8004d64 <UART_Start_Receive_DMA+0x144>)
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a40      	ldr	r2, [pc, #256]	; (8004d68 <UART_Start_Receive_DMA+0x148>)
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	2200      	movs	r2, #0
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3324      	adds	r3, #36	; 0x24
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	461a      	mov	r2, r3
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	f7fc fe6f 	bl	8001968 <HAL_DMA_Start_IT>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00c      	beq.n	8004caa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2210      	movs	r2, #16
 8004c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e055      	b.n	8004d56 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	657b      	str	r3, [r7, #84]	; 0x54
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cda:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e6      	bne.n	8004cba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	653b      	str	r3, [r7, #80]	; 0x50
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d0c:	637a      	str	r2, [r7, #52]	; 0x34
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d40:	623a      	str	r2, [r7, #32]
 8004d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e5      	bne.n	8004d20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3758      	adds	r7, #88	; 0x58
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	08004e7f 	.word	0x08004e7f
 8004d64:	08004fa3 	.word	0x08004fa3
 8004d68:	08004fdb 	.word	0x08004fdb

08004d6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b089      	sub	sp, #36	; 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e6      	bne.n	8004d74 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004dac:	bf00      	nop
 8004dae:	3724      	adds	r7, #36	; 0x24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b095      	sub	sp, #84	; 0x54
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dde:	643b      	str	r3, [r7, #64]	; 0x40
 8004de0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d118      	bne.n	8004e60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6979      	ldr	r1, [r7, #20]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e6      	bne.n	8004e2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e72:	bf00      	nop
 8004e74:	3754      	adds	r7, #84	; 0x54
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b09c      	sub	sp, #112	; 0x70
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d170      	bne.n	8004f7c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e6      	bne.n	8004ea2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	667b      	str	r3, [r7, #100]	; 0x64
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ef4:	647a      	str	r2, [r7, #68]	; 0x44
 8004ef6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004efa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	623b      	str	r3, [r7, #32]
   return(result);
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f28:	633a      	str	r2, [r7, #48]	; 0x30
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3e:	2220      	movs	r2, #32
 8004f40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d118      	bne.n	8004f7c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0310 	bic.w	r3, r3, #16
 8004f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	69b9      	ldr	r1, [r7, #24]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	617b      	str	r3, [r7, #20]
   return(result);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e6      	bne.n	8004f4a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d107      	bne.n	8004f94 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f8e:	f7ff f995 	bl	80042bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f92:	e002      	b.n	8004f9a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004f94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f96:	f7fb fe75 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 8004f9a:	bf00      	nop
 8004f9c:	3770      	adds	r7, #112	; 0x70
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d109      	bne.n	8004fcc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff f979 	bl	80042bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fca:	e002      	b.n	8004fd2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff f961 	bl	8004294 <HAL_UART_RxHalfCpltCallback>
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b80      	cmp	r3, #128	; 0x80
 8005000:	d109      	bne.n	8005016 <UART_DMAError+0x3c>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b21      	cmp	r3, #33	; 0x21
 8005006:	d106      	bne.n	8005016 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2200      	movs	r2, #0
 800500c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005010:	6978      	ldr	r0, [r7, #20]
 8005012:	f7ff feab 	bl	8004d6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d109      	bne.n	8005038 <UART_DMAError+0x5e>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b22      	cmp	r3, #34	; 0x22
 8005028:	d106      	bne.n	8005038 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	f7ff fec0 	bl	8004db8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503e:	f043 0210 	orr.w	r2, r3, #16
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f7ff f92d 	bl	80042a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff f917 	bl	80042a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005082:	b480      	push	{r7}
 8005084:	b08f      	sub	sp, #60	; 0x3c
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	2b21      	cmp	r3, #33	; 0x21
 8005090:	d14d      	bne.n	800512e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d132      	bne.n	8005104 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e6      	bne.n	800509e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	613b      	str	r3, [r7, #16]
   return(result);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e6      	bne.n	80050d0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005102:	e014      	b.n	800512e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	b292      	uxth	r2, r2
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800512e:	bf00      	nop
 8005130:	373c      	adds	r7, #60	; 0x3c
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800513a:	b480      	push	{r7}
 800513c:	b091      	sub	sp, #68	; 0x44
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	2b21      	cmp	r3, #33	; 0x21
 8005148:	d151      	bne.n	80051ee <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d132      	bne.n	80051bc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	623b      	str	r3, [r7, #32]
   return(result);
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	633b      	str	r3, [r7, #48]	; 0x30
 8005176:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	60fb      	str	r3, [r7, #12]
   return(result);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	69b9      	ldr	r1, [r7, #24]
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	617b      	str	r3, [r7, #20]
   return(result);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e6      	bne.n	8005188 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80051ba:	e018      	b.n	80051ee <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80051c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c4:	881a      	ldrh	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ce:	b292      	uxth	r2, r2
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051ee:	bf00      	nop
 80051f0:	3744      	adds	r7, #68	; 0x44
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b088      	sub	sp, #32
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6979      	ldr	r1, [r7, #20]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	613b      	str	r3, [r7, #16]
   return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff f81d 	bl	8004280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005246:	bf00      	nop
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b096      	sub	sp, #88	; 0x58
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800525c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005264:	2b22      	cmp	r3, #34	; 0x22
 8005266:	f040 8094 	bne.w	8005392 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005270:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005274:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005278:	b2d9      	uxtb	r1, r3
 800527a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800527e:	b2da      	uxtb	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	400a      	ands	r2, r1
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d179      	bne.n	80053a6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052c6:	653b      	str	r3, [r7, #80]	; 0x50
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d0:	647b      	str	r3, [r7, #68]	; 0x44
 80052d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e6      	bne.n	80052b2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	623b      	str	r3, [r7, #32]
   return(result);
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3308      	adds	r3, #8
 8005302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005304:	633a      	str	r2, [r7, #48]	; 0x30
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800530a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e5      	bne.n	80052e4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005328:	2b01      	cmp	r3, #1
 800532a:	d12e      	bne.n	800538a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0310 	bic.w	r3, r3, #16
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	69b9      	ldr	r1, [r7, #24]
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	617b      	str	r3, [r7, #20]
   return(result);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e6      	bne.n	8005332 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b10      	cmp	r3, #16
 8005370:	d103      	bne.n	800537a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2210      	movs	r2, #16
 8005378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005380:	4619      	mov	r1, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fe ff9a 	bl	80042bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005388:	e00d      	b.n	80053a6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fb fc7a 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 8005390:	e009      	b.n	80053a6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	8b1b      	ldrh	r3, [r3, #24]
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0208 	orr.w	r2, r2, #8
 80053a2:	b292      	uxth	r2, r2
 80053a4:	831a      	strh	r2, [r3, #24]
}
 80053a6:	bf00      	nop
 80053a8:	3758      	adds	r7, #88	; 0x58
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b096      	sub	sp, #88	; 0x58
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c4:	2b22      	cmp	r3, #34	; 0x22
 80053c6:	f040 8094 	bne.w	80054f2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80053d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80053da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80053de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80053e2:	4013      	ands	r3, r2
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d179      	bne.n	8005506 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005430:	643b      	str	r3, [r7, #64]	; 0x40
 8005432:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e6      	bne.n	8005412 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	61fb      	str	r3, [r7, #28]
   return(result);
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	64bb      	str	r3, [r7, #72]	; 0x48
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800546a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e5      	bne.n	8005444 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	2b01      	cmp	r3, #1
 800548a:	d12e      	bne.n	80054ea <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f023 0310 	bic.w	r3, r3, #16
 80054a6:	647b      	str	r3, [r7, #68]	; 0x44
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	613b      	str	r3, [r7, #16]
   return(result);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e6      	bne.n	8005492 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d103      	bne.n	80054da <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2210      	movs	r2, #16
 80054d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fe feea 	bl	80042bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054e8:	e00d      	b.n	8005506 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fb fbca 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 80054f0:	e009      	b.n	8005506 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	8b1b      	ldrh	r3, [r3, #24]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0208 	orr.w	r2, r2, #8
 8005502:	b292      	uxth	r2, r2
 8005504:	831a      	strh	r2, [r3, #24]
}
 8005506:	bf00      	nop
 8005508:	3758      	adds	r7, #88	; 0x58
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <__NVIC_SetPriority>:
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	6039      	str	r1, [r7, #0]
 800552e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005534:	2b00      	cmp	r3, #0
 8005536:	db0a      	blt.n	800554e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	490c      	ldr	r1, [pc, #48]	; (8005570 <__NVIC_SetPriority+0x4c>)
 800553e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005542:	0112      	lsls	r2, r2, #4
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	440b      	add	r3, r1
 8005548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800554c:	e00a      	b.n	8005564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	4908      	ldr	r1, [pc, #32]	; (8005574 <__NVIC_SetPriority+0x50>)
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	3b04      	subs	r3, #4
 800555c:	0112      	lsls	r2, r2, #4
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	440b      	add	r3, r1
 8005562:	761a      	strb	r2, [r3, #24]
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	e000e100 	.word	0xe000e100
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <SysTick_Handler+0x1c>)
 800557e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005580:	f002 fb12 	bl	8007ba8 <xTaskGetSchedulerState>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800558a:	f003 fb3d 	bl	8008c08 <xPortSysTickHandler>
  }
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	e000e010 	.word	0xe000e010

08005598 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800559c:	2100      	movs	r1, #0
 800559e:	f06f 0004 	mvn.w	r0, #4
 80055a2:	f7ff ffbf 	bl	8005524 <__NVIC_SetPriority>
#endif
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b2:	f3ef 8305 	mrs	r3, IPSR
 80055b6:	603b      	str	r3, [r7, #0]
  return(result);
 80055b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055be:	f06f 0305 	mvn.w	r3, #5
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	e00c      	b.n	80055e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <osKernelInitialize+0x44>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055ce:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <osKernelInitialize+0x44>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	607b      	str	r3, [r7, #4]
 80055d8:	e002      	b.n	80055e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055e0:	687b      	ldr	r3, [r7, #4]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	200028f4 	.word	0x200028f4

080055f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fa:	f3ef 8305 	mrs	r3, IPSR
 80055fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005600:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005606:	f06f 0305 	mvn.w	r3, #5
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	e010      	b.n	8005630 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <osKernelStart+0x48>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d109      	bne.n	800562a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005616:	f7ff ffbf 	bl	8005598 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <osKernelStart+0x48>)
 800561c:	2202      	movs	r2, #2
 800561e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005620:	f001 fe66 	bl	80072f0 <vTaskStartScheduler>
      stat = osOK;
 8005624:	2300      	movs	r3, #0
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	e002      	b.n	8005630 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800562e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005630:	687b      	ldr	r3, [r7, #4]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	200028f4 	.word	0x200028f4

08005640 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	; 0x38
 8005644:	af04      	add	r7, sp, #16
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005650:	f3ef 8305 	mrs	r3, IPSR
 8005654:	617b      	str	r3, [r7, #20]
  return(result);
 8005656:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005658:	2b00      	cmp	r3, #0
 800565a:	d17e      	bne.n	800575a <osThreadNew+0x11a>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d07b      	beq.n	800575a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005666:	2318      	movs	r3, #24
 8005668:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005672:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d045      	beq.n	8005706 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <osThreadNew+0x48>
        name = attr->name;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <osThreadNew+0x6e>
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	2b38      	cmp	r3, #56	; 0x38
 80056a0:	d805      	bhi.n	80056ae <osThreadNew+0x6e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <osThreadNew+0x72>
        return (NULL);
 80056ae:	2300      	movs	r3, #0
 80056b0:	e054      	b.n	800575c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <osThreadNew+0xa8>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2bbb      	cmp	r3, #187	; 0xbb
 80056d0:	d90a      	bls.n	80056e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d006      	beq.n	80056e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <osThreadNew+0xa8>
        mem = 1;
 80056e2:	2301      	movs	r3, #1
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	e010      	b.n	800570a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10c      	bne.n	800570a <osThreadNew+0xca>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d108      	bne.n	800570a <osThreadNew+0xca>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <osThreadNew+0xca>
          mem = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e001      	b.n	800570a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d110      	bne.n	8005732 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005718:	9202      	str	r2, [sp, #8]
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f001 fb84 	bl	8006e34 <xTaskCreateStatic>
 800572c:	4603      	mov	r3, r0
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	e013      	b.n	800575a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d110      	bne.n	800575a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	b29a      	uxth	r2, r3
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f001 fbcf 	bl	8006eee <xTaskCreate>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d001      	beq.n	800575a <osThreadNew+0x11a>
            hTask = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800575a:	693b      	ldr	r3, [r7, #16]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3728      	adds	r7, #40	; 0x28
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8005768:	2000      	movs	r0, #0
 800576a:	f001 fd1b 	bl	80071a4 <vTaskDelete>
#endif
  for (;;);
 800576e:	e7fe      	b.n	800576e <osThreadExit+0xa>

08005770 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005778:	f3ef 8305 	mrs	r3, IPSR
 800577c:	60bb      	str	r3, [r7, #8]
  return(result);
 800577e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <osDelay+0x1c>
    stat = osErrorISR;
 8005784:	f06f 0305 	mvn.w	r3, #5
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e007      	b.n	800579c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 fd76 	bl	8007288 <vTaskDelay>
    }
  }

  return (stat);
 800579c:	68fb      	ldr	r3, [r7, #12]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b08a      	sub	sp, #40	; 0x28
 80057aa:	af02      	add	r7, sp, #8
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b6:	f3ef 8305 	mrs	r3, IPSR
 80057ba:	613b      	str	r3, [r7, #16]
  return(result);
 80057bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d175      	bne.n	80058ae <osSemaphoreNew+0x108>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d072      	beq.n	80058ae <osSemaphoreNew+0x108>
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d86e      	bhi.n	80058ae <osSemaphoreNew+0x108>
    mem = -1;
 80057d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d015      	beq.n	8005808 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d006      	beq.n	80057f2 <osSemaphoreNew+0x4c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2b4f      	cmp	r3, #79	; 0x4f
 80057ea:	d902      	bls.n	80057f2 <osSemaphoreNew+0x4c>
        mem = 1;
 80057ec:	2301      	movs	r3, #1
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e00c      	b.n	800580c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <osSemaphoreNew+0x66>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <osSemaphoreNew+0x66>
          mem = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e001      	b.n	800580c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005812:	d04c      	beq.n	80058ae <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d128      	bne.n	800586c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10a      	bne.n	8005836 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2203      	movs	r2, #3
 8005826:	9200      	str	r2, [sp, #0]
 8005828:	2200      	movs	r2, #0
 800582a:	2100      	movs	r1, #0
 800582c:	2001      	movs	r0, #1
 800582e:	f000 fb5b 	bl	8005ee8 <xQueueGenericCreateStatic>
 8005832:	61f8      	str	r0, [r7, #28]
 8005834:	e005      	b.n	8005842 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005836:	2203      	movs	r2, #3
 8005838:	2100      	movs	r1, #0
 800583a:	2001      	movs	r0, #1
 800583c:	f000 fbcc 	bl	8005fd8 <xQueueGenericCreate>
 8005840:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d022      	beq.n	800588e <osSemaphoreNew+0xe8>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01f      	beq.n	800588e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800584e:	2300      	movs	r3, #0
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	69f8      	ldr	r0, [r7, #28]
 8005856:	f000 fc87 	bl	8006168 <xQueueGenericSend>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d016      	beq.n	800588e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005860:	69f8      	ldr	r0, [r7, #28]
 8005862:	f001 f913 	bl	8006a8c <vQueueDelete>
            hSemaphore = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e010      	b.n	800588e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d108      	bne.n	8005884 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	461a      	mov	r2, r3
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fc09 	bl	8006092 <xQueueCreateCountingSemaphoreStatic>
 8005880:	61f8      	str	r0, [r7, #28]
 8005882:	e004      	b.n	800588e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fc3a 	bl	8006100 <xQueueCreateCountingSemaphore>
 800588c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00c      	beq.n	80058ae <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e001      	b.n	80058a6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80058a6:	6979      	ldr	r1, [r7, #20]
 80058a8:	69f8      	ldr	r0, [r7, #28]
 80058aa:	f001 fa3b 	bl	8006d24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80058ae:	69fb      	ldr	r3, [r7, #28]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80058d0:	f06f 0303 	mvn.w	r3, #3
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e039      	b.n	800594c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d8:	f3ef 8305 	mrs	r3, IPSR
 80058dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d022      	beq.n	800592a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80058ea:	f06f 0303 	mvn.w	r3, #3
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e02c      	b.n	800594c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	461a      	mov	r2, r3
 80058fc:	2100      	movs	r1, #0
 80058fe:	6938      	ldr	r0, [r7, #16]
 8005900:	f001 f844 	bl	800698c <xQueueReceiveFromISR>
 8005904:	4603      	mov	r3, r0
 8005906:	2b01      	cmp	r3, #1
 8005908:	d003      	beq.n	8005912 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800590a:	f06f 0302 	mvn.w	r3, #2
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e01c      	b.n	800594c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d019      	beq.n	800594c <osSemaphoreAcquire+0x94>
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <osSemaphoreAcquire+0xa0>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	e010      	b.n	800594c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6938      	ldr	r0, [r7, #16]
 800592e:	f000 ff21 	bl	8006774 <xQueueSemaphoreTake>
 8005932:	4603      	mov	r3, r0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d009      	beq.n	800594c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800593e:	f06f 0301 	mvn.w	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e002      	b.n	800594c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005946:	f06f 0302 	mvn.w	r3, #2
 800594a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800594c:	697b      	ldr	r3, [r7, #20]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005972:	f06f 0303 	mvn.w	r3, #3
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e02c      	b.n	80059d4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597a:	f3ef 8305 	mrs	r3, IPSR
 800597e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005982:	2b00      	cmp	r3, #0
 8005984:	d01a      	beq.n	80059bc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	4619      	mov	r1, r3
 8005990:	6938      	ldr	r0, [r7, #16]
 8005992:	f000 fd82 	bl	800649a <xQueueGiveFromISR>
 8005996:	4603      	mov	r3, r0
 8005998:	2b01      	cmp	r3, #1
 800599a:	d003      	beq.n	80059a4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800599c:	f06f 0302 	mvn.w	r3, #2
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e017      	b.n	80059d4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <osSemaphoreRelease+0x78>
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <osSemaphoreRelease+0x84>)
 80059ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	e00b      	b.n	80059d4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80059bc:	2300      	movs	r3, #0
 80059be:	2200      	movs	r2, #0
 80059c0:	2100      	movs	r1, #0
 80059c2:	6938      	ldr	r0, [r7, #16]
 80059c4:	f000 fbd0 	bl	8006168 <xQueueGenericSend>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d002      	beq.n	80059d4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80059ce:	f06f 0302 	mvn.w	r3, #2
 80059d2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80059d4:	697b      	ldr	r3, [r7, #20]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f4:	f3ef 8305 	mrs	r3, IPSR
 80059f8:	613b      	str	r3, [r7, #16]
  return(result);
 80059fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d15f      	bne.n	8005ac0 <osMessageQueueNew+0xdc>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d05c      	beq.n	8005ac0 <osMessageQueueNew+0xdc>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d059      	beq.n	8005ac0 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d029      	beq.n	8005a6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <osMessageQueueNew+0x62>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b4f      	cmp	r3, #79	; 0x4f
 8005a26:	d90e      	bls.n	8005a46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d302      	bcc.n	8005a46 <osMessageQueueNew+0x62>
        mem = 1;
 8005a40:	2301      	movs	r3, #1
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e014      	b.n	8005a70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d110      	bne.n	8005a70 <osMessageQueueNew+0x8c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10c      	bne.n	8005a70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d108      	bne.n	8005a70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <osMessageQueueNew+0x8c>
          mem = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	e001      	b.n	8005a70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d10b      	bne.n	8005a8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	9100      	str	r1, [sp, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fa2f 	bl	8005ee8 <xQueueGenericCreateStatic>
 8005a8a:	61f8      	str	r0, [r7, #28]
 8005a8c:	e008      	b.n	8005aa0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a94:	2200      	movs	r2, #0
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fa9d 	bl	8005fd8 <xQueueGenericCreate>
 8005a9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00c      	beq.n	8005ac0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e001      	b.n	8005ab8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ab8:	6979      	ldr	r1, [r7, #20]
 8005aba:	69f8      	ldr	r0, [r7, #28]
 8005abc:	f001 f932 	bl	8006d24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae4:	f3ef 8305 	mrs	r3, IPSR
 8005ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8005aea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d028      	beq.n	8005b42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <osMessageQueuePut+0x36>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <osMessageQueuePut+0x36>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b02:	f06f 0303 	mvn.w	r3, #3
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e038      	b.n	8005b7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b0e:	f107 0210 	add.w	r2, r7, #16
 8005b12:	2300      	movs	r3, #0
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	69b8      	ldr	r0, [r7, #24]
 8005b18:	f000 fc24 	bl	8006364 <xQueueGenericSendFromISR>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d003      	beq.n	8005b2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b22:	f06f 0302 	mvn.w	r3, #2
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e028      	b.n	8005b7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d025      	beq.n	8005b7c <osMessageQueuePut+0xb0>
 8005b30:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <osMessageQueuePut+0xbc>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	e01c      	b.n	8005b7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <osMessageQueuePut+0x82>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b4e:	f06f 0303 	mvn.w	r3, #3
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e012      	b.n	8005b7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b56:	2300      	movs	r3, #0
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	69b8      	ldr	r0, [r7, #24]
 8005b5e:	f000 fb03 	bl	8006168 <xQueueGenericSend>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d009      	beq.n	8005b7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b6e:	f06f 0301 	mvn.w	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	e002      	b.n	8005b7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b76:	f06f 0302 	mvn.w	r3, #2
 8005b7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ba2:	f3ef 8305 	mrs	r3, IPSR
 8005ba6:	617b      	str	r3, [r7, #20]
  return(result);
 8005ba8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d028      	beq.n	8005c00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <osMessageQueueGet+0x34>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <osMessageQueueGet+0x34>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005bc0:	f06f 0303 	mvn.w	r3, #3
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	e037      	b.n	8005c38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005bcc:	f107 0310 	add.w	r3, r7, #16
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	69b8      	ldr	r0, [r7, #24]
 8005bd6:	f000 fed9 	bl	800698c <xQueueReceiveFromISR>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d003      	beq.n	8005be8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005be0:	f06f 0302 	mvn.w	r3, #2
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	e027      	b.n	8005c38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d024      	beq.n	8005c38 <osMessageQueueGet+0xac>
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <osMessageQueueGet+0xb8>)
 8005bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	e01b      	b.n	8005c38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <osMessageQueueGet+0x80>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d103      	bne.n	8005c14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c0c:	f06f 0303 	mvn.w	r3, #3
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e011      	b.n	8005c38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	69b8      	ldr	r0, [r7, #24]
 8005c1a:	f000 fccb 	bl	80065b4 <xQueueReceive>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d009      	beq.n	8005c38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c2a:	f06f 0301 	mvn.w	r3, #1
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e002      	b.n	8005c38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c32:	f06f 0302 	mvn.w	r3, #2
 8005c36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c38:	69fb      	ldr	r3, [r7, #28]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	e000ed04 	.word	0xe000ed04

08005c48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a07      	ldr	r2, [pc, #28]	; (8005c74 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4a06      	ldr	r2, [pc, #24]	; (8005c78 <vApplicationGetIdleTaskMemory+0x30>)
 8005c5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2280      	movs	r2, #128	; 0x80
 8005c64:	601a      	str	r2, [r3, #0]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	200028f8 	.word	0x200028f8
 8005c78:	200029b4 	.word	0x200029b4

08005c7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a07      	ldr	r2, [pc, #28]	; (8005ca8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a06      	ldr	r2, [pc, #24]	; (8005cac <vApplicationGetTimerTaskMemory+0x30>)
 8005c92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c9a:	601a      	str	r2, [r3, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20002bb4 	.word	0x20002bb4
 8005cac:	20002c70 	.word	0x20002c70

08005cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 0208 	add.w	r2, r3, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f103 0208 	add.w	r2, r3, #8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f103 0208 	add.w	r2, r3, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d68:	d103      	bne.n	8005d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e00c      	b.n	8005d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3308      	adds	r3, #8
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e002      	b.n	8005d80 <vListInsert+0x2e>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d2f6      	bcs.n	8005d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6892      	ldr	r2, [r2, #8]
 8005dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6852      	ldr	r2, [r2, #4]
 8005de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d103      	bne.n	8005df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e42:	f002 fe4f 	bl	8008ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	441a      	add	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	3b01      	subs	r3, #1
 8005e74:	68f9      	ldr	r1, [r7, #12]
 8005e76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	441a      	add	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	22ff      	movs	r2, #255	; 0xff
 8005e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	22ff      	movs	r2, #255	; 0xff
 8005e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d114      	bne.n	8005ec2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01a      	beq.n	8005ed6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3310      	adds	r3, #16
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fcbd 	bl	8007824 <xTaskRemoveFromEventList>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d012      	beq.n	8005ed6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <xQueueGenericReset+0xcc>)
 8005eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	e009      	b.n	8005ed6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3310      	adds	r3, #16
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fef2 	bl	8005cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff feed 	bl	8005cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ed6:	f002 fe35 	bl	8008b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005eda:	2301      	movs	r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	; 0x38
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <xQueueGenericCreateStatic+0x52>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <xQueueGenericCreateStatic+0x56>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <xQueueGenericCreateStatic+0x58>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	623b      	str	r3, [r7, #32]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <xQueueGenericCreateStatic+0x7e>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <xQueueGenericCreateStatic+0x82>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <xQueueGenericCreateStatic+0x84>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	61fb      	str	r3, [r7, #28]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f86:	2350      	movs	r3, #80	; 0x50
 8005f88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d00a      	beq.n	8005fa6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	61bb      	str	r3, [r7, #24]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fa6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00d      	beq.n	8005fce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f83f 	bl	800604c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3730      	adds	r7, #48	; 0x30
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	613b      	str	r3, [r7, #16]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	fb02 f303 	mul.w	r3, r2, r3
 800600a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	3350      	adds	r3, #80	; 0x50
 8006010:	4618      	mov	r0, r3
 8006012:	f002 fe89 	bl	8008d28 <pvPortMalloc>
 8006016:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d011      	beq.n	8006042 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	3350      	adds	r3, #80	; 0x50
 8006026:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006030:	79fa      	ldrb	r2, [r7, #7]
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f805 	bl	800604c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006042:	69bb      	ldr	r3, [r7, #24]
	}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e002      	b.n	800606e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800607a:	2101      	movs	r1, #1
 800607c:	69b8      	ldr	r0, [r7, #24]
 800607e:	f7ff fecb 	bl	8005e18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006092:	b580      	push	{r7, lr}
 8006094:	b08a      	sub	sp, #40	; 0x28
 8006096:	af02      	add	r7, sp, #8
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	61bb      	str	r3, [r7, #24]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d90a      	bls.n	80060d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	617b      	str	r3, [r7, #20]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80060d8:	2302      	movs	r3, #2
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ff00 	bl	8005ee8 <xQueueGenericCreateStatic>
 80060e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80060f6:	69fb      	ldr	r3, [r7, #28]
	}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3720      	adds	r7, #32
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	613b      	str	r3, [r7, #16]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d90a      	bls.n	8006144 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60fb      	str	r3, [r7, #12]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006144:	2202      	movs	r2, #2
 8006146:	2100      	movs	r1, #0
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff ff45 	bl	8005fd8 <xQueueGenericCreate>
 800614e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800615c:	697b      	ldr	r3, [r7, #20]
	}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xQueueGenericSend+0x32>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <xQueueGenericSend+0x40>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <xQueueGenericSend+0x44>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <xQueueGenericSend+0x46>
 80061ac:	2300      	movs	r3, #0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <xQueueGenericSend+0x60>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d103      	bne.n	80061d6 <xQueueGenericSend+0x6e>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <xQueueGenericSend+0x72>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueGenericSend+0x74>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	623b      	str	r3, [r7, #32]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f6:	f001 fcd7 	bl	8007ba8 <xTaskGetSchedulerState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <xQueueGenericSend+0x9e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <xQueueGenericSend+0xa2>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xQueueGenericSend+0xa4>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericSend+0xbe>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	61fb      	str	r3, [r7, #28]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006226:	f002 fc5d 	bl	8008ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <xQueueGenericSend+0xd4>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d129      	bne.n	8006290 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006242:	f000 fc5e 	bl	8006b02 <prvCopyDataToQueue>
 8006246:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d010      	beq.n	8006272 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	3324      	adds	r3, #36	; 0x24
 8006254:	4618      	mov	r0, r3
 8006256:	f001 fae5 	bl	8007824 <xTaskRemoveFromEventList>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d013      	beq.n	8006288 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006260:	4b3f      	ldr	r3, [pc, #252]	; (8006360 <xQueueGenericSend+0x1f8>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	e00a      	b.n	8006288 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006278:	4b39      	ldr	r3, [pc, #228]	; (8006360 <xQueueGenericSend+0x1f8>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006288:	f002 fc5c 	bl	8008b44 <vPortExitCritical>
				return pdPASS;
 800628c:	2301      	movs	r3, #1
 800628e:	e063      	b.n	8006358 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006296:	f002 fc55 	bl	8008b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800629a:	2300      	movs	r3, #0
 800629c:	e05c      	b.n	8006358 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062a4:	f107 0314 	add.w	r3, r7, #20
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fb1f 	bl	80078ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ae:	2301      	movs	r3, #1
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062b2:	f002 fc47 	bl	8008b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062b6:	f001 f88b 	bl	80073d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ba:	f002 fc13 	bl	8008ae4 <vPortEnterCritical>
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ca:	d103      	bne.n	80062d4 <xQueueGenericSend+0x16c>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062da:	b25b      	sxtb	r3, r3
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e0:	d103      	bne.n	80062ea <xQueueGenericSend+0x182>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ea:	f002 fc2b 	bl	8008b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ee:	1d3a      	adds	r2, r7, #4
 80062f0:	f107 0314 	add.w	r3, r7, #20
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 fb0e 	bl	8007918 <xTaskCheckForTimeOut>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d124      	bne.n	800634c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006304:	f000 fcf5 	bl	8006cf2 <prvIsQueueFull>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d018      	beq.n	8006340 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	3310      	adds	r3, #16
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fa34 	bl	8007784 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800631c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631e:	f000 fc80 	bl	8006c22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006322:	f001 f863 	bl	80073ec <xTaskResumeAll>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f af7c 	bne.w	8006226 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800632e:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <xQueueGenericSend+0x1f8>)
 8006330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	e772      	b.n	8006226 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006342:	f000 fc6e 	bl	8006c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006346:	f001 f851 	bl	80073ec <xTaskResumeAll>
 800634a:	e76c      	b.n	8006226 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800634c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634e:	f000 fc68 	bl	8006c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006352:	f001 f84b 	bl	80073ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006358:	4618      	mov	r0, r3
 800635a:	3738      	adds	r7, #56	; 0x38
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b090      	sub	sp, #64	; 0x40
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800638e:	bf00      	nop
 8006390:	e7fe      	b.n	8006390 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <xQueueGenericSendFromISR+0x3c>
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <xQueueGenericSendFromISR+0x40>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <xQueueGenericSendFromISR+0x42>
 80063a4:	2300      	movs	r3, #0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d103      	bne.n	80063ce <xQueueGenericSendFromISR+0x6a>
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericSendFromISR+0x6e>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericSendFromISR+0x70>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	623b      	str	r3, [r7, #32]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ee:	f002 fc5b 	bl	8008ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063f2:	f3ef 8211 	mrs	r2, BASEPRI
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61fa      	str	r2, [r7, #28]
 8006408:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800640a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	429a      	cmp	r2, r3
 8006418:	d302      	bcc.n	8006420 <xQueueGenericSendFromISR+0xbc>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d12f      	bne.n	8006480 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006436:	f000 fb64 	bl	8006b02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800643a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006442:	d112      	bne.n	800646a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d016      	beq.n	800647a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	3324      	adds	r3, #36	; 0x24
 8006450:	4618      	mov	r0, r3
 8006452:	f001 f9e7 	bl	8007824 <xTaskRemoveFromEventList>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e007      	b.n	800647a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800646a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800646e:	3301      	adds	r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	b25a      	sxtb	r2, r3
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800647a:	2301      	movs	r3, #1
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800647e:	e001      	b.n	8006484 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800648e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006492:	4618      	mov	r0, r3
 8006494:	3740      	adds	r7, #64	; 0x40
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b08e      	sub	sp, #56	; 0x38
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	623b      	str	r3, [r7, #32]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61fb      	str	r3, [r7, #28]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d103      	bne.n	80064f2 <xQueueGiveFromISR+0x58>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <xQueueGiveFromISR+0x5c>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <xQueueGiveFromISR+0x5e>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <xQueueGiveFromISR+0x78>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	61bb      	str	r3, [r7, #24]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006512:	f002 fbc9 	bl	8008ca8 <vPortValidateInterruptPriority>
	__asm volatile
 8006516:	f3ef 8211 	mrs	r2, BASEPRI
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	617a      	str	r2, [r7, #20]
 800652c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800652e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800653e:	429a      	cmp	r2, r3
 8006540:	d22b      	bcs.n	800659a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006554:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655c:	d112      	bne.n	8006584 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f95a 	bl	8007824 <xTaskRemoveFromEventList>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	e007      	b.n	8006594 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006588:	3301      	adds	r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	b25a      	sxtb	r2, r3
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006594:	2301      	movs	r3, #1
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
 8006598:	e001      	b.n	800659e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800659a:	2300      	movs	r3, #0
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f383 8811 	msr	BASEPRI, r3
}
 80065a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3738      	adds	r7, #56	; 0x38
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08c      	sub	sp, #48	; 0x30
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065c0:	2300      	movs	r3, #0
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <xQueueReceive+0x30>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	623b      	str	r3, [r7, #32]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <xQueueReceive+0x3e>
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <xQueueReceive+0x42>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <xQueueReceive+0x44>
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xQueueReceive+0x5e>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61fb      	str	r3, [r7, #28]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006612:	f001 fac9 	bl	8007ba8 <xTaskGetSchedulerState>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <xQueueReceive+0x6e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <xQueueReceive+0x72>
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <xQueueReceive+0x74>
 8006626:	2300      	movs	r3, #0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <xQueueReceive+0x8e>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	61bb      	str	r3, [r7, #24]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006642:	f002 fa4f 	bl	8008ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01f      	beq.n	8006692 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	f000 fabe 	bl	8006bd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	1e5a      	subs	r2, r3, #1
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00f      	beq.n	800668a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	3310      	adds	r3, #16
 800666e:	4618      	mov	r0, r3
 8006670:	f001 f8d8 	bl	8007824 <xTaskRemoveFromEventList>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800667a:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <xQueueReceive+0x1bc>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800668a:	f002 fa5b 	bl	8008b44 <vPortExitCritical>
				return pdPASS;
 800668e:	2301      	movs	r3, #1
 8006690:	e069      	b.n	8006766 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006698:	f002 fa54 	bl	8008b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800669c:	2300      	movs	r3, #0
 800669e:	e062      	b.n	8006766 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f91e 	bl	80078ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066b4:	f002 fa46 	bl	8008b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066b8:	f000 fe8a 	bl	80073d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066bc:	f002 fa12 	bl	8008ae4 <vPortEnterCritical>
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066cc:	d103      	bne.n	80066d6 <xQueueReceive+0x122>
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e2:	d103      	bne.n	80066ec <xQueueReceive+0x138>
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ec:	f002 fa2a 	bl	8008b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066f0:	1d3a      	adds	r2, r7, #4
 80066f2:	f107 0310 	add.w	r3, r7, #16
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f90d 	bl	8007918 <xTaskCheckForTimeOut>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d123      	bne.n	800674c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006706:	f000 fade 	bl	8006cc6 <prvIsQueueEmpty>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d017      	beq.n	8006740 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4611      	mov	r1, r2
 8006718:	4618      	mov	r0, r3
 800671a:	f001 f833 	bl	8007784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800671e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006720:	f000 fa7f 	bl	8006c22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006724:	f000 fe62 	bl	80073ec <xTaskResumeAll>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d189      	bne.n	8006642 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800672e:	4b10      	ldr	r3, [pc, #64]	; (8006770 <xQueueReceive+0x1bc>)
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	e780      	b.n	8006642 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006742:	f000 fa6e 	bl	8006c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006746:	f000 fe51 	bl	80073ec <xTaskResumeAll>
 800674a:	e77a      	b.n	8006642 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800674c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674e:	f000 fa68 	bl	8006c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006752:	f000 fe4b 	bl	80073ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006758:	f000 fab5 	bl	8006cc6 <prvIsQueueEmpty>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	f43f af6f 	beq.w	8006642 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006766:	4618      	mov	r0, r3
 8006768:	3730      	adds	r7, #48	; 0x30
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08e      	sub	sp, #56	; 0x38
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800677e:	2300      	movs	r3, #0
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	623b      	str	r3, [r7, #32]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	61fb      	str	r3, [r7, #28]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067c4:	f001 f9f0 	bl	8007ba8 <xTaskGetSchedulerState>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <xQueueSemaphoreTake+0x60>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <xQueueSemaphoreTake+0x64>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <xQueueSemaphoreTake+0x66>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	61bb      	str	r3, [r7, #24]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067f4:	f002 f976 	bl	8008ae4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d024      	beq.n	800684e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	1e5a      	subs	r2, r3, #1
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006814:	f001 fb3e 	bl	8007e94 <pvTaskIncrementMutexHeldCount>
 8006818:	4602      	mov	r2, r0
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00f      	beq.n	8006846 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	3310      	adds	r3, #16
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fffa 	bl	8007824 <xTaskRemoveFromEventList>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006836:	4b54      	ldr	r3, [pc, #336]	; (8006988 <xQueueSemaphoreTake+0x214>)
 8006838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006846:	f002 f97d 	bl	8008b44 <vPortExitCritical>
				return pdPASS;
 800684a:	2301      	movs	r3, #1
 800684c:	e097      	b.n	800697e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d111      	bne.n	8006878 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	617b      	str	r3, [r7, #20]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006870:	f002 f968 	bl	8008b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006874:	2300      	movs	r3, #0
 8006876:	e082      	b.n	800697e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800687e:	f107 030c 	add.w	r3, r7, #12
 8006882:	4618      	mov	r0, r3
 8006884:	f001 f832 	bl	80078ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800688c:	f002 f95a 	bl	8008b44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006890:	f000 fd9e 	bl	80073d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006894:	f002 f926 	bl	8008ae4 <vPortEnterCritical>
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800689e:	b25b      	sxtb	r3, r3
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a4:	d103      	bne.n	80068ae <xQueueSemaphoreTake+0x13a>
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b4:	b25b      	sxtb	r3, r3
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ba:	d103      	bne.n	80068c4 <xQueueSemaphoreTake+0x150>
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c4:	f002 f93e 	bl	8008b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068c8:	463a      	mov	r2, r7
 80068ca:	f107 030c 	add.w	r3, r7, #12
 80068ce:	4611      	mov	r1, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f821 	bl	8007918 <xTaskCheckForTimeOut>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d132      	bne.n	8006942 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068de:	f000 f9f2 	bl	8006cc6 <prvIsQueueEmpty>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d026      	beq.n	8006936 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80068f0:	f002 f8f8 	bl	8008ae4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 f973 	bl	8007be4 <xTaskPriorityInherit>
 80068fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006900:	f002 f920 	bl	8008b44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	3324      	adds	r3, #36	; 0x24
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	4611      	mov	r1, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f000 ff39 	bl	8007784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006914:	f000 f985 	bl	8006c22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006918:	f000 fd68 	bl	80073ec <xTaskResumeAll>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f47f af68 	bne.w	80067f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006924:	4b18      	ldr	r3, [pc, #96]	; (8006988 <xQueueSemaphoreTake+0x214>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	e75e      	b.n	80067f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006938:	f000 f973 	bl	8006c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800693c:	f000 fd56 	bl	80073ec <xTaskResumeAll>
 8006940:	e758      	b.n	80067f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006944:	f000 f96d 	bl	8006c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006948:	f000 fd50 	bl	80073ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800694c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800694e:	f000 f9ba 	bl	8006cc6 <prvIsQueueEmpty>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	f43f af4d 	beq.w	80067f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00d      	beq.n	800697c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006960:	f002 f8c0 	bl	8008ae4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006966:	f000 f8b4 	bl	8006ad2 <prvGetDisinheritPriorityAfterTimeout>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fa0c 	bl	8007d90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006978:	f002 f8e4 	bl	8008b44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800697c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800697e:	4618      	mov	r0, r3
 8006980:	3738      	adds	r7, #56	; 0x38
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	623b      	str	r3, [r7, #32]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <xQueueReceiveFromISR+0x3a>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <xQueueReceiveFromISR+0x3e>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueReceiveFromISR+0x40>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61fb      	str	r3, [r7, #28]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069e6:	f002 f95f 	bl	8008ca8 <vPortValidateInterruptPriority>
	__asm volatile
 80069ea:	f3ef 8211 	mrs	r2, BASEPRI
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	61ba      	str	r2, [r7, #24]
 8006a00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02f      	beq.n	8006a72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a20:	f000 f8d9 	bl	8006bd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	1e5a      	subs	r2, r3, #1
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a34:	d112      	bne.n	8006a5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	3310      	adds	r3, #16
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 feee 	bl	8007824 <xTaskRemoveFromEventList>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00e      	beq.n	8006a6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e007      	b.n	8006a6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a60:	3301      	adds	r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	b25a      	sxtb	r2, r3
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a70:	e001      	b.n	8006a76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f383 8811 	msr	BASEPRI, r3
}
 8006a80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3738      	adds	r7, #56	; 0x38
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <vQueueDelete+0x28>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f95f 	bl	8006d78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f002 f9fb 	bl	8008ec0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d006      	beq.n	8006af0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	e001      	b.n	8006af4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006af4:	68fb      	ldr	r3, [r7, #12]
	}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10d      	bne.n	8006b3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d14d      	bne.n	8006bc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f8c1 	bl	8007cb4 <xTaskPriorityDisinherit>
 8006b32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	609a      	str	r2, [r3, #8]
 8006b3a:	e043      	b.n	8006bc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d119      	bne.n	8006b76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6858      	ldr	r0, [r3, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	f002 fc08 	bl	8009362 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	441a      	add	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d32b      	bcc.n	8006bc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	e026      	b.n	8006bc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68d8      	ldr	r0, [r3, #12]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	f002 fbee 	bl	8009362 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	425b      	negs	r3, r3
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d207      	bcs.n	8006bb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	425b      	negs	r3, r3
 8006bac:	441a      	add	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d105      	bne.n	8006bc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bcc:	697b      	ldr	r3, [r7, #20]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d018      	beq.n	8006c1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	441a      	add	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d303      	bcc.n	8006c0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68d9      	ldr	r1, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	461a      	mov	r2, r3
 8006c14:	6838      	ldr	r0, [r7, #0]
 8006c16:	f002 fba4 	bl	8009362 <memcpy>
	}
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c2a:	f001 ff5b 	bl	8008ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c36:	e011      	b.n	8006c5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d012      	beq.n	8006c66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3324      	adds	r3, #36	; 0x24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fded 	bl	8007824 <xTaskRemoveFromEventList>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c50:	f000 fec4 	bl	80079dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dce9      	bgt.n	8006c38 <prvUnlockQueue+0x16>
 8006c64:	e000      	b.n	8006c68 <prvUnlockQueue+0x46>
					break;
 8006c66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	22ff      	movs	r2, #255	; 0xff
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c70:	f001 ff68 	bl	8008b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c74:	f001 ff36 	bl	8008ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c80:	e011      	b.n	8006ca6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d012      	beq.n	8006cb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fdc8 	bl	8007824 <xTaskRemoveFromEventList>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c9a:	f000 fe9f 	bl	80079dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dce9      	bgt.n	8006c82 <prvUnlockQueue+0x60>
 8006cae:	e000      	b.n	8006cb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006cba:	f001 ff43 	bl	8008b44 <vPortExitCritical>
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cce:	f001 ff09 	bl	8008ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	e001      	b.n	8006ce4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ce4:	f001 ff2e 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cfa:	f001 fef3 	bl	8008ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d102      	bne.n	8006d10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e001      	b.n	8006d14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d14:	f001 ff16 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e014      	b.n	8006d5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d34:	4a0f      	ldr	r2, [pc, #60]	; (8006d74 <vQueueAddToRegistry+0x50>)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d40:	490c      	ldr	r1, [pc, #48]	; (8006d74 <vQueueAddToRegistry+0x50>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <vQueueAddToRegistry+0x50>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4413      	add	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d56:	e006      	b.n	8006d66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b07      	cmp	r3, #7
 8006d62:	d9e7      	bls.n	8006d34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20003070 	.word	0x20003070

08006d78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e016      	b.n	8006db4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d86:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <vQueueUnregisterQueue+0x50>)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d10b      	bne.n	8006dae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d96:	4a0c      	ldr	r2, [pc, #48]	; (8006dc8 <vQueueUnregisterQueue+0x50>)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006da0:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <vQueueUnregisterQueue+0x50>)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	2200      	movs	r2, #0
 8006daa:	605a      	str	r2, [r3, #4]
				break;
 8006dac:	e006      	b.n	8006dbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d9e5      	bls.n	8006d86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20003070 	.word	0x20003070

08006dcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ddc:	f001 fe82 	bl	8008ae4 <vPortEnterCritical>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006de6:	b25b      	sxtb	r3, r3
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d103      	bne.n	8006df6 <vQueueWaitForMessageRestricted+0x2a>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dfc:	b25b      	sxtb	r3, r3
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e02:	d103      	bne.n	8006e0c <vQueueWaitForMessageRestricted+0x40>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e0c:	f001 fe9a 	bl	8008b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d106      	bne.n	8006e26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	3324      	adds	r3, #36	; 0x24
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fcd3 	bl	80077cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e26:	6978      	ldr	r0, [r7, #20]
 8006e28:	f7ff fefb 	bl	8006c22 <prvUnlockQueue>
	}
 8006e2c:	bf00      	nop
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08e      	sub	sp, #56	; 0x38
 8006e38:	af04      	add	r7, sp, #16
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	623b      	str	r3, [r7, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xTaskCreateStatic+0x46>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	61fb      	str	r3, [r7, #28]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e7a:	23bc      	movs	r3, #188	; 0xbc
 8006e7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2bbc      	cmp	r3, #188	; 0xbc
 8006e82:	d00a      	beq.n	8006e9a <xTaskCreateStatic+0x66>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61bb      	str	r3, [r7, #24]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01e      	beq.n	8006ee0 <xTaskCreateStatic+0xac>
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01b      	beq.n	8006ee0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9303      	str	r3, [sp, #12]
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	9302      	str	r3, [sp, #8]
 8006ec2:	f107 0314 	add.w	r3, r7, #20
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f850 	bl	8006f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eda:	f000 f8f3 	bl	80070c4 <prvAddNewTaskToReadyList>
 8006ede:	e001      	b.n	8006ee4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ee4:	697b      	ldr	r3, [r7, #20]
	}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3728      	adds	r7, #40	; 0x28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b08c      	sub	sp, #48	; 0x30
 8006ef2:	af04      	add	r7, sp, #16
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 ff10 	bl	8008d28 <pvPortMalloc>
 8006f08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00e      	beq.n	8006f2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f10:	20bc      	movs	r0, #188	; 0xbc
 8006f12:	f001 ff09 	bl	8008d28 <pvPortMalloc>
 8006f16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
 8006f24:	e005      	b.n	8006f32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f26:	6978      	ldr	r0, [r7, #20]
 8006f28:	f001 ffca 	bl	8008ec0 <vPortFree>
 8006f2c:	e001      	b.n	8006f32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f40:	88fa      	ldrh	r2, [r7, #6]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	9302      	str	r3, [sp, #8]
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f80e 	bl	8006f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f5c:	69f8      	ldr	r0, [r7, #28]
 8006f5e:	f000 f8b1 	bl	80070c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f62:	2301      	movs	r3, #1
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e002      	b.n	8006f6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3720      	adds	r7, #32
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	461a      	mov	r2, r3
 8006f90:	21a5      	movs	r1, #165	; 0xa5
 8006f92:	f002 f9f4 	bl	800937e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	617b      	str	r3, [r7, #20]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01f      	beq.n	8007016 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	e012      	b.n	8007002 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	7819      	ldrb	r1, [r3, #0]
 8006fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	3334      	adds	r3, #52	; 0x34
 8006fec:	460a      	mov	r2, r1
 8006fee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d006      	beq.n	800700a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	61fb      	str	r3, [r7, #28]
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2b0f      	cmp	r3, #15
 8007006:	d9e9      	bls.n	8006fdc <prvInitialiseNewTask+0x64>
 8007008:	e000      	b.n	800700c <prvInitialiseNewTask+0x94>
			{
				break;
 800700a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007014:	e003      	b.n	800701e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	2b37      	cmp	r3, #55	; 0x37
 8007022:	d901      	bls.n	8007028 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007024:	2337      	movs	r3, #55	; 0x37
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800702c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007032:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	2200      	movs	r2, #0
 8007038:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	3304      	adds	r3, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fe56 	bl	8005cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	3318      	adds	r3, #24
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fe51 	bl	8005cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007052:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007062:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	2200      	movs	r2, #0
 8007070:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	3354      	adds	r3, #84	; 0x54
 8007078:	2260      	movs	r2, #96	; 0x60
 800707a:	2100      	movs	r1, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f002 f97e 	bl	800937e <memset>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <prvInitialiseNewTask+0x140>)
 8007086:	659a      	str	r2, [r3, #88]	; 0x58
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <prvInitialiseNewTask+0x144>)
 800708c:	65da      	str	r2, [r3, #92]	; 0x5c
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <prvInitialiseNewTask+0x148>)
 8007092:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	69b8      	ldr	r0, [r7, #24]
 800709a:	f001 fbf5 	bl	8008888 <pxPortInitialiseStack>
 800709e:	4602      	mov	r2, r0
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070b0:	bf00      	nop
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	0800a7e8 	.word	0x0800a7e8
 80070bc:	0800a808 	.word	0x0800a808
 80070c0:	0800a7c8 	.word	0x0800a7c8

080070c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070cc:	f001 fd0a 	bl	8008ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070d0:	4b2d      	ldr	r3, [pc, #180]	; (8007188 <prvAddNewTaskToReadyList+0xc4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a2c      	ldr	r2, [pc, #176]	; (8007188 <prvAddNewTaskToReadyList+0xc4>)
 80070d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070da:	4b2c      	ldr	r3, [pc, #176]	; (800718c <prvAddNewTaskToReadyList+0xc8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070e2:	4a2a      	ldr	r2, [pc, #168]	; (800718c <prvAddNewTaskToReadyList+0xc8>)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070e8:	4b27      	ldr	r3, [pc, #156]	; (8007188 <prvAddNewTaskToReadyList+0xc4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d110      	bne.n	8007112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070f0:	f000 fc98 	bl	8007a24 <prvInitialiseTaskLists>
 80070f4:	e00d      	b.n	8007112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070f6:	4b26      	ldr	r3, [pc, #152]	; (8007190 <prvAddNewTaskToReadyList+0xcc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070fe:	4b23      	ldr	r3, [pc, #140]	; (800718c <prvAddNewTaskToReadyList+0xc8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	429a      	cmp	r2, r3
 800710a:	d802      	bhi.n	8007112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800710c:	4a1f      	ldr	r2, [pc, #124]	; (800718c <prvAddNewTaskToReadyList+0xc8>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <prvAddNewTaskToReadyList+0xd0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a1e      	ldr	r2, [pc, #120]	; (8007194 <prvAddNewTaskToReadyList+0xd0>)
 800711a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800711c:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <prvAddNewTaskToReadyList+0xd0>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <prvAddNewTaskToReadyList+0xd4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d903      	bls.n	8007138 <prvAddNewTaskToReadyList+0x74>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4a18      	ldr	r2, [pc, #96]	; (8007198 <prvAddNewTaskToReadyList+0xd4>)
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4a15      	ldr	r2, [pc, #84]	; (800719c <prvAddNewTaskToReadyList+0xd8>)
 8007146:	441a      	add	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3304      	adds	r3, #4
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7fe fddb 	bl	8005d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007154:	f001 fcf6 	bl	8008b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007158:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <prvAddNewTaskToReadyList+0xcc>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00e      	beq.n	800717e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <prvAddNewTaskToReadyList+0xc8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	429a      	cmp	r2, r3
 800716c:	d207      	bcs.n	800717e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800716e:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <prvAddNewTaskToReadyList+0xdc>)
 8007170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20003584 	.word	0x20003584
 800718c:	200030b0 	.word	0x200030b0
 8007190:	20003590 	.word	0x20003590
 8007194:	200035a0 	.word	0x200035a0
 8007198:	2000358c 	.word	0x2000358c
 800719c:	200030b4 	.word	0x200030b4
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80071ac:	f001 fc9a 	bl	8008ae4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <vTaskDelete+0x18>
 80071b6:	4b2c      	ldr	r3, [pc, #176]	; (8007268 <vTaskDelete+0xc4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	e000      	b.n	80071be <vTaskDelete+0x1a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fdfd 	bl	8005dc4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3318      	adds	r3, #24
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fdf4 	bl	8005dc4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80071dc:	4b23      	ldr	r3, [pc, #140]	; (800726c <vTaskDelete+0xc8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	4a22      	ldr	r2, [pc, #136]	; (800726c <vTaskDelete+0xc8>)
 80071e4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80071e6:	4b20      	ldr	r3, [pc, #128]	; (8007268 <vTaskDelete+0xc4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d10b      	bne.n	8007208 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	481e      	ldr	r0, [pc, #120]	; (8007270 <vTaskDelete+0xcc>)
 80071f8:	f7fe fd87 	bl	8005d0a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80071fc:	4b1d      	ldr	r3, [pc, #116]	; (8007274 <vTaskDelete+0xd0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3301      	adds	r3, #1
 8007202:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <vTaskDelete+0xd0>)
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e009      	b.n	800721c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007208:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <vTaskDelete+0xd4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3b01      	subs	r3, #1
 800720e:	4a1a      	ldr	r2, [pc, #104]	; (8007278 <vTaskDelete+0xd4>)
 8007210:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fc74 	bl	8007b00 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007218:	f000 fca6 	bl	8007b68 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800721c:	f001 fc92 	bl	8008b44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007220:	4b16      	ldr	r3, [pc, #88]	; (800727c <vTaskDelete+0xd8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01b      	beq.n	8007260 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007228:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <vTaskDelete+0xc4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	429a      	cmp	r2, r3
 8007230:	d116      	bne.n	8007260 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007232:	4b13      	ldr	r3, [pc, #76]	; (8007280 <vTaskDelete+0xdc>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <vTaskDelete+0xac>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	60bb      	str	r3, [r7, #8]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <vTaskDelete+0xe0>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	200030b0 	.word	0x200030b0
 800726c:	200035a0 	.word	0x200035a0
 8007270:	20003558 	.word	0x20003558
 8007274:	2000356c 	.word	0x2000356c
 8007278:	20003584 	.word	0x20003584
 800727c:	20003590 	.word	0x20003590
 8007280:	200035ac 	.word	0x200035ac
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d017      	beq.n	80072ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <vTaskDelay+0x60>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <vTaskDelay+0x30>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	60bb      	str	r3, [r7, #8]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072b8:	f000 f88a 	bl	80073d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072bc:	2100      	movs	r1, #0
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 ff40 	bl	8008144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072c4:	f000 f892 	bl	80073ec <xTaskResumeAll>
 80072c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d107      	bne.n	80072e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <vTaskDelay+0x64>)
 80072d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	200035ac 	.word	0x200035ac
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072fe:	463a      	mov	r2, r7
 8007300:	1d39      	adds	r1, r7, #4
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fc9e 	bl	8005c48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	9202      	str	r2, [sp, #8]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	460a      	mov	r2, r1
 800731e:	4924      	ldr	r1, [pc, #144]	; (80073b0 <vTaskStartScheduler+0xc0>)
 8007320:	4824      	ldr	r0, [pc, #144]	; (80073b4 <vTaskStartScheduler+0xc4>)
 8007322:	f7ff fd87 	bl	8006e34 <xTaskCreateStatic>
 8007326:	4603      	mov	r3, r0
 8007328:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <vTaskStartScheduler+0xc8>)
 800732a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800732c:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <vTaskStartScheduler+0xc8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e001      	b.n	800733e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d102      	bne.n	800734a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007344:	f000 ff52 	bl	80081ec <xTimerCreateTimerTask>
 8007348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d11b      	bne.n	8007388 <vTaskStartScheduler+0x98>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007364:	4b15      	ldr	r3, [pc, #84]	; (80073bc <vTaskStartScheduler+0xcc>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3354      	adds	r3, #84	; 0x54
 800736a:	4a15      	ldr	r2, [pc, #84]	; (80073c0 <vTaskStartScheduler+0xd0>)
 800736c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <vTaskStartScheduler+0xd4>)
 8007370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <vTaskStartScheduler+0xd8>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <vTaskStartScheduler+0xdc>)
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007382:	f001 fb0d 	bl	80089a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007386:	e00e      	b.n	80073a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800738e:	d10a      	bne.n	80073a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60fb      	str	r3, [r7, #12]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <vTaskStartScheduler+0xb4>
}
 80073a6:	bf00      	nop
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	0800a6d4 	.word	0x0800a6d4
 80073b4:	080079f5 	.word	0x080079f5
 80073b8:	200035a8 	.word	0x200035a8
 80073bc:	200030b0 	.word	0x200030b0
 80073c0:	20000018 	.word	0x20000018
 80073c4:	200035a4 	.word	0x200035a4
 80073c8:	20003590 	.word	0x20003590
 80073cc:	20003588 	.word	0x20003588

080073d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <vTaskSuspendAll+0x18>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3301      	adds	r3, #1
 80073da:	4a03      	ldr	r2, [pc, #12]	; (80073e8 <vTaskSuspendAll+0x18>)
 80073dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073de:	bf00      	nop
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	200035ac 	.word	0x200035ac

080073ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073fa:	4b42      	ldr	r3, [pc, #264]	; (8007504 <xTaskResumeAll+0x118>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <xTaskResumeAll+0x2c>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	603b      	str	r3, [r7, #0]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007418:	f001 fb64 	bl	8008ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800741c:	4b39      	ldr	r3, [pc, #228]	; (8007504 <xTaskResumeAll+0x118>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3b01      	subs	r3, #1
 8007422:	4a38      	ldr	r2, [pc, #224]	; (8007504 <xTaskResumeAll+0x118>)
 8007424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007426:	4b37      	ldr	r3, [pc, #220]	; (8007504 <xTaskResumeAll+0x118>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d162      	bne.n	80074f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800742e:	4b36      	ldr	r3, [pc, #216]	; (8007508 <xTaskResumeAll+0x11c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d05e      	beq.n	80074f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007436:	e02f      	b.n	8007498 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007438:	4b34      	ldr	r3, [pc, #208]	; (800750c <xTaskResumeAll+0x120>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3318      	adds	r3, #24
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fcbd 	bl	8005dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fcb8 	bl	8005dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	4b2d      	ldr	r3, [pc, #180]	; (8007510 <xTaskResumeAll+0x124>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d903      	bls.n	8007468 <xTaskResumeAll+0x7c>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4a2a      	ldr	r2, [pc, #168]	; (8007510 <xTaskResumeAll+0x124>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4a27      	ldr	r2, [pc, #156]	; (8007514 <xTaskResumeAll+0x128>)
 8007476:	441a      	add	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f7fe fc43 	bl	8005d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	4b23      	ldr	r3, [pc, #140]	; (8007518 <xTaskResumeAll+0x12c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	429a      	cmp	r2, r3
 8007490:	d302      	bcc.n	8007498 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007492:	4b22      	ldr	r3, [pc, #136]	; (800751c <xTaskResumeAll+0x130>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007498:	4b1c      	ldr	r3, [pc, #112]	; (800750c <xTaskResumeAll+0x120>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1cb      	bne.n	8007438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074a6:	f000 fb5f 	bl	8007b68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074aa:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <xTaskResumeAll+0x134>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d010      	beq.n	80074d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074b6:	f000 f847 	bl	8007548 <xTaskIncrementTick>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80074c0:	4b16      	ldr	r3, [pc, #88]	; (800751c <xTaskResumeAll+0x130>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f1      	bne.n	80074b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <xTaskResumeAll+0x134>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074d8:	4b10      	ldr	r3, [pc, #64]	; (800751c <xTaskResumeAll+0x130>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <xTaskResumeAll+0x138>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074f4:	f001 fb26 	bl	8008b44 <vPortExitCritical>

	return xAlreadyYielded;
 80074f8:	68bb      	ldr	r3, [r7, #8]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200035ac 	.word	0x200035ac
 8007508:	20003584 	.word	0x20003584
 800750c:	20003544 	.word	0x20003544
 8007510:	2000358c 	.word	0x2000358c
 8007514:	200030b4 	.word	0x200030b4
 8007518:	200030b0 	.word	0x200030b0
 800751c:	20003598 	.word	0x20003598
 8007520:	20003594 	.word	0x20003594
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <xTaskGetTickCount+0x1c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007534:	687b      	ldr	r3, [r7, #4]
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20003588 	.word	0x20003588

08007548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007552:	4b4f      	ldr	r3, [pc, #316]	; (8007690 <xTaskIncrementTick+0x148>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 808f 	bne.w	800767a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800755c:	4b4d      	ldr	r3, [pc, #308]	; (8007694 <xTaskIncrementTick+0x14c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007564:	4a4b      	ldr	r2, [pc, #300]	; (8007694 <xTaskIncrementTick+0x14c>)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d120      	bne.n	80075b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007570:	4b49      	ldr	r3, [pc, #292]	; (8007698 <xTaskIncrementTick+0x150>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <xTaskIncrementTick+0x48>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	603b      	str	r3, [r7, #0]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <xTaskIncrementTick+0x46>
 8007590:	4b41      	ldr	r3, [pc, #260]	; (8007698 <xTaskIncrementTick+0x150>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	4b41      	ldr	r3, [pc, #260]	; (800769c <xTaskIncrementTick+0x154>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3f      	ldr	r2, [pc, #252]	; (8007698 <xTaskIncrementTick+0x150>)
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4a3f      	ldr	r2, [pc, #252]	; (800769c <xTaskIncrementTick+0x154>)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	4b3e      	ldr	r3, [pc, #248]	; (80076a0 <xTaskIncrementTick+0x158>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a3d      	ldr	r2, [pc, #244]	; (80076a0 <xTaskIncrementTick+0x158>)
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	f000 fadb 	bl	8007b68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075b2:	4b3c      	ldr	r3, [pc, #240]	; (80076a4 <xTaskIncrementTick+0x15c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d349      	bcc.n	8007650 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075bc:	4b36      	ldr	r3, [pc, #216]	; (8007698 <xTaskIncrementTick+0x150>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <xTaskIncrementTick+0x15c>)
 80075c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075cc:	601a      	str	r2, [r3, #0]
					break;
 80075ce:	e03f      	b.n	8007650 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d0:	4b31      	ldr	r3, [pc, #196]	; (8007698 <xTaskIncrementTick+0x150>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d203      	bcs.n	80075f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075e8:	4a2e      	ldr	r2, [pc, #184]	; (80076a4 <xTaskIncrementTick+0x15c>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075ee:	e02f      	b.n	8007650 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fbe5 	bl	8005dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	3318      	adds	r3, #24
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fbdc 	bl	8005dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <xTaskIncrementTick+0x160>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d903      	bls.n	8007620 <xTaskIncrementTick+0xd8>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	4a22      	ldr	r2, [pc, #136]	; (80076a8 <xTaskIncrementTick+0x160>)
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <xTaskIncrementTick+0x164>)
 800762e:	441a      	add	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3304      	adds	r3, #4
 8007634:	4619      	mov	r1, r3
 8007636:	4610      	mov	r0, r2
 8007638:	f7fe fb67 	bl	8005d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4b1b      	ldr	r3, [pc, #108]	; (80076b0 <xTaskIncrementTick+0x168>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	429a      	cmp	r2, r3
 8007648:	d3b8      	bcc.n	80075bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800764a:	2301      	movs	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764e:	e7b5      	b.n	80075bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007650:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <xTaskIncrementTick+0x168>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007656:	4915      	ldr	r1, [pc, #84]	; (80076ac <xTaskIncrementTick+0x164>)
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d901      	bls.n	800766c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800766c:	4b11      	ldr	r3, [pc, #68]	; (80076b4 <xTaskIncrementTick+0x16c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007674:	2301      	movs	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e004      	b.n	8007684 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <xTaskIncrementTick+0x170>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3301      	adds	r3, #1
 8007680:	4a0d      	ldr	r2, [pc, #52]	; (80076b8 <xTaskIncrementTick+0x170>)
 8007682:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007684:	697b      	ldr	r3, [r7, #20]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	200035ac 	.word	0x200035ac
 8007694:	20003588 	.word	0x20003588
 8007698:	2000353c 	.word	0x2000353c
 800769c:	20003540 	.word	0x20003540
 80076a0:	2000359c 	.word	0x2000359c
 80076a4:	200035a4 	.word	0x200035a4
 80076a8:	2000358c 	.word	0x2000358c
 80076ac:	200030b4 	.word	0x200030b4
 80076b0:	200030b0 	.word	0x200030b0
 80076b4:	20003598 	.word	0x20003598
 80076b8:	20003594 	.word	0x20003594

080076bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076c2:	4b2a      	ldr	r3, [pc, #168]	; (800776c <vTaskSwitchContext+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076ca:	4b29      	ldr	r3, [pc, #164]	; (8007770 <vTaskSwitchContext+0xb4>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076d0:	e046      	b.n	8007760 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80076d2:	4b27      	ldr	r3, [pc, #156]	; (8007770 <vTaskSwitchContext+0xb4>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d8:	4b26      	ldr	r3, [pc, #152]	; (8007774 <vTaskSwitchContext+0xb8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e010      	b.n	8007702 <vTaskSwitchContext+0x46>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <vTaskSwitchContext+0x40>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	607b      	str	r3, [r7, #4]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <vTaskSwitchContext+0x3e>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3b01      	subs	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	491d      	ldr	r1, [pc, #116]	; (8007778 <vTaskSwitchContext+0xbc>)
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0e4      	beq.n	80076e0 <vTaskSwitchContext+0x24>
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4a15      	ldr	r2, [pc, #84]	; (8007778 <vTaskSwitchContext+0xbc>)
 8007722:	4413      	add	r3, r2
 8007724:	60bb      	str	r3, [r7, #8]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	605a      	str	r2, [r3, #4]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3308      	adds	r3, #8
 8007738:	429a      	cmp	r2, r3
 800773a:	d104      	bne.n	8007746 <vTaskSwitchContext+0x8a>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	605a      	str	r2, [r3, #4]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	4a0b      	ldr	r2, [pc, #44]	; (800777c <vTaskSwitchContext+0xc0>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	4a08      	ldr	r2, [pc, #32]	; (8007774 <vTaskSwitchContext+0xb8>)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <vTaskSwitchContext+0xc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3354      	adds	r3, #84	; 0x54
 800775c:	4a08      	ldr	r2, [pc, #32]	; (8007780 <vTaskSwitchContext+0xc4>)
 800775e:	6013      	str	r3, [r2, #0]
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	200035ac 	.word	0x200035ac
 8007770:	20003598 	.word	0x20003598
 8007774:	2000358c 	.word	0x2000358c
 8007778:	200030b4 	.word	0x200030b4
 800777c:	200030b0 	.word	0x200030b0
 8007780:	20000018 	.word	0x20000018

08007784 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <vTaskPlaceOnEventList+0x44>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3318      	adds	r3, #24
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fe facd 	bl	8005d52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077b8:	2101      	movs	r1, #1
 80077ba:	6838      	ldr	r0, [r7, #0]
 80077bc:	f000 fcc2 	bl	8008144 <prvAddCurrentTaskToDelayedList>
}
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	200030b0 	.word	0x200030b0

080077cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <vTaskPlaceOnEventListRestricted+0x54>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3318      	adds	r3, #24
 80077fa:	4619      	mov	r1, r3
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7fe fa84 	bl	8005d0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800780c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f000 fc97 	bl	8008144 <prvAddCurrentTaskToDelayedList>
	}
 8007816:	bf00      	nop
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200030b0 	.word	0x200030b0

08007824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	60fb      	str	r3, [r7, #12]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3318      	adds	r3, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fab5 	bl	8005dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785a:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <xTaskRemoveFromEventList+0xb0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d11d      	bne.n	800789e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3304      	adds	r3, #4
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe faac 	bl	8005dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007870:	4b19      	ldr	r3, [pc, #100]	; (80078d8 <xTaskRemoveFromEventList+0xb4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d903      	bls.n	8007880 <xTaskRemoveFromEventList+0x5c>
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <xTaskRemoveFromEventList+0xb4>)
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <xTaskRemoveFromEventList+0xb8>)
 800788e:	441a      	add	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f7fe fa37 	bl	8005d0a <vListInsertEnd>
 800789c:	e005      	b.n	80078aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	3318      	adds	r3, #24
 80078a2:	4619      	mov	r1, r3
 80078a4:	480e      	ldr	r0, [pc, #56]	; (80078e0 <xTaskRemoveFromEventList+0xbc>)
 80078a6:	f7fe fa30 	bl	8005d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <xTaskRemoveFromEventList+0xc0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d905      	bls.n	80078c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <xTaskRemoveFromEventList+0xc4>)
 80078be:	2201      	movs	r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e001      	b.n	80078c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078c8:	697b      	ldr	r3, [r7, #20]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	200035ac 	.word	0x200035ac
 80078d8:	2000358c 	.word	0x2000358c
 80078dc:	200030b4 	.word	0x200030b4
 80078e0:	20003544 	.word	0x20003544
 80078e4:	200030b0 	.word	0x200030b0
 80078e8:	20003598 	.word	0x20003598

080078ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <vTaskInternalSetTimeOutState+0x24>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <vTaskInternalSetTimeOutState+0x28>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	605a      	str	r2, [r3, #4]
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	2000359c 	.word	0x2000359c
 8007914:	20003588 	.word	0x20003588

08007918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	613b      	str	r3, [r7, #16]
}
 800793a:	bf00      	nop
 800793c:	e7fe      	b.n	800793c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	60fb      	str	r3, [r7, #12]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800795a:	f001 f8c3 	bl	8008ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800795e:	4b1d      	ldr	r3, [pc, #116]	; (80079d4 <xTaskCheckForTimeOut+0xbc>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007976:	d102      	bne.n	800797e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007978:	2300      	movs	r3, #0
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	e023      	b.n	80079c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <xTaskCheckForTimeOut+0xc0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d007      	beq.n	800799a <xTaskCheckForTimeOut+0x82>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	e015      	b.n	80079c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d20b      	bcs.n	80079bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	1ad2      	subs	r2, r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff ff9b 	bl	80078ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
 80079ba:	e004      	b.n	80079c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079c6:	f001 f8bd 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 80079ca:	69fb      	ldr	r3, [r7, #28]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3720      	adds	r7, #32
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20003588 	.word	0x20003588
 80079d8:	2000359c 	.word	0x2000359c

080079dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079e0:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <vTaskMissedYield+0x14>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
}
 80079e6:	bf00      	nop
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20003598 	.word	0x20003598

080079f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079fc:	f000 f852 	bl	8007aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <prvIdleTask+0x28>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d9f9      	bls.n	80079fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a08:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <prvIdleTask+0x2c>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a18:	e7f0      	b.n	80079fc <prvIdleTask+0x8>
 8007a1a:	bf00      	nop
 8007a1c:	200030b4 	.word	0x200030b4
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	e00c      	b.n	8007a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4a12      	ldr	r2, [pc, #72]	; (8007a84 <prvInitialiseTaskLists+0x60>)
 8007a3c:	4413      	add	r3, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe f936 	bl	8005cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3301      	adds	r3, #1
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b37      	cmp	r3, #55	; 0x37
 8007a4e:	d9ef      	bls.n	8007a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a50:	480d      	ldr	r0, [pc, #52]	; (8007a88 <prvInitialiseTaskLists+0x64>)
 8007a52:	f7fe f92d 	bl	8005cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a56:	480d      	ldr	r0, [pc, #52]	; (8007a8c <prvInitialiseTaskLists+0x68>)
 8007a58:	f7fe f92a 	bl	8005cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a5c:	480c      	ldr	r0, [pc, #48]	; (8007a90 <prvInitialiseTaskLists+0x6c>)
 8007a5e:	f7fe f927 	bl	8005cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a62:	480c      	ldr	r0, [pc, #48]	; (8007a94 <prvInitialiseTaskLists+0x70>)
 8007a64:	f7fe f924 	bl	8005cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a68:	480b      	ldr	r0, [pc, #44]	; (8007a98 <prvInitialiseTaskLists+0x74>)
 8007a6a:	f7fe f921 	bl	8005cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <prvInitialiseTaskLists+0x78>)
 8007a70:	4a05      	ldr	r2, [pc, #20]	; (8007a88 <prvInitialiseTaskLists+0x64>)
 8007a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a74:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <prvInitialiseTaskLists+0x7c>)
 8007a76:	4a05      	ldr	r2, [pc, #20]	; (8007a8c <prvInitialiseTaskLists+0x68>)
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	200030b4 	.word	0x200030b4
 8007a88:	20003514 	.word	0x20003514
 8007a8c:	20003528 	.word	0x20003528
 8007a90:	20003544 	.word	0x20003544
 8007a94:	20003558 	.word	0x20003558
 8007a98:	20003570 	.word	0x20003570
 8007a9c:	2000353c 	.word	0x2000353c
 8007aa0:	20003540 	.word	0x20003540

08007aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aaa:	e019      	b.n	8007ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007aac:	f001 f81a 	bl	8008ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <prvCheckTasksWaitingTermination+0x50>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe f981 	bl	8005dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <prvCheckTasksWaitingTermination+0x54>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4a0b      	ldr	r2, [pc, #44]	; (8007af8 <prvCheckTasksWaitingTermination+0x54>)
 8007aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007acc:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ad6:	f001 f835 	bl	8008b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f810 	bl	8007b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ae0:	4b06      	ldr	r3, [pc, #24]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e1      	bne.n	8007aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20003558 	.word	0x20003558
 8007af8:	20003584 	.word	0x20003584
 8007afc:	2000356c 	.word	0x2000356c

08007b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3354      	adds	r3, #84	; 0x54
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 fcf9 	bl	8009504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d108      	bne.n	8007b2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 f9cd 	bl	8008ec0 <vPortFree>
				vPortFree( pxTCB );
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f9ca 	bl	8008ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b2c:	e018      	b.n	8007b60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d103      	bne.n	8007b40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f9c1 	bl	8008ec0 <vPortFree>
	}
 8007b3e:	e00f      	b.n	8007b60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d00a      	beq.n	8007b60 <prvDeleteTCB+0x60>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60fb      	str	r3, [r7, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <prvDeleteTCB+0x5e>
	}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <prvResetNextTaskUnblockTime+0x38>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8007b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b80:	e008      	b.n	8007b94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b82:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <prvResetNextTaskUnblockTime+0x38>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a04      	ldr	r2, [pc, #16]	; (8007ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8007b92:	6013      	str	r3, [r2, #0]
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	2000353c 	.word	0x2000353c
 8007ba4:	200035a4 	.word	0x200035a4

08007ba8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bae:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <xTaskGetSchedulerState+0x34>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d102      	bne.n	8007bbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	607b      	str	r3, [r7, #4]
 8007bba:	e008      	b.n	8007bce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bbc:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <xTaskGetSchedulerState+0x38>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e001      	b.n	8007bce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bce:	687b      	ldr	r3, [r7, #4]
	}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	20003590 	.word	0x20003590
 8007be0:	200035ac 	.word	0x200035ac

08007be4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d051      	beq.n	8007c9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfe:	4b2a      	ldr	r3, [pc, #168]	; (8007ca8 <xTaskPriorityInherit+0xc4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d241      	bcs.n	8007c8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	db06      	blt.n	8007c1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c10:	4b25      	ldr	r3, [pc, #148]	; (8007ca8 <xTaskPriorityInherit+0xc4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6959      	ldr	r1, [r3, #20]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4a1f      	ldr	r2, [pc, #124]	; (8007cac <xTaskPriorityInherit+0xc8>)
 8007c30:	4413      	add	r3, r2
 8007c32:	4299      	cmp	r1, r3
 8007c34:	d122      	bne.n	8007c7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe f8c2 	bl	8005dc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <xTaskPriorityInherit+0xc4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	4b18      	ldr	r3, [pc, #96]	; (8007cb0 <xTaskPriorityInherit+0xcc>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d903      	bls.n	8007c5e <xTaskPriorityInherit+0x7a>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <xTaskPriorityInherit+0xcc>)
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4a10      	ldr	r2, [pc, #64]	; (8007cac <xTaskPriorityInherit+0xc8>)
 8007c6c:	441a      	add	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f7fe f848 	bl	8005d0a <vListInsertEnd>
 8007c7a:	e004      	b.n	8007c86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <xTaskPriorityInherit+0xc4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c86:	2301      	movs	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e008      	b.n	8007c9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <xTaskPriorityInherit+0xc4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d201      	bcs.n	8007c9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
	}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200030b0 	.word	0x200030b0
 8007cac:	200030b4 	.word	0x200030b4
 8007cb0:	2000358c 	.word	0x2000358c

08007cb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d056      	beq.n	8007d78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cca:	4b2e      	ldr	r3, [pc, #184]	; (8007d84 <xTaskPriorityDisinherit+0xd0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d00a      	beq.n	8007cea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	60fb      	str	r3, [r7, #12]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60bb      	str	r3, [r7, #8]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0c:	1e5a      	subs	r2, r3, #1
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d02c      	beq.n	8007d78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d128      	bne.n	8007d78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe f84a 	bl	8005dc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <xTaskPriorityDisinherit+0xd4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d903      	bls.n	8007d58 <xTaskPriorityDisinherit+0xa4>
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	4a0c      	ldr	r2, [pc, #48]	; (8007d88 <xTaskPriorityDisinherit+0xd4>)
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <xTaskPriorityDisinherit+0xd8>)
 8007d66:	441a      	add	r2, r3
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fd ffcb 	bl	8005d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d78:	697b      	ldr	r3, [r7, #20]
	}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	200030b0 	.word	0x200030b0
 8007d88:	2000358c 	.word	0x2000358c
 8007d8c:	200030b4 	.word	0x200030b4

08007d90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d06a      	beq.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d902      	bls.n	8007dd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	e002      	b.n	8007ddc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d04b      	beq.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d146      	bne.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007df0:	4b25      	ldr	r3, [pc, #148]	; (8007e88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d10a      	bne.n	8007e10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	60bb      	str	r3, [r7, #8]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	69fa      	ldr	r2, [r7, #28]
 8007e1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db04      	blt.n	8007e2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	6959      	ldr	r1, [r3, #20]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e3e:	4413      	add	r3, r2
 8007e40:	4299      	cmp	r1, r3
 8007e42:	d11c      	bne.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fd ffbb 	bl	8005dc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d903      	bls.n	8007e62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	4a0c      	ldr	r2, [pc, #48]	; (8007e90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4a07      	ldr	r2, [pc, #28]	; (8007e8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e70:	441a      	add	r2, r3
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4619      	mov	r1, r3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	f7fd ff46 	bl	8005d0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e7e:	bf00      	nop
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	200030b0 	.word	0x200030b0
 8007e8c:	200030b4 	.word	0x200030b4
 8007e90:	2000358c 	.word	0x2000358c

08007e94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d004      	beq.n	8007eaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ea6:	3201      	adds	r2, #1
 8007ea8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007eaa:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eac:	681b      	ldr	r3, [r3, #0]
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	200030b0 	.word	0x200030b0

08007ebc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007eca:	f000 fe0b 	bl	8008ae4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007ece:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <xTaskNotifyWait+0xb8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d01c      	beq.n	8007f16 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <xTaskNotifyWait+0xb8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	43d2      	mvns	r2, r2
 8007ee8:	400a      	ands	r2, r1
 8007eea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <xTaskNotifyWait+0xb8>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007efe:	2101      	movs	r1, #1
 8007f00:	6838      	ldr	r0, [r7, #0]
 8007f02:	f000 f91f 	bl	8008144 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007f06:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <xTaskNotifyWait+0xbc>)
 8007f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007f16:	f000 fe15 	bl	8008b44 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007f1a:	f000 fde3 	bl	8008ae4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007f24:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <xTaskNotifyWait+0xb8>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007f30:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <xTaskNotifyWait+0xb8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d002      	beq.n	8007f44 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	e00a      	b.n	8007f5a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007f44:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <xTaskNotifyWait+0xb8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	43d2      	mvns	r2, r2
 8007f50:	400a      	ands	r2, r1
 8007f52:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f5a:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <xTaskNotifyWait+0xb8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8007f64:	f000 fdee 	bl	8008b44 <vPortExitCritical>

		return xReturn;
 8007f68:	697b      	ldr	r3, [r7, #20]
	}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	200030b0 	.word	0x200030b0
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08e      	sub	sp, #56	; 0x38
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	603b      	str	r3, [r7, #0]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10a      	bne.n	8007fac <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fa8:	bf00      	nop
 8007faa:	e7fe      	b.n	8007faa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fac:	f000 fe7c 	bl	8008ca8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	623a      	str	r2, [r7, #32]
 8007fca:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007fcc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d82f      	bhi.n	8008058 <xTaskGenericNotifyFromISR+0xdc>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <xTaskGenericNotifyFromISR+0x84>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	0800807b 	.word	0x0800807b
 8008004:	08008015 	.word	0x08008015
 8008008:	08008027 	.word	0x08008027
 800800c:	08008037 	.word	0x08008037
 8008010:	08008041 	.word	0x08008041
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	431a      	orrs	r2, r3
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008024:	e02c      	b.n	8008080 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008034:	e024      	b.n	8008080 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800803e:	e01f      	b.n	8008080 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008040:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008044:	2b02      	cmp	r3, #2
 8008046:	d004      	beq.n	8008052 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008050:	e016      	b.n	8008080 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8008052:	2300      	movs	r3, #0
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008056:	e013      	b.n	8008080 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008062:	d00c      	beq.n	800807e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	61bb      	str	r3, [r7, #24]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800807a:	bf00      	nop
 800807c:	e000      	b.n	8008080 <xTaskGenericNotifyFromISR+0x104>
					break;
 800807e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008084:	2b01      	cmp	r3, #1
 8008086:	d146      	bne.n	8008116 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	617b      	str	r3, [r7, #20]
}
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080a6:	4b21      	ldr	r3, [pc, #132]	; (800812c <xTaskGenericNotifyFromISR+0x1b0>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d11d      	bne.n	80080ea <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	3304      	adds	r3, #4
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fd fe86 	bl	8005dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	4b1c      	ldr	r3, [pc, #112]	; (8008130 <xTaskGenericNotifyFromISR+0x1b4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d903      	bls.n	80080cc <xTaskGenericNotifyFromISR+0x150>
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	4a19      	ldr	r2, [pc, #100]	; (8008130 <xTaskGenericNotifyFromISR+0x1b4>)
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4a16      	ldr	r2, [pc, #88]	; (8008134 <xTaskGenericNotifyFromISR+0x1b8>)
 80080da:	441a      	add	r2, r3
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fd fe11 	bl	8005d0a <vListInsertEnd>
 80080e8:	e005      	b.n	80080f6 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	3318      	adds	r3, #24
 80080ee:	4619      	mov	r1, r3
 80080f0:	4811      	ldr	r0, [pc, #68]	; (8008138 <xTaskGenericNotifyFromISR+0x1bc>)
 80080f2:	f7fd fe0a 	bl	8005d0a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fa:	4b10      	ldr	r3, [pc, #64]	; (800813c <xTaskGenericNotifyFromISR+0x1c0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	429a      	cmp	r2, r3
 8008102:	d908      	bls.n	8008116 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800810a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810c:	2201      	movs	r2, #1
 800810e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <xTaskGenericNotifyFromISR+0x1c4>)
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	613b      	str	r3, [r7, #16]
	__asm volatile
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f383 8811 	msr	BASEPRI, r3
}
 8008120:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008124:	4618      	mov	r0, r3
 8008126:	3738      	adds	r7, #56	; 0x38
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	200035ac 	.word	0x200035ac
 8008130:	2000358c 	.word	0x2000358c
 8008134:	200030b4 	.word	0x200030b4
 8008138:	20003544 	.word	0x20003544
 800813c:	200030b0 	.word	0x200030b0
 8008140:	20003598 	.word	0x20003598

08008144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008154:	4b20      	ldr	r3, [pc, #128]	; (80081d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3304      	adds	r3, #4
 800815a:	4618      	mov	r0, r3
 800815c:	f7fd fe32 	bl	8005dc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008166:	d10a      	bne.n	800817e <prvAddCurrentTaskToDelayedList+0x3a>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800816e:	4b1a      	ldr	r3, [pc, #104]	; (80081d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3304      	adds	r3, #4
 8008174:	4619      	mov	r1, r3
 8008176:	4819      	ldr	r0, [pc, #100]	; (80081dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008178:	f7fd fdc7 	bl	8005d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800817c:	e026      	b.n	80081cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	429a      	cmp	r2, r3
 8008194:	d209      	bcs.n	80081aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fd fdd5 	bl	8005d52 <vListInsert>
}
 80081a8:	e010      	b.n	80081cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081aa:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f7fd fdcb 	bl	8005d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d202      	bcs.n	80081cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081c6:	4a08      	ldr	r2, [pc, #32]	; (80081e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6013      	str	r3, [r2, #0]
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20003588 	.word	0x20003588
 80081d8:	200030b0 	.word	0x200030b0
 80081dc:	20003570 	.word	0x20003570
 80081e0:	20003540 	.word	0x20003540
 80081e4:	2000353c 	.word	0x2000353c
 80081e8:	200035a4 	.word	0x200035a4

080081ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081f6:	f000 fb07 	bl	8008808 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081fa:	4b1c      	ldr	r3, [pc, #112]	; (800826c <xTimerCreateTimerTask+0x80>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d021      	beq.n	8008246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800820a:	1d3a      	adds	r2, r7, #4
 800820c:	f107 0108 	add.w	r1, r7, #8
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	4618      	mov	r0, r3
 8008216:	f7fd fd31 	bl	8005c7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	9202      	str	r2, [sp, #8]
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	2302      	movs	r3, #2
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	2300      	movs	r3, #0
 800822a:	460a      	mov	r2, r1
 800822c:	4910      	ldr	r1, [pc, #64]	; (8008270 <xTimerCreateTimerTask+0x84>)
 800822e:	4811      	ldr	r0, [pc, #68]	; (8008274 <xTimerCreateTimerTask+0x88>)
 8008230:	f7fe fe00 	bl	8006e34 <xTaskCreateStatic>
 8008234:	4603      	mov	r3, r0
 8008236:	4a10      	ldr	r2, [pc, #64]	; (8008278 <xTimerCreateTimerTask+0x8c>)
 8008238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800823a:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <xTimerCreateTimerTask+0x8c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008242:	2301      	movs	r3, #1
 8008244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	613b      	str	r3, [r7, #16]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008262:	697b      	ldr	r3, [r7, #20]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	200035e0 	.word	0x200035e0
 8008270:	0800a6dc 	.word	0x0800a6dc
 8008274:	080083b1 	.word	0x080083b1
 8008278:	200035e4 	.word	0x200035e4

0800827c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800828a:	2300      	movs	r3, #0
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	623b      	str	r3, [r7, #32]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082aa:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <xTimerGenericCommand+0x98>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d02a      	beq.n	8008308 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b05      	cmp	r3, #5
 80082c2:	dc18      	bgt.n	80082f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082c4:	f7ff fc70 	bl	8007ba8 <xTaskGetSchedulerState>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d109      	bne.n	80082e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082ce:	4b11      	ldr	r3, [pc, #68]	; (8008314 <xTimerGenericCommand+0x98>)
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f107 0110 	add.w	r1, r7, #16
 80082d6:	2300      	movs	r3, #0
 80082d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082da:	f7fd ff45 	bl	8006168 <xQueueGenericSend>
 80082de:	6278      	str	r0, [r7, #36]	; 0x24
 80082e0:	e012      	b.n	8008308 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <xTimerGenericCommand+0x98>)
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	f107 0110 	add.w	r1, r7, #16
 80082ea:	2300      	movs	r3, #0
 80082ec:	2200      	movs	r2, #0
 80082ee:	f7fd ff3b 	bl	8006168 <xQueueGenericSend>
 80082f2:	6278      	str	r0, [r7, #36]	; 0x24
 80082f4:	e008      	b.n	8008308 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082f6:	4b07      	ldr	r3, [pc, #28]	; (8008314 <xTimerGenericCommand+0x98>)
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	f107 0110 	add.w	r1, r7, #16
 80082fe:	2300      	movs	r3, #0
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	f7fe f82f 	bl	8006364 <xQueueGenericSendFromISR>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800830a:	4618      	mov	r0, r3
 800830c:	3728      	adds	r7, #40	; 0x28
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	200035e0 	.word	0x200035e0

08008318 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af02      	add	r7, sp, #8
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008322:	4b22      	ldr	r3, [pc, #136]	; (80083ac <prvProcessExpiredTimer+0x94>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	3304      	adds	r3, #4
 8008330:	4618      	mov	r0, r3
 8008332:	f7fd fd47 	bl	8005dc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d022      	beq.n	800838a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	699a      	ldr	r2, [r3, #24]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	18d1      	adds	r1, r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	6978      	ldr	r0, [r7, #20]
 8008352:	f000 f8d1 	bl	80084f8 <prvInsertTimerInActiveList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01f      	beq.n	800839c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800835c:	2300      	movs	r3, #0
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	2300      	movs	r3, #0
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	2100      	movs	r1, #0
 8008366:	6978      	ldr	r0, [r7, #20]
 8008368:	f7ff ff88 	bl	800827c <xTimerGenericCommand>
 800836c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d113      	bne.n	800839c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	60fb      	str	r3, [r7, #12]
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	b2da      	uxtb	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	6978      	ldr	r0, [r7, #20]
 80083a2:	4798      	blx	r3
}
 80083a4:	bf00      	nop
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	200035d8 	.word	0x200035d8

080083b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083b8:	f107 0308 	add.w	r3, r7, #8
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 f857 	bl	8008470 <prvGetNextExpireTime>
 80083c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4619      	mov	r1, r3
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f803 	bl	80083d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083ce:	f000 f8d5 	bl	800857c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083d2:	e7f1      	b.n	80083b8 <prvTimerTask+0x8>

080083d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083de:	f7fe fff7 	bl	80073d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083e2:	f107 0308 	add.w	r3, r7, #8
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f866 	bl	80084b8 <prvSampleTimeNow>
 80083ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d130      	bne.n	8008456 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10a      	bne.n	8008410 <prvProcessTimerOrBlockTask+0x3c>
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d806      	bhi.n	8008410 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008402:	f7fe fff3 	bl	80073ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ff85 	bl	8008318 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800840e:	e024      	b.n	800845a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008416:	4b13      	ldr	r3, [pc, #76]	; (8008464 <prvProcessTimerOrBlockTask+0x90>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <prvProcessTimerOrBlockTask+0x50>
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <prvProcessTimerOrBlockTask+0x52>
 8008424:	2300      	movs	r3, #0
 8008426:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008428:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <prvProcessTimerOrBlockTask+0x94>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	f7fe fcc9 	bl	8006dcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800843a:	f7fe ffd7 	bl	80073ec <xTaskResumeAll>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008444:	4b09      	ldr	r3, [pc, #36]	; (800846c <prvProcessTimerOrBlockTask+0x98>)
 8008446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	f3bf 8f6f 	isb	sy
}
 8008454:	e001      	b.n	800845a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008456:	f7fe ffc9 	bl	80073ec <xTaskResumeAll>
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	200035dc 	.word	0x200035dc
 8008468:	200035e0 	.word	0x200035e0
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008478:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <prvGetNextExpireTime+0x44>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <prvGetNextExpireTime+0x16>
 8008482:	2201      	movs	r2, #1
 8008484:	e000      	b.n	8008488 <prvGetNextExpireTime+0x18>
 8008486:	2200      	movs	r2, #0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <prvGetNextExpireTime+0x44>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e001      	b.n	80084a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084a4:	68fb      	ldr	r3, [r7, #12]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	200035d8 	.word	0x200035d8

080084b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084c0:	f7ff f832 	bl	8007528 <xTaskGetTickCount>
 80084c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <prvSampleTimeNow+0x3c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d205      	bcs.n	80084dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084d0:	f000 f936 	bl	8008740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	e002      	b.n	80084e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084e2:	4a04      	ldr	r2, [pc, #16]	; (80084f4 <prvSampleTimeNow+0x3c>)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200035e8 	.word	0x200035e8

080084f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	429a      	cmp	r2, r3
 800851c:	d812      	bhi.n	8008544 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	429a      	cmp	r2, r3
 800852a:	d302      	bcc.n	8008532 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800852c:	2301      	movs	r3, #1
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	e01b      	b.n	800856a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <prvInsertTimerInActiveList+0x7c>)
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7fd fc08 	bl	8005d52 <vListInsert>
 8008542:	e012      	b.n	800856a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d206      	bcs.n	800855a <prvInsertTimerInActiveList+0x62>
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d302      	bcc.n	800855a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008554:	2301      	movs	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e007      	b.n	800856a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800855a:	4b07      	ldr	r3, [pc, #28]	; (8008578 <prvInsertTimerInActiveList+0x80>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3304      	adds	r3, #4
 8008562:	4619      	mov	r1, r3
 8008564:	4610      	mov	r0, r2
 8008566:	f7fd fbf4 	bl	8005d52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800856a:	697b      	ldr	r3, [r7, #20]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	200035dc 	.word	0x200035dc
 8008578:	200035d8 	.word	0x200035d8

0800857c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	; 0x38
 8008580:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008582:	e0ca      	b.n	800871a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	da18      	bge.n	80085bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800858a:	1d3b      	adds	r3, r7, #4
 800858c:	3304      	adds	r3, #4
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	61fb      	str	r3, [r7, #28]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b2:	6850      	ldr	r0, [r2, #4]
 80085b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b6:	6892      	ldr	r2, [r2, #8]
 80085b8:	4611      	mov	r1, r2
 80085ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f2c0 80aa 	blt.w	8008718 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	3304      	adds	r3, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd fbf5 	bl	8005dc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085da:	463b      	mov	r3, r7
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff ff6b 	bl	80084b8 <prvSampleTimeNow>
 80085e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	f200 8097 	bhi.w	800871a <prvProcessReceivedCommands+0x19e>
 80085ec:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <prvProcessReceivedCommands+0x78>)
 80085ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f2:	bf00      	nop
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	0800861d 	.word	0x0800861d
 8008600:	08008691 	.word	0x08008691
 8008604:	080086a5 	.word	0x080086a5
 8008608:	080086ef 	.word	0x080086ef
 800860c:	0800861d 	.word	0x0800861d
 8008610:	0800861d 	.word	0x0800861d
 8008614:	08008691 	.word	0x08008691
 8008618:	080086a5 	.word	0x080086a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	18d1      	adds	r1, r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800863c:	f7ff ff5c 	bl	80084f8 <prvInsertTimerInActiveList>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d069      	beq.n	800871a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d05e      	beq.n	800871a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	441a      	add	r2, r3
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	2300      	movs	r3, #0
 800866a:	2100      	movs	r1, #0
 800866c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800866e:	f7ff fe05 	bl	800827c <xTimerGenericCommand>
 8008672:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d14f      	bne.n	800871a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61bb      	str	r3, [r7, #24]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086a2:	e03a      	b.n	800871a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086aa:	f043 0301 	orr.w	r3, r3, #1
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	617b      	str	r3, [r7, #20]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	18d1      	adds	r1, r2, r3
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e8:	f7ff ff06 	bl	80084f8 <prvInsertTimerInActiveList>
					break;
 80086ec:	e015      	b.n	800871a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80086fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086fe:	f000 fbdf 	bl	8008ec0 <vPortFree>
 8008702:	e00a      	b.n	800871a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	b2da      	uxtb	r2, r3
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008716:	e000      	b.n	800871a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008718:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800871a:	4b08      	ldr	r3, [pc, #32]	; (800873c <prvProcessReceivedCommands+0x1c0>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	1d39      	adds	r1, r7, #4
 8008720:	2200      	movs	r2, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd ff46 	bl	80065b4 <xQueueReceive>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	f47f af2a 	bne.w	8008584 <prvProcessReceivedCommands+0x8>
	}
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	3730      	adds	r7, #48	; 0x30
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	200035e0 	.word	0x200035e0

08008740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008746:	e048      	b.n	80087da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008748:	4b2d      	ldr	r3, [pc, #180]	; (8008800 <prvSwitchTimerLists+0xc0>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008752:	4b2b      	ldr	r3, [pc, #172]	; (8008800 <prvSwitchTimerLists+0xc0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3304      	adds	r3, #4
 8008760:	4618      	mov	r0, r3
 8008762:	f7fd fb2f 	bl	8005dc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	d02e      	beq.n	80087da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	4413      	add	r3, r2
 8008784:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	429a      	cmp	r2, r3
 800878c:	d90e      	bls.n	80087ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800879a:	4b19      	ldr	r3, [pc, #100]	; (8008800 <prvSwitchTimerLists+0xc0>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f7fd fad4 	bl	8005d52 <vListInsert>
 80087aa:	e016      	b.n	80087da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087ac:	2300      	movs	r3, #0
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	2300      	movs	r3, #0
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	2100      	movs	r1, #0
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff fd60 	bl	800827c <xTimerGenericCommand>
 80087bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	603b      	str	r3, [r7, #0]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087da:	4b09      	ldr	r3, [pc, #36]	; (8008800 <prvSwitchTimerLists+0xc0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1b1      	bne.n	8008748 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087e4:	4b06      	ldr	r3, [pc, #24]	; (8008800 <prvSwitchTimerLists+0xc0>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <prvSwitchTimerLists+0xc4>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a04      	ldr	r2, [pc, #16]	; (8008800 <prvSwitchTimerLists+0xc0>)
 80087f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087f2:	4a04      	ldr	r2, [pc, #16]	; (8008804 <prvSwitchTimerLists+0xc4>)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	6013      	str	r3, [r2, #0]
}
 80087f8:	bf00      	nop
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	200035d8 	.word	0x200035d8
 8008804:	200035dc 	.word	0x200035dc

08008808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800880e:	f000 f969 	bl	8008ae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <prvCheckForValidListAndQueue+0x60>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d120      	bne.n	800885c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800881a:	4814      	ldr	r0, [pc, #80]	; (800886c <prvCheckForValidListAndQueue+0x64>)
 800881c:	f7fd fa48 	bl	8005cb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008820:	4813      	ldr	r0, [pc, #76]	; (8008870 <prvCheckForValidListAndQueue+0x68>)
 8008822:	f7fd fa45 	bl	8005cb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008826:	4b13      	ldr	r3, [pc, #76]	; (8008874 <prvCheckForValidListAndQueue+0x6c>)
 8008828:	4a10      	ldr	r2, [pc, #64]	; (800886c <prvCheckForValidListAndQueue+0x64>)
 800882a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800882c:	4b12      	ldr	r3, [pc, #72]	; (8008878 <prvCheckForValidListAndQueue+0x70>)
 800882e:	4a10      	ldr	r2, [pc, #64]	; (8008870 <prvCheckForValidListAndQueue+0x68>)
 8008830:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008832:	2300      	movs	r3, #0
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <prvCheckForValidListAndQueue+0x74>)
 8008838:	4a11      	ldr	r2, [pc, #68]	; (8008880 <prvCheckForValidListAndQueue+0x78>)
 800883a:	2110      	movs	r1, #16
 800883c:	200a      	movs	r0, #10
 800883e:	f7fd fb53 	bl	8005ee8 <xQueueGenericCreateStatic>
 8008842:	4603      	mov	r3, r0
 8008844:	4a08      	ldr	r2, [pc, #32]	; (8008868 <prvCheckForValidListAndQueue+0x60>)
 8008846:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008848:	4b07      	ldr	r3, [pc, #28]	; (8008868 <prvCheckForValidListAndQueue+0x60>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008850:	4b05      	ldr	r3, [pc, #20]	; (8008868 <prvCheckForValidListAndQueue+0x60>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	490b      	ldr	r1, [pc, #44]	; (8008884 <prvCheckForValidListAndQueue+0x7c>)
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fa64 	bl	8006d24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800885c:	f000 f972 	bl	8008b44 <vPortExitCritical>
}
 8008860:	bf00      	nop
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200035e0 	.word	0x200035e0
 800886c:	200035b0 	.word	0x200035b0
 8008870:	200035c4 	.word	0x200035c4
 8008874:	200035d8 	.word	0x200035d8
 8008878:	200035dc 	.word	0x200035dc
 800887c:	2000368c 	.word	0x2000368c
 8008880:	200035ec 	.word	0x200035ec
 8008884:	0800a6e4 	.word	0x0800a6e4

08008888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3b04      	subs	r3, #4
 8008898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b04      	subs	r3, #4
 80088a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f023 0201 	bic.w	r2, r3, #1
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088b8:	4a0c      	ldr	r2, [pc, #48]	; (80088ec <pxPortInitialiseStack+0x64>)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3b14      	subs	r3, #20
 80088c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3b04      	subs	r3, #4
 80088ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f06f 0202 	mvn.w	r2, #2
 80088d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3b20      	subs	r3, #32
 80088dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088de:	68fb      	ldr	r3, [r7, #12]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	080088f1 	.word	0x080088f1

080088f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <prvTaskExitError+0x54>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008902:	d00a      	beq.n	800891a <prvTaskExitError+0x2a>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	60fb      	str	r3, [r7, #12]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <prvTaskExitError+0x28>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	60bb      	str	r3, [r7, #8]
}
 800892c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800892e:	bf00      	nop
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0fc      	beq.n	8008930 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	20000014 	.word	0x20000014
	...

08008950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <pxCurrentTCBConst2>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	6808      	ldr	r0, [r1, #0]
 8008956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	f380 8809 	msr	PSP, r0
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	4770      	bx	lr
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst2>:
 8008970:	200030b0 	.word	0x200030b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008978:	4808      	ldr	r0, [pc, #32]	; (800899c <prvPortStartFirstTask+0x24>)
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	6800      	ldr	r0, [r0, #0]
 800897e:	f380 8808 	msr	MSP, r0
 8008982:	f04f 0000 	mov.w	r0, #0
 8008986:	f380 8814 	msr	CONTROL, r0
 800898a:	b662      	cpsie	i
 800898c:	b661      	cpsie	f
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	df00      	svc	0
 8008998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800899a:	bf00      	nop
 800899c:	e000ed08 	.word	0xe000ed08

080089a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089a6:	4b46      	ldr	r3, [pc, #280]	; (8008ac0 <xPortStartScheduler+0x120>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a46      	ldr	r2, [pc, #280]	; (8008ac4 <xPortStartScheduler+0x124>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10a      	bne.n	80089c6 <xPortStartScheduler+0x26>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	613b      	str	r3, [r7, #16]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089c6:	4b3e      	ldr	r3, [pc, #248]	; (8008ac0 <xPortStartScheduler+0x120>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a3f      	ldr	r2, [pc, #252]	; (8008ac8 <xPortStartScheduler+0x128>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d10a      	bne.n	80089e6 <xPortStartScheduler+0x46>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089e6:	4b39      	ldr	r3, [pc, #228]	; (8008acc <xPortStartScheduler+0x12c>)
 80089e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	4b31      	ldr	r3, [pc, #196]	; (8008ad0 <xPortStartScheduler+0x130>)
 8008a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a0e:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a14:	e009      	b.n	8008a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a16:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	4a2d      	ldr	r2, [pc, #180]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	2b80      	cmp	r3, #128	; 0x80
 8008a34:	d0ef      	beq.n	8008a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a36:	4b27      	ldr	r3, [pc, #156]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f1c3 0307 	rsb	r3, r3, #7
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d00a      	beq.n	8008a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	60bb      	str	r3, [r7, #8]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a58:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	021b      	lsls	r3, r3, #8
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a62:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a6a:	4a1a      	ldr	r2, [pc, #104]	; (8008ad4 <xPortStartScheduler+0x134>)
 8008a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a76:	4b18      	ldr	r3, [pc, #96]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a14      	ldr	r2, [pc, #80]	; (8008ad8 <xPortStartScheduler+0x138>)
 8008a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a8e:	f000 f8dd 	bl	8008c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <xPortStartScheduler+0x13c>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a98:	f000 f8fc 	bl	8008c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a9c:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <xPortStartScheduler+0x140>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a0f      	ldr	r2, [pc, #60]	; (8008ae0 <xPortStartScheduler+0x140>)
 8008aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aa8:	f7ff ff66 	bl	8008978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008aac:	f7fe fe06 	bl	80076bc <vTaskSwitchContext>
	prvTaskExitError();
 8008ab0:	f7ff ff1e 	bl	80088f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	e000ed00 	.word	0xe000ed00
 8008ac4:	410fc271 	.word	0x410fc271
 8008ac8:	410fc270 	.word	0x410fc270
 8008acc:	e000e400 	.word	0xe000e400
 8008ad0:	200036dc 	.word	0x200036dc
 8008ad4:	200036e0 	.word	0x200036e0
 8008ad8:	e000ed20 	.word	0xe000ed20
 8008adc:	20000014 	.word	0x20000014
 8008ae0:	e000ef34 	.word	0xe000ef34

08008ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	607b      	str	r3, [r7, #4]
}
 8008afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3301      	adds	r3, #1
 8008b04:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d10f      	bne.n	8008b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <vPortEnterCritical+0x5c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	603b      	str	r3, [r7, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <vPortEnterCritical+0x4a>
	}
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	20000014 	.word	0x20000014
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b4a:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <vPortExitCritical+0x50>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <vPortExitCritical+0x24>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	607b      	str	r3, [r7, #4]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <vPortExitCritical+0x50>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <vPortExitCritical+0x50>)
 8008b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <vPortExitCritical+0x50>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d105      	bne.n	8008b86 <vPortExitCritical+0x42>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	f383 8811 	msr	BASEPRI, r3
}
 8008b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	20000014 	.word	0x20000014
	...

08008ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ba0:	f3ef 8009 	mrs	r0, PSP
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <pxCurrentTCBConst>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	f01e 0f10 	tst.w	lr, #16
 8008bb0:	bf08      	it	eq
 8008bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	6010      	str	r0, [r2, #0]
 8008bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bc4:	f380 8811 	msr	BASEPRI, r0
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f7fe fd74 	bl	80076bc <vTaskSwitchContext>
 8008bd4:	f04f 0000 	mov.w	r0, #0
 8008bd8:	f380 8811 	msr	BASEPRI, r0
 8008bdc:	bc09      	pop	{r0, r3}
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	6808      	ldr	r0, [r1, #0]
 8008be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be6:	f01e 0f10 	tst.w	lr, #16
 8008bea:	bf08      	it	eq
 8008bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bf0:	f380 8809 	msr	PSP, r0
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst>:
 8008c00:	200030b0 	.word	0x200030b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c22:	f7fe fc91 	bl	8007548 <xTaskIncrementTick>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <xPortSysTickHandler+0x40>)
 8008c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
}
 8008c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c56:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <vPortSetupTimerInterrupt+0x38>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <vPortSetupTimerInterrupt+0x3c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <vPortSetupTimerInterrupt+0x40>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	099b      	lsrs	r3, r3, #6
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <vPortSetupTimerInterrupt+0x44>)
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c6e:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c70:	2207      	movs	r2, #7
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	e000e010 	.word	0xe000e010
 8008c84:	e000e018 	.word	0xe000e018
 8008c88:	20000008 	.word	0x20000008
 8008c8c:	10624dd3 	.word	0x10624dd3
 8008c90:	e000e014 	.word	0xe000e014

08008c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ca4 <vPortEnableVFP+0x10>
 8008c98:	6801      	ldr	r1, [r0, #0]
 8008c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c9e:	6001      	str	r1, [r0, #0]
 8008ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ca2:	bf00      	nop
 8008ca4:	e000ed88 	.word	0xe000ed88

08008ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cae:	f3ef 8305 	mrs	r3, IPSR
 8008cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b0f      	cmp	r3, #15
 8008cb8:	d914      	bls.n	8008ce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cba:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <vPortValidateInterruptPriority+0x70>)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cc4:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <vPortValidateInterruptPriority+0x74>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	7afa      	ldrb	r2, [r7, #11]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d20a      	bcs.n	8008ce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ce4:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <vPortValidateInterruptPriority+0x78>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <vPortValidateInterruptPriority+0x7c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d90a      	bls.n	8008d0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	603b      	str	r3, [r7, #0]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <vPortValidateInterruptPriority+0x60>
	}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	e000e3f0 	.word	0xe000e3f0
 8008d1c:	200036dc 	.word	0x200036dc
 8008d20:	e000ed0c 	.word	0xe000ed0c
 8008d24:	200036e0 	.word	0x200036e0

08008d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d34:	f7fe fb4c 	bl	80073d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d38:	4b5b      	ldr	r3, [pc, #364]	; (8008ea8 <pvPortMalloc+0x180>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d40:	f000 f920 	bl	8008f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d44:	4b59      	ldr	r3, [pc, #356]	; (8008eac <pvPortMalloc+0x184>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 8093 	bne.w	8008e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01d      	beq.n	8008d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d58:	2208      	movs	r2, #8
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d014      	beq.n	8008d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f023 0307 	bic.w	r3, r3, #7
 8008d70:	3308      	adds	r3, #8
 8008d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <pvPortMalloc+0x6c>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	617b      	str	r3, [r7, #20]
}
 8008d90:	bf00      	nop
 8008d92:	e7fe      	b.n	8008d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d06e      	beq.n	8008e78 <pvPortMalloc+0x150>
 8008d9a:	4b45      	ldr	r3, [pc, #276]	; (8008eb0 <pvPortMalloc+0x188>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d869      	bhi.n	8008e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008da4:	4b43      	ldr	r3, [pc, #268]	; (8008eb4 <pvPortMalloc+0x18c>)
 8008da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008da8:	4b42      	ldr	r3, [pc, #264]	; (8008eb4 <pvPortMalloc+0x18c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dae:	e004      	b.n	8008dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d903      	bls.n	8008dcc <pvPortMalloc+0xa4>
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1f1      	bne.n	8008db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dcc:	4b36      	ldr	r3, [pc, #216]	; (8008ea8 <pvPortMalloc+0x180>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d050      	beq.n	8008e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2208      	movs	r2, #8
 8008ddc:	4413      	add	r3, r2
 8008dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	2308      	movs	r3, #8
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d91f      	bls.n	8008e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <pvPortMalloc+0xf8>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	613b      	str	r3, [r7, #16]
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	1ad2      	subs	r2, r2, r3
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e32:	69b8      	ldr	r0, [r7, #24]
 8008e34:	f000 f908 	bl	8009048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e38:	4b1d      	ldr	r3, [pc, #116]	; (8008eb0 <pvPortMalloc+0x188>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	4a1b      	ldr	r2, [pc, #108]	; (8008eb0 <pvPortMalloc+0x188>)
 8008e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e46:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <pvPortMalloc+0x188>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <pvPortMalloc+0x190>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d203      	bcs.n	8008e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e52:	4b17      	ldr	r3, [pc, #92]	; (8008eb0 <pvPortMalloc+0x188>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a18      	ldr	r2, [pc, #96]	; (8008eb8 <pvPortMalloc+0x190>)
 8008e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	4b13      	ldr	r3, [pc, #76]	; (8008eac <pvPortMalloc+0x184>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	431a      	orrs	r2, r3
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <pvPortMalloc+0x194>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	4a11      	ldr	r2, [pc, #68]	; (8008ebc <pvPortMalloc+0x194>)
 8008e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e78:	f7fe fab8 	bl	80073ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <pvPortMalloc+0x174>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60fb      	str	r3, [r7, #12]
}
 8008e98:	bf00      	nop
 8008e9a:	e7fe      	b.n	8008e9a <pvPortMalloc+0x172>
	return pvReturn;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3728      	adds	r7, #40	; 0x28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200042a4 	.word	0x200042a4
 8008eac:	200042b8 	.word	0x200042b8
 8008eb0:	200042a8 	.word	0x200042a8
 8008eb4:	2000429c 	.word	0x2000429c
 8008eb8:	200042ac 	.word	0x200042ac
 8008ebc:	200042b0 	.word	0x200042b0

08008ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d04d      	beq.n	8008f6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	425b      	negs	r3, r3
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4413      	add	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <vPortFree+0xb8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <vPortFree+0x44>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	60fb      	str	r3, [r7, #12]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00a      	beq.n	8008f22 <vPortFree+0x62>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	60bb      	str	r3, [r7, #8]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <vPortFree+0xb8>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01e      	beq.n	8008f6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d11a      	bne.n	8008f6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <vPortFree+0xb8>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	43db      	mvns	r3, r3
 8008f42:	401a      	ands	r2, r3
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f48:	f7fe fa42 	bl	80073d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <vPortFree+0xbc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	4a09      	ldr	r2, [pc, #36]	; (8008f7c <vPortFree+0xbc>)
 8008f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f5a:	6938      	ldr	r0, [r7, #16]
 8008f5c:	f000 f874 	bl	8009048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f60:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <vPortFree+0xc0>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3301      	adds	r3, #1
 8008f66:	4a06      	ldr	r2, [pc, #24]	; (8008f80 <vPortFree+0xc0>)
 8008f68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f6a:	f7fe fa3f 	bl	80073ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f6e:	bf00      	nop
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200042b8 	.word	0x200042b8
 8008f7c:	200042a8 	.word	0x200042a8
 8008f80:	200042b4 	.word	0x200042b4

08008f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f90:	4b27      	ldr	r3, [pc, #156]	; (8009030 <prvHeapInit+0xac>)
 8008f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00c      	beq.n	8008fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3307      	adds	r3, #7
 8008fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0307 	bic.w	r3, r3, #7
 8008faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	; (8009030 <prvHeapInit+0xac>)
 8008fb4:	4413      	add	r3, r2
 8008fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fbc:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <prvHeapInit+0xb0>)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <prvHeapInit+0xb0>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	4413      	add	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4a15      	ldr	r2, [pc, #84]	; (8009038 <prvHeapInit+0xb4>)
 8008fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fe6:	4b14      	ldr	r3, [pc, #80]	; (8009038 <prvHeapInit+0xb4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2200      	movs	r2, #0
 8008fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <prvHeapInit+0xb4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <prvHeapInit+0xb4>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	4a0a      	ldr	r2, [pc, #40]	; (800903c <prvHeapInit+0xb8>)
 8009012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	4a09      	ldr	r2, [pc, #36]	; (8009040 <prvHeapInit+0xbc>)
 800901a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800901c:	4b09      	ldr	r3, [pc, #36]	; (8009044 <prvHeapInit+0xc0>)
 800901e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009022:	601a      	str	r2, [r3, #0]
}
 8009024:	bf00      	nop
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	200036e4 	.word	0x200036e4
 8009034:	2000429c 	.word	0x2000429c
 8009038:	200042a4 	.word	0x200042a4
 800903c:	200042ac 	.word	0x200042ac
 8009040:	200042a8 	.word	0x200042a8
 8009044:	200042b8 	.word	0x200042b8

08009048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009050:	4b28      	ldr	r3, [pc, #160]	; (80090f4 <prvInsertBlockIntoFreeList+0xac>)
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e002      	b.n	800905c <prvInsertBlockIntoFreeList+0x14>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d8f7      	bhi.n	8009056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4413      	add	r3, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d108      	bne.n	800908a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	441a      	add	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d118      	bne.n	80090d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <prvInsertBlockIntoFreeList+0xb0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d00d      	beq.n	80090c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e008      	b.n	80090d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <prvInsertBlockIntoFreeList+0xb0>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e003      	b.n	80090d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d002      	beq.n	80090e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2000429c 	.word	0x2000429c
 80090f8:	200042a4 	.word	0x200042a4

080090fc <__errno>:
 80090fc:	4b01      	ldr	r3, [pc, #4]	; (8009104 <__errno+0x8>)
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000018 	.word	0x20000018

08009108 <std>:
 8009108:	2300      	movs	r3, #0
 800910a:	b510      	push	{r4, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	e9c0 3300 	strd	r3, r3, [r0]
 8009112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009116:	6083      	str	r3, [r0, #8]
 8009118:	8181      	strh	r1, [r0, #12]
 800911a:	6643      	str	r3, [r0, #100]	; 0x64
 800911c:	81c2      	strh	r2, [r0, #14]
 800911e:	6183      	str	r3, [r0, #24]
 8009120:	4619      	mov	r1, r3
 8009122:	2208      	movs	r2, #8
 8009124:	305c      	adds	r0, #92	; 0x5c
 8009126:	f000 f92a 	bl	800937e <memset>
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x38>)
 800912c:	6263      	str	r3, [r4, #36]	; 0x24
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <std+0x3c>)
 8009130:	62a3      	str	r3, [r4, #40]	; 0x28
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <std+0x40>)
 8009134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009136:	4b05      	ldr	r3, [pc, #20]	; (800914c <std+0x44>)
 8009138:	6224      	str	r4, [r4, #32]
 800913a:	6323      	str	r3, [r4, #48]	; 0x30
 800913c:	bd10      	pop	{r4, pc}
 800913e:	bf00      	nop
 8009140:	08009645 	.word	0x08009645
 8009144:	08009667 	.word	0x08009667
 8009148:	0800969f 	.word	0x0800969f
 800914c:	080096c3 	.word	0x080096c3

08009150 <_cleanup_r>:
 8009150:	4901      	ldr	r1, [pc, #4]	; (8009158 <_cleanup_r+0x8>)
 8009152:	f000 b8af 	b.w	80092b4 <_fwalk_reent>
 8009156:	bf00      	nop
 8009158:	08009841 	.word	0x08009841

0800915c <__sfmoreglue>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	2268      	movs	r2, #104	; 0x68
 8009160:	1e4d      	subs	r5, r1, #1
 8009162:	4355      	muls	r5, r2
 8009164:	460e      	mov	r6, r1
 8009166:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800916a:	f000 f931 	bl	80093d0 <_malloc_r>
 800916e:	4604      	mov	r4, r0
 8009170:	b140      	cbz	r0, 8009184 <__sfmoreglue+0x28>
 8009172:	2100      	movs	r1, #0
 8009174:	e9c0 1600 	strd	r1, r6, [r0]
 8009178:	300c      	adds	r0, #12
 800917a:	60a0      	str	r0, [r4, #8]
 800917c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009180:	f000 f8fd 	bl	800937e <memset>
 8009184:	4620      	mov	r0, r4
 8009186:	bd70      	pop	{r4, r5, r6, pc}

08009188 <__sfp_lock_acquire>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sfp_lock_acquire+0x8>)
 800918a:	f000 b8d8 	b.w	800933e <__retarget_lock_acquire_recursive>
 800918e:	bf00      	nop
 8009190:	200042bd 	.word	0x200042bd

08009194 <__sfp_lock_release>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__sfp_lock_release+0x8>)
 8009196:	f000 b8d3 	b.w	8009340 <__retarget_lock_release_recursive>
 800919a:	bf00      	nop
 800919c:	200042bd 	.word	0x200042bd

080091a0 <__sinit_lock_acquire>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__sinit_lock_acquire+0x8>)
 80091a2:	f000 b8cc 	b.w	800933e <__retarget_lock_acquire_recursive>
 80091a6:	bf00      	nop
 80091a8:	200042be 	.word	0x200042be

080091ac <__sinit_lock_release>:
 80091ac:	4801      	ldr	r0, [pc, #4]	; (80091b4 <__sinit_lock_release+0x8>)
 80091ae:	f000 b8c7 	b.w	8009340 <__retarget_lock_release_recursive>
 80091b2:	bf00      	nop
 80091b4:	200042be 	.word	0x200042be

080091b8 <__sinit>:
 80091b8:	b510      	push	{r4, lr}
 80091ba:	4604      	mov	r4, r0
 80091bc:	f7ff fff0 	bl	80091a0 <__sinit_lock_acquire>
 80091c0:	69a3      	ldr	r3, [r4, #24]
 80091c2:	b11b      	cbz	r3, 80091cc <__sinit+0x14>
 80091c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c8:	f7ff bff0 	b.w	80091ac <__sinit_lock_release>
 80091cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091d0:	6523      	str	r3, [r4, #80]	; 0x50
 80091d2:	4b13      	ldr	r3, [pc, #76]	; (8009220 <__sinit+0x68>)
 80091d4:	4a13      	ldr	r2, [pc, #76]	; (8009224 <__sinit+0x6c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80091da:	42a3      	cmp	r3, r4
 80091dc:	bf04      	itt	eq
 80091de:	2301      	moveq	r3, #1
 80091e0:	61a3      	streq	r3, [r4, #24]
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f820 	bl	8009228 <__sfp>
 80091e8:	6060      	str	r0, [r4, #4]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 f81c 	bl	8009228 <__sfp>
 80091f0:	60a0      	str	r0, [r4, #8]
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 f818 	bl	8009228 <__sfp>
 80091f8:	2200      	movs	r2, #0
 80091fa:	60e0      	str	r0, [r4, #12]
 80091fc:	2104      	movs	r1, #4
 80091fe:	6860      	ldr	r0, [r4, #4]
 8009200:	f7ff ff82 	bl	8009108 <std>
 8009204:	68a0      	ldr	r0, [r4, #8]
 8009206:	2201      	movs	r2, #1
 8009208:	2109      	movs	r1, #9
 800920a:	f7ff ff7d 	bl	8009108 <std>
 800920e:	68e0      	ldr	r0, [r4, #12]
 8009210:	2202      	movs	r2, #2
 8009212:	2112      	movs	r1, #18
 8009214:	f7ff ff78 	bl	8009108 <std>
 8009218:	2301      	movs	r3, #1
 800921a:	61a3      	str	r3, [r4, #24]
 800921c:	e7d2      	b.n	80091c4 <__sinit+0xc>
 800921e:	bf00      	nop
 8009220:	0800a828 	.word	0x0800a828
 8009224:	08009151 	.word	0x08009151

08009228 <__sfp>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	4607      	mov	r7, r0
 800922c:	f7ff ffac 	bl	8009188 <__sfp_lock_acquire>
 8009230:	4b1e      	ldr	r3, [pc, #120]	; (80092ac <__sfp+0x84>)
 8009232:	681e      	ldr	r6, [r3, #0]
 8009234:	69b3      	ldr	r3, [r6, #24]
 8009236:	b913      	cbnz	r3, 800923e <__sfp+0x16>
 8009238:	4630      	mov	r0, r6
 800923a:	f7ff ffbd 	bl	80091b8 <__sinit>
 800923e:	3648      	adds	r6, #72	; 0x48
 8009240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009244:	3b01      	subs	r3, #1
 8009246:	d503      	bpl.n	8009250 <__sfp+0x28>
 8009248:	6833      	ldr	r3, [r6, #0]
 800924a:	b30b      	cbz	r3, 8009290 <__sfp+0x68>
 800924c:	6836      	ldr	r6, [r6, #0]
 800924e:	e7f7      	b.n	8009240 <__sfp+0x18>
 8009250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009254:	b9d5      	cbnz	r5, 800928c <__sfp+0x64>
 8009256:	4b16      	ldr	r3, [pc, #88]	; (80092b0 <__sfp+0x88>)
 8009258:	60e3      	str	r3, [r4, #12]
 800925a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800925e:	6665      	str	r5, [r4, #100]	; 0x64
 8009260:	f000 f86c 	bl	800933c <__retarget_lock_init_recursive>
 8009264:	f7ff ff96 	bl	8009194 <__sfp_lock_release>
 8009268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800926c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009270:	6025      	str	r5, [r4, #0]
 8009272:	61a5      	str	r5, [r4, #24]
 8009274:	2208      	movs	r2, #8
 8009276:	4629      	mov	r1, r5
 8009278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800927c:	f000 f87f 	bl	800937e <memset>
 8009280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009288:	4620      	mov	r0, r4
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928c:	3468      	adds	r4, #104	; 0x68
 800928e:	e7d9      	b.n	8009244 <__sfp+0x1c>
 8009290:	2104      	movs	r1, #4
 8009292:	4638      	mov	r0, r7
 8009294:	f7ff ff62 	bl	800915c <__sfmoreglue>
 8009298:	4604      	mov	r4, r0
 800929a:	6030      	str	r0, [r6, #0]
 800929c:	2800      	cmp	r0, #0
 800929e:	d1d5      	bne.n	800924c <__sfp+0x24>
 80092a0:	f7ff ff78 	bl	8009194 <__sfp_lock_release>
 80092a4:	230c      	movs	r3, #12
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	e7ee      	b.n	8009288 <__sfp+0x60>
 80092aa:	bf00      	nop
 80092ac:	0800a828 	.word	0x0800a828
 80092b0:	ffff0001 	.word	0xffff0001

080092b4 <_fwalk_reent>:
 80092b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b8:	4606      	mov	r6, r0
 80092ba:	4688      	mov	r8, r1
 80092bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092c0:	2700      	movs	r7, #0
 80092c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092c6:	f1b9 0901 	subs.w	r9, r9, #1
 80092ca:	d505      	bpl.n	80092d8 <_fwalk_reent+0x24>
 80092cc:	6824      	ldr	r4, [r4, #0]
 80092ce:	2c00      	cmp	r4, #0
 80092d0:	d1f7      	bne.n	80092c2 <_fwalk_reent+0xe>
 80092d2:	4638      	mov	r0, r7
 80092d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d8:	89ab      	ldrh	r3, [r5, #12]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d907      	bls.n	80092ee <_fwalk_reent+0x3a>
 80092de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092e2:	3301      	adds	r3, #1
 80092e4:	d003      	beq.n	80092ee <_fwalk_reent+0x3a>
 80092e6:	4629      	mov	r1, r5
 80092e8:	4630      	mov	r0, r6
 80092ea:	47c0      	blx	r8
 80092ec:	4307      	orrs	r7, r0
 80092ee:	3568      	adds	r5, #104	; 0x68
 80092f0:	e7e9      	b.n	80092c6 <_fwalk_reent+0x12>
	...

080092f4 <__libc_init_array>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	4d0d      	ldr	r5, [pc, #52]	; (800932c <__libc_init_array+0x38>)
 80092f8:	4c0d      	ldr	r4, [pc, #52]	; (8009330 <__libc_init_array+0x3c>)
 80092fa:	1b64      	subs	r4, r4, r5
 80092fc:	10a4      	asrs	r4, r4, #2
 80092fe:	2600      	movs	r6, #0
 8009300:	42a6      	cmp	r6, r4
 8009302:	d109      	bne.n	8009318 <__libc_init_array+0x24>
 8009304:	4d0b      	ldr	r5, [pc, #44]	; (8009334 <__libc_init_array+0x40>)
 8009306:	4c0c      	ldr	r4, [pc, #48]	; (8009338 <__libc_init_array+0x44>)
 8009308:	f001 f936 	bl	800a578 <_init>
 800930c:	1b64      	subs	r4, r4, r5
 800930e:	10a4      	asrs	r4, r4, #2
 8009310:	2600      	movs	r6, #0
 8009312:	42a6      	cmp	r6, r4
 8009314:	d105      	bne.n	8009322 <__libc_init_array+0x2e>
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	f855 3b04 	ldr.w	r3, [r5], #4
 800931c:	4798      	blx	r3
 800931e:	3601      	adds	r6, #1
 8009320:	e7ee      	b.n	8009300 <__libc_init_array+0xc>
 8009322:	f855 3b04 	ldr.w	r3, [r5], #4
 8009326:	4798      	blx	r3
 8009328:	3601      	adds	r6, #1
 800932a:	e7f2      	b.n	8009312 <__libc_init_array+0x1e>
 800932c:	0800a868 	.word	0x0800a868
 8009330:	0800a868 	.word	0x0800a868
 8009334:	0800a868 	.word	0x0800a868
 8009338:	0800a86c 	.word	0x0800a86c

0800933c <__retarget_lock_init_recursive>:
 800933c:	4770      	bx	lr

0800933e <__retarget_lock_acquire_recursive>:
 800933e:	4770      	bx	lr

08009340 <__retarget_lock_release_recursive>:
 8009340:	4770      	bx	lr

08009342 <memcmp>:
 8009342:	b510      	push	{r4, lr}
 8009344:	3901      	subs	r1, #1
 8009346:	4402      	add	r2, r0
 8009348:	4290      	cmp	r0, r2
 800934a:	d101      	bne.n	8009350 <memcmp+0xe>
 800934c:	2000      	movs	r0, #0
 800934e:	e005      	b.n	800935c <memcmp+0x1a>
 8009350:	7803      	ldrb	r3, [r0, #0]
 8009352:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009356:	42a3      	cmp	r3, r4
 8009358:	d001      	beq.n	800935e <memcmp+0x1c>
 800935a:	1b18      	subs	r0, r3, r4
 800935c:	bd10      	pop	{r4, pc}
 800935e:	3001      	adds	r0, #1
 8009360:	e7f2      	b.n	8009348 <memcmp+0x6>

08009362 <memcpy>:
 8009362:	440a      	add	r2, r1
 8009364:	4291      	cmp	r1, r2
 8009366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800936a:	d100      	bne.n	800936e <memcpy+0xc>
 800936c:	4770      	bx	lr
 800936e:	b510      	push	{r4, lr}
 8009370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009378:	4291      	cmp	r1, r2
 800937a:	d1f9      	bne.n	8009370 <memcpy+0xe>
 800937c:	bd10      	pop	{r4, pc}

0800937e <memset>:
 800937e:	4402      	add	r2, r0
 8009380:	4603      	mov	r3, r0
 8009382:	4293      	cmp	r3, r2
 8009384:	d100      	bne.n	8009388 <memset+0xa>
 8009386:	4770      	bx	lr
 8009388:	f803 1b01 	strb.w	r1, [r3], #1
 800938c:	e7f9      	b.n	8009382 <memset+0x4>
	...

08009390 <sbrk_aligned>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	4e0e      	ldr	r6, [pc, #56]	; (80093cc <sbrk_aligned+0x3c>)
 8009394:	460c      	mov	r4, r1
 8009396:	6831      	ldr	r1, [r6, #0]
 8009398:	4605      	mov	r5, r0
 800939a:	b911      	cbnz	r1, 80093a2 <sbrk_aligned+0x12>
 800939c:	f000 f90e 	bl	80095bc <_sbrk_r>
 80093a0:	6030      	str	r0, [r6, #0]
 80093a2:	4621      	mov	r1, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 f909 	bl	80095bc <_sbrk_r>
 80093aa:	1c43      	adds	r3, r0, #1
 80093ac:	d00a      	beq.n	80093c4 <sbrk_aligned+0x34>
 80093ae:	1cc4      	adds	r4, r0, #3
 80093b0:	f024 0403 	bic.w	r4, r4, #3
 80093b4:	42a0      	cmp	r0, r4
 80093b6:	d007      	beq.n	80093c8 <sbrk_aligned+0x38>
 80093b8:	1a21      	subs	r1, r4, r0
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 f8fe 	bl	80095bc <_sbrk_r>
 80093c0:	3001      	adds	r0, #1
 80093c2:	d101      	bne.n	80093c8 <sbrk_aligned+0x38>
 80093c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093c8:	4620      	mov	r0, r4
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	200042c4 	.word	0x200042c4

080093d0 <_malloc_r>:
 80093d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	1ccd      	adds	r5, r1, #3
 80093d6:	f025 0503 	bic.w	r5, r5, #3
 80093da:	3508      	adds	r5, #8
 80093dc:	2d0c      	cmp	r5, #12
 80093de:	bf38      	it	cc
 80093e0:	250c      	movcc	r5, #12
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	4607      	mov	r7, r0
 80093e6:	db01      	blt.n	80093ec <_malloc_r+0x1c>
 80093e8:	42a9      	cmp	r1, r5
 80093ea:	d905      	bls.n	80093f8 <_malloc_r+0x28>
 80093ec:	230c      	movs	r3, #12
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	2600      	movs	r6, #0
 80093f2:	4630      	mov	r0, r6
 80093f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f8:	4e2e      	ldr	r6, [pc, #184]	; (80094b4 <_malloc_r+0xe4>)
 80093fa:	f000 fa6f 	bl	80098dc <__malloc_lock>
 80093fe:	6833      	ldr	r3, [r6, #0]
 8009400:	461c      	mov	r4, r3
 8009402:	bb34      	cbnz	r4, 8009452 <_malloc_r+0x82>
 8009404:	4629      	mov	r1, r5
 8009406:	4638      	mov	r0, r7
 8009408:	f7ff ffc2 	bl	8009390 <sbrk_aligned>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	4604      	mov	r4, r0
 8009410:	d14d      	bne.n	80094ae <_malloc_r+0xde>
 8009412:	6834      	ldr	r4, [r6, #0]
 8009414:	4626      	mov	r6, r4
 8009416:	2e00      	cmp	r6, #0
 8009418:	d140      	bne.n	800949c <_malloc_r+0xcc>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	4631      	mov	r1, r6
 800941e:	4638      	mov	r0, r7
 8009420:	eb04 0803 	add.w	r8, r4, r3
 8009424:	f000 f8ca 	bl	80095bc <_sbrk_r>
 8009428:	4580      	cmp	r8, r0
 800942a:	d13a      	bne.n	80094a2 <_malloc_r+0xd2>
 800942c:	6821      	ldr	r1, [r4, #0]
 800942e:	3503      	adds	r5, #3
 8009430:	1a6d      	subs	r5, r5, r1
 8009432:	f025 0503 	bic.w	r5, r5, #3
 8009436:	3508      	adds	r5, #8
 8009438:	2d0c      	cmp	r5, #12
 800943a:	bf38      	it	cc
 800943c:	250c      	movcc	r5, #12
 800943e:	4629      	mov	r1, r5
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff ffa5 	bl	8009390 <sbrk_aligned>
 8009446:	3001      	adds	r0, #1
 8009448:	d02b      	beq.n	80094a2 <_malloc_r+0xd2>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	442b      	add	r3, r5
 800944e:	6023      	str	r3, [r4, #0]
 8009450:	e00e      	b.n	8009470 <_malloc_r+0xa0>
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	1b52      	subs	r2, r2, r5
 8009456:	d41e      	bmi.n	8009496 <_malloc_r+0xc6>
 8009458:	2a0b      	cmp	r2, #11
 800945a:	d916      	bls.n	800948a <_malloc_r+0xba>
 800945c:	1961      	adds	r1, r4, r5
 800945e:	42a3      	cmp	r3, r4
 8009460:	6025      	str	r5, [r4, #0]
 8009462:	bf18      	it	ne
 8009464:	6059      	strne	r1, [r3, #4]
 8009466:	6863      	ldr	r3, [r4, #4]
 8009468:	bf08      	it	eq
 800946a:	6031      	streq	r1, [r6, #0]
 800946c:	5162      	str	r2, [r4, r5]
 800946e:	604b      	str	r3, [r1, #4]
 8009470:	4638      	mov	r0, r7
 8009472:	f104 060b 	add.w	r6, r4, #11
 8009476:	f000 fa37 	bl	80098e8 <__malloc_unlock>
 800947a:	f026 0607 	bic.w	r6, r6, #7
 800947e:	1d23      	adds	r3, r4, #4
 8009480:	1af2      	subs	r2, r6, r3
 8009482:	d0b6      	beq.n	80093f2 <_malloc_r+0x22>
 8009484:	1b9b      	subs	r3, r3, r6
 8009486:	50a3      	str	r3, [r4, r2]
 8009488:	e7b3      	b.n	80093f2 <_malloc_r+0x22>
 800948a:	6862      	ldr	r2, [r4, #4]
 800948c:	42a3      	cmp	r3, r4
 800948e:	bf0c      	ite	eq
 8009490:	6032      	streq	r2, [r6, #0]
 8009492:	605a      	strne	r2, [r3, #4]
 8009494:	e7ec      	b.n	8009470 <_malloc_r+0xa0>
 8009496:	4623      	mov	r3, r4
 8009498:	6864      	ldr	r4, [r4, #4]
 800949a:	e7b2      	b.n	8009402 <_malloc_r+0x32>
 800949c:	4634      	mov	r4, r6
 800949e:	6876      	ldr	r6, [r6, #4]
 80094a0:	e7b9      	b.n	8009416 <_malloc_r+0x46>
 80094a2:	230c      	movs	r3, #12
 80094a4:	603b      	str	r3, [r7, #0]
 80094a6:	4638      	mov	r0, r7
 80094a8:	f000 fa1e 	bl	80098e8 <__malloc_unlock>
 80094ac:	e7a1      	b.n	80093f2 <_malloc_r+0x22>
 80094ae:	6025      	str	r5, [r4, #0]
 80094b0:	e7de      	b.n	8009470 <_malloc_r+0xa0>
 80094b2:	bf00      	nop
 80094b4:	200042c0 	.word	0x200042c0

080094b8 <iprintf>:
 80094b8:	b40f      	push	{r0, r1, r2, r3}
 80094ba:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <iprintf+0x2c>)
 80094bc:	b513      	push	{r0, r1, r4, lr}
 80094be:	681c      	ldr	r4, [r3, #0]
 80094c0:	b124      	cbz	r4, 80094cc <iprintf+0x14>
 80094c2:	69a3      	ldr	r3, [r4, #24]
 80094c4:	b913      	cbnz	r3, 80094cc <iprintf+0x14>
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fe76 	bl	80091b8 <__sinit>
 80094cc:	ab05      	add	r3, sp, #20
 80094ce:	9a04      	ldr	r2, [sp, #16]
 80094d0:	68a1      	ldr	r1, [r4, #8]
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fbdf 	bl	8009c98 <_vfiprintf_r>
 80094da:	b002      	add	sp, #8
 80094dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e0:	b004      	add	sp, #16
 80094e2:	4770      	bx	lr
 80094e4:	20000018 	.word	0x20000018

080094e8 <cleanup_glue>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	460c      	mov	r4, r1
 80094ec:	6809      	ldr	r1, [r1, #0]
 80094ee:	4605      	mov	r5, r0
 80094f0:	b109      	cbz	r1, 80094f6 <cleanup_glue+0xe>
 80094f2:	f7ff fff9 	bl	80094e8 <cleanup_glue>
 80094f6:	4621      	mov	r1, r4
 80094f8:	4628      	mov	r0, r5
 80094fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094fe:	f000 b9f9 	b.w	80098f4 <_free_r>
	...

08009504 <_reclaim_reent>:
 8009504:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <_reclaim_reent+0xb4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4283      	cmp	r3, r0
 800950a:	b570      	push	{r4, r5, r6, lr}
 800950c:	4604      	mov	r4, r0
 800950e:	d051      	beq.n	80095b4 <_reclaim_reent+0xb0>
 8009510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009512:	b143      	cbz	r3, 8009526 <_reclaim_reent+0x22>
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d14a      	bne.n	80095b0 <_reclaim_reent+0xac>
 800951a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800951c:	6819      	ldr	r1, [r3, #0]
 800951e:	b111      	cbz	r1, 8009526 <_reclaim_reent+0x22>
 8009520:	4620      	mov	r0, r4
 8009522:	f000 f9e7 	bl	80098f4 <_free_r>
 8009526:	6961      	ldr	r1, [r4, #20]
 8009528:	b111      	cbz	r1, 8009530 <_reclaim_reent+0x2c>
 800952a:	4620      	mov	r0, r4
 800952c:	f000 f9e2 	bl	80098f4 <_free_r>
 8009530:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009532:	b111      	cbz	r1, 800953a <_reclaim_reent+0x36>
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f9dd 	bl	80098f4 <_free_r>
 800953a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800953c:	b111      	cbz	r1, 8009544 <_reclaim_reent+0x40>
 800953e:	4620      	mov	r0, r4
 8009540:	f000 f9d8 	bl	80098f4 <_free_r>
 8009544:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009546:	b111      	cbz	r1, 800954e <_reclaim_reent+0x4a>
 8009548:	4620      	mov	r0, r4
 800954a:	f000 f9d3 	bl	80098f4 <_free_r>
 800954e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009550:	b111      	cbz	r1, 8009558 <_reclaim_reent+0x54>
 8009552:	4620      	mov	r0, r4
 8009554:	f000 f9ce 	bl	80098f4 <_free_r>
 8009558:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800955a:	b111      	cbz	r1, 8009562 <_reclaim_reent+0x5e>
 800955c:	4620      	mov	r0, r4
 800955e:	f000 f9c9 	bl	80098f4 <_free_r>
 8009562:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009564:	b111      	cbz	r1, 800956c <_reclaim_reent+0x68>
 8009566:	4620      	mov	r0, r4
 8009568:	f000 f9c4 	bl	80098f4 <_free_r>
 800956c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800956e:	b111      	cbz	r1, 8009576 <_reclaim_reent+0x72>
 8009570:	4620      	mov	r0, r4
 8009572:	f000 f9bf 	bl	80098f4 <_free_r>
 8009576:	69a3      	ldr	r3, [r4, #24]
 8009578:	b1e3      	cbz	r3, 80095b4 <_reclaim_reent+0xb0>
 800957a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800957c:	4620      	mov	r0, r4
 800957e:	4798      	blx	r3
 8009580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009582:	b1b9      	cbz	r1, 80095b4 <_reclaim_reent+0xb0>
 8009584:	4620      	mov	r0, r4
 8009586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800958a:	f7ff bfad 	b.w	80094e8 <cleanup_glue>
 800958e:	5949      	ldr	r1, [r1, r5]
 8009590:	b941      	cbnz	r1, 80095a4 <_reclaim_reent+0xa0>
 8009592:	3504      	adds	r5, #4
 8009594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009596:	2d80      	cmp	r5, #128	; 0x80
 8009598:	68d9      	ldr	r1, [r3, #12]
 800959a:	d1f8      	bne.n	800958e <_reclaim_reent+0x8a>
 800959c:	4620      	mov	r0, r4
 800959e:	f000 f9a9 	bl	80098f4 <_free_r>
 80095a2:	e7ba      	b.n	800951a <_reclaim_reent+0x16>
 80095a4:	680e      	ldr	r6, [r1, #0]
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 f9a4 	bl	80098f4 <_free_r>
 80095ac:	4631      	mov	r1, r6
 80095ae:	e7ef      	b.n	8009590 <_reclaim_reent+0x8c>
 80095b0:	2500      	movs	r5, #0
 80095b2:	e7ef      	b.n	8009594 <_reclaim_reent+0x90>
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	bf00      	nop
 80095b8:	20000018 	.word	0x20000018

080095bc <_sbrk_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	; (80095d8 <_sbrk_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7f7 ff8a 	bl	80014e0 <_sbrk>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_sbrk_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_sbrk_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	200042c8 	.word	0x200042c8

080095dc <sniprintf>:
 80095dc:	b40c      	push	{r2, r3}
 80095de:	b530      	push	{r4, r5, lr}
 80095e0:	4b17      	ldr	r3, [pc, #92]	; (8009640 <sniprintf+0x64>)
 80095e2:	1e0c      	subs	r4, r1, #0
 80095e4:	681d      	ldr	r5, [r3, #0]
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	da08      	bge.n	80095fc <sniprintf+0x20>
 80095ea:	238b      	movs	r3, #139	; 0x8b
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f2:	b01d      	add	sp, #116	; 0x74
 80095f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095f8:	b002      	add	sp, #8
 80095fa:	4770      	bx	lr
 80095fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009600:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009604:	bf14      	ite	ne
 8009606:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800960a:	4623      	moveq	r3, r4
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009614:	9002      	str	r0, [sp, #8]
 8009616:	9006      	str	r0, [sp, #24]
 8009618:	f8ad 3016 	strh.w	r3, [sp, #22]
 800961c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800961e:	ab21      	add	r3, sp, #132	; 0x84
 8009620:	a902      	add	r1, sp, #8
 8009622:	4628      	mov	r0, r5
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	f000 fa0d 	bl	8009a44 <_svfiprintf_r>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	bfbc      	itt	lt
 800962e:	238b      	movlt	r3, #139	; 0x8b
 8009630:	602b      	strlt	r3, [r5, #0]
 8009632:	2c00      	cmp	r4, #0
 8009634:	d0dd      	beq.n	80095f2 <sniprintf+0x16>
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	e7d9      	b.n	80095f2 <sniprintf+0x16>
 800963e:	bf00      	nop
 8009640:	20000018 	.word	0x20000018

08009644 <__sread>:
 8009644:	b510      	push	{r4, lr}
 8009646:	460c      	mov	r4, r1
 8009648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800964c:	f000 fde8 	bl	800a220 <_read_r>
 8009650:	2800      	cmp	r0, #0
 8009652:	bfab      	itete	ge
 8009654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009656:	89a3      	ldrhlt	r3, [r4, #12]
 8009658:	181b      	addge	r3, r3, r0
 800965a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800965e:	bfac      	ite	ge
 8009660:	6563      	strge	r3, [r4, #84]	; 0x54
 8009662:	81a3      	strhlt	r3, [r4, #12]
 8009664:	bd10      	pop	{r4, pc}

08009666 <__swrite>:
 8009666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966a:	461f      	mov	r7, r3
 800966c:	898b      	ldrh	r3, [r1, #12]
 800966e:	05db      	lsls	r3, r3, #23
 8009670:	4605      	mov	r5, r0
 8009672:	460c      	mov	r4, r1
 8009674:	4616      	mov	r6, r2
 8009676:	d505      	bpl.n	8009684 <__swrite+0x1e>
 8009678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967c:	2302      	movs	r3, #2
 800967e:	2200      	movs	r2, #0
 8009680:	f000 f91a 	bl	80098b8 <_lseek_r>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800968a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	4632      	mov	r2, r6
 8009692:	463b      	mov	r3, r7
 8009694:	4628      	mov	r0, r5
 8009696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800969a:	f000 b829 	b.w	80096f0 <_write_r>

0800969e <__sseek>:
 800969e:	b510      	push	{r4, lr}
 80096a0:	460c      	mov	r4, r1
 80096a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a6:	f000 f907 	bl	80098b8 <_lseek_r>
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	bf15      	itete	ne
 80096b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80096b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096ba:	81a3      	strheq	r3, [r4, #12]
 80096bc:	bf18      	it	ne
 80096be:	81a3      	strhne	r3, [r4, #12]
 80096c0:	bd10      	pop	{r4, pc}

080096c2 <__sclose>:
 80096c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c6:	f000 b825 	b.w	8009714 <_close_r>

080096ca <strncpy>:
 80096ca:	b510      	push	{r4, lr}
 80096cc:	3901      	subs	r1, #1
 80096ce:	4603      	mov	r3, r0
 80096d0:	b132      	cbz	r2, 80096e0 <strncpy+0x16>
 80096d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80096d6:	f803 4b01 	strb.w	r4, [r3], #1
 80096da:	3a01      	subs	r2, #1
 80096dc:	2c00      	cmp	r4, #0
 80096de:	d1f7      	bne.n	80096d0 <strncpy+0x6>
 80096e0:	441a      	add	r2, r3
 80096e2:	2100      	movs	r1, #0
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d100      	bne.n	80096ea <strncpy+0x20>
 80096e8:	bd10      	pop	{r4, pc}
 80096ea:	f803 1b01 	strb.w	r1, [r3], #1
 80096ee:	e7f9      	b.n	80096e4 <strncpy+0x1a>

080096f0 <_write_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d07      	ldr	r5, [pc, #28]	; (8009710 <_write_r+0x20>)
 80096f4:	4604      	mov	r4, r0
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	2200      	movs	r2, #0
 80096fc:	602a      	str	r2, [r5, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	f7f7 fe9d 	bl	800143e <_write>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_write_r+0x1e>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_write_r+0x1e>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	200042c8 	.word	0x200042c8

08009714 <_close_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d06      	ldr	r5, [pc, #24]	; (8009730 <_close_r+0x1c>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7f7 fea9 	bl	8001476 <_close>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_close_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_close_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	200042c8 	.word	0x200042c8

08009734 <__sflush_r>:
 8009734:	898a      	ldrh	r2, [r1, #12]
 8009736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973a:	4605      	mov	r5, r0
 800973c:	0710      	lsls	r0, r2, #28
 800973e:	460c      	mov	r4, r1
 8009740:	d458      	bmi.n	80097f4 <__sflush_r+0xc0>
 8009742:	684b      	ldr	r3, [r1, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	dc05      	bgt.n	8009754 <__sflush_r+0x20>
 8009748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800974a:	2b00      	cmp	r3, #0
 800974c:	dc02      	bgt.n	8009754 <__sflush_r+0x20>
 800974e:	2000      	movs	r0, #0
 8009750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009756:	2e00      	cmp	r6, #0
 8009758:	d0f9      	beq.n	800974e <__sflush_r+0x1a>
 800975a:	2300      	movs	r3, #0
 800975c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009760:	682f      	ldr	r7, [r5, #0]
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	d032      	beq.n	80097cc <__sflush_r+0x98>
 8009766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	075a      	lsls	r2, r3, #29
 800976c:	d505      	bpl.n	800977a <__sflush_r+0x46>
 800976e:	6863      	ldr	r3, [r4, #4]
 8009770:	1ac0      	subs	r0, r0, r3
 8009772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009774:	b10b      	cbz	r3, 800977a <__sflush_r+0x46>
 8009776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009778:	1ac0      	subs	r0, r0, r3
 800977a:	2300      	movs	r3, #0
 800977c:	4602      	mov	r2, r0
 800977e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009780:	6a21      	ldr	r1, [r4, #32]
 8009782:	4628      	mov	r0, r5
 8009784:	47b0      	blx	r6
 8009786:	1c43      	adds	r3, r0, #1
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	d106      	bne.n	800979a <__sflush_r+0x66>
 800978c:	6829      	ldr	r1, [r5, #0]
 800978e:	291d      	cmp	r1, #29
 8009790:	d82c      	bhi.n	80097ec <__sflush_r+0xb8>
 8009792:	4a2a      	ldr	r2, [pc, #168]	; (800983c <__sflush_r+0x108>)
 8009794:	40ca      	lsrs	r2, r1
 8009796:	07d6      	lsls	r6, r2, #31
 8009798:	d528      	bpl.n	80097ec <__sflush_r+0xb8>
 800979a:	2200      	movs	r2, #0
 800979c:	6062      	str	r2, [r4, #4]
 800979e:	04d9      	lsls	r1, r3, #19
 80097a0:	6922      	ldr	r2, [r4, #16]
 80097a2:	6022      	str	r2, [r4, #0]
 80097a4:	d504      	bpl.n	80097b0 <__sflush_r+0x7c>
 80097a6:	1c42      	adds	r2, r0, #1
 80097a8:	d101      	bne.n	80097ae <__sflush_r+0x7a>
 80097aa:	682b      	ldr	r3, [r5, #0]
 80097ac:	b903      	cbnz	r3, 80097b0 <__sflush_r+0x7c>
 80097ae:	6560      	str	r0, [r4, #84]	; 0x54
 80097b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097b2:	602f      	str	r7, [r5, #0]
 80097b4:	2900      	cmp	r1, #0
 80097b6:	d0ca      	beq.n	800974e <__sflush_r+0x1a>
 80097b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097bc:	4299      	cmp	r1, r3
 80097be:	d002      	beq.n	80097c6 <__sflush_r+0x92>
 80097c0:	4628      	mov	r0, r5
 80097c2:	f000 f897 	bl	80098f4 <_free_r>
 80097c6:	2000      	movs	r0, #0
 80097c8:	6360      	str	r0, [r4, #52]	; 0x34
 80097ca:	e7c1      	b.n	8009750 <__sflush_r+0x1c>
 80097cc:	6a21      	ldr	r1, [r4, #32]
 80097ce:	2301      	movs	r3, #1
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b0      	blx	r6
 80097d4:	1c41      	adds	r1, r0, #1
 80097d6:	d1c7      	bne.n	8009768 <__sflush_r+0x34>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0c4      	beq.n	8009768 <__sflush_r+0x34>
 80097de:	2b1d      	cmp	r3, #29
 80097e0:	d001      	beq.n	80097e6 <__sflush_r+0xb2>
 80097e2:	2b16      	cmp	r3, #22
 80097e4:	d101      	bne.n	80097ea <__sflush_r+0xb6>
 80097e6:	602f      	str	r7, [r5, #0]
 80097e8:	e7b1      	b.n	800974e <__sflush_r+0x1a>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	e7ad      	b.n	8009750 <__sflush_r+0x1c>
 80097f4:	690f      	ldr	r7, [r1, #16]
 80097f6:	2f00      	cmp	r7, #0
 80097f8:	d0a9      	beq.n	800974e <__sflush_r+0x1a>
 80097fa:	0793      	lsls	r3, r2, #30
 80097fc:	680e      	ldr	r6, [r1, #0]
 80097fe:	bf08      	it	eq
 8009800:	694b      	ldreq	r3, [r1, #20]
 8009802:	600f      	str	r7, [r1, #0]
 8009804:	bf18      	it	ne
 8009806:	2300      	movne	r3, #0
 8009808:	eba6 0807 	sub.w	r8, r6, r7
 800980c:	608b      	str	r3, [r1, #8]
 800980e:	f1b8 0f00 	cmp.w	r8, #0
 8009812:	dd9c      	ble.n	800974e <__sflush_r+0x1a>
 8009814:	6a21      	ldr	r1, [r4, #32]
 8009816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009818:	4643      	mov	r3, r8
 800981a:	463a      	mov	r2, r7
 800981c:	4628      	mov	r0, r5
 800981e:	47b0      	blx	r6
 8009820:	2800      	cmp	r0, #0
 8009822:	dc06      	bgt.n	8009832 <__sflush_r+0xfe>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982a:	81a3      	strh	r3, [r4, #12]
 800982c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009830:	e78e      	b.n	8009750 <__sflush_r+0x1c>
 8009832:	4407      	add	r7, r0
 8009834:	eba8 0800 	sub.w	r8, r8, r0
 8009838:	e7e9      	b.n	800980e <__sflush_r+0xda>
 800983a:	bf00      	nop
 800983c:	20400001 	.word	0x20400001

08009840 <_fflush_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	690b      	ldr	r3, [r1, #16]
 8009844:	4605      	mov	r5, r0
 8009846:	460c      	mov	r4, r1
 8009848:	b913      	cbnz	r3, 8009850 <_fflush_r+0x10>
 800984a:	2500      	movs	r5, #0
 800984c:	4628      	mov	r0, r5
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	b118      	cbz	r0, 800985a <_fflush_r+0x1a>
 8009852:	6983      	ldr	r3, [r0, #24]
 8009854:	b90b      	cbnz	r3, 800985a <_fflush_r+0x1a>
 8009856:	f7ff fcaf 	bl	80091b8 <__sinit>
 800985a:	4b14      	ldr	r3, [pc, #80]	; (80098ac <_fflush_r+0x6c>)
 800985c:	429c      	cmp	r4, r3
 800985e:	d11b      	bne.n	8009898 <_fflush_r+0x58>
 8009860:	686c      	ldr	r4, [r5, #4]
 8009862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0ef      	beq.n	800984a <_fflush_r+0xa>
 800986a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800986c:	07d0      	lsls	r0, r2, #31
 800986e:	d404      	bmi.n	800987a <_fflush_r+0x3a>
 8009870:	0599      	lsls	r1, r3, #22
 8009872:	d402      	bmi.n	800987a <_fflush_r+0x3a>
 8009874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009876:	f7ff fd62 	bl	800933e <__retarget_lock_acquire_recursive>
 800987a:	4628      	mov	r0, r5
 800987c:	4621      	mov	r1, r4
 800987e:	f7ff ff59 	bl	8009734 <__sflush_r>
 8009882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009884:	07da      	lsls	r2, r3, #31
 8009886:	4605      	mov	r5, r0
 8009888:	d4e0      	bmi.n	800984c <_fflush_r+0xc>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	059b      	lsls	r3, r3, #22
 800988e:	d4dd      	bmi.n	800984c <_fflush_r+0xc>
 8009890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009892:	f7ff fd55 	bl	8009340 <__retarget_lock_release_recursive>
 8009896:	e7d9      	b.n	800984c <_fflush_r+0xc>
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <_fflush_r+0x70>)
 800989a:	429c      	cmp	r4, r3
 800989c:	d101      	bne.n	80098a2 <_fflush_r+0x62>
 800989e:	68ac      	ldr	r4, [r5, #8]
 80098a0:	e7df      	b.n	8009862 <_fflush_r+0x22>
 80098a2:	4b04      	ldr	r3, [pc, #16]	; (80098b4 <_fflush_r+0x74>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	bf08      	it	eq
 80098a8:	68ec      	ldreq	r4, [r5, #12]
 80098aa:	e7da      	b.n	8009862 <_fflush_r+0x22>
 80098ac:	0800a7e8 	.word	0x0800a7e8
 80098b0:	0800a808 	.word	0x0800a808
 80098b4:	0800a7c8 	.word	0x0800a7c8

080098b8 <_lseek_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d07      	ldr	r5, [pc, #28]	; (80098d8 <_lseek_r+0x20>)
 80098bc:	4604      	mov	r4, r0
 80098be:	4608      	mov	r0, r1
 80098c0:	4611      	mov	r1, r2
 80098c2:	2200      	movs	r2, #0
 80098c4:	602a      	str	r2, [r5, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	f7f7 fdfc 	bl	80014c4 <_lseek>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d102      	bne.n	80098d6 <_lseek_r+0x1e>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	b103      	cbz	r3, 80098d6 <_lseek_r+0x1e>
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	200042c8 	.word	0x200042c8

080098dc <__malloc_lock>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__malloc_lock+0x8>)
 80098de:	f7ff bd2e 	b.w	800933e <__retarget_lock_acquire_recursive>
 80098e2:	bf00      	nop
 80098e4:	200042bc 	.word	0x200042bc

080098e8 <__malloc_unlock>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__malloc_unlock+0x8>)
 80098ea:	f7ff bd29 	b.w	8009340 <__retarget_lock_release_recursive>
 80098ee:	bf00      	nop
 80098f0:	200042bc 	.word	0x200042bc

080098f4 <_free_r>:
 80098f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d044      	beq.n	8009984 <_free_r+0x90>
 80098fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fe:	9001      	str	r0, [sp, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	f1a1 0404 	sub.w	r4, r1, #4
 8009906:	bfb8      	it	lt
 8009908:	18e4      	addlt	r4, r4, r3
 800990a:	f7ff ffe7 	bl	80098dc <__malloc_lock>
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <_free_r+0x94>)
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x30>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	b003      	add	sp, #12
 800991c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009920:	f7ff bfe2 	b.w	80098e8 <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x46>
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	1961      	adds	r1, r4, r5
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1949      	addeq	r1, r1, r5
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x22>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x50>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x46>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1855      	adds	r5, r2, r1
 8009948:	42a5      	cmp	r5, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x70>
 800994c:	6824      	ldr	r4, [r4, #0]
 800994e:	4421      	add	r1, r4
 8009950:	1854      	adds	r4, r2, r1
 8009952:	42a3      	cmp	r3, r4
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x26>
 8009958:	681c      	ldr	r4, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	6053      	str	r3, [r2, #4]
 800995e:	4421      	add	r1, r4
 8009960:	6011      	str	r1, [r2, #0]
 8009962:	e7da      	b.n	800991a <_free_r+0x26>
 8009964:	d902      	bls.n	800996c <_free_r+0x78>
 8009966:	230c      	movs	r3, #12
 8009968:	6003      	str	r3, [r0, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x26>
 800996c:	6825      	ldr	r5, [r4, #0]
 800996e:	1961      	adds	r1, r4, r5
 8009970:	428b      	cmp	r3, r1
 8009972:	bf04      	itt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	bf04      	itt	eq
 800997c:	1949      	addeq	r1, r1, r5
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	6054      	str	r4, [r2, #4]
 8009982:	e7ca      	b.n	800991a <_free_r+0x26>
 8009984:	b003      	add	sp, #12
 8009986:	bd30      	pop	{r4, r5, pc}
 8009988:	200042c0 	.word	0x200042c0

0800998c <__ssputs_r>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	688e      	ldr	r6, [r1, #8]
 8009992:	429e      	cmp	r6, r3
 8009994:	4682      	mov	sl, r0
 8009996:	460c      	mov	r4, r1
 8009998:	4690      	mov	r8, r2
 800999a:	461f      	mov	r7, r3
 800999c:	d838      	bhi.n	8009a10 <__ssputs_r+0x84>
 800999e:	898a      	ldrh	r2, [r1, #12]
 80099a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099a4:	d032      	beq.n	8009a0c <__ssputs_r+0x80>
 80099a6:	6825      	ldr	r5, [r4, #0]
 80099a8:	6909      	ldr	r1, [r1, #16]
 80099aa:	eba5 0901 	sub.w	r9, r5, r1
 80099ae:	6965      	ldr	r5, [r4, #20]
 80099b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099b8:	3301      	adds	r3, #1
 80099ba:	444b      	add	r3, r9
 80099bc:	106d      	asrs	r5, r5, #1
 80099be:	429d      	cmp	r5, r3
 80099c0:	bf38      	it	cc
 80099c2:	461d      	movcc	r5, r3
 80099c4:	0553      	lsls	r3, r2, #21
 80099c6:	d531      	bpl.n	8009a2c <__ssputs_r+0xa0>
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7ff fd01 	bl	80093d0 <_malloc_r>
 80099ce:	4606      	mov	r6, r0
 80099d0:	b950      	cbnz	r0, 80099e8 <__ssputs_r+0x5c>
 80099d2:	230c      	movs	r3, #12
 80099d4:	f8ca 3000 	str.w	r3, [sl]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e8:	6921      	ldr	r1, [r4, #16]
 80099ea:	464a      	mov	r2, r9
 80099ec:	f7ff fcb9 	bl	8009362 <memcpy>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	6126      	str	r6, [r4, #16]
 80099fe:	6165      	str	r5, [r4, #20]
 8009a00:	444e      	add	r6, r9
 8009a02:	eba5 0509 	sub.w	r5, r5, r9
 8009a06:	6026      	str	r6, [r4, #0]
 8009a08:	60a5      	str	r5, [r4, #8]
 8009a0a:	463e      	mov	r6, r7
 8009a0c:	42be      	cmp	r6, r7
 8009a0e:	d900      	bls.n	8009a12 <__ssputs_r+0x86>
 8009a10:	463e      	mov	r6, r7
 8009a12:	6820      	ldr	r0, [r4, #0]
 8009a14:	4632      	mov	r2, r6
 8009a16:	4641      	mov	r1, r8
 8009a18:	f000 fd3a 	bl	800a490 <memmove>
 8009a1c:	68a3      	ldr	r3, [r4, #8]
 8009a1e:	1b9b      	subs	r3, r3, r6
 8009a20:	60a3      	str	r3, [r4, #8]
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	4433      	add	r3, r6
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	2000      	movs	r0, #0
 8009a2a:	e7db      	b.n	80099e4 <__ssputs_r+0x58>
 8009a2c:	462a      	mov	r2, r5
 8009a2e:	f000 fd49 	bl	800a4c4 <_realloc_r>
 8009a32:	4606      	mov	r6, r0
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d1e1      	bne.n	80099fc <__ssputs_r+0x70>
 8009a38:	6921      	ldr	r1, [r4, #16]
 8009a3a:	4650      	mov	r0, sl
 8009a3c:	f7ff ff5a 	bl	80098f4 <_free_r>
 8009a40:	e7c7      	b.n	80099d2 <__ssputs_r+0x46>
	...

08009a44 <_svfiprintf_r>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	4698      	mov	r8, r3
 8009a4a:	898b      	ldrh	r3, [r1, #12]
 8009a4c:	061b      	lsls	r3, r3, #24
 8009a4e:	b09d      	sub	sp, #116	; 0x74
 8009a50:	4607      	mov	r7, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	d50e      	bpl.n	8009a76 <_svfiprintf_r+0x32>
 8009a58:	690b      	ldr	r3, [r1, #16]
 8009a5a:	b963      	cbnz	r3, 8009a76 <_svfiprintf_r+0x32>
 8009a5c:	2140      	movs	r1, #64	; 0x40
 8009a5e:	f7ff fcb7 	bl	80093d0 <_malloc_r>
 8009a62:	6028      	str	r0, [r5, #0]
 8009a64:	6128      	str	r0, [r5, #16]
 8009a66:	b920      	cbnz	r0, 8009a72 <_svfiprintf_r+0x2e>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a70:	e0d1      	b.n	8009c16 <_svfiprintf_r+0x1d2>
 8009a72:	2340      	movs	r3, #64	; 0x40
 8009a74:	616b      	str	r3, [r5, #20]
 8009a76:	2300      	movs	r3, #0
 8009a78:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7a:	2320      	movs	r3, #32
 8009a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a84:	2330      	movs	r3, #48	; 0x30
 8009a86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c30 <_svfiprintf_r+0x1ec>
 8009a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a8e:	f04f 0901 	mov.w	r9, #1
 8009a92:	4623      	mov	r3, r4
 8009a94:	469a      	mov	sl, r3
 8009a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9a:	b10a      	cbz	r2, 8009aa0 <_svfiprintf_r+0x5c>
 8009a9c:	2a25      	cmp	r2, #37	; 0x25
 8009a9e:	d1f9      	bne.n	8009a94 <_svfiprintf_r+0x50>
 8009aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa4:	d00b      	beq.n	8009abe <_svfiprintf_r+0x7a>
 8009aa6:	465b      	mov	r3, fp
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	4638      	mov	r0, r7
 8009aae:	f7ff ff6d 	bl	800998c <__ssputs_r>
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	f000 80aa 	beq.w	8009c0c <_svfiprintf_r+0x1c8>
 8009ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aba:	445a      	add	r2, fp
 8009abc:	9209      	str	r2, [sp, #36]	; 0x24
 8009abe:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 80a2 	beq.w	8009c0c <_svfiprintf_r+0x1c8>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad2:	f10a 0a01 	add.w	sl, sl, #1
 8009ad6:	9304      	str	r3, [sp, #16]
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ade:	931a      	str	r3, [sp, #104]	; 0x68
 8009ae0:	4654      	mov	r4, sl
 8009ae2:	2205      	movs	r2, #5
 8009ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae8:	4851      	ldr	r0, [pc, #324]	; (8009c30 <_svfiprintf_r+0x1ec>)
 8009aea:	f7f6 fb79 	bl	80001e0 <memchr>
 8009aee:	9a04      	ldr	r2, [sp, #16]
 8009af0:	b9d8      	cbnz	r0, 8009b2a <_svfiprintf_r+0xe6>
 8009af2:	06d0      	lsls	r0, r2, #27
 8009af4:	bf44      	itt	mi
 8009af6:	2320      	movmi	r3, #32
 8009af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009afc:	0711      	lsls	r1, r2, #28
 8009afe:	bf44      	itt	mi
 8009b00:	232b      	movmi	r3, #43	; 0x2b
 8009b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b06:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0c:	d015      	beq.n	8009b3a <_svfiprintf_r+0xf6>
 8009b0e:	9a07      	ldr	r2, [sp, #28]
 8009b10:	4654      	mov	r4, sl
 8009b12:	2000      	movs	r0, #0
 8009b14:	f04f 0c0a 	mov.w	ip, #10
 8009b18:	4621      	mov	r1, r4
 8009b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b1e:	3b30      	subs	r3, #48	; 0x30
 8009b20:	2b09      	cmp	r3, #9
 8009b22:	d94e      	bls.n	8009bc2 <_svfiprintf_r+0x17e>
 8009b24:	b1b0      	cbz	r0, 8009b54 <_svfiprintf_r+0x110>
 8009b26:	9207      	str	r2, [sp, #28]
 8009b28:	e014      	b.n	8009b54 <_svfiprintf_r+0x110>
 8009b2a:	eba0 0308 	sub.w	r3, r0, r8
 8009b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b32:	4313      	orrs	r3, r2
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	46a2      	mov	sl, r4
 8009b38:	e7d2      	b.n	8009ae0 <_svfiprintf_r+0x9c>
 8009b3a:	9b03      	ldr	r3, [sp, #12]
 8009b3c:	1d19      	adds	r1, r3, #4
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	9103      	str	r1, [sp, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bfbb      	ittet	lt
 8009b46:	425b      	neglt	r3, r3
 8009b48:	f042 0202 	orrlt.w	r2, r2, #2
 8009b4c:	9307      	strge	r3, [sp, #28]
 8009b4e:	9307      	strlt	r3, [sp, #28]
 8009b50:	bfb8      	it	lt
 8009b52:	9204      	strlt	r2, [sp, #16]
 8009b54:	7823      	ldrb	r3, [r4, #0]
 8009b56:	2b2e      	cmp	r3, #46	; 0x2e
 8009b58:	d10c      	bne.n	8009b74 <_svfiprintf_r+0x130>
 8009b5a:	7863      	ldrb	r3, [r4, #1]
 8009b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5e:	d135      	bne.n	8009bcc <_svfiprintf_r+0x188>
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	9203      	str	r2, [sp, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfb8      	it	lt
 8009b6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b70:	3402      	adds	r4, #2
 8009b72:	9305      	str	r3, [sp, #20]
 8009b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c40 <_svfiprintf_r+0x1fc>
 8009b78:	7821      	ldrb	r1, [r4, #0]
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	f7f6 fb2f 	bl	80001e0 <memchr>
 8009b82:	b140      	cbz	r0, 8009b96 <_svfiprintf_r+0x152>
 8009b84:	2340      	movs	r3, #64	; 0x40
 8009b86:	eba0 000a 	sub.w	r0, r0, sl
 8009b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b8e:	9b04      	ldr	r3, [sp, #16]
 8009b90:	4303      	orrs	r3, r0
 8009b92:	3401      	adds	r4, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9a:	4826      	ldr	r0, [pc, #152]	; (8009c34 <_svfiprintf_r+0x1f0>)
 8009b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ba0:	2206      	movs	r2, #6
 8009ba2:	f7f6 fb1d 	bl	80001e0 <memchr>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d038      	beq.n	8009c1c <_svfiprintf_r+0x1d8>
 8009baa:	4b23      	ldr	r3, [pc, #140]	; (8009c38 <_svfiprintf_r+0x1f4>)
 8009bac:	bb1b      	cbnz	r3, 8009bf6 <_svfiprintf_r+0x1b2>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	3307      	adds	r3, #7
 8009bb2:	f023 0307 	bic.w	r3, r3, #7
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bbc:	4433      	add	r3, r6
 8009bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc0:	e767      	b.n	8009a92 <_svfiprintf_r+0x4e>
 8009bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	2001      	movs	r0, #1
 8009bca:	e7a5      	b.n	8009b18 <_svfiprintf_r+0xd4>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	3401      	adds	r4, #1
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f04f 0c0a 	mov.w	ip, #10
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bde:	3a30      	subs	r2, #48	; 0x30
 8009be0:	2a09      	cmp	r2, #9
 8009be2:	d903      	bls.n	8009bec <_svfiprintf_r+0x1a8>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0c5      	beq.n	8009b74 <_svfiprintf_r+0x130>
 8009be8:	9105      	str	r1, [sp, #20]
 8009bea:	e7c3      	b.n	8009b74 <_svfiprintf_r+0x130>
 8009bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e7f0      	b.n	8009bd8 <_svfiprintf_r+0x194>
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	4b0f      	ldr	r3, [pc, #60]	; (8009c3c <_svfiprintf_r+0x1f8>)
 8009bfe:	a904      	add	r1, sp, #16
 8009c00:	4638      	mov	r0, r7
 8009c02:	f3af 8000 	nop.w
 8009c06:	1c42      	adds	r2, r0, #1
 8009c08:	4606      	mov	r6, r0
 8009c0a:	d1d6      	bne.n	8009bba <_svfiprintf_r+0x176>
 8009c0c:	89ab      	ldrh	r3, [r5, #12]
 8009c0e:	065b      	lsls	r3, r3, #25
 8009c10:	f53f af2c 	bmi.w	8009a6c <_svfiprintf_r+0x28>
 8009c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c16:	b01d      	add	sp, #116	; 0x74
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	ab03      	add	r3, sp, #12
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	462a      	mov	r2, r5
 8009c22:	4b06      	ldr	r3, [pc, #24]	; (8009c3c <_svfiprintf_r+0x1f8>)
 8009c24:	a904      	add	r1, sp, #16
 8009c26:	4638      	mov	r0, r7
 8009c28:	f000 f9d4 	bl	8009fd4 <_printf_i>
 8009c2c:	e7eb      	b.n	8009c06 <_svfiprintf_r+0x1c2>
 8009c2e:	bf00      	nop
 8009c30:	0800a82c 	.word	0x0800a82c
 8009c34:	0800a836 	.word	0x0800a836
 8009c38:	00000000 	.word	0x00000000
 8009c3c:	0800998d 	.word	0x0800998d
 8009c40:	0800a832 	.word	0x0800a832

08009c44 <__sfputc_r>:
 8009c44:	6893      	ldr	r3, [r2, #8]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	b410      	push	{r4}
 8009c4c:	6093      	str	r3, [r2, #8]
 8009c4e:	da08      	bge.n	8009c62 <__sfputc_r+0x1e>
 8009c50:	6994      	ldr	r4, [r2, #24]
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	db01      	blt.n	8009c5a <__sfputc_r+0x16>
 8009c56:	290a      	cmp	r1, #10
 8009c58:	d103      	bne.n	8009c62 <__sfputc_r+0x1e>
 8009c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c5e:	f000 baf1 	b.w	800a244 <__swbuf_r>
 8009c62:	6813      	ldr	r3, [r2, #0]
 8009c64:	1c58      	adds	r0, r3, #1
 8009c66:	6010      	str	r0, [r2, #0]
 8009c68:	7019      	strb	r1, [r3, #0]
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <__sfputs_r>:
 8009c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	18d5      	adds	r5, r2, r3
 8009c7c:	42ac      	cmp	r4, r5
 8009c7e:	d101      	bne.n	8009c84 <__sfputs_r+0x12>
 8009c80:	2000      	movs	r0, #0
 8009c82:	e007      	b.n	8009c94 <__sfputs_r+0x22>
 8009c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c88:	463a      	mov	r2, r7
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ffda 	bl	8009c44 <__sfputc_r>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d1f3      	bne.n	8009c7c <__sfputs_r+0xa>
 8009c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c98 <_vfiprintf_r>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	b09d      	sub	sp, #116	; 0x74
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	4698      	mov	r8, r3
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	b118      	cbz	r0, 8009cb0 <_vfiprintf_r+0x18>
 8009ca8:	6983      	ldr	r3, [r0, #24]
 8009caa:	b90b      	cbnz	r3, 8009cb0 <_vfiprintf_r+0x18>
 8009cac:	f7ff fa84 	bl	80091b8 <__sinit>
 8009cb0:	4b89      	ldr	r3, [pc, #548]	; (8009ed8 <_vfiprintf_r+0x240>)
 8009cb2:	429d      	cmp	r5, r3
 8009cb4:	d11b      	bne.n	8009cee <_vfiprintf_r+0x56>
 8009cb6:	6875      	ldr	r5, [r6, #4]
 8009cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cba:	07d9      	lsls	r1, r3, #31
 8009cbc:	d405      	bmi.n	8009cca <_vfiprintf_r+0x32>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	059a      	lsls	r2, r3, #22
 8009cc2:	d402      	bmi.n	8009cca <_vfiprintf_r+0x32>
 8009cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc6:	f7ff fb3a 	bl	800933e <__retarget_lock_acquire_recursive>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	071b      	lsls	r3, r3, #28
 8009cce:	d501      	bpl.n	8009cd4 <_vfiprintf_r+0x3c>
 8009cd0:	692b      	ldr	r3, [r5, #16]
 8009cd2:	b9eb      	cbnz	r3, 8009d10 <_vfiprintf_r+0x78>
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f000 fb06 	bl	800a2e8 <__swsetup_r>
 8009cdc:	b1c0      	cbz	r0, 8009d10 <_vfiprintf_r+0x78>
 8009cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ce0:	07dc      	lsls	r4, r3, #31
 8009ce2:	d50e      	bpl.n	8009d02 <_vfiprintf_r+0x6a>
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ce8:	b01d      	add	sp, #116	; 0x74
 8009cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cee:	4b7b      	ldr	r3, [pc, #492]	; (8009edc <_vfiprintf_r+0x244>)
 8009cf0:	429d      	cmp	r5, r3
 8009cf2:	d101      	bne.n	8009cf8 <_vfiprintf_r+0x60>
 8009cf4:	68b5      	ldr	r5, [r6, #8]
 8009cf6:	e7df      	b.n	8009cb8 <_vfiprintf_r+0x20>
 8009cf8:	4b79      	ldr	r3, [pc, #484]	; (8009ee0 <_vfiprintf_r+0x248>)
 8009cfa:	429d      	cmp	r5, r3
 8009cfc:	bf08      	it	eq
 8009cfe:	68f5      	ldreq	r5, [r6, #12]
 8009d00:	e7da      	b.n	8009cb8 <_vfiprintf_r+0x20>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	0598      	lsls	r0, r3, #22
 8009d06:	d4ed      	bmi.n	8009ce4 <_vfiprintf_r+0x4c>
 8009d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d0a:	f7ff fb19 	bl	8009340 <__retarget_lock_release_recursive>
 8009d0e:	e7e9      	b.n	8009ce4 <_vfiprintf_r+0x4c>
 8009d10:	2300      	movs	r3, #0
 8009d12:	9309      	str	r3, [sp, #36]	; 0x24
 8009d14:	2320      	movs	r3, #32
 8009d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1e:	2330      	movs	r3, #48	; 0x30
 8009d20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ee4 <_vfiprintf_r+0x24c>
 8009d24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d28:	f04f 0901 	mov.w	r9, #1
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	469a      	mov	sl, r3
 8009d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d34:	b10a      	cbz	r2, 8009d3a <_vfiprintf_r+0xa2>
 8009d36:	2a25      	cmp	r2, #37	; 0x25
 8009d38:	d1f9      	bne.n	8009d2e <_vfiprintf_r+0x96>
 8009d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3e:	d00b      	beq.n	8009d58 <_vfiprintf_r+0xc0>
 8009d40:	465b      	mov	r3, fp
 8009d42:	4622      	mov	r2, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ff93 	bl	8009c72 <__sfputs_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f000 80aa 	beq.w	8009ea6 <_vfiprintf_r+0x20e>
 8009d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d54:	445a      	add	r2, fp
 8009d56:	9209      	str	r2, [sp, #36]	; 0x24
 8009d58:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80a2 	beq.w	8009ea6 <_vfiprintf_r+0x20e>
 8009d62:	2300      	movs	r3, #0
 8009d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6c:	f10a 0a01 	add.w	sl, sl, #1
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	9307      	str	r3, [sp, #28]
 8009d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d78:	931a      	str	r3, [sp, #104]	; 0x68
 8009d7a:	4654      	mov	r4, sl
 8009d7c:	2205      	movs	r2, #5
 8009d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d82:	4858      	ldr	r0, [pc, #352]	; (8009ee4 <_vfiprintf_r+0x24c>)
 8009d84:	f7f6 fa2c 	bl	80001e0 <memchr>
 8009d88:	9a04      	ldr	r2, [sp, #16]
 8009d8a:	b9d8      	cbnz	r0, 8009dc4 <_vfiprintf_r+0x12c>
 8009d8c:	06d1      	lsls	r1, r2, #27
 8009d8e:	bf44      	itt	mi
 8009d90:	2320      	movmi	r3, #32
 8009d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d96:	0713      	lsls	r3, r2, #28
 8009d98:	bf44      	itt	mi
 8009d9a:	232b      	movmi	r3, #43	; 0x2b
 8009d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da0:	f89a 3000 	ldrb.w	r3, [sl]
 8009da4:	2b2a      	cmp	r3, #42	; 0x2a
 8009da6:	d015      	beq.n	8009dd4 <_vfiprintf_r+0x13c>
 8009da8:	9a07      	ldr	r2, [sp, #28]
 8009daa:	4654      	mov	r4, sl
 8009dac:	2000      	movs	r0, #0
 8009dae:	f04f 0c0a 	mov.w	ip, #10
 8009db2:	4621      	mov	r1, r4
 8009db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db8:	3b30      	subs	r3, #48	; 0x30
 8009dba:	2b09      	cmp	r3, #9
 8009dbc:	d94e      	bls.n	8009e5c <_vfiprintf_r+0x1c4>
 8009dbe:	b1b0      	cbz	r0, 8009dee <_vfiprintf_r+0x156>
 8009dc0:	9207      	str	r2, [sp, #28]
 8009dc2:	e014      	b.n	8009dee <_vfiprintf_r+0x156>
 8009dc4:	eba0 0308 	sub.w	r3, r0, r8
 8009dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	46a2      	mov	sl, r4
 8009dd2:	e7d2      	b.n	8009d7a <_vfiprintf_r+0xe2>
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	1d19      	adds	r1, r3, #4
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfbb      	ittet	lt
 8009de0:	425b      	neglt	r3, r3
 8009de2:	f042 0202 	orrlt.w	r2, r2, #2
 8009de6:	9307      	strge	r3, [sp, #28]
 8009de8:	9307      	strlt	r3, [sp, #28]
 8009dea:	bfb8      	it	lt
 8009dec:	9204      	strlt	r2, [sp, #16]
 8009dee:	7823      	ldrb	r3, [r4, #0]
 8009df0:	2b2e      	cmp	r3, #46	; 0x2e
 8009df2:	d10c      	bne.n	8009e0e <_vfiprintf_r+0x176>
 8009df4:	7863      	ldrb	r3, [r4, #1]
 8009df6:	2b2a      	cmp	r3, #42	; 0x2a
 8009df8:	d135      	bne.n	8009e66 <_vfiprintf_r+0x1ce>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	1d1a      	adds	r2, r3, #4
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	9203      	str	r2, [sp, #12]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bfb8      	it	lt
 8009e06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e0a:	3402      	adds	r4, #2
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ef4 <_vfiprintf_r+0x25c>
 8009e12:	7821      	ldrb	r1, [r4, #0]
 8009e14:	2203      	movs	r2, #3
 8009e16:	4650      	mov	r0, sl
 8009e18:	f7f6 f9e2 	bl	80001e0 <memchr>
 8009e1c:	b140      	cbz	r0, 8009e30 <_vfiprintf_r+0x198>
 8009e1e:	2340      	movs	r3, #64	; 0x40
 8009e20:	eba0 000a 	sub.w	r0, r0, sl
 8009e24:	fa03 f000 	lsl.w	r0, r3, r0
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	4303      	orrs	r3, r0
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e34:	482c      	ldr	r0, [pc, #176]	; (8009ee8 <_vfiprintf_r+0x250>)
 8009e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e3a:	2206      	movs	r2, #6
 8009e3c:	f7f6 f9d0 	bl	80001e0 <memchr>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d03f      	beq.n	8009ec4 <_vfiprintf_r+0x22c>
 8009e44:	4b29      	ldr	r3, [pc, #164]	; (8009eec <_vfiprintf_r+0x254>)
 8009e46:	bb1b      	cbnz	r3, 8009e90 <_vfiprintf_r+0x1f8>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	3307      	adds	r3, #7
 8009e4c:	f023 0307 	bic.w	r3, r3, #7
 8009e50:	3308      	adds	r3, #8
 8009e52:	9303      	str	r3, [sp, #12]
 8009e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e56:	443b      	add	r3, r7
 8009e58:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5a:	e767      	b.n	8009d2c <_vfiprintf_r+0x94>
 8009e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e60:	460c      	mov	r4, r1
 8009e62:	2001      	movs	r0, #1
 8009e64:	e7a5      	b.n	8009db2 <_vfiprintf_r+0x11a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	3401      	adds	r4, #1
 8009e6a:	9305      	str	r3, [sp, #20]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f04f 0c0a 	mov.w	ip, #10
 8009e72:	4620      	mov	r0, r4
 8009e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e78:	3a30      	subs	r2, #48	; 0x30
 8009e7a:	2a09      	cmp	r2, #9
 8009e7c:	d903      	bls.n	8009e86 <_vfiprintf_r+0x1ee>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0c5      	beq.n	8009e0e <_vfiprintf_r+0x176>
 8009e82:	9105      	str	r1, [sp, #20]
 8009e84:	e7c3      	b.n	8009e0e <_vfiprintf_r+0x176>
 8009e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e7f0      	b.n	8009e72 <_vfiprintf_r+0x1da>
 8009e90:	ab03      	add	r3, sp, #12
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	462a      	mov	r2, r5
 8009e96:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <_vfiprintf_r+0x258>)
 8009e98:	a904      	add	r1, sp, #16
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	1c78      	adds	r0, r7, #1
 8009ea4:	d1d6      	bne.n	8009e54 <_vfiprintf_r+0x1bc>
 8009ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ea8:	07d9      	lsls	r1, r3, #31
 8009eaa:	d405      	bmi.n	8009eb8 <_vfiprintf_r+0x220>
 8009eac:	89ab      	ldrh	r3, [r5, #12]
 8009eae:	059a      	lsls	r2, r3, #22
 8009eb0:	d402      	bmi.n	8009eb8 <_vfiprintf_r+0x220>
 8009eb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb4:	f7ff fa44 	bl	8009340 <__retarget_lock_release_recursive>
 8009eb8:	89ab      	ldrh	r3, [r5, #12]
 8009eba:	065b      	lsls	r3, r3, #25
 8009ebc:	f53f af12 	bmi.w	8009ce4 <_vfiprintf_r+0x4c>
 8009ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ec2:	e711      	b.n	8009ce8 <_vfiprintf_r+0x50>
 8009ec4:	ab03      	add	r3, sp, #12
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <_vfiprintf_r+0x258>)
 8009ecc:	a904      	add	r1, sp, #16
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f000 f880 	bl	8009fd4 <_printf_i>
 8009ed4:	e7e4      	b.n	8009ea0 <_vfiprintf_r+0x208>
 8009ed6:	bf00      	nop
 8009ed8:	0800a7e8 	.word	0x0800a7e8
 8009edc:	0800a808 	.word	0x0800a808
 8009ee0:	0800a7c8 	.word	0x0800a7c8
 8009ee4:	0800a82c 	.word	0x0800a82c
 8009ee8:	0800a836 	.word	0x0800a836
 8009eec:	00000000 	.word	0x00000000
 8009ef0:	08009c73 	.word	0x08009c73
 8009ef4:	0800a832 	.word	0x0800a832

08009ef8 <_printf_common>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	4616      	mov	r6, r2
 8009efe:	4699      	mov	r9, r3
 8009f00:	688a      	ldr	r2, [r1, #8]
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	bfb8      	it	lt
 8009f0c:	4613      	movlt	r3, r2
 8009f0e:	6033      	str	r3, [r6, #0]
 8009f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f14:	4607      	mov	r7, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	b10a      	cbz	r2, 8009f1e <_printf_common+0x26>
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	0699      	lsls	r1, r3, #26
 8009f22:	bf42      	ittt	mi
 8009f24:	6833      	ldrmi	r3, [r6, #0]
 8009f26:	3302      	addmi	r3, #2
 8009f28:	6033      	strmi	r3, [r6, #0]
 8009f2a:	6825      	ldr	r5, [r4, #0]
 8009f2c:	f015 0506 	ands.w	r5, r5, #6
 8009f30:	d106      	bne.n	8009f40 <_printf_common+0x48>
 8009f32:	f104 0a19 	add.w	sl, r4, #25
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	6832      	ldr	r2, [r6, #0]
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	dc26      	bgt.n	8009f8e <_printf_common+0x96>
 8009f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f44:	1e13      	subs	r3, r2, #0
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	bf18      	it	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	0692      	lsls	r2, r2, #26
 8009f4e:	d42b      	bmi.n	8009fa8 <_printf_common+0xb0>
 8009f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f54:	4649      	mov	r1, r9
 8009f56:	4638      	mov	r0, r7
 8009f58:	47c0      	blx	r8
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d01e      	beq.n	8009f9c <_printf_common+0xa4>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	68e5      	ldr	r5, [r4, #12]
 8009f62:	6832      	ldr	r2, [r6, #0]
 8009f64:	f003 0306 	and.w	r3, r3, #6
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	bf08      	it	eq
 8009f6c:	1aad      	subeq	r5, r5, r2
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	bf0c      	ite	eq
 8009f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f78:	2500      	movne	r5, #0
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	bfc4      	itt	gt
 8009f7e:	1a9b      	subgt	r3, r3, r2
 8009f80:	18ed      	addgt	r5, r5, r3
 8009f82:	2600      	movs	r6, #0
 8009f84:	341a      	adds	r4, #26
 8009f86:	42b5      	cmp	r5, r6
 8009f88:	d11a      	bne.n	8009fc0 <_printf_common+0xc8>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e008      	b.n	8009fa0 <_printf_common+0xa8>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4652      	mov	r2, sl
 8009f92:	4649      	mov	r1, r9
 8009f94:	4638      	mov	r0, r7
 8009f96:	47c0      	blx	r8
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d103      	bne.n	8009fa4 <_printf_common+0xac>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	e7c6      	b.n	8009f36 <_printf_common+0x3e>
 8009fa8:	18e1      	adds	r1, r4, r3
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	2030      	movs	r0, #48	; 0x30
 8009fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fb2:	4422      	add	r2, r4
 8009fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	e7c7      	b.n	8009f50 <_printf_common+0x58>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	47c0      	blx	r8
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d0e6      	beq.n	8009f9c <_printf_common+0xa4>
 8009fce:	3601      	adds	r6, #1
 8009fd0:	e7d9      	b.n	8009f86 <_printf_common+0x8e>
	...

08009fd4 <_printf_i>:
 8009fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	7e0f      	ldrb	r7, [r1, #24]
 8009fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fdc:	2f78      	cmp	r7, #120	; 0x78
 8009fde:	4691      	mov	r9, r2
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	469a      	mov	sl, r3
 8009fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fea:	d807      	bhi.n	8009ffc <_printf_i+0x28>
 8009fec:	2f62      	cmp	r7, #98	; 0x62
 8009fee:	d80a      	bhi.n	800a006 <_printf_i+0x32>
 8009ff0:	2f00      	cmp	r7, #0
 8009ff2:	f000 80d8 	beq.w	800a1a6 <_printf_i+0x1d2>
 8009ff6:	2f58      	cmp	r7, #88	; 0x58
 8009ff8:	f000 80a3 	beq.w	800a142 <_printf_i+0x16e>
 8009ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a004:	e03a      	b.n	800a07c <_printf_i+0xa8>
 800a006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a00a:	2b15      	cmp	r3, #21
 800a00c:	d8f6      	bhi.n	8009ffc <_printf_i+0x28>
 800a00e:	a101      	add	r1, pc, #4	; (adr r1, 800a014 <_printf_i+0x40>)
 800a010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a014:	0800a06d 	.word	0x0800a06d
 800a018:	0800a081 	.word	0x0800a081
 800a01c:	08009ffd 	.word	0x08009ffd
 800a020:	08009ffd 	.word	0x08009ffd
 800a024:	08009ffd 	.word	0x08009ffd
 800a028:	08009ffd 	.word	0x08009ffd
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	08009ffd 	.word	0x08009ffd
 800a034:	08009ffd 	.word	0x08009ffd
 800a038:	08009ffd 	.word	0x08009ffd
 800a03c:	08009ffd 	.word	0x08009ffd
 800a040:	0800a18d 	.word	0x0800a18d
 800a044:	0800a0b1 	.word	0x0800a0b1
 800a048:	0800a16f 	.word	0x0800a16f
 800a04c:	08009ffd 	.word	0x08009ffd
 800a050:	08009ffd 	.word	0x08009ffd
 800a054:	0800a1af 	.word	0x0800a1af
 800a058:	08009ffd 	.word	0x08009ffd
 800a05c:	0800a0b1 	.word	0x0800a0b1
 800a060:	08009ffd 	.word	0x08009ffd
 800a064:	08009ffd 	.word	0x08009ffd
 800a068:	0800a177 	.word	0x0800a177
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	1d1a      	adds	r2, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	602a      	str	r2, [r5, #0]
 800a074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0a3      	b.n	800a1c8 <_printf_i+0x1f4>
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	6829      	ldr	r1, [r5, #0]
 800a084:	0606      	lsls	r6, r0, #24
 800a086:	f101 0304 	add.w	r3, r1, #4
 800a08a:	d50a      	bpl.n	800a0a2 <_printf_i+0xce>
 800a08c:	680e      	ldr	r6, [r1, #0]
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	2e00      	cmp	r6, #0
 800a092:	da03      	bge.n	800a09c <_printf_i+0xc8>
 800a094:	232d      	movs	r3, #45	; 0x2d
 800a096:	4276      	negs	r6, r6
 800a098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a09c:	485e      	ldr	r0, [pc, #376]	; (800a218 <_printf_i+0x244>)
 800a09e:	230a      	movs	r3, #10
 800a0a0:	e019      	b.n	800a0d6 <_printf_i+0x102>
 800a0a2:	680e      	ldr	r6, [r1, #0]
 800a0a4:	602b      	str	r3, [r5, #0]
 800a0a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0aa:	bf18      	it	ne
 800a0ac:	b236      	sxthne	r6, r6
 800a0ae:	e7ef      	b.n	800a090 <_printf_i+0xbc>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	1d19      	adds	r1, r3, #4
 800a0b6:	6029      	str	r1, [r5, #0]
 800a0b8:	0601      	lsls	r1, r0, #24
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_i+0xec>
 800a0bc:	681e      	ldr	r6, [r3, #0]
 800a0be:	e002      	b.n	800a0c6 <_printf_i+0xf2>
 800a0c0:	0646      	lsls	r6, r0, #25
 800a0c2:	d5fb      	bpl.n	800a0bc <_printf_i+0xe8>
 800a0c4:	881e      	ldrh	r6, [r3, #0]
 800a0c6:	4854      	ldr	r0, [pc, #336]	; (800a218 <_printf_i+0x244>)
 800a0c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2308      	moveq	r3, #8
 800a0ce:	230a      	movne	r3, #10
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0d6:	6865      	ldr	r5, [r4, #4]
 800a0d8:	60a5      	str	r5, [r4, #8]
 800a0da:	2d00      	cmp	r5, #0
 800a0dc:	bfa2      	ittt	ge
 800a0de:	6821      	ldrge	r1, [r4, #0]
 800a0e0:	f021 0104 	bicge.w	r1, r1, #4
 800a0e4:	6021      	strge	r1, [r4, #0]
 800a0e6:	b90e      	cbnz	r6, 800a0ec <_printf_i+0x118>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	d04d      	beq.n	800a188 <_printf_i+0x1b4>
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a0f6:	5dc7      	ldrb	r7, [r0, r7]
 800a0f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0fc:	4637      	mov	r7, r6
 800a0fe:	42bb      	cmp	r3, r7
 800a100:	460e      	mov	r6, r1
 800a102:	d9f4      	bls.n	800a0ee <_printf_i+0x11a>
 800a104:	2b08      	cmp	r3, #8
 800a106:	d10b      	bne.n	800a120 <_printf_i+0x14c>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	07de      	lsls	r6, r3, #31
 800a10c:	d508      	bpl.n	800a120 <_printf_i+0x14c>
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	6861      	ldr	r1, [r4, #4]
 800a112:	4299      	cmp	r1, r3
 800a114:	bfde      	ittt	le
 800a116:	2330      	movle	r3, #48	; 0x30
 800a118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a11c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a120:	1b52      	subs	r2, r2, r5
 800a122:	6122      	str	r2, [r4, #16]
 800a124:	f8cd a000 	str.w	sl, [sp]
 800a128:	464b      	mov	r3, r9
 800a12a:	aa03      	add	r2, sp, #12
 800a12c:	4621      	mov	r1, r4
 800a12e:	4640      	mov	r0, r8
 800a130:	f7ff fee2 	bl	8009ef8 <_printf_common>
 800a134:	3001      	adds	r0, #1
 800a136:	d14c      	bne.n	800a1d2 <_printf_i+0x1fe>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13c:	b004      	add	sp, #16
 800a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a142:	4835      	ldr	r0, [pc, #212]	; (800a218 <_printf_i+0x244>)
 800a144:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a148:	6829      	ldr	r1, [r5, #0]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a150:	6029      	str	r1, [r5, #0]
 800a152:	061d      	lsls	r5, r3, #24
 800a154:	d514      	bpl.n	800a180 <_printf_i+0x1ac>
 800a156:	07df      	lsls	r7, r3, #31
 800a158:	bf44      	itt	mi
 800a15a:	f043 0320 	orrmi.w	r3, r3, #32
 800a15e:	6023      	strmi	r3, [r4, #0]
 800a160:	b91e      	cbnz	r6, 800a16a <_printf_i+0x196>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	f023 0320 	bic.w	r3, r3, #32
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	2310      	movs	r3, #16
 800a16c:	e7b0      	b.n	800a0d0 <_printf_i+0xfc>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	f043 0320 	orr.w	r3, r3, #32
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	2378      	movs	r3, #120	; 0x78
 800a178:	4828      	ldr	r0, [pc, #160]	; (800a21c <_printf_i+0x248>)
 800a17a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a17e:	e7e3      	b.n	800a148 <_printf_i+0x174>
 800a180:	0659      	lsls	r1, r3, #25
 800a182:	bf48      	it	mi
 800a184:	b2b6      	uxthmi	r6, r6
 800a186:	e7e6      	b.n	800a156 <_printf_i+0x182>
 800a188:	4615      	mov	r5, r2
 800a18a:	e7bb      	b.n	800a104 <_printf_i+0x130>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	6826      	ldr	r6, [r4, #0]
 800a190:	6961      	ldr	r1, [r4, #20]
 800a192:	1d18      	adds	r0, r3, #4
 800a194:	6028      	str	r0, [r5, #0]
 800a196:	0635      	lsls	r5, r6, #24
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	d501      	bpl.n	800a1a0 <_printf_i+0x1cc>
 800a19c:	6019      	str	r1, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <_printf_i+0x1d2>
 800a1a0:	0670      	lsls	r0, r6, #25
 800a1a2:	d5fb      	bpl.n	800a19c <_printf_i+0x1c8>
 800a1a4:	8019      	strh	r1, [r3, #0]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	4615      	mov	r5, r2
 800a1ac:	e7ba      	b.n	800a124 <_printf_i+0x150>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	1d1a      	adds	r2, r3, #4
 800a1b2:	602a      	str	r2, [r5, #0]
 800a1b4:	681d      	ldr	r5, [r3, #0]
 800a1b6:	6862      	ldr	r2, [r4, #4]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f7f6 f810 	bl	80001e0 <memchr>
 800a1c0:	b108      	cbz	r0, 800a1c6 <_printf_i+0x1f2>
 800a1c2:	1b40      	subs	r0, r0, r5
 800a1c4:	6060      	str	r0, [r4, #4]
 800a1c6:	6863      	ldr	r3, [r4, #4]
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d0:	e7a8      	b.n	800a124 <_printf_i+0x150>
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4640      	mov	r0, r8
 800a1da:	47d0      	blx	sl
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d0ab      	beq.n	800a138 <_printf_i+0x164>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	079b      	lsls	r3, r3, #30
 800a1e4:	d413      	bmi.n	800a20e <_printf_i+0x23a>
 800a1e6:	68e0      	ldr	r0, [r4, #12]
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	4298      	cmp	r0, r3
 800a1ec:	bfb8      	it	lt
 800a1ee:	4618      	movlt	r0, r3
 800a1f0:	e7a4      	b.n	800a13c <_printf_i+0x168>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	47d0      	blx	sl
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d09b      	beq.n	800a138 <_printf_i+0x164>
 800a200:	3501      	adds	r5, #1
 800a202:	68e3      	ldr	r3, [r4, #12]
 800a204:	9903      	ldr	r1, [sp, #12]
 800a206:	1a5b      	subs	r3, r3, r1
 800a208:	42ab      	cmp	r3, r5
 800a20a:	dcf2      	bgt.n	800a1f2 <_printf_i+0x21e>
 800a20c:	e7eb      	b.n	800a1e6 <_printf_i+0x212>
 800a20e:	2500      	movs	r5, #0
 800a210:	f104 0619 	add.w	r6, r4, #25
 800a214:	e7f5      	b.n	800a202 <_printf_i+0x22e>
 800a216:	bf00      	nop
 800a218:	0800a83d 	.word	0x0800a83d
 800a21c:	0800a84e 	.word	0x0800a84e

0800a220 <_read_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d07      	ldr	r5, [pc, #28]	; (800a240 <_read_r+0x20>)
 800a224:	4604      	mov	r4, r0
 800a226:	4608      	mov	r0, r1
 800a228:	4611      	mov	r1, r2
 800a22a:	2200      	movs	r2, #0
 800a22c:	602a      	str	r2, [r5, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	f7f7 f8e8 	bl	8001404 <_read>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_read_r+0x1e>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_read_r+0x1e>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	200042c8 	.word	0x200042c8

0800a244 <__swbuf_r>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	460e      	mov	r6, r1
 800a248:	4614      	mov	r4, r2
 800a24a:	4605      	mov	r5, r0
 800a24c:	b118      	cbz	r0, 800a256 <__swbuf_r+0x12>
 800a24e:	6983      	ldr	r3, [r0, #24]
 800a250:	b90b      	cbnz	r3, 800a256 <__swbuf_r+0x12>
 800a252:	f7fe ffb1 	bl	80091b8 <__sinit>
 800a256:	4b21      	ldr	r3, [pc, #132]	; (800a2dc <__swbuf_r+0x98>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	d12b      	bne.n	800a2b4 <__swbuf_r+0x70>
 800a25c:	686c      	ldr	r4, [r5, #4]
 800a25e:	69a3      	ldr	r3, [r4, #24]
 800a260:	60a3      	str	r3, [r4, #8]
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	071a      	lsls	r2, r3, #28
 800a266:	d52f      	bpl.n	800a2c8 <__swbuf_r+0x84>
 800a268:	6923      	ldr	r3, [r4, #16]
 800a26a:	b36b      	cbz	r3, 800a2c8 <__swbuf_r+0x84>
 800a26c:	6923      	ldr	r3, [r4, #16]
 800a26e:	6820      	ldr	r0, [r4, #0]
 800a270:	1ac0      	subs	r0, r0, r3
 800a272:	6963      	ldr	r3, [r4, #20]
 800a274:	b2f6      	uxtb	r6, r6
 800a276:	4283      	cmp	r3, r0
 800a278:	4637      	mov	r7, r6
 800a27a:	dc04      	bgt.n	800a286 <__swbuf_r+0x42>
 800a27c:	4621      	mov	r1, r4
 800a27e:	4628      	mov	r0, r5
 800a280:	f7ff fade 	bl	8009840 <_fflush_r>
 800a284:	bb30      	cbnz	r0, 800a2d4 <__swbuf_r+0x90>
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	3b01      	subs	r3, #1
 800a28a:	60a3      	str	r3, [r4, #8]
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	6022      	str	r2, [r4, #0]
 800a292:	701e      	strb	r6, [r3, #0]
 800a294:	6963      	ldr	r3, [r4, #20]
 800a296:	3001      	adds	r0, #1
 800a298:	4283      	cmp	r3, r0
 800a29a:	d004      	beq.n	800a2a6 <__swbuf_r+0x62>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	07db      	lsls	r3, r3, #31
 800a2a0:	d506      	bpl.n	800a2b0 <__swbuf_r+0x6c>
 800a2a2:	2e0a      	cmp	r6, #10
 800a2a4:	d104      	bne.n	800a2b0 <__swbuf_r+0x6c>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f7ff fac9 	bl	8009840 <_fflush_r>
 800a2ae:	b988      	cbnz	r0, 800a2d4 <__swbuf_r+0x90>
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <__swbuf_r+0x9c>)
 800a2b6:	429c      	cmp	r4, r3
 800a2b8:	d101      	bne.n	800a2be <__swbuf_r+0x7a>
 800a2ba:	68ac      	ldr	r4, [r5, #8]
 800a2bc:	e7cf      	b.n	800a25e <__swbuf_r+0x1a>
 800a2be:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <__swbuf_r+0xa0>)
 800a2c0:	429c      	cmp	r4, r3
 800a2c2:	bf08      	it	eq
 800a2c4:	68ec      	ldreq	r4, [r5, #12]
 800a2c6:	e7ca      	b.n	800a25e <__swbuf_r+0x1a>
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f000 f80c 	bl	800a2e8 <__swsetup_r>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d0cb      	beq.n	800a26c <__swbuf_r+0x28>
 800a2d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a2d8:	e7ea      	b.n	800a2b0 <__swbuf_r+0x6c>
 800a2da:	bf00      	nop
 800a2dc:	0800a7e8 	.word	0x0800a7e8
 800a2e0:	0800a808 	.word	0x0800a808
 800a2e4:	0800a7c8 	.word	0x0800a7c8

0800a2e8 <__swsetup_r>:
 800a2e8:	4b32      	ldr	r3, [pc, #200]	; (800a3b4 <__swsetup_r+0xcc>)
 800a2ea:	b570      	push	{r4, r5, r6, lr}
 800a2ec:	681d      	ldr	r5, [r3, #0]
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	b125      	cbz	r5, 800a2fe <__swsetup_r+0x16>
 800a2f4:	69ab      	ldr	r3, [r5, #24]
 800a2f6:	b913      	cbnz	r3, 800a2fe <__swsetup_r+0x16>
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7fe ff5d 	bl	80091b8 <__sinit>
 800a2fe:	4b2e      	ldr	r3, [pc, #184]	; (800a3b8 <__swsetup_r+0xd0>)
 800a300:	429c      	cmp	r4, r3
 800a302:	d10f      	bne.n	800a324 <__swsetup_r+0x3c>
 800a304:	686c      	ldr	r4, [r5, #4]
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a30c:	0719      	lsls	r1, r3, #28
 800a30e:	d42c      	bmi.n	800a36a <__swsetup_r+0x82>
 800a310:	06dd      	lsls	r5, r3, #27
 800a312:	d411      	bmi.n	800a338 <__swsetup_r+0x50>
 800a314:	2309      	movs	r3, #9
 800a316:	6033      	str	r3, [r6, #0]
 800a318:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a322:	e03e      	b.n	800a3a2 <__swsetup_r+0xba>
 800a324:	4b25      	ldr	r3, [pc, #148]	; (800a3bc <__swsetup_r+0xd4>)
 800a326:	429c      	cmp	r4, r3
 800a328:	d101      	bne.n	800a32e <__swsetup_r+0x46>
 800a32a:	68ac      	ldr	r4, [r5, #8]
 800a32c:	e7eb      	b.n	800a306 <__swsetup_r+0x1e>
 800a32e:	4b24      	ldr	r3, [pc, #144]	; (800a3c0 <__swsetup_r+0xd8>)
 800a330:	429c      	cmp	r4, r3
 800a332:	bf08      	it	eq
 800a334:	68ec      	ldreq	r4, [r5, #12]
 800a336:	e7e6      	b.n	800a306 <__swsetup_r+0x1e>
 800a338:	0758      	lsls	r0, r3, #29
 800a33a:	d512      	bpl.n	800a362 <__swsetup_r+0x7a>
 800a33c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a33e:	b141      	cbz	r1, 800a352 <__swsetup_r+0x6a>
 800a340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a344:	4299      	cmp	r1, r3
 800a346:	d002      	beq.n	800a34e <__swsetup_r+0x66>
 800a348:	4630      	mov	r0, r6
 800a34a:	f7ff fad3 	bl	80098f4 <_free_r>
 800a34e:	2300      	movs	r3, #0
 800a350:	6363      	str	r3, [r4, #52]	; 0x34
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	2300      	movs	r3, #0
 800a35c:	6063      	str	r3, [r4, #4]
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f043 0308 	orr.w	r3, r3, #8
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	6923      	ldr	r3, [r4, #16]
 800a36c:	b94b      	cbnz	r3, 800a382 <__swsetup_r+0x9a>
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a378:	d003      	beq.n	800a382 <__swsetup_r+0x9a>
 800a37a:	4621      	mov	r1, r4
 800a37c:	4630      	mov	r0, r6
 800a37e:	f000 f847 	bl	800a410 <__smakebuf_r>
 800a382:	89a0      	ldrh	r0, [r4, #12]
 800a384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a388:	f010 0301 	ands.w	r3, r0, #1
 800a38c:	d00a      	beq.n	800a3a4 <__swsetup_r+0xbc>
 800a38e:	2300      	movs	r3, #0
 800a390:	60a3      	str	r3, [r4, #8]
 800a392:	6963      	ldr	r3, [r4, #20]
 800a394:	425b      	negs	r3, r3
 800a396:	61a3      	str	r3, [r4, #24]
 800a398:	6923      	ldr	r3, [r4, #16]
 800a39a:	b943      	cbnz	r3, 800a3ae <__swsetup_r+0xc6>
 800a39c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3a0:	d1ba      	bne.n	800a318 <__swsetup_r+0x30>
 800a3a2:	bd70      	pop	{r4, r5, r6, pc}
 800a3a4:	0781      	lsls	r1, r0, #30
 800a3a6:	bf58      	it	pl
 800a3a8:	6963      	ldrpl	r3, [r4, #20]
 800a3aa:	60a3      	str	r3, [r4, #8]
 800a3ac:	e7f4      	b.n	800a398 <__swsetup_r+0xb0>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e7f7      	b.n	800a3a2 <__swsetup_r+0xba>
 800a3b2:	bf00      	nop
 800a3b4:	20000018 	.word	0x20000018
 800a3b8:	0800a7e8 	.word	0x0800a7e8
 800a3bc:	0800a808 	.word	0x0800a808
 800a3c0:	0800a7c8 	.word	0x0800a7c8

0800a3c4 <__swhatbuf_r>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	460e      	mov	r6, r1
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	b096      	sub	sp, #88	; 0x58
 800a3d0:	4614      	mov	r4, r2
 800a3d2:	461d      	mov	r5, r3
 800a3d4:	da08      	bge.n	800a3e8 <__swhatbuf_r+0x24>
 800a3d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	061a      	lsls	r2, r3, #24
 800a3e0:	d410      	bmi.n	800a404 <__swhatbuf_r+0x40>
 800a3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e6:	e00e      	b.n	800a406 <__swhatbuf_r+0x42>
 800a3e8:	466a      	mov	r2, sp
 800a3ea:	f000 f89b 	bl	800a524 <_fstat_r>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	dbf1      	blt.n	800a3d6 <__swhatbuf_r+0x12>
 800a3f2:	9a01      	ldr	r2, [sp, #4]
 800a3f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3fc:	425a      	negs	r2, r3
 800a3fe:	415a      	adcs	r2, r3
 800a400:	602a      	str	r2, [r5, #0]
 800a402:	e7ee      	b.n	800a3e2 <__swhatbuf_r+0x1e>
 800a404:	2340      	movs	r3, #64	; 0x40
 800a406:	2000      	movs	r0, #0
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	b016      	add	sp, #88	; 0x58
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a410 <__smakebuf_r>:
 800a410:	898b      	ldrh	r3, [r1, #12]
 800a412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a414:	079d      	lsls	r5, r3, #30
 800a416:	4606      	mov	r6, r0
 800a418:	460c      	mov	r4, r1
 800a41a:	d507      	bpl.n	800a42c <__smakebuf_r+0x1c>
 800a41c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	6123      	str	r3, [r4, #16]
 800a424:	2301      	movs	r3, #1
 800a426:	6163      	str	r3, [r4, #20]
 800a428:	b002      	add	sp, #8
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	ab01      	add	r3, sp, #4
 800a42e:	466a      	mov	r2, sp
 800a430:	f7ff ffc8 	bl	800a3c4 <__swhatbuf_r>
 800a434:	9900      	ldr	r1, [sp, #0]
 800a436:	4605      	mov	r5, r0
 800a438:	4630      	mov	r0, r6
 800a43a:	f7fe ffc9 	bl	80093d0 <_malloc_r>
 800a43e:	b948      	cbnz	r0, 800a454 <__smakebuf_r+0x44>
 800a440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a444:	059a      	lsls	r2, r3, #22
 800a446:	d4ef      	bmi.n	800a428 <__smakebuf_r+0x18>
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	f043 0302 	orr.w	r3, r3, #2
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	e7e3      	b.n	800a41c <__smakebuf_r+0xc>
 800a454:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <__smakebuf_r+0x7c>)
 800a456:	62b3      	str	r3, [r6, #40]	; 0x28
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	6020      	str	r0, [r4, #0]
 800a45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	6163      	str	r3, [r4, #20]
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	6120      	str	r0, [r4, #16]
 800a46a:	b15b      	cbz	r3, 800a484 <__smakebuf_r+0x74>
 800a46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a470:	4630      	mov	r0, r6
 800a472:	f000 f869 	bl	800a548 <_isatty_r>
 800a476:	b128      	cbz	r0, 800a484 <__smakebuf_r+0x74>
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	f043 0301 	orr.w	r3, r3, #1
 800a482:	81a3      	strh	r3, [r4, #12]
 800a484:	89a0      	ldrh	r0, [r4, #12]
 800a486:	4305      	orrs	r5, r0
 800a488:	81a5      	strh	r5, [r4, #12]
 800a48a:	e7cd      	b.n	800a428 <__smakebuf_r+0x18>
 800a48c:	08009151 	.word	0x08009151

0800a490 <memmove>:
 800a490:	4288      	cmp	r0, r1
 800a492:	b510      	push	{r4, lr}
 800a494:	eb01 0402 	add.w	r4, r1, r2
 800a498:	d902      	bls.n	800a4a0 <memmove+0x10>
 800a49a:	4284      	cmp	r4, r0
 800a49c:	4623      	mov	r3, r4
 800a49e:	d807      	bhi.n	800a4b0 <memmove+0x20>
 800a4a0:	1e43      	subs	r3, r0, #1
 800a4a2:	42a1      	cmp	r1, r4
 800a4a4:	d008      	beq.n	800a4b8 <memmove+0x28>
 800a4a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4ae:	e7f8      	b.n	800a4a2 <memmove+0x12>
 800a4b0:	4402      	add	r2, r0
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	428a      	cmp	r2, r1
 800a4b6:	d100      	bne.n	800a4ba <memmove+0x2a>
 800a4b8:	bd10      	pop	{r4, pc}
 800a4ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4c2:	e7f7      	b.n	800a4b4 <memmove+0x24>

0800a4c4 <_realloc_r>:
 800a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	4614      	mov	r4, r2
 800a4cc:	460e      	mov	r6, r1
 800a4ce:	b921      	cbnz	r1, 800a4da <_realloc_r+0x16>
 800a4d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	f7fe bf7b 	b.w	80093d0 <_malloc_r>
 800a4da:	b92a      	cbnz	r2, 800a4e8 <_realloc_r+0x24>
 800a4dc:	f7ff fa0a 	bl	80098f4 <_free_r>
 800a4e0:	4625      	mov	r5, r4
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e8:	f000 f83e 	bl	800a568 <_malloc_usable_size_r>
 800a4ec:	4284      	cmp	r4, r0
 800a4ee:	4607      	mov	r7, r0
 800a4f0:	d802      	bhi.n	800a4f8 <_realloc_r+0x34>
 800a4f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4f6:	d812      	bhi.n	800a51e <_realloc_r+0x5a>
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f7fe ff68 	bl	80093d0 <_malloc_r>
 800a500:	4605      	mov	r5, r0
 800a502:	2800      	cmp	r0, #0
 800a504:	d0ed      	beq.n	800a4e2 <_realloc_r+0x1e>
 800a506:	42bc      	cmp	r4, r7
 800a508:	4622      	mov	r2, r4
 800a50a:	4631      	mov	r1, r6
 800a50c:	bf28      	it	cs
 800a50e:	463a      	movcs	r2, r7
 800a510:	f7fe ff27 	bl	8009362 <memcpy>
 800a514:	4631      	mov	r1, r6
 800a516:	4640      	mov	r0, r8
 800a518:	f7ff f9ec 	bl	80098f4 <_free_r>
 800a51c:	e7e1      	b.n	800a4e2 <_realloc_r+0x1e>
 800a51e:	4635      	mov	r5, r6
 800a520:	e7df      	b.n	800a4e2 <_realloc_r+0x1e>
	...

0800a524 <_fstat_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	; (800a544 <_fstat_r+0x20>)
 800a528:	2300      	movs	r3, #0
 800a52a:	4604      	mov	r4, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	4611      	mov	r1, r2
 800a530:	602b      	str	r3, [r5, #0]
 800a532:	f7f6 ffac 	bl	800148e <_fstat>
 800a536:	1c43      	adds	r3, r0, #1
 800a538:	d102      	bne.n	800a540 <_fstat_r+0x1c>
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	b103      	cbz	r3, 800a540 <_fstat_r+0x1c>
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	bd38      	pop	{r3, r4, r5, pc}
 800a542:	bf00      	nop
 800a544:	200042c8 	.word	0x200042c8

0800a548 <_isatty_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d06      	ldr	r5, [pc, #24]	; (800a564 <_isatty_r+0x1c>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	602b      	str	r3, [r5, #0]
 800a554:	f7f6 ffab 	bl	80014ae <_isatty>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d102      	bne.n	800a562 <_isatty_r+0x1a>
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	b103      	cbz	r3, 800a562 <_isatty_r+0x1a>
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	200042c8 	.word	0x200042c8

0800a568 <_malloc_usable_size_r>:
 800a568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a56c:	1f18      	subs	r0, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	bfbc      	itt	lt
 800a572:	580b      	ldrlt	r3, [r1, r0]
 800a574:	18c0      	addlt	r0, r0, r3
 800a576:	4770      	bx	lr

0800a578 <_init>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr

0800a584 <_fini>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	bf00      	nop
 800a588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58a:	bc08      	pop	{r3}
 800a58c:	469e      	mov	lr, r3
 800a58e:	4770      	bx	lr
