
Rtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d0  0800a0d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d8  0800a0d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004250  2000007c  0800a15c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042cc  0800a15c  000242cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb16  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3b  00000000  00000000  0003fbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  00043b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  000453e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a99  00000000  00000000  00046b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b418  00000000  00000000  0004b5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d70d8  00000000  00000000  000669f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013dad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000720c  00000000  00000000  0013db24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009de8 	.word	0x08009de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009de8 	.word	0x08009de8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	e853 3f00 	ldrex	r3, [r3]
 8000596:	60bb      	str	r3, [r7, #8]
   return(result);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	69fa      	ldr	r2, [r7, #28]
 80005a4:	61ba      	str	r2, [r7, #24]
 80005a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005a8:	6979      	ldr	r1, [r7, #20]
 80005aa:	69ba      	ldr	r2, [r7, #24]
 80005ac:	e841 2300 	strex	r3, r2, [r1]
 80005b0:	613b      	str	r3, [r7, #16]
   return(result);
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1e9      	bne.n	800058c <LL_USART_EnableIT_IDLE+0x8>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3724      	adds	r7, #36	; 0x24
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <setleds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setleds(uint16_t ledring) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]

	//uint16_t ledring = 0b1010101010101010;

	for (int i = 0; i < 16; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e01f      	b.n	8000618 <setleds+0x50>

		if (ledring & (1 << i)) {
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <setleds+0x2c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <setleds+0x7c>)
 80005ee:	f001 fc79 	bl	8001ee4 <HAL_GPIO_WritePin>
 80005f2:	e004      	b.n	80005fe <setleds+0x36>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2120      	movs	r1, #32
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <setleds+0x7c>)
 80005fa:	f001 fc73 	bl	8001ee4 <HAL_GPIO_WritePin>
		}

		//SCK
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2108      	movs	r1, #8
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <setleds+0x7c>)
 8000604:	f001 fc6e 	bl	8001ee4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2108      	movs	r1, #8
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <setleds+0x7c>)
 800060e:	f001 fc69 	bl	8001ee4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b0f      	cmp	r3, #15
 800061c:	dddc      	ble.n	80005d8 <setleds+0x10>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	}

	//Latch
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2101      	movs	r1, #1
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <setleds+0x7c>)
 8000624:	f001 fc5e 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <setleds+0x7c>)
 800062e:	f001 fc59 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <setleds+0x7c>)
 8000638:	f001 fc54 	bl	8001ee4 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	48000400 	.word	0x48000400

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 ff37 	bl	80014be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f852 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f930 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000658:	f000 f910 	bl	800087c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f8de 	bl	800081c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f8ac 	bl	80007bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000664:	f004 ff20 	bl	80054a8 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSema */
  uartSemaHandle = osSemaphoreNew(1, 1, &uartSema_attributes);
 8000668:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <main+0x7c>)
 800066a:	2101      	movs	r1, #1
 800066c:	2001      	movs	r0, #1
 800066e:	f005 f818 	bl	80056a2 <osSemaphoreNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <main+0x80>)
 8000676:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RotaryEncoderQueue */
  RotaryEncoderQueueHandle = osMessageQueueNew (16, sizeof(InputEvent), &RotaryEncoderQueue_attributes);
 8000678:	4a14      	ldr	r2, [pc, #80]	; (80006cc <main+0x84>)
 800067a:	2108      	movs	r1, #8
 800067c:	2010      	movs	r0, #16
 800067e:	f005 f899 	bl	80057b4 <osMessageQueueNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <main+0x88>)
 8000686:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <main+0x8c>)
 800068a:	2100      	movs	r1, #0
 800068c:	4812      	ldr	r0, [pc, #72]	; (80006d8 <main+0x90>)
 800068e:	f004 ff55 	bl	800553c <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a11      	ldr	r2, [pc, #68]	; (80006dc <main+0x94>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <main+0x98>)
 800069a:	2100      	movs	r1, #0
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <main+0x9c>)
 800069e:	f004 ff4d 	bl	800553c <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <main+0xa0>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <main+0xa4>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <main+0xa8>)
 80006ae:	f004 ff45 	bl	800553c <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <main+0xac>)
 80006b6:	6013      	str	r3, [r2, #0]
  StartTcpServer();
 80006b8:	f000 f996 	bl	80009e8 <StartTcpServer>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006bc:	f004 ff18 	bl	80054f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006c0:	e7fe      	b.n	80006c0 <main+0x78>
 80006c2:	bf00      	nop
 80006c4:	08009fe0 	.word	0x08009fe0
 80006c8:	20000840 	.word	0x20000840
 80006cc:	08009fc8 	.word	0x08009fc8
 80006d0:	2000076c 	.word	0x2000076c
 80006d4:	08009f5c 	.word	0x08009f5c
 80006d8:	08000c3d 	.word	0x08000c3d
 80006dc:	200001e8 	.word	0x200001e8
 80006e0:	08009f80 	.word	0x08009f80
 80006e4:	08000ca1 	.word	0x08000ca1
 80006e8:	200004a8 	.word	0x200004a8
 80006ec:	08009fa4 	.word	0x08009fa4
 80006f0:	08000e0d 	.word	0x08000e0d
 80006f4:	20000768 	.word	0x20000768

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b096      	sub	sp, #88	; 0x58
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2244      	movs	r2, #68	; 0x44
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f008 fa71 	bl	8008bee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071e:	f001 fc17 	bl	8001f50 <HAL_PWREx_ControlVoltageScaling>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000728:	f000 fbce 	bl	8000ec8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072c:	f001 fbf2 	bl	8001f14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <SystemClock_Config+0xc0>)
 8000732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <SystemClock_Config+0xc0>)
 8000738:	f023 0318 	bic.w	r3, r3, #24
 800073c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000740:	2314      	movs	r3, #20
 8000742:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000758:	2301      	movs	r3, #1
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000760:	2310      	movs	r3, #16
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000764:	2307      	movs	r3, #7
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fc41 	bl	8001ffc <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000780:	f000 fba2 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f002 f841 	bl	8002824 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a8:	f000 fb8e 	bl	8000ec8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007ac:	f002 fc86 	bl	80030bc <HAL_RCCEx_EnableMSIPLLMode>
}
 80007b0:	bf00      	nop
 80007b2:	3758      	adds	r7, #88	; 0x58
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <MX_USART1_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART1_UART_Init+0x58>)
 8000800:	f002 ffde 	bl	80037c0 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 fb5d 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000098 	.word	0x20000098
 8000818:	40013800 	.word	0x40013800

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_USART2_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000860:	f002 ffae 	bl	80037c0 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 fb2d 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000011c 	.word	0x2000011c
 8000878:	40004400 	.word	0x40004400

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DMA_Init+0x38>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <MX_DMA_Init+0x38>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6493      	str	r3, [r2, #72]	; 0x48
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DMA_Init+0x38>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2105      	movs	r1, #5
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 fefe 	bl	80016a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008a4:	200f      	movs	r0, #15
 80008a6:	f000 ff17 	bl	80016d8 <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a29      	ldr	r2, [pc, #164]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_GPIO_Init+0xc0>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0xc0>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <MX_GPIO_Init+0xc0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_GPIO_Init+0xc0>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2129      	movs	r1, #41	; 0x29
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_GPIO_Init+0xc4>)
 800091c:	f001 fae2 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000920:	2309      	movs	r3, #9
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 f953 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_5;
 800093a:	2329      	movs	r3, #41	; 0x29
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <MX_GPIO_Init+0xc4>)
 8000952:	f001 f945 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000956:	2302      	movs	r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0xc4>)
 800096a:	f001 f939 	bl	8001be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400

08000980 <SendATCommand>:

/* USER CODE BEGIN 4 */

void SendATCommand(char *command) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	// The command sent MUST NOT contain a newline, otherwise it might be error-prone
	uint8_t cmd_length = strlen(command); // If your string is not NULL-Terminated this will cause errors!
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fc21 	bl	80001d0 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]
	uint8_t *buffer = (uint8_t*)pvPortMalloc(sizeof(char)*cmd_length+2);
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3302      	adds	r3, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f007 fdfe 	bl	8008598 <pvPortMalloc>
 800099c:	60b8      	str	r0, [r7, #8]
	strncpy((char*)buffer, command, cmd_length);
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	461a      	mov	r2, r3
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f008 fac8 	bl	8008f3a <strncpy>
	buffer[cmd_length] = '\r';
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	220d      	movs	r2, #13
 80009b2:	701a      	strb	r2, [r3, #0]
	buffer[cmd_length+1] = '\n';
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	3301      	adds	r3, #1
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	220a      	movs	r2, #10
 80009be:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, cmd_length+2, HAL_MAX_DELAY);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3302      	adds	r3, #2
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <SendATCommand+0x64>)
 80009d0:	f002 ff44 	bl	800385c <HAL_UART_Transmit>
	vPortFree(buffer);
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f007 feab 	bl	8008730 <vPortFree>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000098 	.word	0x20000098

080009e8 <StartTcpServer>:

void StartTcpServer(void) {
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* Debugging by jD */
	strcpy((char*)uart1Buffer, "start tcp server!\n\r");
 80009ec:	4a1a      	ldr	r2, [pc, #104]	; (8000a58 <StartTcpServer+0x70>)
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <StartTcpServer+0x74>)
 80009f0:	4614      	mov	r4, r2
 80009f2:	461d      	mov	r5, r3
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	6023      	str	r3, [r4, #0]
	// semaComment
	// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
		HAL_UART_Transmit(&huart2, uart1Buffer, strlen((char*)uart1Buffer), HAL_MAX_DELAY);
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <StartTcpServer+0x70>)
 80009fe:	f7ff fbe7 	bl	80001d0 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0a:	4913      	ldr	r1, [pc, #76]	; (8000a58 <StartTcpServer+0x70>)
 8000a0c:	4814      	ldr	r0, [pc, #80]	; (8000a60 <StartTcpServer+0x78>)
 8000a0e:	f002 ff25 	bl	800385c <HAL_UART_Transmit>
		// osSemaphoreRelease(uartSemaHandle);
	// }
	strcpy((char*)uart1Buffer, "\0");
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <StartTcpServer+0x70>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]

	// Configure Station+AP Mode
	SendATCommand("AT+CWMODE=3");
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <StartTcpServer+0x7c>)
 8000a1a:	f7ff ffb1 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f004 fe24 	bl	800566c <osDelay>

	// Allow multiple connections
	SendATCommand("AT+CIPMUX=1");
 8000a24:	4810      	ldr	r0, [pc, #64]	; (8000a68 <StartTcpServer+0x80>)
 8000a26:	f7ff ffab 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f004 fe1e 	bl	800566c <osDelay>

	// Start TCP server on Port 80
	SendATCommand("AT+CIPSERVER=1,80");
 8000a30:	480e      	ldr	r0, [pc, #56]	; (8000a6c <StartTcpServer+0x84>)
 8000a32:	f7ff ffa5 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a36:	200a      	movs	r0, #10
 8000a38:	f004 fe18 	bl	800566c <osDelay>

	// create Server
	SendATCommand("AT+CWSAP=\"TheDrive\",\"1234567890\",5,3");
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <StartTcpServer+0x88>)
 8000a3e:	f7ff ff9f 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a42:	200a      	movs	r0, #10
 8000a44:	f004 fe12 	bl	800566c <osDelay>

	// AT+CIPSEND=0,4
	SendATCommand("AT+CIPSTATUS");
 8000a48:	480a      	ldr	r0, [pc, #40]	; (8000a74 <StartTcpServer+0x8c>)
 8000a4a:	f7ff ff99 	bl	8000980 <SendATCommand>
	osDelay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f004 fe0c 	bl	800566c <osDelay>

	/* home
	// SendATCommand("AT+CWJAP=\"w4t4w15z4t1R4h4z5\",\"c47np9373R\"");
	SendATCommand("AT+CWJAP=\"Fairphone 4 5G_8331\",\"zahsakb5p26dz2p\"");
	osDelay(10); */
}
 8000a54:	bf00      	nop
 8000a56:	bdb0      	pop	{r4, r5, r7, pc}
 8000a58:	20000894 	.word	0x20000894
 8000a5c:	08009e50 	.word	0x08009e50
 8000a60:	2000011c 	.word	0x2000011c
 8000a64:	08009e64 	.word	0x08009e64
 8000a68:	08009e70 	.word	0x08009e70
 8000a6c:	08009e7c 	.word	0x08009e7c
 8000a70:	08009e90 	.word	0x08009e90
 8000a74:	08009eb8 	.word	0x08009eb8

08000a78 <UartHandlerTask>:

void UartHandlerTask(void *argument) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
	static size_t old_pos = 0;  // Track the position of last character processed

	while(1) {
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8000a80:	f107 020c 	add.w	r2, r7, #12
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f006 fe4f 	bl	8007730 <xTaskNotifyWait>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d1f3      	bne.n	8000a80 <UartHandlerTask+0x8>

			if(ulNotificationValue & UART1_IDLE_EVENT) { // Received message from UART1
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d03e      	beq.n	8000b20 <UartHandlerTask+0xa8>

				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR; // huart1->hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <UartHandlerTask+0x13c>)
 8000aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000aae:	617b      	str	r3, [r7, #20]
				size_t length;

				if(new_pos != old_pos) { // Check if any new data is received
 8000ab0:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <UartHandlerTask+0x140>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d032      	beq.n	8000b20 <UartHandlerTask+0xa8>
					// The transmissions here are also in blocking mode, otherwise output is cutoff!
					// If received data is BIGGER than buffer size, then output will be cutoff! (=> Increase buffer size)

					if (new_pos > old_pos) { // If data does not wrap around the buffer
 8000aba:	4b3f      	ldr	r3, [pc, #252]	; (8000bb8 <UartHandlerTask+0x140>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d910      	bls.n	8000ae6 <UartHandlerTask+0x6e>
						length = new_pos - old_pos;
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <UartHandlerTask+0x140>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	613b      	str	r3, [r7, #16]
						// Process your data => uart1Buffer[old_pos] TO uart1Buffer[old_pos+length] == Received DATA

						// semaComment
						// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
							HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8000ace:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <UartHandlerTask+0x140>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a3a      	ldr	r2, [pc, #232]	; (8000bbc <UartHandlerTask+0x144>)
 8000ad4:	1899      	adds	r1, r3, r2
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ade:	4838      	ldr	r0, [pc, #224]	; (8000bc0 <UartHandlerTask+0x148>)
 8000ae0:	f002 febc 	bl	800385c <HAL_UART_Transmit>
 8000ae4:	e019      	b.n	8000b1a <UartHandlerTask+0xa2>

					} else { // If data wraps around the buffer
						// If you process data in here, you'll need to partially construct your data

						// First transmit the data until the end of the buffer
						length = BUFFER_SIZE - old_pos;
 8000ae6:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <UartHandlerTask+0x140>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000aee:	613b      	str	r3, [r7, #16]

						// semaComment
						// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
							HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <UartHandlerTask+0x140>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a31      	ldr	r2, [pc, #196]	; (8000bbc <UartHandlerTask+0x144>)
 8000af6:	1899      	adds	r1, r3, r2
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b00:	482f      	ldr	r0, [pc, #188]	; (8000bc0 <UartHandlerTask+0x148>)
 8000b02:	f002 feab 	bl	800385c <HAL_UART_Transmit>
							// osSemaphoreRelease(uartSemaHandle);
						// }

						// Then transmit the remaining data from the beginning of the buffer
						length = new_pos;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	613b      	str	r3, [r7, #16]

						// semaComment
						// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
							HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b12:	492a      	ldr	r1, [pc, #168]	; (8000bbc <UartHandlerTask+0x144>)
 8000b14:	482a      	ldr	r0, [pc, #168]	; (8000bc0 <UartHandlerTask+0x148>)
 8000b16:	f002 fea1 	bl	800385c <HAL_UART_Transmit>
							// osSemaphoreRelease(uartSemaHandle);
						// }
					}

					old_pos = new_pos;  // Update the position of the last character processed
 8000b1a:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <UartHandlerTask+0x140>)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	6013      	str	r3, [r2, #0]
				}
			}

			if (ulNotificationValue & UART2_EVENT) { // Received CHARACTER from UART2
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0aa      	beq.n	8000a80 <UartHandlerTask+0x8>
				char c = (char)uart2_rx_char;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <UartHandlerTask+0x14c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	72fb      	strb	r3, [r7, #11]

				// Echo back the character to the terminal
				// semaComment
				// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 8000b30:	f107 030b 	add.w	r3, r7, #11
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <UartHandlerTask+0x148>)
 8000b3a:	f002 ff23 	bl	8003984 <HAL_UART_Transmit_IT>
					// osSemaphoreRelease(uartSemaHandle);
				// }

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r') {
 8000b3e:	7afb      	ldrb	r3, [r7, #11]
 8000b40:	2b0d      	cmp	r3, #13
 8000b42:	d12c      	bne.n	8000b9e <UartHandlerTask+0x126>
					uart2Buffer[uart2BufferIndex++] = '\r';
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <UartHandlerTask+0x150>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	b291      	uxth	r1, r2
 8000b4c:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <UartHandlerTask+0x150>)
 8000b4e:	8011      	strh	r1, [r2, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <UartHandlerTask+0x154>)
 8000b54:	210d      	movs	r1, #13
 8000b56:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <UartHandlerTask+0x150>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	b291      	uxth	r1, r2
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <UartHandlerTask+0x150>)
 8000b62:	8011      	strh	r1, [r2, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <UartHandlerTask+0x154>)
 8000b68:	210a      	movs	r1, #10
 8000b6a:	5499      	strb	r1, [r3, r2]

					// semaComment
					// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
						HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <UartHandlerTask+0x158>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2202      	movs	r2, #2
 8000b72:	4619      	mov	r1, r3
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <UartHandlerTask+0x148>)
 8000b76:	f002 ff05 	bl	8003984 <HAL_UART_Transmit_IT>
						// osSemaphoreRelease(uartSemaHandle);
					// }

					// This call will be made in blocking mode, because we'll clear the buffer!
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <UartHandlerTask+0x150>)
 8000b7c:	881a      	ldrh	r2, [r3, #0]
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b82:	4912      	ldr	r1, [pc, #72]	; (8000bcc <UartHandlerTask+0x154>)
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <UartHandlerTask+0x13c>)
 8000b86:	f002 fe69 	bl	800385c <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 8000b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b8e:	2100      	movs	r1, #0
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <UartHandlerTask+0x154>)
 8000b92:	f008 f82c 	bl	8008bee <memset>
					uart2BufferIndex = 0;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <UartHandlerTask+0x150>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	801a      	strh	r2, [r3, #0]
 8000b9c:	e770      	b.n	8000a80 <UartHandlerTask+0x8>

				} else {
					// Add character to buffer
					uart2Buffer[uart2BufferIndex++] = c;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <UartHandlerTask+0x150>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	b291      	uxth	r1, r2
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <UartHandlerTask+0x150>)
 8000ba8:	8011      	strh	r1, [r2, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	7af9      	ldrb	r1, [r7, #11]
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <UartHandlerTask+0x154>)
 8000bb0:	5499      	strb	r1, [r3, r2]
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8000bb2:	e765      	b.n	8000a80 <UartHandlerTask+0x8>
 8000bb4:	20000098 	.word	0x20000098
 8000bb8:	2000289c 	.word	0x2000289c
 8000bbc:	20000894 	.word	0x20000894
 8000bc0:	2000011c 	.word	0x2000011c
 8000bc4:	20002896 	.word	0x20002896
 8000bc8:	20002894 	.word	0x20002894
 8000bcc:	20001894 	.word	0x20001894
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_UART_RxCpltCallback>:
	}
}

/*
Interrupt callback routine for UART */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <HAL_UART_RxCpltCallback+0x54>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d11b      	bne.n	8000c1e <HAL_UART_RxCpltCallback+0x4a>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_UART_RxCpltCallback+0x58>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	f006 fdf9 	bl	80077f0 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <HAL_UART_RxCpltCallback+0x40>
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_UART_RxCpltCallback+0x5c>)
 8000c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	f3bf 8f6f 	isb	sy

		// Restart reception with interrupt
		HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	4907      	ldr	r1, [pc, #28]	; (8000c34 <HAL_UART_RxCpltCallback+0x60>)
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <HAL_UART_RxCpltCallback+0x64>)
 8000c1a:	f002 ff21 	bl	8003a60 <HAL_UART_Receive_IT>
	}
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	20002898 	.word	0x20002898
 8000c30:	e000ed04 	.word	0xe000ed04
 8000c34:	20002896 	.word	0x20002896
 8000c38:	2000011c 	.word	0x2000011c

08000c3c <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
		/*setleds(0b1010101010101010);
		 osDelay(1000);
		 setleds(0b0101010101010101);
		 osDelay(1000);*/

		osStatus_t ret = osMessageQueueGet(RotaryEncoderQueueHandle, &event, 0,
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <StartLedTask+0x58>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	f107 0108 	add.w	r1, r7, #8
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f004 fe84 	bl	800595c <osMessageQueueGet>
 8000c54:	6138      	str	r0, [r7, #16]
				10);
		if (ret != osOK) {
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <StartLedTask+0x28>
			//something went wrong
			printf("\r\ncannot read item from queue");
 8000c5c:	480e      	ldr	r0, [pc, #56]	; (8000c98 <StartLedTask+0x5c>)
 8000c5e:	f008 f863 	bl	8008d28 <iprintf>
 8000c62:	e013      	b.n	8000c8c <StartLedTask+0x50>
		} else {
			printf("\r\nread item");
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <StartLedTask+0x60>)
 8000c66:	f008 f85f 	bl	8008d28 <iprintf>

			uint32_t value;

			if (event.button_pressed) { //If 6th bit set, button was pressed -> pause game -> display on leds
 8000c6a:	7a3b      	ldrb	r3, [r7, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <StartLedTask+0x3c>
				value = 0b1010101010101010;
 8000c70:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e004      	b.n	8000c82 <StartLedTask+0x46>
			} else {
				value = 1 << event.counter;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
			}
			setleds(value);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc9e 	bl	80005c8 <setleds>
		}

		osDelay(2);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f004 fced 	bl	800566c <osDelay>
	for (;;) {
 8000c92:	e7d7      	b.n	8000c44 <StartLedTask+0x8>
 8000c94:	2000076c 	.word	0x2000076c
 8000c98:	08009ec8 	.word	0x08009ec8
 8000c9c:	08009ee8 	.word	0x08009ee8

08000ca0 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	uint16_t counter = 8;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	86bb      	strh	r3, [r7, #52]	; 0x34
	//uint16_t old_counter = 0;
	uint8_t old_state_a = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state_button = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	InputEvent event;
	event.button_pressed = true;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	event.counter = LEDSTART;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	InputEvent oldevent;
	/* Infinite loop */
	for (;;) {

		uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f001 f8f4 	bl	8001eb4 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <StartEncoderTask+0x154>)
 8000cd6:	f001 f8ed 	bl	8001eb4 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint8_t button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f001 f8e5 	bl	8001eb4 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if (a != old_state_a && event.counter <= 16) {
 8000cf0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d015      	beq.n	8000d28 <StartEncoderTask+0x88>
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	2b10      	cmp	r3, #16
 8000d00:	dc12      	bgt.n	8000d28 <StartEncoderTask+0x88>

			if (a != b) {
 8000d02:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000d06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d006      	beq.n	8000d1c <StartEncoderTask+0x7c>
				if (LEDMAX > event.counter)
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	2b0a      	cmp	r3, #10
 8000d12:	dc09      	bgt.n	8000d28 <StartEncoderTask+0x88>
					event.counter++;
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	3301      	adds	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d1a:	e005      	b.n	8000d28 <StartEncoderTask+0x88>

			} else if (LEDMIN != event.counter) {
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d002      	beq.n	8000d28 <StartEncoderTask+0x88>
				//if(counter != 3)
				event.counter--;
 8000d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d24:	3b01      	subs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28

			}
		}

		if (old_state_button != button && button) {
 8000d28:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000d2c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d014      	beq.n	8000d5e <StartEncoderTask+0xbe>
 8000d34:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d010      	beq.n	8000d5e <StartEncoderTask+0xbe>
			event.button_pressed = !event.button_pressed; //Bit toggle -> XOR -> toggle 6th bit
 8000d3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf14      	ite	ne
 8000d44:	2301      	movne	r3, #1
 8000d46:	2300      	moveq	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f083 0301 	eor.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			event.counter = LEDSTART;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
			//setleds(0b1010101010101010);
		}

		if (memcmp(&oldevent, &event, sizeof(event))) {
 8000d5e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2208      	movs	r2, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f007 ff22 	bl	8008bb2 <memcmp>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d02b      	beq.n	8000dcc <StartEncoderTask+0x12c>

			char msg1[16];
			snprintf(msg1, sizeof(msg1), "%d\r\n", event.counter);
 8000d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d76:	f107 000c 	add.w	r0, r7, #12
 8000d7a:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <StartEncoderTask+0x158>)
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	f008 f865 	bl	8008e4c <sniprintf>

			// semaComment
			// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
				HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), 1000);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa22 	bl	80001d0 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f107 010c 	add.w	r1, r7, #12
 8000d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d98:	4818      	ldr	r0, [pc, #96]	; (8000dfc <StartEncoderTask+0x15c>)
 8000d9a:	f002 fd5f 	bl	800385c <HAL_UART_Transmit>

			//uint32_t leds = 0xFFFF0000;

			//leds = leds >> counter;
			//event.counter = counter;
			osStatus_t ret = osMessageQueuePut(RotaryEncoderQueueHandle,
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <StartEncoderTask+0x160>)
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000da6:	230a      	movs	r3, #10
 8000da8:	2200      	movs	r2, #0
 8000daa:	f004 fd77 	bl	800589c <osMessageQueuePut>
 8000dae:	62f8      	str	r0, [r7, #44]	; 0x2c
					&event, 0, 10);

			if (ret != osOK) {
 8000db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <StartEncoderTask+0x122>
				//something went wrong
				printf("\r\ncannot enqueue item %u", counter);
 8000db6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000db8:	4619      	mov	r1, r3
 8000dba:	4812      	ldr	r0, [pc, #72]	; (8000e04 <StartEncoderTask+0x164>)
 8000dbc:	f007 ffb4 	bl	8008d28 <iprintf>
 8000dc0:	e004      	b.n	8000dcc <StartEncoderTask+0x12c>
			} else {
				printf("\r\nenqueued item %u", counter);
 8000dc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <StartEncoderTask+0x168>)
 8000dc8:	f007 ffae 	bl	8008d28 <iprintf>
			}
		}
		old_state_a = a;
 8000dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		old_state_button = button;
 8000dd4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000dd8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//old_counter = counter;
		memcpy(&oldevent, &event, sizeof(event));
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de8:	e883 0003 	stmia.w	r3, {r0, r1}
		osDelay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f004 fc3d 	bl	800566c <osDelay>
	for (;;) {
 8000df2:	e766      	b.n	8000cc2 <StartEncoderTask+0x22>
 8000df4:	48000400 	.word	0x48000400
 8000df8:	08009ef4 	.word	0x08009ef4
 8000dfc:	2000011c 	.word	0x2000011c
 8000e00:	2000076c 	.word	0x2000076c
 8000e04:	08009efc 	.word	0x08009efc
 8000e08:	08009f18 	.word	0x08009f18

08000e0c <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	/* Debugging by jD */
	strcpy((char*)uart1Buffer, "start broadcaster!\n\r");
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <StartDefaultTask+0x74>)
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <StartDefaultTask+0x78>)
 8000e18:	4614      	mov	r4, r2
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e24:	6020      	str	r0, [r4, #0]
 8000e26:	3404      	adds	r4, #4
 8000e28:	7021      	strb	r1, [r4, #0]

	// semaComment
	// if (osSemaphoreAcquire(uartSemaHandle, 10) == osOK) {
		HAL_UART_Transmit(&huart2, uart1Buffer, strlen((char*)uart1Buffer), HAL_MAX_DELAY);
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <StartDefaultTask+0x74>)
 8000e2c:	f7ff f9d0 	bl	80001d0 <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e38:	4911      	ldr	r1, [pc, #68]	; (8000e80 <StartDefaultTask+0x74>)
 8000e3a:	4813      	ldr	r0, [pc, #76]	; (8000e88 <StartDefaultTask+0x7c>)
 8000e3c:	f002 fd0e 	bl	800385c <HAL_UART_Transmit>
		// osSemaphoreRelease(uartSemaHandle);
	// }
	strcpy((char*)uart1Buffer, "\0");
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <StartDefaultTask+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]

	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 128, NULL, osPriorityNormal1, &xUartTaskHandle);
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <StartDefaultTask+0x80>)
 8000e48:	6819      	ldr	r1, [r3, #0]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <StartDefaultTask+0x84>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	2319      	movs	r3, #25
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	480f      	ldr	r0, [pc, #60]	; (8000e94 <StartDefaultTask+0x88>)
 8000e58:	f005 fd81 	bl	800695e <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 8000e5c:	480e      	ldr	r0, [pc, #56]	; (8000e98 <StartDefaultTask+0x8c>)
 8000e5e:	f7ff fb91 	bl	8000584 <LL_USART_EnableIT_IDLE>
	// NOTE: Please check stm32l4xx_it.c for the USER-CODE that handles the IDLE Line Interrupt!!
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 8000e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e66:	4906      	ldr	r1, [pc, #24]	; (8000e80 <StartDefaultTask+0x74>)
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <StartDefaultTask+0x90>)
 8000e6a:	f002 fe4f 	bl	8003b0c <HAL_UART_Receive_DMA>

	StartTcpServer();
 8000e6e:	f7ff fdbb 	bl	80009e8 <StartTcpServer>

	HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	490a      	ldr	r1, [pc, #40]	; (8000ea0 <StartDefaultTask+0x94>)
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <StartDefaultTask+0x7c>)
 8000e78:	f002 fdf2 	bl	8003a60 <HAL_UART_Receive_IT>

	osThreadExit();
 8000e7c:	f004 fbf0 	bl	8005660 <osThreadExit>
 8000e80:	20000894 	.word	0x20000894
 8000e84:	08009f2c 	.word	0x08009f2c
 8000e88:	2000011c 	.word	0x2000011c
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20002898 	.word	0x20002898
 8000e94:	08000a79 	.word	0x08000a79
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	20000098 	.word	0x20000098
 8000ea0:	20002896 	.word	0x20002896

08000ea4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eb6:	f000 fb1b 	bl	80014f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40001000 	.word	0x40001000

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_MspInit+0x4c>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	f06f 0001 	mvn.w	r0, #1
 8000f12:	f000 fbc5 	bl	80016a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0a0      	sub	sp, #128	; 0x80
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	2254      	movs	r2, #84	; 0x54
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f007 fe52 	bl	8008bee <memset>
  if(huart->Instance==USART1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a5f      	ldr	r2, [pc, #380]	; (80010cc <HAL_UART_MspInit+0x1a8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d169      	bne.n	8001028 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 feb5 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f6c:	f7ff ffac 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f70:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f74:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7c:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f94:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f000 fe0e 	bl	8001be0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000fc4:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000fc6:	4a44      	ldr	r2, [pc, #272]	; (80010d8 <HAL_UART_MspInit+0x1b4>)
 8000fc8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000fca:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd0:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe8:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ffa:	4836      	ldr	r0, [pc, #216]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8000ffc:	f000 fb7a 	bl	80016f4 <HAL_DMA_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001006:	f7ff ff5f 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 800100e:	671a      	str	r2, [r3, #112]	; 0x70
 8001010:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <HAL_UART_MspInit+0x1b0>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	2025      	movs	r0, #37	; 0x25
 800101c:	f000 fb40 	bl	80016a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001020:	2025      	movs	r0, #37	; 0x25
 8001022:	f000 fb59 	bl	80016d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001026:	e04d      	b.n	80010c4 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2b      	ldr	r2, [pc, #172]	; (80010dc <HAL_UART_MspInit+0x1b8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d148      	bne.n	80010c4 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001036:	2300      	movs	r3, #0
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fe46 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800104a:	f7ff ff3d 	bl	8000ec8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_UART_MspInit+0x1ac>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800107e:	2304      	movs	r3, #4
 8001080:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108e:	2307      	movs	r3, #7
 8001090:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f000 fda0 	bl	8001be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010b2:	2303      	movs	r3, #3
 80010b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f000 fd8e 	bl	8001be0 <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3780      	adds	r7, #128	; 0x80
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40021000 	.word	0x40021000
 80010d4:	200001a0 	.word	0x200001a0
 80010d8:	40020058 	.word	0x40020058
 80010dc:	40004400 	.word	0x40004400

080010e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_InitTick+0xe0>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_InitTick+0xe0>)
 80010f4:	f043 0310 	orr.w	r3, r3, #16
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_InitTick+0xe0>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001106:	f107 0210 	add.w	r2, r7, #16
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fd4b 	bl	8002bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	2b00      	cmp	r3, #0
 800111e:	d103      	bne.n	8001128 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001120:	f001 fd18 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8001124:	6378      	str	r0, [r7, #52]	; 0x34
 8001126:	e004      	b.n	8001132 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001128:	f001 fd14 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 800112c:	4603      	mov	r3, r0
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_InitTick+0xe4>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	3b01      	subs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_InitTick+0xe8>)
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_InitTick+0xec>)
 8001144:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_InitTick+0xe8>)
 8001148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800114c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <HAL_InitTick+0xe8>)
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_InitTick+0xe8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_InitTick+0xe8>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_InitTick+0xe8>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <HAL_InitTick+0xe8>)
 8001168:	f002 f8aa 	bl	80032c0 <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001176:	2b00      	cmp	r3, #0
 8001178:	d11b      	bne.n	80011b2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <HAL_InitTick+0xe8>)
 800117c:	f002 f902 	bl	8003384 <HAL_TIM_Base_Start_IT>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800118a:	2b00      	cmp	r3, #0
 800118c:	d111      	bne.n	80011b2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800118e:	2036      	movs	r0, #54	; 0x36
 8001190:	f000 faa2 	bl	80016d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	d808      	bhi.n	80011ac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800119a:	2200      	movs	r2, #0
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	2036      	movs	r0, #54	; 0x36
 80011a0:	f000 fa7e 	bl	80016a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0xf0>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e002      	b.n	80011b2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3738      	adds	r7, #56	; 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	200028a0 	.word	0x200028a0
 80011cc:	40001000 	.word	0x40001000
 80011d0:	2000000c 	.word	0x2000000c

080011d4 <LL_USART_IsActiveFlag_IDLE>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	d101      	bne.n	80011ec <LL_USART_IsActiveFlag_IDLE+0x18>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <LL_USART_IsActiveFlag_IDLE+0x1a>
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_USART_ClearFlag_IDLE>:
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2210      	movs	r2, #16
 8001206:	621a      	str	r2, [r3, #32]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b10      	cmp	r3, #16
 8001226:	d101      	bne.n	800122c <LL_USART_IsEnabledIT_IDLE+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_USART_IsEnabledIT_IDLE+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123e:	e7fe      	b.n	800123e <NMI_Handler+0x4>

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <HardFault_Handler+0x4>

08001246 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <MemManage_Handler+0x4>

0800124c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <BusFault_Handler+0x4>

08001252 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <UsageFault_Handler+0x4>

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <DMA1_Channel5_IRQHandler+0x10>)
 800126e:	f000 fbd8 	bl	8001a22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001a0 	.word	0x200001a0

0800127c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <USART1_IRQHandler+0x60>)
 8001284:	f002 fc98 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  	  if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 8001288:	4815      	ldr	r0, [pc, #84]	; (80012e0 <USART1_IRQHandler+0x64>)
 800128a:	f7ff ffc3 	bl	8001214 <LL_USART_IsEnabledIT_IDLE>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01e      	beq.n	80012d2 <USART1_IRQHandler+0x56>
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <USART1_IRQHandler+0x64>)
 8001296:	f7ff ff9d 	bl	80011d4 <LL_USART_IsActiveFlag_IDLE>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d018      	beq.n	80012d2 <USART1_IRQHandler+0x56>

		  LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <USART1_IRQHandler+0x64>)
 80012a2:	f7ff ffaa 	bl	80011fa <LL_USART_ClearFlag_IDLE>
		  // Give a task notification to the UART2 Task
		  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
		  xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <USART1_IRQHandler+0x68>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	2201      	movs	r2, #1
 80012b6:	2101      	movs	r1, #1
 80012b8:	f006 fa9a 	bl	80077f0 <xTaskGenericNotifyFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <USART1_IRQHandler+0x56>
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <USART1_IRQHandler+0x6c>)
 80012c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	f3bf 8f6f 	isb	sy
  	  }

  /* USER CODE END USART1_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000098 	.word	0x20000098
 80012e0:	40013800 	.word	0x40013800
 80012e4:	20002898 	.word	0x20002898
 80012e8:	e000ed04 	.word	0xe000ed04

080012ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM6_DAC_IRQHandler+0x10>)
 80012f2:	f002 f89b 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200028a0 	.word	0x200028a0

08001300 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00a      	b.n	8001328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001312:	f3af 8000 	nop.w
 8001316:	4601      	mov	r1, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf0      	blt.n	8001312 <_read+0x12>
  }

  return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e009      	b.n	8001360 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf1      	blt.n	800134c <_write+0x12>
  }
  return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_close>:

int _close(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_isatty>:

int _isatty(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f007 faae 	bl	800896c <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20010000 	.word	0x20010000
 800143c:	00000400 	.word	0x00000400
 8001440:	200028ec 	.word	0x200028ec
 8001444:	200042d0 	.word	0x200042d0

08001448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001470:	f7ff ffea 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149a:	f007 fb63 	bl	8008b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149e:	f7ff f8d3 	bl	8000648 <main>

080014a2 <LoopForever>:

LoopForever:
    b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80014b0:	0800a0e0 	.word	0x0800a0e0
  ldr r2, =_sbss
 80014b4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80014b8:	200042cc 	.word	0x200042cc

080014bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_IRQHandler>

080014be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f8de 	bl	800168a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff fe06 	bl	80010e0 <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	e001      	b.n	80014e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e0:	f7ff fcf8 	bl	8000ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000010 	.word	0x20000010
 8001514:	200028f0 	.word	0x200028f0

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200028f0 	.word	0x200028f0

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff4c 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b2:	f7ff ff61 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	6978      	ldr	r0, [r7, #20]
 80016be:	f7ff ffb1 	bl	8001624 <NVIC_EncodePriority>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff80 	bl	80015d0 <__NVIC_SetPriority>
}
 80016d0:	bf00      	nop
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff54 	bl	8001594 <__NVIC_EnableIRQ>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e098      	b.n	8001838 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_DMA_Init+0x150>)
 800170e:	429a      	cmp	r2, r3
 8001710:	d80f      	bhi.n	8001732 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <HAL_DMA_Init+0x154>)
 800171a:	4413      	add	r3, r2
 800171c:	4a4b      	ldr	r2, [pc, #300]	; (800184c <HAL_DMA_Init+0x158>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	009a      	lsls	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a48      	ldr	r2, [pc, #288]	; (8001850 <HAL_DMA_Init+0x15c>)
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
 8001730:	e00e      	b.n	8001750 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_DMA_Init+0x160>)
 800173a:	4413      	add	r3, r2
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_DMA_Init+0x158>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a42      	ldr	r2, [pc, #264]	; (8001858 <HAL_DMA_Init+0x164>)
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017aa:	d039      	beq.n	8001820 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_DMA_Init+0x15c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11a      	bne.n	80017ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_DMA_Init+0x168>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	210f      	movs	r1, #15
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4924      	ldr	r1, [pc, #144]	; (800185c <HAL_DMA_Init+0x168>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_DMA_Init+0x168>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	491d      	ldr	r1, [pc, #116]	; (800185c <HAL_DMA_Init+0x168>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
 80017ea:	e019      	b.n	8001820 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_DMA_Init+0x16c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f003 031c 	and.w	r3, r3, #28
 80017f8:	210f      	movs	r1, #15
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	4917      	ldr	r1, [pc, #92]	; (8001860 <HAL_DMA_Init+0x16c>)
 8001802:	4013      	ands	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_DMA_Init+0x16c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f003 031c 	and.w	r3, r3, #28
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	4911      	ldr	r1, [pc, #68]	; (8001860 <HAL_DMA_Init+0x16c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40020407 	.word	0x40020407
 8001848:	bffdfff8 	.word	0xbffdfff8
 800184c:	cccccccd 	.word	0xcccccccd
 8001850:	40020000 	.word	0x40020000
 8001854:	bffdfbf8 	.word	0xbffdfbf8
 8001858:	40020400 	.word	0x40020400
 800185c:	400200a8 	.word	0x400200a8
 8001860:	400204a8 	.word	0x400204a8

08001864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_DMA_Start_IT+0x20>
 8001880:	2302      	movs	r3, #2
 8001882:	e04b      	b.n	800191c <HAL_DMA_Start_IT+0xb8>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d13a      	bne.n	800190e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f95f 	bl	8001b80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 020e 	orr.w	r2, r2, #14
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e00f      	b.n	80018fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0204 	bic.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 020a 	orr.w	r2, r2, #10
 80018fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e005      	b.n	800191a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d008      	beq.n	800194e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e022      	b.n	8001994 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020e 	bic.w	r2, r2, #14
 800195c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f003 021c 	and.w	r2, r3, #28
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d005      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e029      	b.n	8001a18 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020e 	bic.w	r2, r2, #14
 80019d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f003 021c 	and.w	r2, r3, #28
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
    }
  }
  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 031c 	and.w	r3, r3, #28
 8001a42:	2204      	movs	r2, #4
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d026      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x7a>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d021      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0204 	bic.w	r2, r2, #4
 8001a74:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f003 021c 	and.w	r2, r3, #28
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2104      	movs	r1, #4
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d071      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a9a:	e06c      	b.n	8001b76 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f003 031c 	and.w	r3, r3, #28
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d02e      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xec>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d029      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 020a 	bic.w	r2, r2, #10
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 021c 	and.w	r2, r3, #28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2102      	movs	r1, #2
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d038      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b0c:	e033      	b.n	8001b76 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 031c 	and.w	r3, r3, #28
 8001b16:	2208      	movs	r2, #8
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02a      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x156>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d025      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 020e 	bic.w	r2, r2, #14
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f003 021c 	and.w	r2, r3, #28
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
}
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 021c 	and.w	r2, r3, #28
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d108      	bne.n	8001bc4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bc2:	e007      	b.n	8001bd4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	e148      	b.n	8001e82 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 813a 	beq.w	8001e7c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d005      	beq.n	8001c20 <HAL_GPIO_Init+0x40>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d130      	bne.n	8001c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c56:	2201      	movs	r2, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 0201 	and.w	r2, r3, #1
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d017      	beq.n	8001cbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d123      	bne.n	8001d12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	6939      	ldr	r1, [r7, #16]
 8001d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0203 	and.w	r2, r3, #3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8094 	beq.w	8001e7c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d54:	4b52      	ldr	r3, [pc, #328]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d58:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d60:	4b4f      	ldr	r3, [pc, #316]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <HAL_GPIO_Init+0x2c4>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d96:	d00d      	beq.n	8001db4 <HAL_GPIO_Init+0x1d4>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a43      	ldr	r2, [pc, #268]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d007      	beq.n	8001db0 <HAL_GPIO_Init+0x1d0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a42      	ldr	r2, [pc, #264]	; (8001eac <HAL_GPIO_Init+0x2cc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_GPIO_Init+0x1cc>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1d6>
 8001dac:	2307      	movs	r3, #7
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1d6>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1d6>
 8001db4:	2300      	movs	r3, #0
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc6:	4937      	ldr	r1, [pc, #220]	; (8001ea4 <HAL_GPIO_Init+0x2c4>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df8:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f47f aeaf 	bne.w	8001bf0 <HAL_GPIO_Init+0x10>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	48000400 	.word	0x48000400
 8001eac:	48000800 	.word	0x48000800
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40007000 	.word	0x40007000

08001f34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40007000 	.word	0x40007000

08001f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5e:	d130      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f6c:	d038      	beq.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f76:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2232      	movs	r2, #50	; 0x32
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9b      	lsrs	r3, r3, #18
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f94:	e002      	b.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa8:	d102      	bne.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f2      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbc:	d110      	bne.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e00f      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fce:	d007      	beq.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd8:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f000 bc02 	b.w	8002814 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002010:	4b96      	ldr	r3, [pc, #600]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800201a:	4b94      	ldr	r3, [pc, #592]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80e4 	beq.w	80021fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_RCC_OscConfig+0x4c>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	f040 808b 	bne.w	8002156 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b01      	cmp	r3, #1
 8002044:	f040 8087 	bne.w	8002156 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002048:	4b88      	ldr	r3, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x64>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e3d9      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	4b81      	ldr	r3, [pc, #516]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_RCC_OscConfig+0x7e>
 8002070:	4b7e      	ldr	r3, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002078:	e005      	b.n	8002086 <HAL_RCC_OscConfig+0x8a>
 800207a:	4b7c      	ldr	r3, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800207c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002086:	4293      	cmp	r3, r2
 8002088:	d223      	bcs.n	80020d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fdbe 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e3ba      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209e:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a72      	ldr	r2, [pc, #456]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	496d      	ldr	r1, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	4b6b      	ldr	r3, [pc, #428]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	4968      	ldr	r1, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e025      	b.n	800211e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4960      	ldr	r1, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f0:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	495b      	ldr	r1, [pc, #364]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fd7e 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e37a      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800211e:	f000 fc81 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	4950      	ldr	r1, [pc, #320]	; (8002270 <HAL_RCC_OscConfig+0x274>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800213c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCC_OscConfig+0x27c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe ffcc 	bl	80010e0 <HAL_InitTick>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d052      	beq.n	80021f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	e35e      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d032      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a42      	ldr	r2, [pc, #264]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800216a:	f7ff f9d5 	bl	8001518 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002172:	f7ff f9d1 	bl	8001518 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e347      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002184:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a35      	ldr	r2, [pc, #212]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4930      	ldr	r1, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	492b      	ldr	r1, [pc, #172]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e01a      	b.n	80021fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d0:	f7ff f9a2 	bl	8001518 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d8:	f7ff f99e 	bl	8001518 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e314      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1dc>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d073      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x21c>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d10e      	bne.n	8002230 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d10b      	bne.n	8002230 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d063      	beq.n	80022ec <HAL_RCC_OscConfig+0x2f0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d15f      	bne.n	80022ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e2f1      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d106      	bne.n	8002248 <HAL_RCC_OscConfig+0x24c>
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e025      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002250:	d114      	bne.n	800227c <HAL_RCC_OscConfig+0x280>
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a02      	ldr	r2, [pc, #8]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e013      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 800226c:	40021000 	.word	0x40021000
 8002270:	08009ff0 	.word	0x08009ff0
 8002274:	20000008 	.word	0x20000008
 8002278:	2000000c 	.word	0x2000000c
 800227c:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a9f      	ldr	r2, [pc, #636]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a9c      	ldr	r2, [pc, #624]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff f93c 	bl	8001518 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff f938 	bl	8001518 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e2ae      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b6:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2a8>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7ff f928 	bl	8001518 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7ff f924 	bl	8001518 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e29a      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x2d0>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d060      	beq.n	80023bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x310>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d119      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d116      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x328>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e277      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4973      	ldr	r1, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	e040      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d023      	beq.n	800238a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002342:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7ff f8e3 	bl	8001518 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff f8df 	bl	8001518 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e255      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	495f      	ldr	r1, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e018      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff f8bf 	bl	8001518 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff f8bb 	bl	8001518 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e231      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d03c      	beq.n	8002442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01c      	beq.n	800240a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d6:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7ff f89a 	bl	8001518 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff f896 	bl	8001518 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e20c      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3ec>
 8002408:	e01b      	b.n	8002442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800240c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002410:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7ff f87d 	bl	8001518 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002422:	f7ff f879 	bl	8001518 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1ef      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ef      	bne.n	8002422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80a6 	beq.w	800259c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	; 0x58
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d118      	bne.n	80024ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002494:	f7ff f840 	bl	8001518 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7ff f83c 	bl	8001518 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1b2      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4d8>
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d2:	e029      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d115      	bne.n	8002508 <HAL_RCC_OscConfig+0x50c>
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a03      	ldr	r2, [pc, #12]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	4b9a      	ldr	r3, [pc, #616]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a99      	ldr	r2, [pc, #612]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	4b96      	ldr	r3, [pc, #600]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a95      	ldr	r2, [pc, #596]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d016      	beq.n	800255e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fff2 	bl	8001518 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe ffee 	bl	8001518 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e162      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ed      	beq.n	8002538 <HAL_RCC_OscConfig+0x53c>
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe ffdb 	bl	8001518 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe ffd7 	bl	8001518 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e14b      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800257c:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ed      	bne.n	8002566 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7ffb      	ldrb	r3, [r7, #31]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b78      	ldr	r3, [pc, #480]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	4a77      	ldr	r2, [pc, #476]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d03c      	beq.n	8002622 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01c      	beq.n	80025ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025b0:	4b70      	ldr	r3, [pc, #448]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80025b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b6:	4a6f      	ldr	r2, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe ffaa 	bl	8001518 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c8:	f7fe ffa6 	bl	8001518 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e11c      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025da:	4b66      	ldr	r3, [pc, #408]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80025dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ef      	beq.n	80025c8 <HAL_RCC_OscConfig+0x5cc>
 80025e8:	e01b      	b.n	8002622 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025ea:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80025ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f0:	4a60      	ldr	r2, [pc, #384]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe ff8d 	bl	8001518 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002602:	f7fe ff89 	bl	8001518 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0ff      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002614:	4b57      	ldr	r3, [pc, #348]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ef      	bne.n	8002602 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80f3 	beq.w	8002812 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2b02      	cmp	r3, #2
 8002632:	f040 80c9 	bne.w	80027c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002636:	4b4f      	ldr	r3, [pc, #316]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0203 	and.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	429a      	cmp	r2, r3
 8002648:	d12c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	3b01      	subs	r3, #1
 8002656:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d123      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d11b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d113      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	3b01      	subs	r3, #1
 800268a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d06b      	beq.n	800277c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d062      	beq.n	8002770 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0ac      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026ba:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2d      	ldr	r2, [pc, #180]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80026c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c6:	f7fe ff27 	bl	8001518 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe ff23 	bl	8001518 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e099      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x77c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026fc:	3a01      	subs	r2, #1
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002706:	0212      	lsls	r2, r2, #8
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800270e:	0852      	lsrs	r2, r2, #1
 8002710:	3a01      	subs	r2, #1
 8002712:	0552      	lsls	r2, r2, #21
 8002714:	4311      	orrs	r1, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	0652      	lsls	r2, r2, #25
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002726:	06d2      	lsls	r2, r2, #27
 8002728:	430a      	orrs	r2, r1
 800272a:	4912      	ldr	r1, [pc, #72]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 800272c:	4313      	orrs	r3, r2
 800272e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002748:	f7fe fee6 	bl	8001518 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fee2 	bl	8001518 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e058      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_RCC_OscConfig+0x778>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276e:	e050      	b.n	8002812 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e04f      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
 8002774:	40021000 	.word	0x40021000
 8002778:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x820>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d144      	bne.n	8002812 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_OscConfig+0x820>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_RCC_OscConfig+0x820>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_RCC_OscConfig+0x820>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a20      	ldr	r2, [pc, #128]	; (800281c <HAL_RCC_OscConfig+0x820>)
 800279a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027a0:	f7fe feba 	bl	8001518 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe feb6 	bl	8001518 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e02c      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_RCC_OscConfig+0x820>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x7ac>
 80027c6:	e024      	b.n	8002812 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d01f      	beq.n	800280e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_OscConfig+0x820>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_RCC_OscConfig+0x820>)
 80027d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fe9d 	bl	8001518 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe fe99 	bl	8001518 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x820>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_RCC_OscConfig+0x820>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4905      	ldr	r1, [pc, #20]	; (800281c <HAL_RCC_OscConfig+0x820>)
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_OscConfig+0x824>)
 8002808:	4013      	ands	r3, r2
 800280a:	60cb      	str	r3, [r1, #12]
 800280c:	e001      	b.n	8002812 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	feeefffc 	.word	0xfeeefffc

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0e7      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d910      	bls.n	8002868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b72      	ldr	r3, [pc, #456]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4970      	ldr	r1, [pc, #448]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cf      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002880:	429a      	cmp	r2, r3
 8002882:	d908      	bls.n	8002896 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4960      	ldr	r1, [pc, #384]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d04c      	beq.n	800293c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d121      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0a6      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d115      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e09a      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028da:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e08e      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e086      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4943      	ldr	r1, [pc, #268]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290c:	f7fe fe04 	bl	8001518 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fe00 	bl	8001518 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e06e      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d010      	beq.n	800296a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	429a      	cmp	r2, r3
 8002956:	d208      	bcs.n	800296a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	492b      	ldr	r1, [pc, #172]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d210      	bcs.n	800299a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 0207 	bic.w	r2, r3, #7
 8002980:	4923      	ldr	r1, [pc, #140]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e036      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4918      	ldr	r1, [pc, #96]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4910      	ldr	r1, [pc, #64]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d8:	f000 f824 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	490b      	ldr	r1, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x1f4>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
 80029f4:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1f8>)
 80029f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1fc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fb6f 	bl	80010e0 <HAL_InitTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a06:	7afb      	ldrb	r3, [r7, #11]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08009ff0 	.word	0x08009ff0
 8002a1c:	20000008 	.word	0x20000008
 8002a20:	2000000c 	.word	0x2000000c

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d121      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d11e      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a64:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e005      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a80:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e004      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d134      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0xa6>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ac8:	e005      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002acc:	617b      	str	r3, [r7, #20]
      break;
 8002ace:	e005      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ad2:	617b      	str	r3, [r7, #20]
      break;
 8002ad4:	e002      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	617b      	str	r3, [r7, #20]
      break;
 8002ada:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	fb03 f202 	mul.w	r2, r3, r2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	0e5b      	lsrs	r3, r3, #25
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	0800a008 	.word	0x0800a008
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	007a1200 	.word	0x007a1200

08002b3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000008 	.word	0x20000008

08002b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b58:	f7ff fff0 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4904      	ldr	r1, [pc, #16]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	0800a000 	.word	0x0800a000

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b84:	f7ff ffda 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0adb      	lsrs	r3, r3, #11
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	0800a000 	.word	0x0800a000

08002bac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	220f      	movs	r2, #15
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_RCC_GetClockConfig+0x60>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40022000 	.word	0x40022000

08002c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7ff f984 	bl	8001f34 <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
 8002c2e:	e014      	b.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c48:	f7ff f974 	bl	8001f34 <HAL_PWREx_GetVoltageRange>
 8002c4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d10b      	bne.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d919      	bls.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c6c:	d902      	bls.n	8002c74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6e:	2302      	movs	r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e013      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c74:	2301      	movs	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e010      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d902      	bls.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c80:	2303      	movs	r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e00a      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d102      	bne.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e004      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b70      	cmp	r3, #112	; 0x70
 8002c96:	d101      	bne.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 0207 	bic.w	r2, r3, #7
 8002ca4:	4909      	ldr	r1, [pc, #36]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d031      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf4:	d01a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cfa:	d814      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d04:	d10f      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a5c      	ldr	r2, [pc, #368]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d12:	e00c      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f9de 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d24:	e003      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d34:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	494e      	ldr	r1, [pc, #312]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d4a:	e001      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 809e 	beq.w	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d62:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b40      	ldr	r3, [pc, #256]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	4a3f      	ldr	r2, [pc, #252]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6593      	str	r3, [r2, #88]	; 0x58
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a39      	ldr	r2, [pc, #228]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fbba 	bl	8001518 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da6:	e009      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da8:	f7fe fbb6 	bl	8001518 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	74fb      	strb	r3, [r7, #19]
        break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d15a      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01e      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d019      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d016      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fb76 	bl	8001518 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7fe fb72 	bl	8001518 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	74fb      	strb	r3, [r7, #19]
            break;
 8002e46:	e006      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ec      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	4904      	ldr	r1, [pc, #16]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e72:	e009      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e88:	7c7b      	ldrb	r3, [r7, #17]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8e:	4b8a      	ldr	r3, [pc, #552]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e92:	4a89      	ldr	r2, [pc, #548]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea6:	4b84      	ldr	r3, [pc, #528]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f023 0203 	bic.w	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4980      	ldr	r1, [pc, #512]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec8:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f023 020c 	bic.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	4978      	ldr	r1, [pc, #480]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eea:	4b73      	ldr	r3, [pc, #460]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	496f      	ldr	r1, [pc, #444]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	4967      	ldr	r1, [pc, #412]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f2e:	4b62      	ldr	r3, [pc, #392]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	495e      	ldr	r1, [pc, #376]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	4956      	ldr	r1, [pc, #344]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f72:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	494d      	ldr	r1, [pc, #308]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d028      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f94:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4945      	ldr	r1, [pc, #276]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb4:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a3f      	ldr	r2, [pc, #252]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fbe:	60d3      	str	r3, [r2, #12]
 8002fc0:	e011      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f882 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d028      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	492d      	ldr	r1, [pc, #180]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003010:	d106      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003012:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800301c:	60d3      	str	r3, [r2, #12]
 800301e:	e011      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003028:	d10c      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f853 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01c      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305e:	4916      	ldr	r1, [pc, #88]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800306e:	d10c      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	2102      	movs	r1, #2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f830 	bl	80030dc <RCCEx_PLLSAI1_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	4904      	ldr	r1, [pc, #16]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030c6:	f043 0304 	orr.w	r3, r3, #4
 80030ca:	6013      	str	r3, [r2, #0]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000

080030dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ea:	4b74      	ldr	r3, [pc, #464]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d018      	beq.n	8003128 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030f6:	4b71      	ldr	r3, [pc, #452]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10d      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
       ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800310e:	4b6b      	ldr	r3, [pc, #428]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
       ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d047      	beq.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e044      	b.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d018      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x86>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d825      	bhi.n	8003180 <RCCEx_PLLSAI1_Config+0xa4>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x62>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d009      	beq.n	8003150 <RCCEx_PLLSAI1_Config+0x74>
 800313c:	e020      	b.n	8003180 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11d      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e01a      	b.n	8003186 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003150:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e013      	b.n	800318a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	4b53      	ldr	r3, [pc, #332]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800317e:	e006      	b.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e004      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10d      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003196:	4b49      	ldr	r3, [pc, #292]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	430b      	orrs	r3, r1
 80031ac:	4943      	ldr	r1, [pc, #268]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d17c      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3f      	ldr	r2, [pc, #252]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fe f9a8 	bl	8001518 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031cc:	f7fe f9a4 	bl	8001518 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
        break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ef      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d15f      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d110      	bne.n	800321a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	06d2      	lsls	r2, r2, #27
 8003210:	430a      	orrs	r2, r1
 8003212:	492a      	ldr	r1, [pc, #168]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	610b      	str	r3, [r1, #16]
 8003218:	e027      	b.n	800326a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d112      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003228:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6892      	ldr	r2, [r2, #8]
 8003230:	0211      	lsls	r1, r2, #8
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6912      	ldr	r2, [r2, #16]
 8003236:	0852      	lsrs	r2, r2, #1
 8003238:	3a01      	subs	r2, #1
 800323a:	0552      	lsls	r2, r2, #21
 800323c:	430a      	orrs	r2, r1
 800323e:	491f      	ldr	r1, [pc, #124]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	610b      	str	r3, [r1, #16]
 8003244:	e011      	b.n	800326a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003246:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800324e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6892      	ldr	r2, [r2, #8]
 8003256:	0211      	lsls	r1, r2, #8
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6952      	ldr	r2, [r2, #20]
 800325c:	0852      	lsrs	r2, r2, #1
 800325e:	3a01      	subs	r2, #1
 8003260:	0652      	lsls	r2, r2, #25
 8003262:	430a      	orrs	r2, r1
 8003264:	4915      	ldr	r1, [pc, #84]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003274:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe f94f 	bl	8001518 <HAL_GetTick>
 800327a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800327c:	e009      	b.n	8003292 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327e:	f7fe f94b 	bl	8001518 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d902      	bls.n	8003292 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	73fb      	strb	r3, [r7, #15]
          break;
 8003290:	e005      	b.n	800329e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ef      	beq.n	800327e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e049      	b.n	8003366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f841 	bl	800336e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 f9dc 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d001      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e03b      	b.n	8003414 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_TIM_Base_Start_IT+0x9c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x4e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c6:	d004      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0x4e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a15      	ldr	r2, [pc, #84]	; (8003424 <HAL_TIM_Base_Start_IT+0xa0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d115      	bne.n	80033fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_TIM_Base_Start_IT+0xa4>)
 80033da:	4013      	ands	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b06      	cmp	r3, #6
 80033e2:	d015      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x8c>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ea:	d011      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fc:	e008      	b.n	8003410 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e000      	b.n	8003412 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40014000 	.word	0x40014000
 8003428:	00010007 	.word	0x00010007

0800342c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0202 	mvn.w	r2, #2
 8003458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f905 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8f7 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f908 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0204 	mvn.w	r2, #4
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8db 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8cd 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f8de 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d122      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0208 	mvn.w	r2, #8
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2204      	movs	r2, #4
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8b1 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8a3 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f8b4 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b10      	cmp	r3, #16
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b10      	cmp	r3, #16
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2208      	movs	r2, #8
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f887 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f879 	bl	800366a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f88a 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0201 	mvn.w	r2, #1
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fc7a 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8de 	bl	8003798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ea:	d10e      	bne.n	800360a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d107      	bne.n	800360a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8d1 	bl	80037ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d10e      	bne.n	8003636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d107      	bne.n	8003636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800362e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f838 	bl	80036a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b20      	cmp	r3, #32
 8003642:	d10e      	bne.n	8003662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	d107      	bne.n	8003662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0220 	mvn.w	r2, #32
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f891 	bl	8003784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <TIM_Base_SetConfig+0xbc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0x20>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d108      	bne.n	80036ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a21      	ldr	r2, [pc, #132]	; (8003778 <TIM_Base_SetConfig+0xbc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00b      	beq.n	800370e <TIM_Base_SetConfig+0x52>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d007      	beq.n	800370e <TIM_Base_SetConfig+0x52>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <TIM_Base_SetConfig+0xc0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_Base_SetConfig+0x52>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <TIM_Base_SetConfig+0xc4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d108      	bne.n	8003720 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <TIM_Base_SetConfig+0xbc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d007      	beq.n	800375c <TIM_Base_SetConfig+0xa0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <TIM_Base_SetConfig+0xc0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <TIM_Base_SetConfig+0xa0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <TIM_Base_SetConfig+0xc4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	615a      	str	r2, [r3, #20]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40014000 	.word	0x40014000
 8003780:	40014400 	.word	0x40014400

08003784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e040      	b.n	8003854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fb9e 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fce6 	bl	80041d0 <UART_SetConfig>
 8003804:	4603      	mov	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e022      	b.n	8003854 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 ff06 	bl	8004628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 ff8d 	bl	800476c <UART_CheckIdleState>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003870:	2b20      	cmp	r3, #32
 8003872:	f040 8082 	bne.w	800397a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_UART_Transmit+0x26>
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e07a      	b.n	800397c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UART_Transmit+0x38>
 8003890:	2302      	movs	r3, #2
 8003892:	e073      	b.n	800397c <HAL_UART_Transmit+0x120>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2221      	movs	r2, #33	; 0x21
 80038a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038aa:	f7fd fe35 	bl	8001518 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d108      	bne.n	80038dc <HAL_UART_Transmit+0x80>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	e003      	b.n	80038e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038ec:	e02d      	b.n	800394a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 ff80 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e039      	b.n	800397c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800391a:	b292      	uxth	r2, r2
 800391c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	3302      	adds	r3, #2
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e008      	b.n	8003938 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b292      	uxth	r2, r2
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1cb      	bne.n	80038ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	2140      	movs	r1, #64	; 0x40
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 ff4c 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e005      	b.n	800397c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003984:	b480      	push	{r7}
 8003986:	b08b      	sub	sp, #44	; 0x2c
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003996:	2b20      	cmp	r3, #32
 8003998:	d156      	bne.n	8003a48 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_UART_Transmit_IT+0x22>
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e04f      	b.n	8003a4a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_UART_Transmit_IT+0x34>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e048      	b.n	8003a4a <HAL_UART_Transmit_IT+0xc6>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2221      	movs	r2, #33	; 0x21
 80039e8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d107      	bne.n	8003a04 <HAL_UART_Transmit_IT+0x80>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <HAL_UART_Transmit_IT+0xd4>)
 8003a00:	669a      	str	r2, [r3, #104]	; 0x68
 8003a02:	e002      	b.n	8003a0a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_UART_Transmit_IT+0xd8>)
 8003a08:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	69f9      	ldr	r1, [r7, #28]
 8003a36:	6a3a      	ldr	r2, [r7, #32]
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e6      	bne.n	8003a12 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	372c      	adds	r7, #44	; 0x2c
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	08005037 	.word	0x08005037
 8003a5c:	08004f7f 	.word	0x08004f7f

08003a60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d142      	bne.n	8003afc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Receive_IT+0x22>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e03b      	b.n	8003afe <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Receive_IT+0x34>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e034      	b.n	8003afe <HAL_UART_Receive_IT+0x9e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <HAL_UART_Receive_IT+0xa8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d01f      	beq.n	8003aec <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	69f9      	ldr	r1, [r7, #28]
 8003ade:	6a3a      	ldr	r2, [r7, #32]
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e6      	bne.n	8003aba <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 ff48 	bl	8004988 <UART_Start_Receive_IT>
 8003af8:	4603      	mov	r3, r0
 8003afa:	e000      	b.n	8003afe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3728      	adds	r7, #40	; 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40008000 	.word	0x40008000

08003b0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d142      	bne.n	8003ba8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_UART_Receive_DMA+0x22>
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e03b      	b.n	8003baa <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Receive_DMA+0x34>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e034      	b.n	8003baa <HAL_UART_Receive_DMA+0x9e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_UART_Receive_DMA+0xa8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01f      	beq.n	8003b98 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 ffbc 	bl	8004b1c <UART_Start_Receive_DMA>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40008000 	.word	0x40008000

08003bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0ba      	sub	sp, #232	; 0xe8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003be2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003be6:	4013      	ands	r3, r2
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d115      	bne.n	8003c20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 82a6 	beq.w	8004162 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      }
      return;
 8003c1e:	e2a0      	b.n	8004162 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8117 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c3a:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_UART_IRQHandler+0x298>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 810a 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2202      	movs	r2, #2
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d017      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d06:	f043 0208 	orr.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 820c 	beq.w	8004166 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04f      	beq.n	8003e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 ff8a 	bl	8004cb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d141      	bne.n	8003e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_UART_IRQHandler+0x29c>)
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fdc6 	bl	80019a0 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9ba 	bl	80041a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9b6 	bl	80041a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9b2 	bl	80041a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e48:	e18d      	b.n	8004166 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e18b      	b.n	8004166 <HAL_UART_IRQHandler+0x5ae>
 8003e4e:	bf00      	nop
 8003e50:	04000120 	.word	0x04000120
 8003e54:	08004f53 	.word	0x08004f53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 8146 	bne.w	80040ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 813f 	beq.w	80040ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8138 	beq.w	80040ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	f040 80b4 	bne.w	8003ffe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 815f 	beq.w	800416a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 8157 	bcs.w	800416a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 8085 	bne.w	8003fe2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1da      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e1      	bne.n	8003f22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb2:	f023 0310 	bic.w	r3, r3, #16
 8003fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e4      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd fca1 	bl	8001924 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8de 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ffc:	e0b5      	b.n	800416a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800400a:	b29b      	uxth	r3, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80a7 	beq.w	800416e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80a2 	beq.w	800416e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800403e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
 800404e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e4      	bne.n	800402a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	623b      	str	r3, [r7, #32]
   return(result);
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004084:	633a      	str	r2, [r7, #48]	; 0x30
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800408a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e3      	bne.n	8004060 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0310 	bic.w	r3, r3, #16
 80040be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	617b      	str	r3, [r7, #20]
   return(result);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e4      	bne.n	80040aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f866 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040ec:	e03f      	b.n	800416e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <HAL_UART_IRQHandler+0x560>
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800410e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f001 f97a 	bl	800540a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004116:	e02d      	b.n	8004174 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00e      	beq.n	8004142 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01c      	beq.n	8004172 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
    }
    return;
 8004140:	e017      	b.n	8004172 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <HAL_UART_IRQHandler+0x5bc>
 800414e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 ffcb 	bl	80050f6 <UART_EndTransmit_IT>
    return;
 8004160:	e008      	b.n	8004174 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004162:	bf00      	nop
 8004164:	e006      	b.n	8004174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004172:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004174:	37e8      	adds	r7, #232	; 0xe8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b08a      	sub	sp, #40	; 0x28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4bb4      	ldr	r3, [pc, #720]	; (80044d0 <UART_SetConfig+0x300>)
 8004200:	4013      	ands	r3, r2
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004208:	430b      	orrs	r3, r1
 800420a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4aa9      	ldr	r2, [pc, #676]	; (80044d4 <UART_SetConfig+0x304>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	4313      	orrs	r3, r2
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4aa0      	ldr	r2, [pc, #640]	; (80044d8 <UART_SetConfig+0x308>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d126      	bne.n	80042a8 <UART_SetConfig+0xd8>
 800425a:	4ba0      	ldr	r3, [pc, #640]	; (80044dc <UART_SetConfig+0x30c>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	2b03      	cmp	r3, #3
 8004266:	d81b      	bhi.n	80042a0 <UART_SetConfig+0xd0>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0xa0>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	08004281 	.word	0x08004281
 8004274:	08004291 	.word	0x08004291
 8004278:	08004289 	.word	0x08004289
 800427c:	08004299 	.word	0x08004299
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e080      	b.n	800438a <UART_SetConfig+0x1ba>
 8004288:	2302      	movs	r3, #2
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e07c      	b.n	800438a <UART_SetConfig+0x1ba>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e078      	b.n	800438a <UART_SetConfig+0x1ba>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e074      	b.n	800438a <UART_SetConfig+0x1ba>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e070      	b.n	800438a <UART_SetConfig+0x1ba>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a8c      	ldr	r2, [pc, #560]	; (80044e0 <UART_SetConfig+0x310>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d138      	bne.n	8004324 <UART_SetConfig+0x154>
 80042b2:	4b8a      	ldr	r3, [pc, #552]	; (80044dc <UART_SetConfig+0x30c>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d82d      	bhi.n	800431c <UART_SetConfig+0x14c>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <UART_SetConfig+0xf8>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042fd 	.word	0x080042fd
 80042cc:	0800431d 	.word	0x0800431d
 80042d0:	0800431d 	.word	0x0800431d
 80042d4:	0800431d 	.word	0x0800431d
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	0800431d 	.word	0x0800431d
 80042e0:	0800431d 	.word	0x0800431d
 80042e4:	0800431d 	.word	0x0800431d
 80042e8:	08004305 	.word	0x08004305
 80042ec:	0800431d 	.word	0x0800431d
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	0800431d 	.word	0x0800431d
 80042f8:	08004315 	.word	0x08004315
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e042      	b.n	800438a <UART_SetConfig+0x1ba>
 8004304:	2302      	movs	r3, #2
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e03e      	b.n	800438a <UART_SetConfig+0x1ba>
 800430c:	2304      	movs	r3, #4
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e03a      	b.n	800438a <UART_SetConfig+0x1ba>
 8004314:	2308      	movs	r3, #8
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e036      	b.n	800438a <UART_SetConfig+0x1ba>
 800431c:	2310      	movs	r3, #16
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e032      	b.n	800438a <UART_SetConfig+0x1ba>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <UART_SetConfig+0x304>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d12a      	bne.n	8004384 <UART_SetConfig+0x1b4>
 800432e:	4b6b      	ldr	r3, [pc, #428]	; (80044dc <UART_SetConfig+0x30c>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800433c:	d01a      	beq.n	8004374 <UART_SetConfig+0x1a4>
 800433e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004342:	d81b      	bhi.n	800437c <UART_SetConfig+0x1ac>
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	d00c      	beq.n	8004364 <UART_SetConfig+0x194>
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434e:	d815      	bhi.n	800437c <UART_SetConfig+0x1ac>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <UART_SetConfig+0x18c>
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d008      	beq.n	800436c <UART_SetConfig+0x19c>
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x1ac>
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e012      	b.n	800438a <UART_SetConfig+0x1ba>
 8004364:	2302      	movs	r3, #2
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e00e      	b.n	800438a <UART_SetConfig+0x1ba>
 800436c:	2304      	movs	r3, #4
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e00a      	b.n	800438a <UART_SetConfig+0x1ba>
 8004374:	2308      	movs	r3, #8
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e006      	b.n	800438a <UART_SetConfig+0x1ba>
 800437c:	2310      	movs	r3, #16
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e002      	b.n	800438a <UART_SetConfig+0x1ba>
 8004384:	2310      	movs	r3, #16
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a51      	ldr	r2, [pc, #324]	; (80044d4 <UART_SetConfig+0x304>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d17a      	bne.n	800448a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004398:	2b08      	cmp	r3, #8
 800439a:	d824      	bhi.n	80043e6 <UART_SetConfig+0x216>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0x1d4>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043e7 	.word	0x080043e7
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043e7 	.word	0x080043e7
 80043b4:	080043d7 	.word	0x080043d7
 80043b8:	080043e7 	.word	0x080043e7
 80043bc:	080043e7 	.word	0x080043e7
 80043c0:	080043e7 	.word	0x080043e7
 80043c4:	080043df 	.word	0x080043df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c8:	f7fe fbc4 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 80043cc:	61f8      	str	r0, [r7, #28]
        break;
 80043ce:	e010      	b.n	80043f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d0:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <UART_SetConfig+0x314>)
 80043d2:	61fb      	str	r3, [r7, #28]
        break;
 80043d4:	e00d      	b.n	80043f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d6:	f7fe fb25 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80043da:	61f8      	str	r0, [r7, #28]
        break;
 80043dc:	e009      	b.n	80043f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e2:	61fb      	str	r3, [r7, #28]
        break;
 80043e4:	e005      	b.n	80043f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8107 	beq.w	8004608 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	429a      	cmp	r2, r3
 8004408:	d305      	bcc.n	8004416 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	429a      	cmp	r2, r3
 8004414:	d903      	bls.n	800441e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800441c:	e0f4      	b.n	8004608 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2200      	movs	r2, #0
 8004422:	461c      	mov	r4, r3
 8004424:	4615      	mov	r5, r2
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	022b      	lsls	r3, r5, #8
 8004430:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004434:	0222      	lsls	r2, r4, #8
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	6849      	ldr	r1, [r1, #4]
 800443a:	0849      	lsrs	r1, r1, #1
 800443c:	2000      	movs	r0, #0
 800443e:	4688      	mov	r8, r1
 8004440:	4681      	mov	r9, r0
 8004442:	eb12 0a08 	adds.w	sl, r2, r8
 8004446:	eb43 0b09 	adc.w	fp, r3, r9
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004458:	4650      	mov	r0, sl
 800445a:	4659      	mov	r1, fp
 800445c:	f7fb ff10 	bl	8000280 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800446e:	d308      	bcc.n	8004482 <UART_SetConfig+0x2b2>
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004476:	d204      	bcs.n	8004482 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	e0c2      	b.n	8004608 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004488:	e0be      	b.n	8004608 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004492:	d16a      	bne.n	800456a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004498:	2b08      	cmp	r3, #8
 800449a:	d834      	bhi.n	8004506 <UART_SetConfig+0x336>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0x2d4>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044e9 	.word	0x080044e9
 80044ac:	080044f1 	.word	0x080044f1
 80044b0:	08004507 	.word	0x08004507
 80044b4:	080044f7 	.word	0x080044f7
 80044b8:	08004507 	.word	0x08004507
 80044bc:	08004507 	.word	0x08004507
 80044c0:	08004507 	.word	0x08004507
 80044c4:	080044ff 	.word	0x080044ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7fe fb44 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 80044cc:	61f8      	str	r0, [r7, #28]
        break;
 80044ce:	e020      	b.n	8004512 <UART_SetConfig+0x342>
 80044d0:	efff69f3 	.word	0xefff69f3
 80044d4:	40008000 	.word	0x40008000
 80044d8:	40013800 	.word	0x40013800
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40004400 	.word	0x40004400
 80044e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e8:	f7fe fb4a 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 80044ec:	61f8      	str	r0, [r7, #28]
        break;
 80044ee:	e010      	b.n	8004512 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <UART_SetConfig+0x454>)
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e00d      	b.n	8004512 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f6:	f7fe fa95 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80044fa:	61f8      	str	r0, [r7, #28]
        break;
 80044fc:	e009      	b.n	8004512 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004502:	61fb      	str	r3, [r7, #28]
        break;
 8004504:	e005      	b.n	8004512 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d077      	beq.n	8004608 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005a      	lsls	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	441a      	add	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b0f      	cmp	r3, #15
 8004532:	d916      	bls.n	8004562 <UART_SetConfig+0x392>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453a:	d212      	bcs.n	8004562 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f023 030f 	bic.w	r3, r3, #15
 8004544:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	b29b      	uxth	r3, r3
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	b29a      	uxth	r2, r3
 8004552:	8afb      	ldrh	r3, [r7, #22]
 8004554:	4313      	orrs	r3, r2
 8004556:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	8afa      	ldrh	r2, [r7, #22]
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	e052      	b.n	8004608 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004568:	e04e      	b.n	8004608 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800456a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800456e:	2b08      	cmp	r3, #8
 8004570:	d827      	bhi.n	80045c2 <UART_SetConfig+0x3f2>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0x3a8>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045ad 	.word	0x080045ad
 8004584:	080045c3 	.word	0x080045c3
 8004588:	080045b3 	.word	0x080045b3
 800458c:	080045c3 	.word	0x080045c3
 8004590:	080045c3 	.word	0x080045c3
 8004594:	080045c3 	.word	0x080045c3
 8004598:	080045bb 	.word	0x080045bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7fe fada 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 80045a0:	61f8      	str	r0, [r7, #28]
        break;
 80045a2:	e014      	b.n	80045ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7fe faec 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 80045a8:	61f8      	str	r0, [r7, #28]
        break;
 80045aa:	e010      	b.n	80045ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <UART_SetConfig+0x454>)
 80045ae:	61fb      	str	r3, [r7, #28]
        break;
 80045b0:	e00d      	b.n	80045ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b2:	f7fe fa37 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80045b6:	61f8      	str	r0, [r7, #28]
        break;
 80045b8:	e009      	b.n	80045ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	61fb      	str	r3, [r7, #28]
        break;
 80045c0:	e005      	b.n	80045ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045cc:	bf00      	nop
    }

    if (pclk != 0U)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d019      	beq.n	8004608 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	085a      	lsrs	r2, r3, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	441a      	add	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d909      	bls.n	8004602 <UART_SetConfig+0x432>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d205      	bcs.n	8004602 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	e002      	b.n	8004608 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004614:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004622:	bf00      	nop
 8004624:	00f42400 	.word	0x00f42400

08004628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01a      	beq.n	800473e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004726:	d10a      	bne.n	800473e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af02      	add	r7, sp, #8
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800477c:	f7fc fecc 	bl	8001518 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d10e      	bne.n	80047ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f82d 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e023      	b.n	80047f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d10e      	bne.n	80047da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f817 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e00d      	b.n	80047f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b09c      	sub	sp, #112	; 0x70
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	e0a5      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004816:	f000 80a1 	beq.w	800495c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fc fe7d 	bl	8001518 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <UART_WaitOnFlagUntilTimeout+0x32>
 800482a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482c:	2b00      	cmp	r3, #0
 800482e:	d13e      	bne.n	80048ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004844:	667b      	str	r3, [r7, #100]	; 0x64
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004850:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e6      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004882:	64ba      	str	r2, [r7, #72]	; 0x48
 8004884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e067      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d04f      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ca:	d147      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
 80048f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	613b      	str	r3, [r7, #16]
   return(result);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004928:	623a      	str	r2, [r7, #32]
 800492a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	69f9      	ldr	r1, [r7, #28]
 800492e:	6a3a      	ldr	r2, [r7, #32]
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	61bb      	str	r3, [r7, #24]
   return(result);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e010      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	f43f af4a 	beq.w	8004810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3770      	adds	r7, #112	; 0x70
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004988:	b480      	push	{r7}
 800498a:	b097      	sub	sp, #92	; 0x5c
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	d10e      	bne.n	80049da <UART_Start_Receive_IT+0x52>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <UART_Start_Receive_IT+0x48>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049ce:	e02d      	b.n	8004a2c <UART_Start_Receive_IT+0xa4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	22ff      	movs	r2, #255	; 0xff
 80049d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049d8:	e028      	b.n	8004a2c <UART_Start_Receive_IT+0xa4>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <UART_Start_Receive_IT+0x76>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <UART_Start_Receive_IT+0x6c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049f2:	e01b      	b.n	8004a2c <UART_Start_Receive_IT+0xa4>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	227f      	movs	r2, #127	; 0x7f
 80049f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049fc:	e016      	b.n	8004a2c <UART_Start_Receive_IT+0xa4>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a06:	d10d      	bne.n	8004a24 <UART_Start_Receive_IT+0x9c>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <UART_Start_Receive_IT+0x92>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	227f      	movs	r2, #127	; 0x7f
 8004a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a18:	e008      	b.n	8004a2c <UART_Start_Receive_IT+0xa4>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	223f      	movs	r2, #63	; 0x3f
 8004a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a22:	e003      	b.n	8004a2c <UART_Start_Receive_IT+0xa4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2222      	movs	r2, #34	; 0x22
 8004a38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	657b      	str	r3, [r7, #84]	; 0x54
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e5      	bne.n	8004a3a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a76:	d107      	bne.n	8004a88 <UART_Start_Receive_IT+0x100>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <UART_Start_Receive_IT+0x18c>)
 8004a84:	665a      	str	r2, [r3, #100]	; 0x64
 8004a86:	e002      	b.n	8004a8e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <UART_Start_Receive_IT+0x190>)
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d019      	beq.n	8004ad2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
 8004abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_Start_Receive_IT+0x116>
 8004ad0:	e018      	b.n	8004b04 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f043 0320 	orr.w	r3, r3, #32
 8004ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af0:	623b      	str	r3, [r7, #32]
 8004af2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	69f9      	ldr	r1, [r7, #28]
 8004af6:	6a3a      	ldr	r2, [r7, #32]
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e6      	bne.n	8004ad2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	375c      	adds	r7, #92	; 0x5c
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	080052ab 	.word	0x080052ab
 8004b18:	0800514b 	.word	0x0800514b

08004b1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b096      	sub	sp, #88	; 0x58
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2222      	movs	r2, #34	; 0x22
 8004b44:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d02b      	beq.n	8004ba6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a42      	ldr	r2, [pc, #264]	; (8004c5c <UART_Start_Receive_DMA+0x140>)
 8004b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a41      	ldr	r2, [pc, #260]	; (8004c60 <UART_Start_Receive_DMA+0x144>)
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	4a40      	ldr	r2, [pc, #256]	; (8004c64 <UART_Start_Receive_DMA+0x148>)
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3324      	adds	r3, #36	; 0x24
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	461a      	mov	r2, r3
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	f7fc fe6f 	bl	8001864 <HAL_DMA_Start_IT>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00c      	beq.n	8004ba6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e055      	b.n	8004c52 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bca:	657b      	str	r3, [r7, #84]	; 0x54
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c08:	637a      	str	r2, [r7, #52]	; 0x34
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3c:	623a      	str	r2, [r7, #32]
 8004c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3758      	adds	r7, #88	; 0x58
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08004d7b 	.word	0x08004d7b
 8004c60:	08004e9f 	.word	0x08004e9f
 8004c64:	08004ed7 	.word	0x08004ed7

08004c68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6979      	ldr	r1, [r7, #20]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e6      	bne.n	8004c70 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004ca8:	bf00      	nop
 8004caa:	3724      	adds	r7, #36	; 0x24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b095      	sub	sp, #84	; 0x54
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
 8004cdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e5      	bne.n	8004cee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d118      	bne.n	8004d5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0310 	bic.w	r3, r3, #16
 8004d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6979      	ldr	r1, [r7, #20]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	613b      	str	r3, [r7, #16]
   return(result);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e6      	bne.n	8004d2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d6e:	bf00      	nop
 8004d70:	3754      	adds	r7, #84	; 0x54
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b09c      	sub	sp, #112	; 0x70
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d170      	bne.n	8004e78 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e6      	bne.n	8004d9e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	667b      	str	r3, [r7, #100]	; 0x64
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004df0:	647a      	str	r2, [r7, #68]	; 0x44
 8004df2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e5      	bne.n	8004dd0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	623b      	str	r3, [r7, #32]
   return(result);
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e24:	633a      	str	r2, [r7, #48]	; 0x30
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d118      	bne.n	8004e78 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	617b      	str	r3, [r7, #20]
   return(result);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e6      	bne.n	8004e46 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e86:	4619      	mov	r1, r3
 8004e88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e8a:	f7ff f995 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e8e:	e002      	b.n	8004e96 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004e90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e92:	f7fb fe9f 	bl	8000bd4 <HAL_UART_RxCpltCallback>
}
 8004e96:	bf00      	nop
 8004e98:	3770      	adds	r7, #112	; 0x70
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d109      	bne.n	8004ec8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff f979 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ec6:	e002      	b.n	8004ece <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff f961 	bl	8004190 <HAL_UART_RxHalfCpltCallback>
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b80      	cmp	r3, #128	; 0x80
 8004efc:	d109      	bne.n	8004f12 <UART_DMAError+0x3c>
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b21      	cmp	r3, #33	; 0x21
 8004f02:	d106      	bne.n	8004f12 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004f0c:	6978      	ldr	r0, [r7, #20]
 8004f0e:	f7ff feab 	bl	8004c68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d109      	bne.n	8004f34 <UART_DMAError+0x5e>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b22      	cmp	r3, #34	; 0x22
 8004f24:	d106      	bne.n	8004f34 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f7ff fec0 	bl	8004cb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3a:	f043 0210 	orr.w	r2, r3, #16
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f44:	6978      	ldr	r0, [r7, #20]
 8004f46:	f7ff f92d 	bl	80041a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff f917 	bl	80041a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b08f      	sub	sp, #60	; 0x3c
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8a:	2b21      	cmp	r3, #33	; 0x21
 8004f8c:	d14d      	bne.n	800502a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d132      	bne.n	8005000 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e6      	bne.n	8004f9a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6979      	ldr	r1, [r7, #20]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e6      	bne.n	8004fcc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ffe:	e014      	b.n	800502a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	b292      	uxth	r2, r2
 800500c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800502a:	bf00      	nop
 800502c:	373c      	adds	r7, #60	; 0x3c
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005036:	b480      	push	{r7}
 8005038:	b091      	sub	sp, #68	; 0x44
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005042:	2b21      	cmp	r3, #33	; 0x21
 8005044:	d151      	bne.n	80050ea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d132      	bne.n	80050b8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	623b      	str	r3, [r7, #32]
   return(result);
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
 8005072:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	60fb      	str	r3, [r7, #12]
   return(result);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	69b9      	ldr	r1, [r7, #24]
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	617b      	str	r3, [r7, #20]
   return(result);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e6      	bne.n	8005084 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80050b6:	e018      	b.n	80050ea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80050be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c0:	881a      	ldrh	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ca:	b292      	uxth	r2, r2
 80050cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050ea:	bf00      	nop
 80050ec:	3744      	adds	r7, #68	; 0x44
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60bb      	str	r3, [r7, #8]
   return(result);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6979      	ldr	r1, [r7, #20]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	613b      	str	r3, [r7, #16]
   return(result);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e6      	bne.n	80050fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff f81d 	bl	800417c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005142:	bf00      	nop
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b096      	sub	sp, #88	; 0x58
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005158:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005160:	2b22      	cmp	r3, #34	; 0x22
 8005162:	f040 8094 	bne.w	800528e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800516c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005170:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005174:	b2d9      	uxtb	r1, r3
 8005176:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800517a:	b2da      	uxtb	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	400a      	ands	r2, r1
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d179      	bne.n	80052a2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c2:	653b      	str	r3, [r7, #80]	; 0x50
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	647b      	str	r3, [r7, #68]	; 0x44
 80051ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e6      	bne.n	80051ae <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	623b      	str	r3, [r7, #32]
   return(result);
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005200:	633a      	str	r2, [r7, #48]	; 0x30
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005224:	2b01      	cmp	r3, #1
 8005226:	d12e      	bne.n	8005286 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	60fb      	str	r3, [r7, #12]
   return(result);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0310 	bic.w	r3, r3, #16
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	69b9      	ldr	r1, [r7, #24]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	617b      	str	r3, [r7, #20]
   return(result);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e6      	bne.n	800522e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b10      	cmp	r3, #16
 800526c:	d103      	bne.n	8005276 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2210      	movs	r2, #16
 8005274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fe ff9a 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005284:	e00d      	b.n	80052a2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb fca4 	bl	8000bd4 <HAL_UART_RxCpltCallback>
}
 800528c:	e009      	b.n	80052a2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	8b1b      	ldrh	r3, [r3, #24]
 8005294:	b29a      	uxth	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0208 	orr.w	r2, r2, #8
 800529e:	b292      	uxth	r2, r2
 80052a0:	831a      	strh	r2, [r3, #24]
}
 80052a2:	bf00      	nop
 80052a4:	3758      	adds	r7, #88	; 0x58
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b096      	sub	sp, #88	; 0x58
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c0:	2b22      	cmp	r3, #34	; 0x22
 80052c2:	f040 8094 	bne.w	80053ee <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80052d6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80052da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052de:	4013      	ands	r3, r2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	1c9a      	adds	r2, r3, #2
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d179      	bne.n	8005402 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
 800532e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005384:	2b01      	cmp	r3, #1
 8005386:	d12e      	bne.n	80053e6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60bb      	str	r3, [r7, #8]
   return(result);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	647b      	str	r3, [r7, #68]	; 0x44
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6979      	ldr	r1, [r7, #20]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d103      	bne.n	80053d6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2210      	movs	r2, #16
 80053d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fe feea 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053e4:	e00d      	b.n	8005402 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fb fbf4 	bl	8000bd4 <HAL_UART_RxCpltCallback>
}
 80053ec:	e009      	b.n	8005402 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	8b1b      	ldrh	r3, [r3, #24]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0208 	orr.w	r2, r2, #8
 80053fe:	b292      	uxth	r2, r2
 8005400:	831a      	strh	r2, [r3, #24]
}
 8005402:	bf00      	nop
 8005404:	3758      	adds	r7, #88	; 0x58
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <__NVIC_SetPriority>:
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800542c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005430:	2b00      	cmp	r3, #0
 8005432:	db0a      	blt.n	800544a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	490c      	ldr	r1, [pc, #48]	; (800546c <__NVIC_SetPriority+0x4c>)
 800543a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543e:	0112      	lsls	r2, r2, #4
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	440b      	add	r3, r1
 8005444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005448:	e00a      	b.n	8005460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	4908      	ldr	r1, [pc, #32]	; (8005470 <__NVIC_SetPriority+0x50>)
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	3b04      	subs	r3, #4
 8005458:	0112      	lsls	r2, r2, #4
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	440b      	add	r3, r1
 800545e:	761a      	strb	r2, [r3, #24]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	e000e100 	.word	0xe000e100
 8005470:	e000ed00 	.word	0xe000ed00

08005474 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <SysTick_Handler+0x1c>)
 800547a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800547c:	f002 f8cc 	bl	8007618 <xTaskGetSchedulerState>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005486:	f002 fff7 	bl	8008478 <xPortSysTickHandler>
  }
}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	e000e010 	.word	0xe000e010

08005494 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005498:	2100      	movs	r1, #0
 800549a:	f06f 0004 	mvn.w	r0, #4
 800549e:	f7ff ffbf 	bl	8005420 <__NVIC_SetPriority>
#endif
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ae:	f3ef 8305 	mrs	r3, IPSR
 80054b2:	603b      	str	r3, [r7, #0]
  return(result);
 80054b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054ba:	f06f 0305 	mvn.w	r3, #5
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	e00c      	b.n	80054dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <osKernelInitialize+0x44>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <osKernelInitialize+0x44>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	e002      	b.n	80054dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054dc:	687b      	ldr	r3, [r7, #4]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	200028f4 	.word	0x200028f4

080054f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	603b      	str	r3, [r7, #0]
  return(result);
 80054fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005502:	f06f 0305 	mvn.w	r3, #5
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e010      	b.n	800552c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <osKernelStart+0x48>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d109      	bne.n	8005526 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005512:	f7ff ffbf 	bl	8005494 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005516:	4b08      	ldr	r3, [pc, #32]	; (8005538 <osKernelStart+0x48>)
 8005518:	2202      	movs	r2, #2
 800551a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800551c:	f001 fc20 	bl	8006d60 <vTaskStartScheduler>
      stat = osOK;
 8005520:	2300      	movs	r3, #0
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	e002      	b.n	800552c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800552c:	687b      	ldr	r3, [r7, #4]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200028f4 	.word	0x200028f4

0800553c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b08e      	sub	sp, #56	; 0x38
 8005540:	af04      	add	r7, sp, #16
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554c:	f3ef 8305 	mrs	r3, IPSR
 8005550:	617b      	str	r3, [r7, #20]
  return(result);
 8005552:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005554:	2b00      	cmp	r3, #0
 8005556:	d17e      	bne.n	8005656 <osThreadNew+0x11a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d07b      	beq.n	8005656 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005562:	2318      	movs	r3, #24
 8005564:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d045      	beq.n	8005602 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <osThreadNew+0x48>
        name = attr->name;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <osThreadNew+0x6e>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b38      	cmp	r3, #56	; 0x38
 800559c:	d805      	bhi.n	80055aa <osThreadNew+0x6e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <osThreadNew+0x72>
        return (NULL);
 80055aa:	2300      	movs	r3, #0
 80055ac:	e054      	b.n	8005658 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00e      	beq.n	80055e4 <osThreadNew+0xa8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2bbb      	cmp	r3, #187	; 0xbb
 80055cc:	d90a      	bls.n	80055e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <osThreadNew+0xa8>
        mem = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e010      	b.n	8005606 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10c      	bne.n	8005606 <osThreadNew+0xca>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d108      	bne.n	8005606 <osThreadNew+0xca>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <osThreadNew+0xca>
          mem = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e001      	b.n	8005606 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d110      	bne.n	800562e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005614:	9202      	str	r2, [sp, #8]
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6a3a      	ldr	r2, [r7, #32]
 8005620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f001 f93e 	bl	80068a4 <xTaskCreateStatic>
 8005628:	4603      	mov	r3, r0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e013      	b.n	8005656 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d110      	bne.n	8005656 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	b29a      	uxth	r2, r3
 8005638:	f107 0310 	add.w	r3, r7, #16
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f001 f989 	bl	800695e <xTaskCreate>
 800564c:	4603      	mov	r3, r0
 800564e:	2b01      	cmp	r3, #1
 8005650:	d001      	beq.n	8005656 <osThreadNew+0x11a>
            hTask = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005656:	693b      	ldr	r3, [r7, #16]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8005664:	2000      	movs	r0, #0
 8005666:	f001 fad5 	bl	8006c14 <vTaskDelete>
#endif
  for (;;);
 800566a:	e7fe      	b.n	800566a <osThreadExit+0xa>

0800566c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005674:	f3ef 8305 	mrs	r3, IPSR
 8005678:	60bb      	str	r3, [r7, #8]
  return(result);
 800567a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <osDelay+0x1c>
    stat = osErrorISR;
 8005680:	f06f 0305 	mvn.w	r3, #5
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e007      	b.n	8005698 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fb30 	bl	8006cf8 <vTaskDelay>
    }
  }

  return (stat);
 8005698:	68fb      	ldr	r3, [r7, #12]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b08a      	sub	sp, #40	; 0x28
 80056a6:	af02      	add	r7, sp, #8
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b2:	f3ef 8305 	mrs	r3, IPSR
 80056b6:	613b      	str	r3, [r7, #16]
  return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d175      	bne.n	80057aa <osSemaphoreNew+0x108>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d072      	beq.n	80057aa <osSemaphoreNew+0x108>
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d86e      	bhi.n	80057aa <osSemaphoreNew+0x108>
    mem = -1;
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d015      	beq.n	8005704 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d006      	beq.n	80056ee <osSemaphoreNew+0x4c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b4f      	cmp	r3, #79	; 0x4f
 80056e6:	d902      	bls.n	80056ee <osSemaphoreNew+0x4c>
        mem = 1;
 80056e8:	2301      	movs	r3, #1
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e00c      	b.n	8005708 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d108      	bne.n	8005708 <osSemaphoreNew+0x66>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <osSemaphoreNew+0x66>
          mem = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e001      	b.n	8005708 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800570e:	d04c      	beq.n	80057aa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d128      	bne.n	8005768 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d10a      	bne.n	8005732 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2203      	movs	r2, #3
 8005722:	9200      	str	r2, [sp, #0]
 8005724:	2200      	movs	r2, #0
 8005726:	2100      	movs	r1, #0
 8005728:	2001      	movs	r0, #1
 800572a:	f000 fac5 	bl	8005cb8 <xQueueGenericCreateStatic>
 800572e:	61f8      	str	r0, [r7, #28]
 8005730:	e005      	b.n	800573e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005732:	2203      	movs	r2, #3
 8005734:	2100      	movs	r1, #0
 8005736:	2001      	movs	r0, #1
 8005738:	f000 fb36 	bl	8005da8 <xQueueGenericCreate>
 800573c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d022      	beq.n	800578a <osSemaphoreNew+0xe8>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01f      	beq.n	800578a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800574a:	2300      	movs	r3, #0
 800574c:	2200      	movs	r2, #0
 800574e:	2100      	movs	r1, #0
 8005750:	69f8      	ldr	r0, [r7, #28]
 8005752:	f000 fbf1 	bl	8005f38 <xQueueGenericSend>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d016      	beq.n	800578a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800575c:	69f8      	ldr	r0, [r7, #28]
 800575e:	f000 fee5 	bl	800652c <vQueueDelete>
            hSemaphore = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e010      	b.n	800578a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d108      	bne.n	8005780 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	461a      	mov	r2, r3
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fb73 	bl	8005e62 <xQueueCreateCountingSemaphoreStatic>
 800577c:	61f8      	str	r0, [r7, #28]
 800577e:	e004      	b.n	800578a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fba4 	bl	8005ed0 <xQueueCreateCountingSemaphore>
 8005788:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e001      	b.n	80057a2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	69f8      	ldr	r0, [r7, #28]
 80057a6:	f000 fff5 	bl	8006794 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80057aa:	69fb      	ldr	r3, [r7, #28]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c4:	f3ef 8305 	mrs	r3, IPSR
 80057c8:	613b      	str	r3, [r7, #16]
  return(result);
 80057ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d15f      	bne.n	8005890 <osMessageQueueNew+0xdc>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d05c      	beq.n	8005890 <osMessageQueueNew+0xdc>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d059      	beq.n	8005890 <osMessageQueueNew+0xdc>
    mem = -1;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d029      	beq.n	800583c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d012      	beq.n	8005816 <osMessageQueueNew+0x62>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b4f      	cmp	r3, #79	; 0x4f
 80057f6:	d90e      	bls.n	8005816 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <osMessageQueueNew+0x62>
        mem = 1;
 8005810:	2301      	movs	r3, #1
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e014      	b.n	8005840 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d110      	bne.n	8005840 <osMessageQueueNew+0x8c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800582a:	2b00      	cmp	r3, #0
 800582c:	d108      	bne.n	8005840 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <osMessageQueueNew+0x8c>
          mem = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e001      	b.n	8005840 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10b      	bne.n	800585e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2100      	movs	r1, #0
 8005850:	9100      	str	r1, [sp, #0]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fa2f 	bl	8005cb8 <xQueueGenericCreateStatic>
 800585a:	61f8      	str	r0, [r7, #28]
 800585c:	e008      	b.n	8005870 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d105      	bne.n	8005870 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005864:	2200      	movs	r2, #0
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fa9d 	bl	8005da8 <xQueueGenericCreate>
 800586e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00c      	beq.n	8005890 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <osMessageQueueNew+0xd0>
        name = attr->name;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e001      	b.n	8005888 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005888:	6979      	ldr	r1, [r7, #20]
 800588a:	69f8      	ldr	r0, [r7, #28]
 800588c:	f000 ff82 	bl	8006794 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005890:	69fb      	ldr	r3, [r7, #28]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	4613      	mov	r3, r2
 80058aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b4:	f3ef 8305 	mrs	r3, IPSR
 80058b8:	617b      	str	r3, [r7, #20]
  return(result);
 80058ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d028      	beq.n	8005912 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <osMessageQueuePut+0x36>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <osMessageQueuePut+0x36>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80058d2:	f06f 0303 	mvn.w	r3, #3
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	e038      	b.n	800594c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80058de:	f107 0210 	add.w	r2, r7, #16
 80058e2:	2300      	movs	r3, #0
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	69b8      	ldr	r0, [r7, #24]
 80058e8:	f000 fc24 	bl	8006134 <xQueueGenericSendFromISR>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d003      	beq.n	80058fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80058f2:	f06f 0302 	mvn.w	r3, #2
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e028      	b.n	800594c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d025      	beq.n	800594c <osMessageQueuePut+0xb0>
 8005900:	4b15      	ldr	r3, [pc, #84]	; (8005958 <osMessageQueuePut+0xbc>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	e01c      	b.n	800594c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <osMessageQueuePut+0x82>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800591e:	f06f 0303 	mvn.w	r3, #3
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e012      	b.n	800594c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005926:	2300      	movs	r3, #0
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	69b8      	ldr	r0, [r7, #24]
 800592e:	f000 fb03 	bl	8005f38 <xQueueGenericSend>
 8005932:	4603      	mov	r3, r0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d009      	beq.n	800594c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800593e:	f06f 0301 	mvn.w	r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	e002      	b.n	800594c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005946:	f06f 0302 	mvn.w	r3, #2
 800594a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800594c:	69fb      	ldr	r3, [r7, #28]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005972:	f3ef 8305 	mrs	r3, IPSR
 8005976:	617b      	str	r3, [r7, #20]
  return(result);
 8005978:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800597a:	2b00      	cmp	r3, #0
 800597c:	d028      	beq.n	80059d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <osMessageQueueGet+0x34>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <osMessageQueueGet+0x34>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005990:	f06f 0303 	mvn.w	r3, #3
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	e037      	b.n	8005a08 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005998:	2300      	movs	r3, #0
 800599a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800599c:	f107 0310 	add.w	r3, r7, #16
 80059a0:	461a      	mov	r2, r3
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	69b8      	ldr	r0, [r7, #24]
 80059a6:	f000 fd41 	bl	800642c <xQueueReceiveFromISR>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d003      	beq.n	80059b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80059b0:	f06f 0302 	mvn.w	r3, #2
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e027      	b.n	8005a08 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d024      	beq.n	8005a08 <osMessageQueueGet+0xac>
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <osMessageQueueGet+0xb8>)
 80059c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	e01b      	b.n	8005a08 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <osMessageQueueGet+0x80>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80059dc:	f06f 0303 	mvn.w	r3, #3
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e011      	b.n	8005a08 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	69b8      	ldr	r0, [r7, #24]
 80059ea:	f000 fc3f 	bl	800626c <xQueueReceive>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d009      	beq.n	8005a08 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80059fa:	f06f 0301 	mvn.w	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e002      	b.n	8005a08 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005a02:	f06f 0302 	mvn.w	r3, #2
 8005a06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005a08:	69fb      	ldr	r3, [r7, #28]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a07      	ldr	r2, [pc, #28]	; (8005a44 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4a06      	ldr	r2, [pc, #24]	; (8005a48 <vApplicationGetIdleTaskMemory+0x30>)
 8005a2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	601a      	str	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200028f8 	.word	0x200028f8
 8005a48:	200029b4 	.word	0x200029b4

08005a4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4a06      	ldr	r2, [pc, #24]	; (8005a7c <vApplicationGetTimerTaskMemory+0x30>)
 8005a62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a6a:	601a      	str	r2, [r3, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20002bb4 	.word	0x20002bb4
 8005a7c:	20002c70 	.word	0x20002c70

08005a80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f103 0208 	add.w	r2, r3, #8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f103 0208 	add.w	r2, r3, #8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f103 0208 	add.w	r2, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b38:	d103      	bne.n	8005b42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e00c      	b.n	8005b5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3308      	adds	r3, #8
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e002      	b.n	8005b50 <vListInsert+0x2e>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d2f6      	bcs.n	8005b4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6892      	ldr	r2, [r2, #8]
 8005baa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6852      	ldr	r2, [r2, #4]
 8005bb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d103      	bne.n	8005bc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c12:	f002 fb9f 	bl	8008354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	3b01      	subs	r3, #1
 8005c44:	68f9      	ldr	r1, [r7, #12]
 8005c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	441a      	add	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	22ff      	movs	r2, #255	; 0xff
 8005c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d114      	bne.n	8005c92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01a      	beq.n	8005ca6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3310      	adds	r3, #16
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fb0d 	bl	8007294 <xTaskRemoveFromEventList>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c80:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <xQueueGenericReset+0xcc>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	e009      	b.n	8005ca6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3310      	adds	r3, #16
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fef2 	bl	8005a80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3324      	adds	r3, #36	; 0x24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff feed 	bl	8005a80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ca6:	f002 fb85 	bl	80083b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005caa:	2301      	movs	r3, #1
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	e000ed04 	.word	0xe000ed04

08005cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08e      	sub	sp, #56	; 0x38
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <xQueueGenericCreateStatic+0x52>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <xQueueGenericCreateStatic+0x56>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericCreateStatic+0x58>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	623b      	str	r3, [r7, #32]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <xQueueGenericCreateStatic+0x7e>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <xQueueGenericCreateStatic+0x82>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <xQueueGenericCreateStatic+0x84>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	61fb      	str	r3, [r7, #28]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d56:	2350      	movs	r3, #80	; 0x50
 8005d58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b50      	cmp	r3, #80	; 0x50
 8005d5e:	d00a      	beq.n	8005d76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	61bb      	str	r3, [r7, #24]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	4613      	mov	r3, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f83f 	bl	8005e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3730      	adds	r7, #48	; 0x30
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	613b      	str	r3, [r7, #16]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3350      	adds	r3, #80	; 0x50
 8005de0:	4618      	mov	r0, r3
 8005de2:	f002 fbd9 	bl	8008598 <pvPortMalloc>
 8005de6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d011      	beq.n	8005e12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	3350      	adds	r3, #80	; 0x50
 8005df6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e00:	79fa      	ldrb	r2, [r7, #7]
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	4613      	mov	r3, r2
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f805 	bl	8005e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e12:	69bb      	ldr	r3, [r7, #24]
	}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e002      	b.n	8005e3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	69b8      	ldr	r0, [r7, #24]
 8005e4e:	f7ff fecb 	bl	8005be8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08a      	sub	sp, #40	; 0x28
 8005e66:	af02      	add	r7, sp, #8
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61bb      	str	r3, [r7, #24]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d90a      	bls.n	8005ea8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	617b      	str	r3, [r7, #20]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7ff ff00 	bl	8005cb8 <xQueueGenericCreateStatic>
 8005eb8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
	}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	613b      	str	r3, [r7, #16]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d90a      	bls.n	8005f14 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f14:	2202      	movs	r2, #2
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff45 	bl	8005da8 <xQueueGenericCreate>
 8005f1e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f2c:	697b      	ldr	r3, [r7, #20]
	}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08e      	sub	sp, #56	; 0x38
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f46:	2300      	movs	r3, #0
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xQueueGenericSend+0x32>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <xQueueGenericSend+0x40>
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <xQueueGenericSend+0x44>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <xQueueGenericSend+0x46>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <xQueueGenericSend+0x60>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d103      	bne.n	8005fa6 <xQueueGenericSend+0x6e>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <xQueueGenericSend+0x72>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <xQueueGenericSend+0x74>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	623b      	str	r3, [r7, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fc6:	f001 fb27 	bl	8007618 <xTaskGetSchedulerState>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <xQueueGenericSend+0x9e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <xQueueGenericSend+0xa2>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <xQueueGenericSend+0xa4>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	61fb      	str	r3, [r7, #28]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ff6:	f002 f9ad 	bl	8008354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <xQueueGenericSend+0xd4>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d129      	bne.n	8006060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006012:	f000 faae 	bl	8006572 <prvCopyDataToQueue>
 8006016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	3324      	adds	r3, #36	; 0x24
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f935 	bl	8007294 <xTaskRemoveFromEventList>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006030:	4b3f      	ldr	r3, [pc, #252]	; (8006130 <xQueueGenericSend+0x1f8>)
 8006032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	e00a      	b.n	8006058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006048:	4b39      	ldr	r3, [pc, #228]	; (8006130 <xQueueGenericSend+0x1f8>)
 800604a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006058:	f002 f9ac 	bl	80083b4 <vPortExitCritical>
				return pdPASS;
 800605c:	2301      	movs	r3, #1
 800605e:	e063      	b.n	8006128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006066:	f002 f9a5 	bl	80083b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800606a:	2300      	movs	r3, #0
 800606c:	e05c      	b.n	8006128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006074:	f107 0314 	add.w	r3, r7, #20
 8006078:	4618      	mov	r0, r3
 800607a:	f001 f96f 	bl	800735c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800607e:	2301      	movs	r3, #1
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006082:	f002 f997 	bl	80083b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006086:	f000 fedb 	bl	8006e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800608a:	f002 f963 	bl	8008354 <vPortEnterCritical>
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006094:	b25b      	sxtb	r3, r3
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800609a:	d103      	bne.n	80060a4 <xQueueGenericSend+0x16c>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060aa:	b25b      	sxtb	r3, r3
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b0:	d103      	bne.n	80060ba <xQueueGenericSend+0x182>
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ba:	f002 f97b 	bl	80083b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060be:	1d3a      	adds	r2, r7, #4
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f95e 	bl	8007388 <xTaskCheckForTimeOut>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d124      	bne.n	800611c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d4:	f000 fb45 	bl	8006762 <prvIsQueueFull>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	3310      	adds	r3, #16
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4611      	mov	r1, r2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 f884 	bl	80071f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ee:	f000 fad0 	bl	8006692 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060f2:	f000 feb3 	bl	8006e5c <xTaskResumeAll>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f47f af7c 	bne.w	8005ff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <xQueueGenericSend+0x1f8>)
 8006100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	e772      	b.n	8005ff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006112:	f000 fabe 	bl	8006692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006116:	f000 fea1 	bl	8006e5c <xTaskResumeAll>
 800611a:	e76c      	b.n	8005ff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800611c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800611e:	f000 fab8 	bl	8006692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006122:	f000 fe9b 	bl	8006e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006128:	4618      	mov	r0, r3
 800612a:	3738      	adds	r7, #56	; 0x38
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b090      	sub	sp, #64	; 0x40
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <xQueueGenericSendFromISR+0x3c>
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <xQueueGenericSendFromISR+0x40>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <xQueueGenericSendFromISR+0x42>
 8006174:	2300      	movs	r3, #0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d103      	bne.n	800619e <xQueueGenericSendFromISR+0x6a>
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <xQueueGenericSendFromISR+0x6e>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <xQueueGenericSendFromISR+0x70>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	623b      	str	r3, [r7, #32]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061be:	f002 f9ab 	bl	8008518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061c2:	f3ef 8211 	mrs	r2, BASEPRI
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	61fa      	str	r2, [r7, #28]
 80061d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d302      	bcc.n	80061f0 <xQueueGenericSendFromISR+0xbc>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d12f      	bne.n	8006250 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006206:	f000 f9b4 	bl	8006572 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800620a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006212:	d112      	bne.n	800623a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	d016      	beq.n	800624a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f837 	bl	8007294 <xTaskRemoveFromEventList>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e007      	b.n	800624a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800623a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800623e:	3301      	adds	r3, #1
 8006240:	b2db      	uxtb	r3, r3
 8006242:	b25a      	sxtb	r2, r3
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800624a:	2301      	movs	r3, #1
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800624e:	e001      	b.n	8006254 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006250:	2300      	movs	r3, #0
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800625e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006262:	4618      	mov	r0, r3
 8006264:	3740      	adds	r7, #64	; 0x40
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08c      	sub	sp, #48	; 0x30
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006278:	2300      	movs	r3, #0
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <xQueueReceive+0x30>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	623b      	str	r3, [r7, #32]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <xQueueReceive+0x3e>
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <xQueueReceive+0x42>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <xQueueReceive+0x44>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <xQueueReceive+0x5e>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	61fb      	str	r3, [r7, #28]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ca:	f001 f9a5 	bl	8007618 <xTaskGetSchedulerState>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <xQueueReceive+0x6e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <xQueueReceive+0x72>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <xQueueReceive+0x74>
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueReceive+0x8e>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	61bb      	str	r3, [r7, #24]
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062fa:	f002 f82b 	bl	8008354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01f      	beq.n	800634a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630e:	f000 f99a 	bl	8006646 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	1e5a      	subs	r2, r3, #1
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00f      	beq.n	8006342 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	3310      	adds	r3, #16
 8006326:	4618      	mov	r0, r3
 8006328:	f000 ffb4 	bl	8007294 <xTaskRemoveFromEventList>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006332:	4b3d      	ldr	r3, [pc, #244]	; (8006428 <xQueueReceive+0x1bc>)
 8006334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006342:	f002 f837 	bl	80083b4 <vPortExitCritical>
				return pdPASS;
 8006346:	2301      	movs	r3, #1
 8006348:	e069      	b.n	800641e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006350:	f002 f830 	bl	80083b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006354:	2300      	movs	r3, #0
 8006356:	e062      	b.n	800641e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800635e:	f107 0310 	add.w	r3, r7, #16
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fffa 	bl	800735c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006368:	2301      	movs	r3, #1
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800636c:	f002 f822 	bl	80083b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006370:	f000 fd66 	bl	8006e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006374:	f001 ffee 	bl	8008354 <vPortEnterCritical>
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800637e:	b25b      	sxtb	r3, r3
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006384:	d103      	bne.n	800638e <xQueueReceive+0x122>
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006394:	b25b      	sxtb	r3, r3
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800639a:	d103      	bne.n	80063a4 <xQueueReceive+0x138>
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a4:	f002 f806 	bl	80083b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063a8:	1d3a      	adds	r2, r7, #4
 80063aa:	f107 0310 	add.w	r3, r7, #16
 80063ae:	4611      	mov	r1, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 ffe9 	bl	8007388 <xTaskCheckForTimeOut>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d123      	bne.n	8006404 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063be:	f000 f9ba 	bl	8006736 <prvIsQueueEmpty>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d017      	beq.n	80063f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 ff0f 	bl	80071f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d8:	f000 f95b 	bl	8006692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063dc:	f000 fd3e 	bl	8006e5c <xTaskResumeAll>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d189      	bne.n	80062fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <xQueueReceive+0x1bc>)
 80063e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	e780      	b.n	80062fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063fa:	f000 f94a 	bl	8006692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063fe:	f000 fd2d 	bl	8006e5c <xTaskResumeAll>
 8006402:	e77a      	b.n	80062fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006406:	f000 f944 	bl	8006692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800640a:	f000 fd27 	bl	8006e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800640e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006410:	f000 f991 	bl	8006736 <prvIsQueueEmpty>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	f43f af6f 	beq.w	80062fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800641c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800641e:	4618      	mov	r0, r3
 8006420:	3730      	adds	r7, #48	; 0x30
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08e      	sub	sp, #56	; 0x38
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	623b      	str	r3, [r7, #32]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <xQueueReceiveFromISR+0x3a>
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <xQueueReceiveFromISR+0x3e>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <xQueueReceiveFromISR+0x40>
 800646a:	2300      	movs	r3, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	61fb      	str	r3, [r7, #28]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006486:	f002 f847 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 800648a:	f3ef 8211 	mrs	r2, BASEPRI
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	61ba      	str	r2, [r7, #24]
 80064a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d02f      	beq.n	8006512 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c0:	f000 f8c1 	bl	8006646 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d4:	d112      	bne.n	80064fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	3310      	adds	r3, #16
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fed6 	bl	8007294 <xTaskRemoveFromEventList>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00e      	beq.n	800650c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e007      	b.n	800650c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006500:	3301      	adds	r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	b25a      	sxtb	r2, r3
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800650c:	2301      	movs	r3, #1
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
 8006510:	e001      	b.n	8006516 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006512:	2300      	movs	r3, #0
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	613b      	str	r3, [r7, #16]
	__asm volatile
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f383 8811 	msr	BASEPRI, r3
}
 8006520:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006524:	4618      	mov	r0, r3
 8006526:	3738      	adds	r7, #56	; 0x38
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <vQueueDelete+0x28>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60bb      	str	r3, [r7, #8]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f947 	bl	80067e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f002 f8e3 	bl	8008730 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d14d      	bne.n	8006634 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f001 f859 	bl	8007654 <xTaskPriorityDisinherit>
 80065a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	e043      	b.n	8006634 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d119      	bne.n	80065e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6858      	ldr	r0, [r3, #4]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	461a      	mov	r2, r3
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	f002 fb08 	bl	8008bd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	441a      	add	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d32b      	bcc.n	8006634 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	e026      	b.n	8006634 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	68d8      	ldr	r0, [r3, #12]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	461a      	mov	r2, r3
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	f002 faee 	bl	8008bd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	425b      	negs	r3, r3
 8006600:	441a      	add	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d207      	bcs.n	8006622 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	425b      	negs	r3, r3
 800661c:	441a      	add	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d105      	bne.n	8006634 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3b01      	subs	r3, #1
 8006632:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800663c:	697b      	ldr	r3, [r7, #20]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d018      	beq.n	800668a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	441a      	add	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	d303      	bcc.n	800667a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68d9      	ldr	r1, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	461a      	mov	r2, r3
 8006684:	6838      	ldr	r0, [r7, #0]
 8006686:	f002 faa4 	bl	8008bd2 <memcpy>
	}
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800669a:	f001 fe5b 	bl	8008354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066a6:	e011      	b.n	80066cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3324      	adds	r3, #36	; 0x24
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fded 	bl	8007294 <xTaskRemoveFromEventList>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066c0:	f000 fec4 	bl	800744c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dce9      	bgt.n	80066a8 <prvUnlockQueue+0x16>
 80066d4:	e000      	b.n	80066d8 <prvUnlockQueue+0x46>
					break;
 80066d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	22ff      	movs	r2, #255	; 0xff
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066e0:	f001 fe68 	bl	80083b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066e4:	f001 fe36 	bl	8008354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066f0:	e011      	b.n	8006716 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d012      	beq.n	8006720 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3310      	adds	r3, #16
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fdc8 	bl	8007294 <xTaskRemoveFromEventList>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800670a:	f000 fe9f 	bl	800744c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	3b01      	subs	r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dce9      	bgt.n	80066f2 <prvUnlockQueue+0x60>
 800671e:	e000      	b.n	8006722 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006720:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	22ff      	movs	r2, #255	; 0xff
 8006726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800672a:	f001 fe43 	bl	80083b4 <vPortExitCritical>
}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800673e:	f001 fe09 	bl	8008354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e001      	b.n	8006754 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006754:	f001 fe2e 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800676a:	f001 fdf3 	bl	8008354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	429a      	cmp	r2, r3
 8006778:	d102      	bne.n	8006780 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800677a:	2301      	movs	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e001      	b.n	8006784 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006784:	f001 fe16 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 8006788:	68fb      	ldr	r3, [r7, #12]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e014      	b.n	80067ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067a4:	4a0f      	ldr	r2, [pc, #60]	; (80067e4 <vQueueAddToRegistry+0x50>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067b0:	490c      	ldr	r1, [pc, #48]	; (80067e4 <vQueueAddToRegistry+0x50>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <vQueueAddToRegistry+0x50>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4413      	add	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067c6:	e006      	b.n	80067d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b07      	cmp	r3, #7
 80067d2:	d9e7      	bls.n	80067a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20003070 	.word	0x20003070

080067e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e016      	b.n	8006824 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80067f6:	4a10      	ldr	r2, [pc, #64]	; (8006838 <vQueueUnregisterQueue+0x50>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	4413      	add	r3, r2
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	429a      	cmp	r2, r3
 8006804:	d10b      	bne.n	800681e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006806:	4a0c      	ldr	r2, [pc, #48]	; (8006838 <vQueueUnregisterQueue+0x50>)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2100      	movs	r1, #0
 800680c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006810:	4a09      	ldr	r2, [pc, #36]	; (8006838 <vQueueUnregisterQueue+0x50>)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4413      	add	r3, r2
 8006818:	2200      	movs	r2, #0
 800681a:	605a      	str	r2, [r3, #4]
				break;
 800681c:	e006      	b.n	800682c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b07      	cmp	r3, #7
 8006828:	d9e5      	bls.n	80067f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	20003070 	.word	0x20003070

0800683c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800684c:	f001 fd82 	bl	8008354 <vPortEnterCritical>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006856:	b25b      	sxtb	r3, r3
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800685c:	d103      	bne.n	8006866 <vQueueWaitForMessageRestricted+0x2a>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800686c:	b25b      	sxtb	r3, r3
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006872:	d103      	bne.n	800687c <vQueueWaitForMessageRestricted+0x40>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800687c:	f001 fd9a 	bl	80083b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3324      	adds	r3, #36	; 0x24
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fcd3 	bl	800723c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006896:	6978      	ldr	r0, [r7, #20]
 8006898:	f7ff fefb 	bl	8006692 <prvUnlockQueue>
	}
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08e      	sub	sp, #56	; 0x38
 80068a8:	af04      	add	r7, sp, #16
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	623b      	str	r3, [r7, #32]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xTaskCreateStatic+0x46>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	61fb      	str	r3, [r7, #28]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068ea:	23bc      	movs	r3, #188	; 0xbc
 80068ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2bbc      	cmp	r3, #188	; 0xbc
 80068f2:	d00a      	beq.n	800690a <xTaskCreateStatic+0x66>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	61bb      	str	r3, [r7, #24]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800690a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01e      	beq.n	8006950 <xTaskCreateStatic+0xac>
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01b      	beq.n	8006950 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006920:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	2202      	movs	r2, #2
 8006926:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800692a:	2300      	movs	r3, #0
 800692c:	9303      	str	r3, [sp, #12]
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	9302      	str	r3, [sp, #8]
 8006932:	f107 0314 	add.w	r3, r7, #20
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f850 	bl	80069e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800694a:	f000 f8f3 	bl	8006b34 <prvAddNewTaskToReadyList>
 800694e:	e001      	b.n	8006954 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006954:	697b      	ldr	r3, [r7, #20]
	}
 8006956:	4618      	mov	r0, r3
 8006958:	3728      	adds	r7, #40	; 0x28
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08c      	sub	sp, #48	; 0x30
 8006962:	af04      	add	r7, sp, #16
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	4613      	mov	r3, r2
 800696c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fe10 	bl	8008598 <pvPortMalloc>
 8006978:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006980:	20bc      	movs	r0, #188	; 0xbc
 8006982:	f001 fe09 	bl	8008598 <pvPortMalloc>
 8006986:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
 8006994:	e005      	b.n	80069a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006996:	6978      	ldr	r0, [r7, #20]
 8006998:	f001 feca 	bl	8008730 <vPortFree>
 800699c:	e001      	b.n	80069a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d017      	beq.n	80069d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	2300      	movs	r3, #0
 80069b4:	9303      	str	r3, [sp, #12]
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	9302      	str	r3, [sp, #8]
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f80e 	bl	80069e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069cc:	69f8      	ldr	r0, [r7, #28]
 80069ce:	f000 f8b1 	bl	8006b34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069d2:	2301      	movs	r3, #1
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	e002      	b.n	80069de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069de:	69bb      	ldr	r3, [r7, #24]
	}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	461a      	mov	r2, r3
 8006a00:	21a5      	movs	r1, #165	; 0xa5
 8006a02:	f002 f8f4 	bl	8008bee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a10:	3b01      	subs	r3, #1
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f023 0307 	bic.w	r3, r3, #7
 8006a1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	617b      	str	r3, [r7, #20]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01f      	beq.n	8006a86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	e012      	b.n	8006a72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	7819      	ldrb	r1, [r3, #0]
 8006a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	3334      	adds	r3, #52	; 0x34
 8006a5c:	460a      	mov	r2, r1
 8006a5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2b0f      	cmp	r3, #15
 8006a76:	d9e9      	bls.n	8006a4c <prvInitialiseNewTask+0x64>
 8006a78:	e000      	b.n	8006a7c <prvInitialiseNewTask+0x94>
			{
				break;
 8006a7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a84:	e003      	b.n	8006a8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	2b37      	cmp	r3, #55	; 0x37
 8006a92:	d901      	bls.n	8006a98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a94:	2337      	movs	r3, #55	; 0x37
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff f806 	bl	8005ac0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	3318      	adds	r3, #24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff f801 	bl	8005ac0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	3354      	adds	r3, #84	; 0x54
 8006ae8:	2260      	movs	r2, #96	; 0x60
 8006aea:	2100      	movs	r1, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f002 f87e 	bl	8008bee <memset>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	4a0c      	ldr	r2, [pc, #48]	; (8006b28 <prvInitialiseNewTask+0x140>)
 8006af6:	659a      	str	r2, [r3, #88]	; 0x58
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	4a0c      	ldr	r2, [pc, #48]	; (8006b2c <prvInitialiseNewTask+0x144>)
 8006afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	4a0b      	ldr	r2, [pc, #44]	; (8006b30 <prvInitialiseNewTask+0x148>)
 8006b02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	69b8      	ldr	r0, [r7, #24]
 8006b0a:	f001 faf7 	bl	80080fc <pxPortInitialiseStack>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b20:	bf00      	nop
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	0800a058 	.word	0x0800a058
 8006b2c:	0800a078 	.word	0x0800a078
 8006b30:	0800a038 	.word	0x0800a038

08006b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b3c:	f001 fc0a 	bl	8008354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b40:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <prvAddNewTaskToReadyList+0xc4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <prvAddNewTaskToReadyList+0xc4>)
 8006b48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b4a:	4b2c      	ldr	r3, [pc, #176]	; (8006bfc <prvAddNewTaskToReadyList+0xc8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b52:	4a2a      	ldr	r2, [pc, #168]	; (8006bfc <prvAddNewTaskToReadyList+0xc8>)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b58:	4b27      	ldr	r3, [pc, #156]	; (8006bf8 <prvAddNewTaskToReadyList+0xc4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d110      	bne.n	8006b82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b60:	f000 fc98 	bl	8007494 <prvInitialiseTaskLists>
 8006b64:	e00d      	b.n	8006b82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b66:	4b26      	ldr	r3, [pc, #152]	; (8006c00 <prvAddNewTaskToReadyList+0xcc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b6e:	4b23      	ldr	r3, [pc, #140]	; (8006bfc <prvAddNewTaskToReadyList+0xc8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d802      	bhi.n	8006b82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b7c:	4a1f      	ldr	r2, [pc, #124]	; (8006bfc <prvAddNewTaskToReadyList+0xc8>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b82:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <prvAddNewTaskToReadyList+0xd0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <prvAddNewTaskToReadyList+0xd0>)
 8006b8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b8c:	4b1d      	ldr	r3, [pc, #116]	; (8006c04 <prvAddNewTaskToReadyList+0xd0>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <prvAddNewTaskToReadyList+0xd4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d903      	bls.n	8006ba8 <prvAddNewTaskToReadyList+0x74>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <prvAddNewTaskToReadyList+0xd4>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <prvAddNewTaskToReadyList+0xd8>)
 8006bb6:	441a      	add	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f7fe ff8b 	bl	8005ada <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bc4:	f001 fbf6 	bl	80083b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <prvAddNewTaskToReadyList+0xcc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00e      	beq.n	8006bee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <prvAddNewTaskToReadyList+0xc8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d207      	bcs.n	8006bee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <prvAddNewTaskToReadyList+0xdc>)
 8006be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bee:	bf00      	nop
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20003584 	.word	0x20003584
 8006bfc:	200030b0 	.word	0x200030b0
 8006c00:	20003590 	.word	0x20003590
 8006c04:	200035a0 	.word	0x200035a0
 8006c08:	2000358c 	.word	0x2000358c
 8006c0c:	200030b4 	.word	0x200030b4
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006c1c:	f001 fb9a 	bl	8008354 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <vTaskDelete+0x18>
 8006c26:	4b2c      	ldr	r3, [pc, #176]	; (8006cd8 <vTaskDelete+0xc4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	e000      	b.n	8006c2e <vTaskDelete+0x1a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe ffad 	bl	8005b94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3318      	adds	r3, #24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe ffa4 	bl	8005b94 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006c4c:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <vTaskDelete+0xc8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a22      	ldr	r2, [pc, #136]	; (8006cdc <vTaskDelete+0xc8>)
 8006c54:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <vTaskDelete+0xc4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d10b      	bne.n	8006c78 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4619      	mov	r1, r3
 8006c66:	481e      	ldr	r0, [pc, #120]	; (8006ce0 <vTaskDelete+0xcc>)
 8006c68:	f7fe ff37 	bl	8005ada <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006c6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <vTaskDelete+0xd0>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a1c      	ldr	r2, [pc, #112]	; (8006ce4 <vTaskDelete+0xd0>)
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e009      	b.n	8006c8c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006c78:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <vTaskDelete+0xd4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	4a1a      	ldr	r2, [pc, #104]	; (8006ce8 <vTaskDelete+0xd4>)
 8006c80:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fc74 	bl	8007570 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006c88:	f000 fca6 	bl	80075d8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006c8c:	f001 fb92 	bl	80083b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006c90:	4b16      	ldr	r3, [pc, #88]	; (8006cec <vTaskDelete+0xd8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01b      	beq.n	8006cd0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <vTaskDelete+0xc4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d116      	bne.n	8006cd0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <vTaskDelete+0xdc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <vTaskDelete+0xac>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60bb      	str	r3, [r7, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <vTaskDelete+0xe0>)
 8006cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006cd0:	bf00      	nop
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	200030b0 	.word	0x200030b0
 8006cdc:	200035a0 	.word	0x200035a0
 8006ce0:	20003558 	.word	0x20003558
 8006ce4:	2000356c 	.word	0x2000356c
 8006ce8:	20003584 	.word	0x20003584
 8006cec:	20003590 	.word	0x20003590
 8006cf0:	200035ac 	.word	0x200035ac
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d017      	beq.n	8006d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d0a:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <vTaskDelay+0x60>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <vTaskDelay+0x30>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d28:	f000 f88a 	bl	8006e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fe42 	bl	80079b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d34:	f000 f892 	bl	8006e5c <xTaskResumeAll>
 8006d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d107      	bne.n	8006d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <vTaskDelay+0x64>)
 8006d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	200035ac 	.word	0x200035ac
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d6e:	463a      	mov	r2, r7
 8006d70:	1d39      	adds	r1, r7, #4
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fe4e 	bl	8005a18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	9202      	str	r2, [sp, #8]
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	4924      	ldr	r1, [pc, #144]	; (8006e20 <vTaskStartScheduler+0xc0>)
 8006d90:	4824      	ldr	r0, [pc, #144]	; (8006e24 <vTaskStartScheduler+0xc4>)
 8006d92:	f7ff fd87 	bl	80068a4 <xTaskCreateStatic>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a23      	ldr	r2, [pc, #140]	; (8006e28 <vTaskStartScheduler+0xc8>)
 8006d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d9c:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <vTaskStartScheduler+0xc8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e001      	b.n	8006dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d102      	bne.n	8006dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006db4:	f000 fe54 	bl	8007a60 <xTimerCreateTimerTask>
 8006db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d11b      	bne.n	8006df8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	613b      	str	r3, [r7, #16]
}
 8006dd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dd4:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <vTaskStartScheduler+0xcc>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3354      	adds	r3, #84	; 0x54
 8006dda:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <vTaskStartScheduler+0xd0>)
 8006ddc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dde:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <vTaskStartScheduler+0xd4>)
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006de4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <vTaskStartScheduler+0xd8>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dec:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <vTaskStartScheduler+0xdc>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006df2:	f001 fa0d 	bl	8008210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006df6:	e00e      	b.n	8006e16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dfe:	d10a      	bne.n	8006e16 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <vTaskStartScheduler+0xb4>
}
 8006e16:	bf00      	nop
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	08009f44 	.word	0x08009f44
 8006e24:	08007465 	.word	0x08007465
 8006e28:	200035a8 	.word	0x200035a8
 8006e2c:	200030b0 	.word	0x200030b0
 8006e30:	20000018 	.word	0x20000018
 8006e34:	200035a4 	.word	0x200035a4
 8006e38:	20003590 	.word	0x20003590
 8006e3c:	20003588 	.word	0x20003588

08006e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <vTaskSuspendAll+0x18>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a03      	ldr	r2, [pc, #12]	; (8006e58 <vTaskSuspendAll+0x18>)
 8006e4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e4e:	bf00      	nop
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	200035ac 	.word	0x200035ac

08006e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e6a:	4b42      	ldr	r3, [pc, #264]	; (8006f74 <xTaskResumeAll+0x118>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	603b      	str	r3, [r7, #0]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e88:	f001 fa64 	bl	8008354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e8c:	4b39      	ldr	r3, [pc, #228]	; (8006f74 <xTaskResumeAll+0x118>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	4a38      	ldr	r2, [pc, #224]	; (8006f74 <xTaskResumeAll+0x118>)
 8006e94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e96:	4b37      	ldr	r3, [pc, #220]	; (8006f74 <xTaskResumeAll+0x118>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d162      	bne.n	8006f64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e9e:	4b36      	ldr	r3, [pc, #216]	; (8006f78 <xTaskResumeAll+0x11c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d05e      	beq.n	8006f64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ea6:	e02f      	b.n	8006f08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea8:	4b34      	ldr	r3, [pc, #208]	; (8006f7c <xTaskResumeAll+0x120>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3318      	adds	r3, #24
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fe6d 	bl	8005b94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fe68 	bl	8005b94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4b2d      	ldr	r3, [pc, #180]	; (8006f80 <xTaskResumeAll+0x124>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d903      	bls.n	8006ed8 <xTaskResumeAll+0x7c>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <xTaskResumeAll+0x124>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4a27      	ldr	r2, [pc, #156]	; (8006f84 <xTaskResumeAll+0x128>)
 8006ee6:	441a      	add	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fdf3 	bl	8005ada <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <xTaskResumeAll+0x12c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d302      	bcc.n	8006f08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f02:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <xTaskResumeAll+0x130>)
 8006f04:	2201      	movs	r2, #1
 8006f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f08:	4b1c      	ldr	r3, [pc, #112]	; (8006f7c <xTaskResumeAll+0x120>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1cb      	bne.n	8006ea8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f16:	f000 fb5f 	bl	80075d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <xTaskResumeAll+0x134>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d010      	beq.n	8006f48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f26:	f000 f847 	bl	8006fb8 <xTaskIncrementTick>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f30:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <xTaskResumeAll+0x130>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f1      	bne.n	8006f26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f42:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <xTaskResumeAll+0x134>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f48:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <xTaskResumeAll+0x130>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f50:	2301      	movs	r3, #1
 8006f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f54:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <xTaskResumeAll+0x138>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f64:	f001 fa26 	bl	80083b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f68:	68bb      	ldr	r3, [r7, #8]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	200035ac 	.word	0x200035ac
 8006f78:	20003584 	.word	0x20003584
 8006f7c:	20003544 	.word	0x20003544
 8006f80:	2000358c 	.word	0x2000358c
 8006f84:	200030b4 	.word	0x200030b4
 8006f88:	200030b0 	.word	0x200030b0
 8006f8c:	20003598 	.word	0x20003598
 8006f90:	20003594 	.word	0x20003594
 8006f94:	e000ed04 	.word	0xe000ed04

08006f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <xTaskGetTickCount+0x1c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fa4:	687b      	ldr	r3, [r7, #4]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20003588 	.word	0x20003588

08006fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc2:	4b4f      	ldr	r3, [pc, #316]	; (8007100 <xTaskIncrementTick+0x148>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 808f 	bne.w	80070ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fcc:	4b4d      	ldr	r3, [pc, #308]	; (8007104 <xTaskIncrementTick+0x14c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fd4:	4a4b      	ldr	r2, [pc, #300]	; (8007104 <xTaskIncrementTick+0x14c>)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d120      	bne.n	8007022 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fe0:	4b49      	ldr	r3, [pc, #292]	; (8007108 <xTaskIncrementTick+0x150>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	603b      	str	r3, [r7, #0]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xTaskIncrementTick+0x46>
 8007000:	4b41      	ldr	r3, [pc, #260]	; (8007108 <xTaskIncrementTick+0x150>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	4b41      	ldr	r3, [pc, #260]	; (800710c <xTaskIncrementTick+0x154>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a3f      	ldr	r2, [pc, #252]	; (8007108 <xTaskIncrementTick+0x150>)
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	4a3f      	ldr	r2, [pc, #252]	; (800710c <xTaskIncrementTick+0x154>)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <xTaskIncrementTick+0x158>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	4a3d      	ldr	r2, [pc, #244]	; (8007110 <xTaskIncrementTick+0x158>)
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	f000 fadb 	bl	80075d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007022:	4b3c      	ldr	r3, [pc, #240]	; (8007114 <xTaskIncrementTick+0x15c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	429a      	cmp	r2, r3
 800702a:	d349      	bcc.n	80070c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800702c:	4b36      	ldr	r3, [pc, #216]	; (8007108 <xTaskIncrementTick+0x150>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007036:	4b37      	ldr	r3, [pc, #220]	; (8007114 <xTaskIncrementTick+0x15c>)
 8007038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800703c:	601a      	str	r2, [r3, #0]
					break;
 800703e:	e03f      	b.n	80070c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007040:	4b31      	ldr	r3, [pc, #196]	; (8007108 <xTaskIncrementTick+0x150>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d203      	bcs.n	8007060 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007058:	4a2e      	ldr	r2, [pc, #184]	; (8007114 <xTaskIncrementTick+0x15c>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800705e:	e02f      	b.n	80070c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	3304      	adds	r3, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fd95 	bl	8005b94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3318      	adds	r3, #24
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fd8c 	bl	8005b94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007080:	4b25      	ldr	r3, [pc, #148]	; (8007118 <xTaskIncrementTick+0x160>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d903      	bls.n	8007090 <xTaskIncrementTick+0xd8>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	4a22      	ldr	r2, [pc, #136]	; (8007118 <xTaskIncrementTick+0x160>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <xTaskIncrementTick+0x164>)
 800709e:	441a      	add	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fe fd17 	bl	8005ada <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <xTaskIncrementTick+0x168>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d3b8      	bcc.n	800702c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070be:	e7b5      	b.n	800702c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070c0:	4b17      	ldr	r3, [pc, #92]	; (8007120 <xTaskIncrementTick+0x168>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	4915      	ldr	r1, [pc, #84]	; (800711c <xTaskIncrementTick+0x164>)
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d901      	bls.n	80070dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070dc:	4b11      	ldr	r3, [pc, #68]	; (8007124 <xTaskIncrementTick+0x16c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e004      	b.n	80070f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070ea:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <xTaskIncrementTick+0x170>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	4a0d      	ldr	r2, [pc, #52]	; (8007128 <xTaskIncrementTick+0x170>)
 80070f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070f4:	697b      	ldr	r3, [r7, #20]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	200035ac 	.word	0x200035ac
 8007104:	20003588 	.word	0x20003588
 8007108:	2000353c 	.word	0x2000353c
 800710c:	20003540 	.word	0x20003540
 8007110:	2000359c 	.word	0x2000359c
 8007114:	200035a4 	.word	0x200035a4
 8007118:	2000358c 	.word	0x2000358c
 800711c:	200030b4 	.word	0x200030b4
 8007120:	200030b0 	.word	0x200030b0
 8007124:	20003598 	.word	0x20003598
 8007128:	20003594 	.word	0x20003594

0800712c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007132:	4b2a      	ldr	r3, [pc, #168]	; (80071dc <vTaskSwitchContext+0xb0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800713a:	4b29      	ldr	r3, [pc, #164]	; (80071e0 <vTaskSwitchContext+0xb4>)
 800713c:	2201      	movs	r2, #1
 800713e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007140:	e046      	b.n	80071d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007142:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <vTaskSwitchContext+0xb4>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007148:	4b26      	ldr	r3, [pc, #152]	; (80071e4 <vTaskSwitchContext+0xb8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	e010      	b.n	8007172 <vTaskSwitchContext+0x46>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <vTaskSwitchContext+0x40>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	607b      	str	r3, [r7, #4]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <vTaskSwitchContext+0x3e>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3b01      	subs	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	491d      	ldr	r1, [pc, #116]	; (80071e8 <vTaskSwitchContext+0xbc>)
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0e4      	beq.n	8007150 <vTaskSwitchContext+0x24>
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <vTaskSwitchContext+0xbc>)
 8007192:	4413      	add	r3, r2
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	605a      	str	r2, [r3, #4]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	3308      	adds	r3, #8
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d104      	bne.n	80071b6 <vTaskSwitchContext+0x8a>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <vTaskSwitchContext+0xc0>)
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <vTaskSwitchContext+0xb8>)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <vTaskSwitchContext+0xc0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3354      	adds	r3, #84	; 0x54
 80071cc:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <vTaskSwitchContext+0xc4>)
 80071ce:	6013      	str	r3, [r2, #0]
}
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	200035ac 	.word	0x200035ac
 80071e0:	20003598 	.word	0x20003598
 80071e4:	2000358c 	.word	0x2000358c
 80071e8:	200030b4 	.word	0x200030b4
 80071ec:	200030b0 	.word	0x200030b0
 80071f0:	20000018 	.word	0x20000018

080071f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60fb      	str	r3, [r7, #12]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <vTaskPlaceOnEventList+0x44>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3318      	adds	r3, #24
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fe fc7d 	bl	8005b22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007228:	2101      	movs	r1, #1
 800722a:	6838      	ldr	r0, [r7, #0]
 800722c:	f000 fbc4 	bl	80079b8 <prvAddCurrentTaskToDelayedList>
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	200030b0 	.word	0x200030b0

0800723c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	617b      	str	r3, [r7, #20]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <vTaskPlaceOnEventListRestricted+0x54>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3318      	adds	r3, #24
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7fe fc34 	bl	8005ada <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800727c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	68b8      	ldr	r0, [r7, #8]
 8007282:	f000 fb99 	bl	80079b8 <prvAddCurrentTaskToDelayedList>
	}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	200030b0 	.word	0x200030b0

08007294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	60fb      	str	r3, [r7, #12]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	3318      	adds	r3, #24
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fc65 	bl	8005b94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ca:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <xTaskRemoveFromEventList+0xb0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d11d      	bne.n	800730e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fc5c 	bl	8005b94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e0:	4b19      	ldr	r3, [pc, #100]	; (8007348 <xTaskRemoveFromEventList+0xb4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d903      	bls.n	80072f0 <xTaskRemoveFromEventList+0x5c>
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	4a16      	ldr	r2, [pc, #88]	; (8007348 <xTaskRemoveFromEventList+0xb4>)
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4a13      	ldr	r2, [pc, #76]	; (800734c <xTaskRemoveFromEventList+0xb8>)
 80072fe:	441a      	add	r2, r3
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f7fe fbe7 	bl	8005ada <vListInsertEnd>
 800730c:	e005      	b.n	800731a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3318      	adds	r3, #24
 8007312:	4619      	mov	r1, r3
 8007314:	480e      	ldr	r0, [pc, #56]	; (8007350 <xTaskRemoveFromEventList+0xbc>)
 8007316:	f7fe fbe0 	bl	8005ada <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731e:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <xTaskRemoveFromEventList+0xc0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	429a      	cmp	r2, r3
 8007326:	d905      	bls.n	8007334 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007328:	2301      	movs	r3, #1
 800732a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800732c:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <xTaskRemoveFromEventList+0xc4>)
 800732e:	2201      	movs	r2, #1
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e001      	b.n	8007338 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007338:	697b      	ldr	r3, [r7, #20]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	200035ac 	.word	0x200035ac
 8007348:	2000358c 	.word	0x2000358c
 800734c:	200030b4 	.word	0x200030b4
 8007350:	20003544 	.word	0x20003544
 8007354:	200030b0 	.word	0x200030b0
 8007358:	20003598 	.word	0x20003598

0800735c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007364:	4b06      	ldr	r3, [pc, #24]	; (8007380 <vTaskInternalSetTimeOutState+0x24>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <vTaskInternalSetTimeOutState+0x28>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	605a      	str	r2, [r3, #4]
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	2000359c 	.word	0x2000359c
 8007384:	20003588 	.word	0x20003588

08007388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	613b      	str	r3, [r7, #16]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073ca:	f000 ffc3 	bl	8008354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073ce:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <xTaskCheckForTimeOut+0xbc>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e6:	d102      	bne.n	80073ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	e023      	b.n	8007436 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b15      	ldr	r3, [pc, #84]	; (8007448 <xTaskCheckForTimeOut+0xc0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d007      	beq.n	800740a <xTaskCheckForTimeOut+0x82>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	429a      	cmp	r2, r3
 8007402:	d302      	bcc.n	800740a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e015      	b.n	8007436 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	429a      	cmp	r2, r3
 8007412:	d20b      	bcs.n	800742c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1ad2      	subs	r2, r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff ff9b 	bl	800735c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	e004      	b.n	8007436 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007432:	2301      	movs	r3, #1
 8007434:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007436:	f000 ffbd 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 800743a:	69fb      	ldr	r3, [r7, #28]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20003588 	.word	0x20003588
 8007448:	2000359c 	.word	0x2000359c

0800744c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007450:	4b03      	ldr	r3, [pc, #12]	; (8007460 <vTaskMissedYield+0x14>)
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
}
 8007456:	bf00      	nop
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20003598 	.word	0x20003598

08007464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800746c:	f000 f852 	bl	8007514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007470:	4b06      	ldr	r3, [pc, #24]	; (800748c <prvIdleTask+0x28>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d9f9      	bls.n	800746c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <prvIdleTask+0x2c>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007488:	e7f0      	b.n	800746c <prvIdleTask+0x8>
 800748a:	bf00      	nop
 800748c:	200030b4 	.word	0x200030b4
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800749a:	2300      	movs	r3, #0
 800749c:	607b      	str	r3, [r7, #4]
 800749e:	e00c      	b.n	80074ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4a12      	ldr	r2, [pc, #72]	; (80074f4 <prvInitialiseTaskLists+0x60>)
 80074ac:	4413      	add	r3, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fae6 	bl	8005a80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3301      	adds	r3, #1
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b37      	cmp	r3, #55	; 0x37
 80074be:	d9ef      	bls.n	80074a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074c0:	480d      	ldr	r0, [pc, #52]	; (80074f8 <prvInitialiseTaskLists+0x64>)
 80074c2:	f7fe fadd 	bl	8005a80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074c6:	480d      	ldr	r0, [pc, #52]	; (80074fc <prvInitialiseTaskLists+0x68>)
 80074c8:	f7fe fada 	bl	8005a80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074cc:	480c      	ldr	r0, [pc, #48]	; (8007500 <prvInitialiseTaskLists+0x6c>)
 80074ce:	f7fe fad7 	bl	8005a80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074d2:	480c      	ldr	r0, [pc, #48]	; (8007504 <prvInitialiseTaskLists+0x70>)
 80074d4:	f7fe fad4 	bl	8005a80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074d8:	480b      	ldr	r0, [pc, #44]	; (8007508 <prvInitialiseTaskLists+0x74>)
 80074da:	f7fe fad1 	bl	8005a80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074de:	4b0b      	ldr	r3, [pc, #44]	; (800750c <prvInitialiseTaskLists+0x78>)
 80074e0:	4a05      	ldr	r2, [pc, #20]	; (80074f8 <prvInitialiseTaskLists+0x64>)
 80074e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074e4:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <prvInitialiseTaskLists+0x7c>)
 80074e6:	4a05      	ldr	r2, [pc, #20]	; (80074fc <prvInitialiseTaskLists+0x68>)
 80074e8:	601a      	str	r2, [r3, #0]
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200030b4 	.word	0x200030b4
 80074f8:	20003514 	.word	0x20003514
 80074fc:	20003528 	.word	0x20003528
 8007500:	20003544 	.word	0x20003544
 8007504:	20003558 	.word	0x20003558
 8007508:	20003570 	.word	0x20003570
 800750c:	2000353c 	.word	0x2000353c
 8007510:	20003540 	.word	0x20003540

08007514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800751a:	e019      	b.n	8007550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800751c:	f000 ff1a 	bl	8008354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007520:	4b10      	ldr	r3, [pc, #64]	; (8007564 <prvCheckTasksWaitingTermination+0x50>)
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe fb31 	bl	8005b94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <prvCheckTasksWaitingTermination+0x54>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3b01      	subs	r3, #1
 8007538:	4a0b      	ldr	r2, [pc, #44]	; (8007568 <prvCheckTasksWaitingTermination+0x54>)
 800753a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <prvCheckTasksWaitingTermination+0x58>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	4a0a      	ldr	r2, [pc, #40]	; (800756c <prvCheckTasksWaitingTermination+0x58>)
 8007544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007546:	f000 ff35 	bl	80083b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f810 	bl	8007570 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <prvCheckTasksWaitingTermination+0x58>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e1      	bne.n	800751c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20003558 	.word	0x20003558
 8007568:	20003584 	.word	0x20003584
 800756c:	2000356c 	.word	0x2000356c

08007570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3354      	adds	r3, #84	; 0x54
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fbf9 	bl	8008d74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007588:	2b00      	cmp	r3, #0
 800758a:	d108      	bne.n	800759e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f8cd 	bl	8008730 <vPortFree>
				vPortFree( pxTCB );
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f8ca 	bl	8008730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800759c:	e018      	b.n	80075d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d103      	bne.n	80075b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 f8c1 	bl	8008730 <vPortFree>
	}
 80075ae:	e00f      	b.n	80075d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d00a      	beq.n	80075d0 <prvDeleteTCB+0x60>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	60fb      	str	r3, [r7, #12]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <prvDeleteTCB+0x5e>
	}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075de:	4b0c      	ldr	r3, [pc, #48]	; (8007610 <prvResetNextTaskUnblockTime+0x38>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <prvResetNextTaskUnblockTime+0x3c>)
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075f0:	e008      	b.n	8007604 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f2:	4b07      	ldr	r3, [pc, #28]	; (8007610 <prvResetNextTaskUnblockTime+0x38>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4a04      	ldr	r2, [pc, #16]	; (8007614 <prvResetNextTaskUnblockTime+0x3c>)
 8007602:	6013      	str	r3, [r2, #0]
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	2000353c 	.word	0x2000353c
 8007614:	200035a4 	.word	0x200035a4

08007618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800761e:	4b0b      	ldr	r3, [pc, #44]	; (800764c <xTaskGetSchedulerState+0x34>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007626:	2301      	movs	r3, #1
 8007628:	607b      	str	r3, [r7, #4]
 800762a:	e008      	b.n	800763e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800762c:	4b08      	ldr	r3, [pc, #32]	; (8007650 <xTaskGetSchedulerState+0x38>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007634:	2302      	movs	r3, #2
 8007636:	607b      	str	r3, [r7, #4]
 8007638:	e001      	b.n	800763e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800763a:	2300      	movs	r3, #0
 800763c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800763e:	687b      	ldr	r3, [r7, #4]
	}
 8007640:	4618      	mov	r0, r3
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20003590 	.word	0x20003590
 8007650:	200035ac 	.word	0x200035ac

08007654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d056      	beq.n	8007718 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800766a:	4b2e      	ldr	r3, [pc, #184]	; (8007724 <xTaskPriorityDisinherit+0xd0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	429a      	cmp	r2, r3
 8007672:	d00a      	beq.n	800768a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	60fb      	str	r3, [r7, #12]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60bb      	str	r3, [r7, #8]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ac:	1e5a      	subs	r2, r3, #1
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d02c      	beq.n	8007718 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d128      	bne.n	8007718 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fa62 	bl	8005b94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e8:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <xTaskPriorityDisinherit+0xd4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d903      	bls.n	80076f8 <xTaskPriorityDisinherit+0xa4>
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <xTaskPriorityDisinherit+0xd4>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4a09      	ldr	r2, [pc, #36]	; (800772c <xTaskPriorityDisinherit+0xd8>)
 8007706:	441a      	add	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fe f9e3 	bl	8005ada <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007718:	697b      	ldr	r3, [r7, #20]
	}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	200030b0 	.word	0x200030b0
 8007728:	2000358c 	.word	0x2000358c
 800772c:	200030b4 	.word	0x200030b4

08007730 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800773e:	f000 fe09 	bl	8008354 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007742:	4b29      	ldr	r3, [pc, #164]	; (80077e8 <xTaskNotifyWait+0xb8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d01c      	beq.n	800778a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007750:	4b25      	ldr	r3, [pc, #148]	; (80077e8 <xTaskNotifyWait+0xb8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	43d2      	mvns	r2, r2
 800775c:	400a      	ands	r2, r1
 800775e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007762:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <xTaskNotifyWait+0xb8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007772:	2101      	movs	r1, #1
 8007774:	6838      	ldr	r0, [r7, #0]
 8007776:	f000 f91f 	bl	80079b8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800777a:	4b1c      	ldr	r3, [pc, #112]	; (80077ec <xTaskNotifyWait+0xbc>)
 800777c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800778a:	f000 fe13 	bl	80083b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800778e:	f000 fde1 	bl	8008354 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007798:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <xTaskNotifyWait+0xb8>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80077a4:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <xTaskNotifyWait+0xb8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d002      	beq.n	80077b8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e00a      	b.n	80077ce <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <xTaskNotifyWait+0xb8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	43d2      	mvns	r2, r2
 80077c4:	400a      	ands	r2, r1
 80077c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80077ca:	2301      	movs	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <xTaskNotifyWait+0xb8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80077d8:	f000 fdec 	bl	80083b4 <vPortExitCritical>

		return xReturn;
 80077dc:	697b      	ldr	r3, [r7, #20]
	}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200030b0 	.word	0x200030b0
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08e      	sub	sp, #56	; 0x38
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007800:	2301      	movs	r3, #1
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007820:	f000 fe7a 	bl	8008518 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007828:	f3ef 8211 	mrs	r2, BASEPRI
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	623a      	str	r2, [r7, #32]
 800783e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007840:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	2202      	movs	r2, #2
 8007862:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d82f      	bhi.n	80078cc <xTaskGenericNotifyFromISR+0xdc>
 800786c:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <xTaskGenericNotifyFromISR+0x84>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	080078ef 	.word	0x080078ef
 8007878:	08007889 	.word	0x08007889
 800787c:	0800789b 	.word	0x0800789b
 8007880:	080078ab 	.word	0x080078ab
 8007884:	080078b5 	.word	0x080078b5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	431a      	orrs	r2, r3
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007898:	e02c      	b.n	80078f4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80078a8:	e024      	b.n	80078f4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80078b2:	e01f      	b.n	80078f4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80078b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d004      	beq.n	80078c6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80078bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80078c4:	e016      	b.n	80078f4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80078ca:	e013      	b.n	80078f4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d6:	d00c      	beq.n	80078f2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	61bb      	str	r3, [r7, #24]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xTaskGenericNotifyFromISR+0xfc>
					break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <xTaskGenericNotifyFromISR+0x104>
					break;
 80078f2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d146      	bne.n	800798a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	617b      	str	r3, [r7, #20]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800791a:	4b21      	ldr	r3, [pc, #132]	; (80079a0 <xTaskGenericNotifyFromISR+0x1b0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d11d      	bne.n	800795e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe f934 	bl	8005b94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <xTaskGenericNotifyFromISR+0x1b4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d903      	bls.n	8007940 <xTaskGenericNotifyFromISR+0x150>
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <xTaskGenericNotifyFromISR+0x1b4>)
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4a16      	ldr	r2, [pc, #88]	; (80079a8 <xTaskGenericNotifyFromISR+0x1b8>)
 800794e:	441a      	add	r2, r3
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	3304      	adds	r3, #4
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f7fe f8bf 	bl	8005ada <vListInsertEnd>
 800795c:	e005      	b.n	800796a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	3318      	adds	r3, #24
 8007962:	4619      	mov	r1, r3
 8007964:	4811      	ldr	r0, [pc, #68]	; (80079ac <xTaskGenericNotifyFromISR+0x1bc>)
 8007966:	f7fe f8b8 	bl	8005ada <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <xTaskGenericNotifyFromISR+0x1c0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	429a      	cmp	r2, r3
 8007976:	d908      	bls.n	800798a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800797e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007980:	2201      	movs	r2, #1
 8007982:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007984:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <xTaskGenericNotifyFromISR+0x1c4>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f383 8811 	msr	BASEPRI, r3
}
 8007994:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007998:	4618      	mov	r0, r3
 800799a:	3738      	adds	r7, #56	; 0x38
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	200035ac 	.word	0x200035ac
 80079a4:	2000358c 	.word	0x2000358c
 80079a8:	200030b4 	.word	0x200030b4
 80079ac:	20003544 	.word	0x20003544
 80079b0:	200030b0 	.word	0x200030b0
 80079b4:	20003598 	.word	0x20003598

080079b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079c2:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <prvAddCurrentTaskToDelayedList+0x90>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079c8:	4b20      	ldr	r3, [pc, #128]	; (8007a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe f8e0 	bl	8005b94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079da:	d10a      	bne.n	80079f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079e2:	4b1a      	ldr	r3, [pc, #104]	; (8007a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4819      	ldr	r0, [pc, #100]	; (8007a50 <prvAddCurrentTaskToDelayedList+0x98>)
 80079ec:	f7fe f875 	bl	8005ada <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079f0:	e026      	b.n	8007a40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4413      	add	r3, r2
 80079f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079fa:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d209      	bcs.n	8007a1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f7fe f883 	bl	8005b22 <vListInsert>
}
 8007a1c:	e010      	b.n	8007a40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f7fe f879 	bl	8005b22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d202      	bcs.n	8007a40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a3a:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6013      	str	r3, [r2, #0]
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20003588 	.word	0x20003588
 8007a4c:	200030b0 	.word	0x200030b0
 8007a50:	20003570 	.word	0x20003570
 8007a54:	20003540 	.word	0x20003540
 8007a58:	2000353c 	.word	0x2000353c
 8007a5c:	200035a4 	.word	0x200035a4

08007a60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08a      	sub	sp, #40	; 0x28
 8007a64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a6a:	f000 fb07 	bl	800807c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ae0 <xTimerCreateTimerTask+0x80>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d021      	beq.n	8007aba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a7e:	1d3a      	adds	r2, r7, #4
 8007a80:	f107 0108 	add.w	r1, r7, #8
 8007a84:	f107 030c 	add.w	r3, r7, #12
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fd ffdf 	bl	8005a4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	9202      	str	r2, [sp, #8]
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	2302      	movs	r3, #2
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	460a      	mov	r2, r1
 8007aa0:	4910      	ldr	r1, [pc, #64]	; (8007ae4 <xTimerCreateTimerTask+0x84>)
 8007aa2:	4811      	ldr	r0, [pc, #68]	; (8007ae8 <xTimerCreateTimerTask+0x88>)
 8007aa4:	f7fe fefe 	bl	80068a4 <xTaskCreateStatic>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	4a10      	ldr	r2, [pc, #64]	; (8007aec <xTimerCreateTimerTask+0x8c>)
 8007aac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007aae:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <xTimerCreateTimerTask+0x8c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	613b      	str	r3, [r7, #16]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ad6:	697b      	ldr	r3, [r7, #20]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	200035e0 	.word	0x200035e0
 8007ae4:	08009f4c 	.word	0x08009f4c
 8007ae8:	08007c25 	.word	0x08007c25
 8007aec:	200035e4 	.word	0x200035e4

08007af0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	623b      	str	r3, [r7, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b1e:	4b1a      	ldr	r3, [pc, #104]	; (8007b88 <xTimerGenericCommand+0x98>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d02a      	beq.n	8007b7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2b05      	cmp	r3, #5
 8007b36:	dc18      	bgt.n	8007b6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b38:	f7ff fd6e 	bl	8007618 <xTaskGetSchedulerState>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d109      	bne.n	8007b56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <xTimerGenericCommand+0x98>)
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	f107 0110 	add.w	r1, r7, #16
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4e:	f7fe f9f3 	bl	8005f38 <xQueueGenericSend>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24
 8007b54:	e012      	b.n	8007b7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <xTimerGenericCommand+0x98>)
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f107 0110 	add.w	r1, r7, #16
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2200      	movs	r2, #0
 8007b62:	f7fe f9e9 	bl	8005f38 <xQueueGenericSend>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
 8007b68:	e008      	b.n	8007b7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <xTimerGenericCommand+0x98>)
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	f107 0110 	add.w	r1, r7, #16
 8007b72:	2300      	movs	r3, #0
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	f7fe fadd 	bl	8006134 <xQueueGenericSendFromISR>
 8007b7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3728      	adds	r7, #40	; 0x28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	200035e0 	.word	0x200035e0

08007b8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b96:	4b22      	ldr	r3, [pc, #136]	; (8007c20 <prvProcessExpiredTimer+0x94>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fff5 	bl	8005b94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d022      	beq.n	8007bfe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	699a      	ldr	r2, [r3, #24]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	18d1      	adds	r1, r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	6978      	ldr	r0, [r7, #20]
 8007bc6:	f000 f8d1 	bl	8007d6c <prvInsertTimerInActiveList>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01f      	beq.n	8007c10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6978      	ldr	r0, [r7, #20]
 8007bdc:	f7ff ff88 	bl	8007af0 <xTimerGenericCommand>
 8007be0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d113      	bne.n	8007c10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	60fb      	str	r3, [r7, #12]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	6978      	ldr	r0, [r7, #20]
 8007c16:	4798      	blx	r3
}
 8007c18:	bf00      	nop
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	200035d8 	.word	0x200035d8

08007c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c2c:	f107 0308 	add.w	r3, r7, #8
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 f857 	bl	8007ce4 <prvGetNextExpireTime>
 8007c36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f803 	bl	8007c48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c42:	f000 f8d5 	bl	8007df0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c46:	e7f1      	b.n	8007c2c <prvTimerTask+0x8>

08007c48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c52:	f7ff f8f5 	bl	8006e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c56:	f107 0308 	add.w	r3, r7, #8
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f866 	bl	8007d2c <prvSampleTimeNow>
 8007c60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d130      	bne.n	8007cca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10a      	bne.n	8007c84 <prvProcessTimerOrBlockTask+0x3c>
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d806      	bhi.n	8007c84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c76:	f7ff f8f1 	bl	8006e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff ff85 	bl	8007b8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c82:	e024      	b.n	8007cce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <prvProcessTimerOrBlockTask+0x90>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <prvProcessTimerOrBlockTask+0x50>
 8007c94:	2301      	movs	r3, #1
 8007c96:	e000      	b.n	8007c9a <prvProcessTimerOrBlockTask+0x52>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <prvProcessTimerOrBlockTask+0x94>)
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f7fe fdc7 	bl	800683c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007cae:	f7ff f8d5 	bl	8006e5c <xTaskResumeAll>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <prvProcessTimerOrBlockTask+0x98>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
}
 8007cc8:	e001      	b.n	8007cce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cca:	f7ff f8c7 	bl	8006e5c <xTaskResumeAll>
}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200035dc 	.word	0x200035dc
 8007cdc:	200035e0 	.word	0x200035e0
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cec:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <prvGetNextExpireTime+0x44>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <prvGetNextExpireTime+0x16>
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	e000      	b.n	8007cfc <prvGetNextExpireTime+0x18>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d105      	bne.n	8007d14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d08:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <prvGetNextExpireTime+0x44>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e001      	b.n	8007d18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	200035d8 	.word	0x200035d8

08007d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d34:	f7ff f930 	bl	8006f98 <xTaskGetTickCount>
 8007d38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <prvSampleTimeNow+0x3c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d205      	bcs.n	8007d50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d44:	f000 f936 	bl	8007fb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e002      	b.n	8007d56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d56:	4a04      	ldr	r2, [pc, #16]	; (8007d68 <prvSampleTimeNow+0x3c>)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	200035e8 	.word	0x200035e8

08007d6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d812      	bhi.n	8007db8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d302      	bcc.n	8007da6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	e01b      	b.n	8007dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007da6:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <prvInsertTimerInActiveList+0x7c>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4619      	mov	r1, r3
 8007db0:	4610      	mov	r0, r2
 8007db2:	f7fd feb6 	bl	8005b22 <vListInsert>
 8007db6:	e012      	b.n	8007dde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d206      	bcs.n	8007dce <prvInsertTimerInActiveList+0x62>
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d302      	bcc.n	8007dce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e007      	b.n	8007dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dce:	4b07      	ldr	r3, [pc, #28]	; (8007dec <prvInsertTimerInActiveList+0x80>)
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f7fd fea2 	bl	8005b22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dde:	697b      	ldr	r3, [r7, #20]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	200035dc 	.word	0x200035dc
 8007dec:	200035d8 	.word	0x200035d8

08007df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08e      	sub	sp, #56	; 0x38
 8007df4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007df6:	e0ca      	b.n	8007f8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da18      	bge.n	8007e30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dfe:	1d3b      	adds	r3, r7, #4
 8007e00:	3304      	adds	r3, #4
 8007e02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	61fb      	str	r3, [r7, #28]
}
 8007e1c:	bf00      	nop
 8007e1e:	e7fe      	b.n	8007e1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e26:	6850      	ldr	r0, [r2, #4]
 8007e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2a:	6892      	ldr	r2, [r2, #8]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f2c0 80aa 	blt.w	8007f8c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	3304      	adds	r3, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fd fea3 	bl	8005b94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e4e:	463b      	mov	r3, r7
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff ff6b 	bl	8007d2c <prvSampleTimeNow>
 8007e56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	f200 8097 	bhi.w	8007f8e <prvProcessReceivedCommands+0x19e>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <prvProcessReceivedCommands+0x78>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e91 	.word	0x08007e91
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e91 	.word	0x08007e91
 8007e74:	08007f05 	.word	0x08007f05
 8007e78:	08007f19 	.word	0x08007f19
 8007e7c:	08007f63 	.word	0x08007f63
 8007e80:	08007e91 	.word	0x08007e91
 8007e84:	08007e91 	.word	0x08007e91
 8007e88:	08007f05 	.word	0x08007f05
 8007e8c:	08007f19 	.word	0x08007f19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	18d1      	adds	r1, r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb0:	f7ff ff5c 	bl	8007d6c <prvInsertTimerInActiveList>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d069      	beq.n	8007f8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d05e      	beq.n	8007f8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	441a      	add	r2, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee2:	f7ff fe05 	bl	8007af0 <xTimerGenericCommand>
 8007ee6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d14f      	bne.n	8007f8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	61bb      	str	r3, [r7, #24]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f0a:	f023 0301 	bic.w	r3, r3, #1
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f16:	e03a      	b.n	8007f8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	617b      	str	r3, [r7, #20]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	18d1      	adds	r1, r2, r3
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5c:	f7ff ff06 	bl	8007d6c <prvInsertTimerInActiveList>
					break;
 8007f60:	e015      	b.n	8007f8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f72:	f000 fbdd 	bl	8008730 <vPortFree>
 8007f76:	e00a      	b.n	8007f8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f7e:	f023 0301 	bic.w	r3, r3, #1
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f8a:	e000      	b.n	8007f8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <prvProcessReceivedCommands+0x1c0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	1d39      	adds	r1, r7, #4
 8007f94:	2200      	movs	r2, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe f968 	bl	800626c <xQueueReceive>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f47f af2a 	bne.w	8007df8 <prvProcessReceivedCommands+0x8>
	}
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	3730      	adds	r7, #48	; 0x30
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200035e0 	.word	0x200035e0

08007fb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fba:	e048      	b.n	800804e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fbc:	4b2d      	ldr	r3, [pc, #180]	; (8008074 <prvSwitchTimerLists+0xc0>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc6:	4b2b      	ldr	r3, [pc, #172]	; (8008074 <prvSwitchTimerLists+0xc0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fd fddd 	bl	8005b94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d02e      	beq.n	800804e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d90e      	bls.n	8008020 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800800e:	4b19      	ldr	r3, [pc, #100]	; (8008074 <prvSwitchTimerLists+0xc0>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f7fd fd82 	bl	8005b22 <vListInsert>
 800801e:	e016      	b.n	800804e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008020:	2300      	movs	r3, #0
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	2100      	movs	r1, #0
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7ff fd60 	bl	8007af0 <xTimerGenericCommand>
 8008030:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	603b      	str	r3, [r7, #0]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <prvSwitchTimerLists+0xc0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1b1      	bne.n	8007fbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <prvSwitchTimerLists+0xc0>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <prvSwitchTimerLists+0xc4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a04      	ldr	r2, [pc, #16]	; (8008074 <prvSwitchTimerLists+0xc0>)
 8008064:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008066:	4a04      	ldr	r2, [pc, #16]	; (8008078 <prvSwitchTimerLists+0xc4>)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200035d8 	.word	0x200035d8
 8008078:	200035dc 	.word	0x200035dc

0800807c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008082:	f000 f967 	bl	8008354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d120      	bne.n	80080d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800808e:	4814      	ldr	r0, [pc, #80]	; (80080e0 <prvCheckForValidListAndQueue+0x64>)
 8008090:	f7fd fcf6 	bl	8005a80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008094:	4813      	ldr	r0, [pc, #76]	; (80080e4 <prvCheckForValidListAndQueue+0x68>)
 8008096:	f7fd fcf3 	bl	8005a80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800809a:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <prvCheckForValidListAndQueue+0x6c>)
 800809c:	4a10      	ldr	r2, [pc, #64]	; (80080e0 <prvCheckForValidListAndQueue+0x64>)
 800809e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <prvCheckForValidListAndQueue+0x70>)
 80080a2:	4a10      	ldr	r2, [pc, #64]	; (80080e4 <prvCheckForValidListAndQueue+0x68>)
 80080a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80080a6:	2300      	movs	r3, #0
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <prvCheckForValidListAndQueue+0x74>)
 80080ac:	4a11      	ldr	r2, [pc, #68]	; (80080f4 <prvCheckForValidListAndQueue+0x78>)
 80080ae:	2110      	movs	r1, #16
 80080b0:	200a      	movs	r0, #10
 80080b2:	f7fd fe01 	bl	8005cb8 <xQueueGenericCreateStatic>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4a08      	ldr	r2, [pc, #32]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 80080ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	490b      	ldr	r1, [pc, #44]	; (80080f8 <prvCheckForValidListAndQueue+0x7c>)
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fb62 	bl	8006794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080d0:	f000 f970 	bl	80083b4 <vPortExitCritical>
}
 80080d4:	bf00      	nop
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200035e0 	.word	0x200035e0
 80080e0:	200035b0 	.word	0x200035b0
 80080e4:	200035c4 	.word	0x200035c4
 80080e8:	200035d8 	.word	0x200035d8
 80080ec:	200035dc 	.word	0x200035dc
 80080f0:	2000368c 	.word	0x2000368c
 80080f4:	200035ec 	.word	0x200035ec
 80080f8:	08009f54 	.word	0x08009f54

080080fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3b04      	subs	r3, #4
 800810c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3b04      	subs	r3, #4
 800811a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b04      	subs	r3, #4
 800812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800812c:	4a0c      	ldr	r2, [pc, #48]	; (8008160 <pxPortInitialiseStack+0x64>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3b14      	subs	r3, #20
 8008136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b04      	subs	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f06f 0202 	mvn.w	r2, #2
 800814a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3b20      	subs	r3, #32
 8008150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008152:	68fb      	ldr	r3, [r7, #12]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	08008165 	.word	0x08008165

08008164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <prvTaskExitError+0x54>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008176:	d00a      	beq.n	800818e <prvTaskExitError+0x2a>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	60fb      	str	r3, [r7, #12]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <prvTaskExitError+0x28>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60bb      	str	r3, [r7, #8]
}
 80081a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081a2:	bf00      	nop
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0fc      	beq.n	80081a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000014 	.word	0x20000014
 80081bc:	00000000 	.word	0x00000000

080081c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <pxCurrentTCBConst2>)
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	6808      	ldr	r0, [r1, #0]
 80081c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	f380 8809 	msr	PSP, r0
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f380 8811 	msr	BASEPRI, r0
 80081da:	4770      	bx	lr
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst2>:
 80081e0:	200030b0 	.word	0x200030b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081e8:	4808      	ldr	r0, [pc, #32]	; (800820c <prvPortStartFirstTask+0x24>)
 80081ea:	6800      	ldr	r0, [r0, #0]
 80081ec:	6800      	ldr	r0, [r0, #0]
 80081ee:	f380 8808 	msr	MSP, r0
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f380 8814 	msr	CONTROL, r0
 80081fa:	b662      	cpsie	i
 80081fc:	b661      	cpsie	f
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	df00      	svc	0
 8008208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800820a:	bf00      	nop
 800820c:	e000ed08 	.word	0xe000ed08

08008210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008216:	4b46      	ldr	r3, [pc, #280]	; (8008330 <xPortStartScheduler+0x120>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a46      	ldr	r2, [pc, #280]	; (8008334 <xPortStartScheduler+0x124>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d10a      	bne.n	8008236 <xPortStartScheduler+0x26>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	613b      	str	r3, [r7, #16]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008236:	4b3e      	ldr	r3, [pc, #248]	; (8008330 <xPortStartScheduler+0x120>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a3f      	ldr	r2, [pc, #252]	; (8008338 <xPortStartScheduler+0x128>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d10a      	bne.n	8008256 <xPortStartScheduler+0x46>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008256:	4b39      	ldr	r3, [pc, #228]	; (800833c <xPortStartScheduler+0x12c>)
 8008258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	22ff      	movs	r2, #255	; 0xff
 8008266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008278:	b2da      	uxtb	r2, r3
 800827a:	4b31      	ldr	r3, [pc, #196]	; (8008340 <xPortStartScheduler+0x130>)
 800827c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800827e:	4b31      	ldr	r3, [pc, #196]	; (8008344 <xPortStartScheduler+0x134>)
 8008280:	2207      	movs	r2, #7
 8008282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008284:	e009      	b.n	800829a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008286:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <xPortStartScheduler+0x134>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	4a2d      	ldr	r2, [pc, #180]	; (8008344 <xPortStartScheduler+0x134>)
 800828e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	b2db      	uxtb	r3, r3
 8008298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b80      	cmp	r3, #128	; 0x80
 80082a4:	d0ef      	beq.n	8008286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082a6:	4b27      	ldr	r3, [pc, #156]	; (8008344 <xPortStartScheduler+0x134>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f1c3 0307 	rsb	r3, r3, #7
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d00a      	beq.n	80082c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	60bb      	str	r3, [r7, #8]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082c8:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <xPortStartScheduler+0x134>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <xPortStartScheduler+0x134>)
 80082d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <xPortStartScheduler+0x134>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082da:	4a1a      	ldr	r2, [pc, #104]	; (8008344 <xPortStartScheduler+0x134>)
 80082dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082e6:	4b18      	ldr	r3, [pc, #96]	; (8008348 <xPortStartScheduler+0x138>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a17      	ldr	r2, [pc, #92]	; (8008348 <xPortStartScheduler+0x138>)
 80082ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <xPortStartScheduler+0x138>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a14      	ldr	r2, [pc, #80]	; (8008348 <xPortStartScheduler+0x138>)
 80082f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082fe:	f000 f8dd 	bl	80084bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <xPortStartScheduler+0x13c>)
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008308:	f000 f8fc 	bl	8008504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <xPortStartScheduler+0x140>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0f      	ldr	r2, [pc, #60]	; (8008350 <xPortStartScheduler+0x140>)
 8008312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008318:	f7ff ff66 	bl	80081e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800831c:	f7fe ff06 	bl	800712c <vTaskSwitchContext>
	prvTaskExitError();
 8008320:	f7ff ff20 	bl	8008164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000ed00 	.word	0xe000ed00
 8008334:	410fc271 	.word	0x410fc271
 8008338:	410fc270 	.word	0x410fc270
 800833c:	e000e400 	.word	0xe000e400
 8008340:	200036dc 	.word	0x200036dc
 8008344:	200036e0 	.word	0x200036e0
 8008348:	e000ed20 	.word	0xe000ed20
 800834c:	20000014 	.word	0x20000014
 8008350:	e000ef34 	.word	0xe000ef34

08008354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	607b      	str	r3, [r7, #4]
}
 800836c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <vPortEnterCritical+0x58>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a0d      	ldr	r2, [pc, #52]	; (80083ac <vPortEnterCritical+0x58>)
 8008376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <vPortEnterCritical+0x58>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10f      	bne.n	80083a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <vPortEnterCritical+0x5c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	603b      	str	r3, [r7, #0]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <vPortEnterCritical+0x4a>
	}
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	20000014 	.word	0x20000014
 80083b0:	e000ed04 	.word	0xe000ed04

080083b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <vPortExitCritical+0x50>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <vPortExitCritical+0x24>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	607b      	str	r3, [r7, #4]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <vPortExitCritical+0x50>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4a09      	ldr	r2, [pc, #36]	; (8008404 <vPortExitCritical+0x50>)
 80083e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <vPortExitCritical+0x50>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <vPortExitCritical+0x42>
 80083ea:	2300      	movs	r3, #0
 80083ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	f383 8811 	msr	BASEPRI, r3
}
 80083f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20000014 	.word	0x20000014
	...

08008410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008410:	f3ef 8009 	mrs	r0, PSP
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <pxCurrentTCBConst>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	f01e 0f10 	tst.w	lr, #16
 8008420:	bf08      	it	eq
 8008422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	6010      	str	r0, [r2, #0]
 800842c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008434:	f380 8811 	msr	BASEPRI, r0
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f7fe fe74 	bl	800712c <vTaskSwitchContext>
 8008444:	f04f 0000 	mov.w	r0, #0
 8008448:	f380 8811 	msr	BASEPRI, r0
 800844c:	bc09      	pop	{r0, r3}
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	6808      	ldr	r0, [r1, #0]
 8008452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008456:	f01e 0f10 	tst.w	lr, #16
 800845a:	bf08      	it	eq
 800845c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008460:	f380 8809 	msr	PSP, r0
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst>:
 8008470:	200030b0 	.word	0x200030b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	607b      	str	r3, [r7, #4]
}
 8008490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008492:	f7fe fd91 	bl	8006fb8 <xTaskIncrementTick>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800849c:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <xPortSysTickHandler+0x40>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f383 8811 	msr	BASEPRI, r3
}
 80084ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <vPortSetupTimerInterrupt+0x38>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <vPortSetupTimerInterrupt+0x3c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <vPortSetupTimerInterrupt+0x40>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	099b      	lsrs	r3, r3, #6
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <vPortSetupTimerInterrupt+0x44>)
 80084da:	3b01      	subs	r3, #1
 80084dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084de:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084e0:	2207      	movs	r2, #7
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010
 80084f4:	e000e018 	.word	0xe000e018
 80084f8:	20000008 	.word	0x20000008
 80084fc:	10624dd3 	.word	0x10624dd3
 8008500:	e000e014 	.word	0xe000e014

08008504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008514 <vPortEnableVFP+0x10>
 8008508:	6801      	ldr	r1, [r0, #0]
 800850a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800850e:	6001      	str	r1, [r0, #0]
 8008510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008512:	bf00      	nop
 8008514:	e000ed88 	.word	0xe000ed88

08008518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800851e:	f3ef 8305 	mrs	r3, IPSR
 8008522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d914      	bls.n	8008554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <vPortValidateInterruptPriority+0x70>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008534:	4b15      	ldr	r3, [pc, #84]	; (800858c <vPortValidateInterruptPriority+0x74>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	7afa      	ldrb	r2, [r7, #11]
 800853a:	429a      	cmp	r2, r3
 800853c:	d20a      	bcs.n	8008554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	607b      	str	r3, [r7, #4]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <vPortValidateInterruptPriority+0x78>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800855c:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <vPortValidateInterruptPriority+0x7c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d90a      	bls.n	800857a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	603b      	str	r3, [r7, #0]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <vPortValidateInterruptPriority+0x60>
	}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	e000e3f0 	.word	0xe000e3f0
 800858c:	200036dc 	.word	0x200036dc
 8008590:	e000ed0c 	.word	0xe000ed0c
 8008594:	200036e0 	.word	0x200036e0

08008598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085a4:	f7fe fc4c 	bl	8006e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085a8:	4b5b      	ldr	r3, [pc, #364]	; (8008718 <pvPortMalloc+0x180>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085b0:	f000 f920 	bl	80087f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085b4:	4b59      	ldr	r3, [pc, #356]	; (800871c <pvPortMalloc+0x184>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 8093 	bne.w	80086e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01d      	beq.n	8008604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085c8:	2208      	movs	r2, #8
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d014      	beq.n	8008604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f023 0307 	bic.w	r3, r3, #7
 80085e0:	3308      	adds	r3, #8
 80085e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <pvPortMalloc+0x6c>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	617b      	str	r3, [r7, #20]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d06e      	beq.n	80086e8 <pvPortMalloc+0x150>
 800860a:	4b45      	ldr	r3, [pc, #276]	; (8008720 <pvPortMalloc+0x188>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d869      	bhi.n	80086e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008614:	4b43      	ldr	r3, [pc, #268]	; (8008724 <pvPortMalloc+0x18c>)
 8008616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008618:	4b42      	ldr	r3, [pc, #264]	; (8008724 <pvPortMalloc+0x18c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800861e:	e004      	b.n	800862a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d903      	bls.n	800863c <pvPortMalloc+0xa4>
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f1      	bne.n	8008620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800863c:	4b36      	ldr	r3, [pc, #216]	; (8008718 <pvPortMalloc+0x180>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008642:	429a      	cmp	r2, r3
 8008644:	d050      	beq.n	80086e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2208      	movs	r2, #8
 800864c:	4413      	add	r3, r2
 800864e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	2308      	movs	r3, #8
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	429a      	cmp	r2, r3
 8008666:	d91f      	bls.n	80086a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4413      	add	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <pvPortMalloc+0xf8>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	613b      	str	r3, [r7, #16]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	1ad2      	subs	r2, r2, r3
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086a2:	69b8      	ldr	r0, [r7, #24]
 80086a4:	f000 f908 	bl	80088b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086a8:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <pvPortMalloc+0x188>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <pvPortMalloc+0x188>)
 80086b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <pvPortMalloc+0x188>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <pvPortMalloc+0x190>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d203      	bcs.n	80086ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086c2:	4b17      	ldr	r3, [pc, #92]	; (8008720 <pvPortMalloc+0x188>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a18      	ldr	r2, [pc, #96]	; (8008728 <pvPortMalloc+0x190>)
 80086c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	4b13      	ldr	r3, [pc, #76]	; (800871c <pvPortMalloc+0x184>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086de:	4b13      	ldr	r3, [pc, #76]	; (800872c <pvPortMalloc+0x194>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	4a11      	ldr	r2, [pc, #68]	; (800872c <pvPortMalloc+0x194>)
 80086e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086e8:	f7fe fbb8 	bl	8006e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <pvPortMalloc+0x174>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <pvPortMalloc+0x172>
	return pvReturn;
 800870c:	69fb      	ldr	r3, [r7, #28]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3728      	adds	r7, #40	; 0x28
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200042a4 	.word	0x200042a4
 800871c:	200042b8 	.word	0x200042b8
 8008720:	200042a8 	.word	0x200042a8
 8008724:	2000429c 	.word	0x2000429c
 8008728:	200042ac 	.word	0x200042ac
 800872c:	200042b0 	.word	0x200042b0

08008730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d04d      	beq.n	80087de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008742:	2308      	movs	r3, #8
 8008744:	425b      	negs	r3, r3
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4413      	add	r3, r2
 800874a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <vPortFree+0xb8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <vPortFree+0x44>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	60fb      	str	r3, [r7, #12]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <vPortFree+0x62>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60bb      	str	r3, [r7, #8]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <vPortFree+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01e      	beq.n	80087de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11a      	bne.n	80087de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <vPortFree+0xb8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b8:	f7fe fb42 	bl	8006e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <vPortFree+0xbc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a09      	ldr	r2, [pc, #36]	; (80087ec <vPortFree+0xbc>)
 80087c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ca:	6938      	ldr	r0, [r7, #16]
 80087cc:	f000 f874 	bl	80088b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <vPortFree+0xc0>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <vPortFree+0xc0>)
 80087d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087da:	f7fe fb3f 	bl	8006e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087de:	bf00      	nop
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	200042b8 	.word	0x200042b8
 80087ec:	200042a8 	.word	0x200042a8
 80087f0:	200042b4 	.word	0x200042b4

080087f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80087fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <prvHeapInit+0xac>)
 8008802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3307      	adds	r3, #7
 8008812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <prvHeapInit+0xac>)
 8008824:	4413      	add	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <prvHeapInit+0xb0>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008832:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <prvHeapInit+0xb0>)
 8008834:	2200      	movs	r2, #0
 8008836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008840:	2208      	movs	r2, #8
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0307 	bic.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a15      	ldr	r2, [pc, #84]	; (80088a8 <prvHeapInit+0xb4>)
 8008854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <prvHeapInit+0xb4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2200      	movs	r2, #0
 800885c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <prvHeapInit+0xb4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008874:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <prvHeapInit+0xb4>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <prvHeapInit+0xb8>)
 8008882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <prvHeapInit+0xbc>)
 800888a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800888c:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <prvHeapInit+0xc0>)
 800888e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	200036e4 	.word	0x200036e4
 80088a4:	2000429c 	.word	0x2000429c
 80088a8:	200042a4 	.word	0x200042a4
 80088ac:	200042ac 	.word	0x200042ac
 80088b0:	200042a8 	.word	0x200042a8
 80088b4:	200042b8 	.word	0x200042b8

080088b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <prvInsertBlockIntoFreeList+0xac>)
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e002      	b.n	80088cc <prvInsertBlockIntoFreeList+0x14>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d8f7      	bhi.n	80088c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d108      	bne.n	80088fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d118      	bne.n	8008940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d00d      	beq.n	8008936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	441a      	add	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e008      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e003      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d002      	beq.n	8008956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	2000429c 	.word	0x2000429c
 8008968:	200042a4 	.word	0x200042a4

0800896c <__errno>:
 800896c:	4b01      	ldr	r3, [pc, #4]	; (8008974 <__errno+0x8>)
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000018 	.word	0x20000018

08008978 <std>:
 8008978:	2300      	movs	r3, #0
 800897a:	b510      	push	{r4, lr}
 800897c:	4604      	mov	r4, r0
 800897e:	e9c0 3300 	strd	r3, r3, [r0]
 8008982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008986:	6083      	str	r3, [r0, #8]
 8008988:	8181      	strh	r1, [r0, #12]
 800898a:	6643      	str	r3, [r0, #100]	; 0x64
 800898c:	81c2      	strh	r2, [r0, #14]
 800898e:	6183      	str	r3, [r0, #24]
 8008990:	4619      	mov	r1, r3
 8008992:	2208      	movs	r2, #8
 8008994:	305c      	adds	r0, #92	; 0x5c
 8008996:	f000 f92a 	bl	8008bee <memset>
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <std+0x38>)
 800899c:	6263      	str	r3, [r4, #36]	; 0x24
 800899e:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <std+0x3c>)
 80089a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80089a2:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <std+0x40>)
 80089a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089a6:	4b05      	ldr	r3, [pc, #20]	; (80089bc <std+0x44>)
 80089a8:	6224      	str	r4, [r4, #32]
 80089aa:	6323      	str	r3, [r4, #48]	; 0x30
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	bf00      	nop
 80089b0:	08008eb5 	.word	0x08008eb5
 80089b4:	08008ed7 	.word	0x08008ed7
 80089b8:	08008f0f 	.word	0x08008f0f
 80089bc:	08008f33 	.word	0x08008f33

080089c0 <_cleanup_r>:
 80089c0:	4901      	ldr	r1, [pc, #4]	; (80089c8 <_cleanup_r+0x8>)
 80089c2:	f000 b8af 	b.w	8008b24 <_fwalk_reent>
 80089c6:	bf00      	nop
 80089c8:	080090b1 	.word	0x080090b1

080089cc <__sfmoreglue>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	2268      	movs	r2, #104	; 0x68
 80089d0:	1e4d      	subs	r5, r1, #1
 80089d2:	4355      	muls	r5, r2
 80089d4:	460e      	mov	r6, r1
 80089d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089da:	f000 f931 	bl	8008c40 <_malloc_r>
 80089de:	4604      	mov	r4, r0
 80089e0:	b140      	cbz	r0, 80089f4 <__sfmoreglue+0x28>
 80089e2:	2100      	movs	r1, #0
 80089e4:	e9c0 1600 	strd	r1, r6, [r0]
 80089e8:	300c      	adds	r0, #12
 80089ea:	60a0      	str	r0, [r4, #8]
 80089ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089f0:	f000 f8fd 	bl	8008bee <memset>
 80089f4:	4620      	mov	r0, r4
 80089f6:	bd70      	pop	{r4, r5, r6, pc}

080089f8 <__sfp_lock_acquire>:
 80089f8:	4801      	ldr	r0, [pc, #4]	; (8008a00 <__sfp_lock_acquire+0x8>)
 80089fa:	f000 b8d8 	b.w	8008bae <__retarget_lock_acquire_recursive>
 80089fe:	bf00      	nop
 8008a00:	200042bd 	.word	0x200042bd

08008a04 <__sfp_lock_release>:
 8008a04:	4801      	ldr	r0, [pc, #4]	; (8008a0c <__sfp_lock_release+0x8>)
 8008a06:	f000 b8d3 	b.w	8008bb0 <__retarget_lock_release_recursive>
 8008a0a:	bf00      	nop
 8008a0c:	200042bd 	.word	0x200042bd

08008a10 <__sinit_lock_acquire>:
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <__sinit_lock_acquire+0x8>)
 8008a12:	f000 b8cc 	b.w	8008bae <__retarget_lock_acquire_recursive>
 8008a16:	bf00      	nop
 8008a18:	200042be 	.word	0x200042be

08008a1c <__sinit_lock_release>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	; (8008a24 <__sinit_lock_release+0x8>)
 8008a1e:	f000 b8c7 	b.w	8008bb0 <__retarget_lock_release_recursive>
 8008a22:	bf00      	nop
 8008a24:	200042be 	.word	0x200042be

08008a28 <__sinit>:
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	f7ff fff0 	bl	8008a10 <__sinit_lock_acquire>
 8008a30:	69a3      	ldr	r3, [r4, #24]
 8008a32:	b11b      	cbz	r3, 8008a3c <__sinit+0x14>
 8008a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a38:	f7ff bff0 	b.w	8008a1c <__sinit_lock_release>
 8008a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a40:	6523      	str	r3, [r4, #80]	; 0x50
 8008a42:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <__sinit+0x68>)
 8008a44:	4a13      	ldr	r2, [pc, #76]	; (8008a94 <__sinit+0x6c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	bf04      	itt	eq
 8008a4e:	2301      	moveq	r3, #1
 8008a50:	61a3      	streq	r3, [r4, #24]
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 f820 	bl	8008a98 <__sfp>
 8008a58:	6060      	str	r0, [r4, #4]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 f81c 	bl	8008a98 <__sfp>
 8008a60:	60a0      	str	r0, [r4, #8]
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 f818 	bl	8008a98 <__sfp>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	60e0      	str	r0, [r4, #12]
 8008a6c:	2104      	movs	r1, #4
 8008a6e:	6860      	ldr	r0, [r4, #4]
 8008a70:	f7ff ff82 	bl	8008978 <std>
 8008a74:	68a0      	ldr	r0, [r4, #8]
 8008a76:	2201      	movs	r2, #1
 8008a78:	2109      	movs	r1, #9
 8008a7a:	f7ff ff7d 	bl	8008978 <std>
 8008a7e:	68e0      	ldr	r0, [r4, #12]
 8008a80:	2202      	movs	r2, #2
 8008a82:	2112      	movs	r1, #18
 8008a84:	f7ff ff78 	bl	8008978 <std>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	61a3      	str	r3, [r4, #24]
 8008a8c:	e7d2      	b.n	8008a34 <__sinit+0xc>
 8008a8e:	bf00      	nop
 8008a90:	0800a098 	.word	0x0800a098
 8008a94:	080089c1 	.word	0x080089c1

08008a98 <__sfp>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	f7ff ffac 	bl	80089f8 <__sfp_lock_acquire>
 8008aa0:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <__sfp+0x84>)
 8008aa2:	681e      	ldr	r6, [r3, #0]
 8008aa4:	69b3      	ldr	r3, [r6, #24]
 8008aa6:	b913      	cbnz	r3, 8008aae <__sfp+0x16>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff ffbd 	bl	8008a28 <__sinit>
 8008aae:	3648      	adds	r6, #72	; 0x48
 8008ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	d503      	bpl.n	8008ac0 <__sfp+0x28>
 8008ab8:	6833      	ldr	r3, [r6, #0]
 8008aba:	b30b      	cbz	r3, 8008b00 <__sfp+0x68>
 8008abc:	6836      	ldr	r6, [r6, #0]
 8008abe:	e7f7      	b.n	8008ab0 <__sfp+0x18>
 8008ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ac4:	b9d5      	cbnz	r5, 8008afc <__sfp+0x64>
 8008ac6:	4b16      	ldr	r3, [pc, #88]	; (8008b20 <__sfp+0x88>)
 8008ac8:	60e3      	str	r3, [r4, #12]
 8008aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ace:	6665      	str	r5, [r4, #100]	; 0x64
 8008ad0:	f000 f86c 	bl	8008bac <__retarget_lock_init_recursive>
 8008ad4:	f7ff ff96 	bl	8008a04 <__sfp_lock_release>
 8008ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ae0:	6025      	str	r5, [r4, #0]
 8008ae2:	61a5      	str	r5, [r4, #24]
 8008ae4:	2208      	movs	r2, #8
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008aec:	f000 f87f 	bl	8008bee <memset>
 8008af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008af8:	4620      	mov	r0, r4
 8008afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afc:	3468      	adds	r4, #104	; 0x68
 8008afe:	e7d9      	b.n	8008ab4 <__sfp+0x1c>
 8008b00:	2104      	movs	r1, #4
 8008b02:	4638      	mov	r0, r7
 8008b04:	f7ff ff62 	bl	80089cc <__sfmoreglue>
 8008b08:	4604      	mov	r4, r0
 8008b0a:	6030      	str	r0, [r6, #0]
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d1d5      	bne.n	8008abc <__sfp+0x24>
 8008b10:	f7ff ff78 	bl	8008a04 <__sfp_lock_release>
 8008b14:	230c      	movs	r3, #12
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	e7ee      	b.n	8008af8 <__sfp+0x60>
 8008b1a:	bf00      	nop
 8008b1c:	0800a098 	.word	0x0800a098
 8008b20:	ffff0001 	.word	0xffff0001

08008b24 <_fwalk_reent>:
 8008b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b28:	4606      	mov	r6, r0
 8008b2a:	4688      	mov	r8, r1
 8008b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b30:	2700      	movs	r7, #0
 8008b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b36:	f1b9 0901 	subs.w	r9, r9, #1
 8008b3a:	d505      	bpl.n	8008b48 <_fwalk_reent+0x24>
 8008b3c:	6824      	ldr	r4, [r4, #0]
 8008b3e:	2c00      	cmp	r4, #0
 8008b40:	d1f7      	bne.n	8008b32 <_fwalk_reent+0xe>
 8008b42:	4638      	mov	r0, r7
 8008b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b48:	89ab      	ldrh	r3, [r5, #12]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d907      	bls.n	8008b5e <_fwalk_reent+0x3a>
 8008b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b52:	3301      	adds	r3, #1
 8008b54:	d003      	beq.n	8008b5e <_fwalk_reent+0x3a>
 8008b56:	4629      	mov	r1, r5
 8008b58:	4630      	mov	r0, r6
 8008b5a:	47c0      	blx	r8
 8008b5c:	4307      	orrs	r7, r0
 8008b5e:	3568      	adds	r5, #104	; 0x68
 8008b60:	e7e9      	b.n	8008b36 <_fwalk_reent+0x12>
	...

08008b64 <__libc_init_array>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	4d0d      	ldr	r5, [pc, #52]	; (8008b9c <__libc_init_array+0x38>)
 8008b68:	4c0d      	ldr	r4, [pc, #52]	; (8008ba0 <__libc_init_array+0x3c>)
 8008b6a:	1b64      	subs	r4, r4, r5
 8008b6c:	10a4      	asrs	r4, r4, #2
 8008b6e:	2600      	movs	r6, #0
 8008b70:	42a6      	cmp	r6, r4
 8008b72:	d109      	bne.n	8008b88 <__libc_init_array+0x24>
 8008b74:	4d0b      	ldr	r5, [pc, #44]	; (8008ba4 <__libc_init_array+0x40>)
 8008b76:	4c0c      	ldr	r4, [pc, #48]	; (8008ba8 <__libc_init_array+0x44>)
 8008b78:	f001 f936 	bl	8009de8 <_init>
 8008b7c:	1b64      	subs	r4, r4, r5
 8008b7e:	10a4      	asrs	r4, r4, #2
 8008b80:	2600      	movs	r6, #0
 8008b82:	42a6      	cmp	r6, r4
 8008b84:	d105      	bne.n	8008b92 <__libc_init_array+0x2e>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8c:	4798      	blx	r3
 8008b8e:	3601      	adds	r6, #1
 8008b90:	e7ee      	b.n	8008b70 <__libc_init_array+0xc>
 8008b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b96:	4798      	blx	r3
 8008b98:	3601      	adds	r6, #1
 8008b9a:	e7f2      	b.n	8008b82 <__libc_init_array+0x1e>
 8008b9c:	0800a0d8 	.word	0x0800a0d8
 8008ba0:	0800a0d8 	.word	0x0800a0d8
 8008ba4:	0800a0d8 	.word	0x0800a0d8
 8008ba8:	0800a0dc 	.word	0x0800a0dc

08008bac <__retarget_lock_init_recursive>:
 8008bac:	4770      	bx	lr

08008bae <__retarget_lock_acquire_recursive>:
 8008bae:	4770      	bx	lr

08008bb0 <__retarget_lock_release_recursive>:
 8008bb0:	4770      	bx	lr

08008bb2 <memcmp>:
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	3901      	subs	r1, #1
 8008bb6:	4402      	add	r2, r0
 8008bb8:	4290      	cmp	r0, r2
 8008bba:	d101      	bne.n	8008bc0 <memcmp+0xe>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e005      	b.n	8008bcc <memcmp+0x1a>
 8008bc0:	7803      	ldrb	r3, [r0, #0]
 8008bc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	d001      	beq.n	8008bce <memcmp+0x1c>
 8008bca:	1b18      	subs	r0, r3, r4
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	3001      	adds	r0, #1
 8008bd0:	e7f2      	b.n	8008bb8 <memcmp+0x6>

08008bd2 <memcpy>:
 8008bd2:	440a      	add	r2, r1
 8008bd4:	4291      	cmp	r1, r2
 8008bd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008bda:	d100      	bne.n	8008bde <memcpy+0xc>
 8008bdc:	4770      	bx	lr
 8008bde:	b510      	push	{r4, lr}
 8008be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008be8:	4291      	cmp	r1, r2
 8008bea:	d1f9      	bne.n	8008be0 <memcpy+0xe>
 8008bec:	bd10      	pop	{r4, pc}

08008bee <memset>:
 8008bee:	4402      	add	r2, r0
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d100      	bne.n	8008bf8 <memset+0xa>
 8008bf6:	4770      	bx	lr
 8008bf8:	f803 1b01 	strb.w	r1, [r3], #1
 8008bfc:	e7f9      	b.n	8008bf2 <memset+0x4>
	...

08008c00 <sbrk_aligned>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4e0e      	ldr	r6, [pc, #56]	; (8008c3c <sbrk_aligned+0x3c>)
 8008c04:	460c      	mov	r4, r1
 8008c06:	6831      	ldr	r1, [r6, #0]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	b911      	cbnz	r1, 8008c12 <sbrk_aligned+0x12>
 8008c0c:	f000 f90e 	bl	8008e2c <_sbrk_r>
 8008c10:	6030      	str	r0, [r6, #0]
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 f909 	bl	8008e2c <_sbrk_r>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d00a      	beq.n	8008c34 <sbrk_aligned+0x34>
 8008c1e:	1cc4      	adds	r4, r0, #3
 8008c20:	f024 0403 	bic.w	r4, r4, #3
 8008c24:	42a0      	cmp	r0, r4
 8008c26:	d007      	beq.n	8008c38 <sbrk_aligned+0x38>
 8008c28:	1a21      	subs	r1, r4, r0
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 f8fe 	bl	8008e2c <_sbrk_r>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d101      	bne.n	8008c38 <sbrk_aligned+0x38>
 8008c34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c38:	4620      	mov	r0, r4
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	200042c4 	.word	0x200042c4

08008c40 <_malloc_r>:
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	1ccd      	adds	r5, r1, #3
 8008c46:	f025 0503 	bic.w	r5, r5, #3
 8008c4a:	3508      	adds	r5, #8
 8008c4c:	2d0c      	cmp	r5, #12
 8008c4e:	bf38      	it	cc
 8008c50:	250c      	movcc	r5, #12
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	4607      	mov	r7, r0
 8008c56:	db01      	blt.n	8008c5c <_malloc_r+0x1c>
 8008c58:	42a9      	cmp	r1, r5
 8008c5a:	d905      	bls.n	8008c68 <_malloc_r+0x28>
 8008c5c:	230c      	movs	r3, #12
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	2600      	movs	r6, #0
 8008c62:	4630      	mov	r0, r6
 8008c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c68:	4e2e      	ldr	r6, [pc, #184]	; (8008d24 <_malloc_r+0xe4>)
 8008c6a:	f000 fa6f 	bl	800914c <__malloc_lock>
 8008c6e:	6833      	ldr	r3, [r6, #0]
 8008c70:	461c      	mov	r4, r3
 8008c72:	bb34      	cbnz	r4, 8008cc2 <_malloc_r+0x82>
 8008c74:	4629      	mov	r1, r5
 8008c76:	4638      	mov	r0, r7
 8008c78:	f7ff ffc2 	bl	8008c00 <sbrk_aligned>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	4604      	mov	r4, r0
 8008c80:	d14d      	bne.n	8008d1e <_malloc_r+0xde>
 8008c82:	6834      	ldr	r4, [r6, #0]
 8008c84:	4626      	mov	r6, r4
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	d140      	bne.n	8008d0c <_malloc_r+0xcc>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4638      	mov	r0, r7
 8008c90:	eb04 0803 	add.w	r8, r4, r3
 8008c94:	f000 f8ca 	bl	8008e2c <_sbrk_r>
 8008c98:	4580      	cmp	r8, r0
 8008c9a:	d13a      	bne.n	8008d12 <_malloc_r+0xd2>
 8008c9c:	6821      	ldr	r1, [r4, #0]
 8008c9e:	3503      	adds	r5, #3
 8008ca0:	1a6d      	subs	r5, r5, r1
 8008ca2:	f025 0503 	bic.w	r5, r5, #3
 8008ca6:	3508      	adds	r5, #8
 8008ca8:	2d0c      	cmp	r5, #12
 8008caa:	bf38      	it	cc
 8008cac:	250c      	movcc	r5, #12
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff ffa5 	bl	8008c00 <sbrk_aligned>
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d02b      	beq.n	8008d12 <_malloc_r+0xd2>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	442b      	add	r3, r5
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	e00e      	b.n	8008ce0 <_malloc_r+0xa0>
 8008cc2:	6822      	ldr	r2, [r4, #0]
 8008cc4:	1b52      	subs	r2, r2, r5
 8008cc6:	d41e      	bmi.n	8008d06 <_malloc_r+0xc6>
 8008cc8:	2a0b      	cmp	r2, #11
 8008cca:	d916      	bls.n	8008cfa <_malloc_r+0xba>
 8008ccc:	1961      	adds	r1, r4, r5
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	6025      	str	r5, [r4, #0]
 8008cd2:	bf18      	it	ne
 8008cd4:	6059      	strne	r1, [r3, #4]
 8008cd6:	6863      	ldr	r3, [r4, #4]
 8008cd8:	bf08      	it	eq
 8008cda:	6031      	streq	r1, [r6, #0]
 8008cdc:	5162      	str	r2, [r4, r5]
 8008cde:	604b      	str	r3, [r1, #4]
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f104 060b 	add.w	r6, r4, #11
 8008ce6:	f000 fa37 	bl	8009158 <__malloc_unlock>
 8008cea:	f026 0607 	bic.w	r6, r6, #7
 8008cee:	1d23      	adds	r3, r4, #4
 8008cf0:	1af2      	subs	r2, r6, r3
 8008cf2:	d0b6      	beq.n	8008c62 <_malloc_r+0x22>
 8008cf4:	1b9b      	subs	r3, r3, r6
 8008cf6:	50a3      	str	r3, [r4, r2]
 8008cf8:	e7b3      	b.n	8008c62 <_malloc_r+0x22>
 8008cfa:	6862      	ldr	r2, [r4, #4]
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	bf0c      	ite	eq
 8008d00:	6032      	streq	r2, [r6, #0]
 8008d02:	605a      	strne	r2, [r3, #4]
 8008d04:	e7ec      	b.n	8008ce0 <_malloc_r+0xa0>
 8008d06:	4623      	mov	r3, r4
 8008d08:	6864      	ldr	r4, [r4, #4]
 8008d0a:	e7b2      	b.n	8008c72 <_malloc_r+0x32>
 8008d0c:	4634      	mov	r4, r6
 8008d0e:	6876      	ldr	r6, [r6, #4]
 8008d10:	e7b9      	b.n	8008c86 <_malloc_r+0x46>
 8008d12:	230c      	movs	r3, #12
 8008d14:	603b      	str	r3, [r7, #0]
 8008d16:	4638      	mov	r0, r7
 8008d18:	f000 fa1e 	bl	8009158 <__malloc_unlock>
 8008d1c:	e7a1      	b.n	8008c62 <_malloc_r+0x22>
 8008d1e:	6025      	str	r5, [r4, #0]
 8008d20:	e7de      	b.n	8008ce0 <_malloc_r+0xa0>
 8008d22:	bf00      	nop
 8008d24:	200042c0 	.word	0x200042c0

08008d28 <iprintf>:
 8008d28:	b40f      	push	{r0, r1, r2, r3}
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <iprintf+0x2c>)
 8008d2c:	b513      	push	{r0, r1, r4, lr}
 8008d2e:	681c      	ldr	r4, [r3, #0]
 8008d30:	b124      	cbz	r4, 8008d3c <iprintf+0x14>
 8008d32:	69a3      	ldr	r3, [r4, #24]
 8008d34:	b913      	cbnz	r3, 8008d3c <iprintf+0x14>
 8008d36:	4620      	mov	r0, r4
 8008d38:	f7ff fe76 	bl	8008a28 <__sinit>
 8008d3c:	ab05      	add	r3, sp, #20
 8008d3e:	9a04      	ldr	r2, [sp, #16]
 8008d40:	68a1      	ldr	r1, [r4, #8]
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	4620      	mov	r0, r4
 8008d46:	f000 fbdf 	bl	8009508 <_vfiprintf_r>
 8008d4a:	b002      	add	sp, #8
 8008d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d50:	b004      	add	sp, #16
 8008d52:	4770      	bx	lr
 8008d54:	20000018 	.word	0x20000018

08008d58 <cleanup_glue>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	6809      	ldr	r1, [r1, #0]
 8008d5e:	4605      	mov	r5, r0
 8008d60:	b109      	cbz	r1, 8008d66 <cleanup_glue+0xe>
 8008d62:	f7ff fff9 	bl	8008d58 <cleanup_glue>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d6e:	f000 b9f9 	b.w	8009164 <_free_r>
	...

08008d74 <_reclaim_reent>:
 8008d74:	4b2c      	ldr	r3, [pc, #176]	; (8008e28 <_reclaim_reent+0xb4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4283      	cmp	r3, r0
 8008d7a:	b570      	push	{r4, r5, r6, lr}
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	d051      	beq.n	8008e24 <_reclaim_reent+0xb0>
 8008d80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d82:	b143      	cbz	r3, 8008d96 <_reclaim_reent+0x22>
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d14a      	bne.n	8008e20 <_reclaim_reent+0xac>
 8008d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d8c:	6819      	ldr	r1, [r3, #0]
 8008d8e:	b111      	cbz	r1, 8008d96 <_reclaim_reent+0x22>
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 f9e7 	bl	8009164 <_free_r>
 8008d96:	6961      	ldr	r1, [r4, #20]
 8008d98:	b111      	cbz	r1, 8008da0 <_reclaim_reent+0x2c>
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f9e2 	bl	8009164 <_free_r>
 8008da0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008da2:	b111      	cbz	r1, 8008daa <_reclaim_reent+0x36>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 f9dd 	bl	8009164 <_free_r>
 8008daa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008dac:	b111      	cbz	r1, 8008db4 <_reclaim_reent+0x40>
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 f9d8 	bl	8009164 <_free_r>
 8008db4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008db6:	b111      	cbz	r1, 8008dbe <_reclaim_reent+0x4a>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 f9d3 	bl	8009164 <_free_r>
 8008dbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008dc0:	b111      	cbz	r1, 8008dc8 <_reclaim_reent+0x54>
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 f9ce 	bl	8009164 <_free_r>
 8008dc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008dca:	b111      	cbz	r1, 8008dd2 <_reclaim_reent+0x5e>
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 f9c9 	bl	8009164 <_free_r>
 8008dd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008dd4:	b111      	cbz	r1, 8008ddc <_reclaim_reent+0x68>
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 f9c4 	bl	8009164 <_free_r>
 8008ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dde:	b111      	cbz	r1, 8008de6 <_reclaim_reent+0x72>
 8008de0:	4620      	mov	r0, r4
 8008de2:	f000 f9bf 	bl	8009164 <_free_r>
 8008de6:	69a3      	ldr	r3, [r4, #24]
 8008de8:	b1e3      	cbz	r3, 8008e24 <_reclaim_reent+0xb0>
 8008dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008dec:	4620      	mov	r0, r4
 8008dee:	4798      	blx	r3
 8008df0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008df2:	b1b9      	cbz	r1, 8008e24 <_reclaim_reent+0xb0>
 8008df4:	4620      	mov	r0, r4
 8008df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dfa:	f7ff bfad 	b.w	8008d58 <cleanup_glue>
 8008dfe:	5949      	ldr	r1, [r1, r5]
 8008e00:	b941      	cbnz	r1, 8008e14 <_reclaim_reent+0xa0>
 8008e02:	3504      	adds	r5, #4
 8008e04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e06:	2d80      	cmp	r5, #128	; 0x80
 8008e08:	68d9      	ldr	r1, [r3, #12]
 8008e0a:	d1f8      	bne.n	8008dfe <_reclaim_reent+0x8a>
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 f9a9 	bl	8009164 <_free_r>
 8008e12:	e7ba      	b.n	8008d8a <_reclaim_reent+0x16>
 8008e14:	680e      	ldr	r6, [r1, #0]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 f9a4 	bl	8009164 <_free_r>
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	e7ef      	b.n	8008e00 <_reclaim_reent+0x8c>
 8008e20:	2500      	movs	r5, #0
 8008e22:	e7ef      	b.n	8008e04 <_reclaim_reent+0x90>
 8008e24:	bd70      	pop	{r4, r5, r6, pc}
 8008e26:	bf00      	nop
 8008e28:	20000018 	.word	0x20000018

08008e2c <_sbrk_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d06      	ldr	r5, [pc, #24]	; (8008e48 <_sbrk_r+0x1c>)
 8008e30:	2300      	movs	r3, #0
 8008e32:	4604      	mov	r4, r0
 8008e34:	4608      	mov	r0, r1
 8008e36:	602b      	str	r3, [r5, #0]
 8008e38:	f7f8 fad0 	bl	80013dc <_sbrk>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_sbrk_r+0x1a>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_sbrk_r+0x1a>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	200042c8 	.word	0x200042c8

08008e4c <sniprintf>:
 8008e4c:	b40c      	push	{r2, r3}
 8008e4e:	b530      	push	{r4, r5, lr}
 8008e50:	4b17      	ldr	r3, [pc, #92]	; (8008eb0 <sniprintf+0x64>)
 8008e52:	1e0c      	subs	r4, r1, #0
 8008e54:	681d      	ldr	r5, [r3, #0]
 8008e56:	b09d      	sub	sp, #116	; 0x74
 8008e58:	da08      	bge.n	8008e6c <sniprintf+0x20>
 8008e5a:	238b      	movs	r3, #139	; 0x8b
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e62:	b01d      	add	sp, #116	; 0x74
 8008e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e68:	b002      	add	sp, #8
 8008e6a:	4770      	bx	lr
 8008e6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e74:	bf14      	ite	ne
 8008e76:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008e7a:	4623      	moveq	r3, r4
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	9307      	str	r3, [sp, #28]
 8008e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e84:	9002      	str	r0, [sp, #8]
 8008e86:	9006      	str	r0, [sp, #24]
 8008e88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e8e:	ab21      	add	r3, sp, #132	; 0x84
 8008e90:	a902      	add	r1, sp, #8
 8008e92:	4628      	mov	r0, r5
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	f000 fa0d 	bl	80092b4 <_svfiprintf_r>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	bfbc      	itt	lt
 8008e9e:	238b      	movlt	r3, #139	; 0x8b
 8008ea0:	602b      	strlt	r3, [r5, #0]
 8008ea2:	2c00      	cmp	r4, #0
 8008ea4:	d0dd      	beq.n	8008e62 <sniprintf+0x16>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	e7d9      	b.n	8008e62 <sniprintf+0x16>
 8008eae:	bf00      	nop
 8008eb0:	20000018 	.word	0x20000018

08008eb4 <__sread>:
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebc:	f000 fde8 	bl	8009a90 <_read_r>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	bfab      	itete	ge
 8008ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ec8:	181b      	addge	r3, r3, r0
 8008eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ece:	bfac      	ite	ge
 8008ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ed2:	81a3      	strhlt	r3, [r4, #12]
 8008ed4:	bd10      	pop	{r4, pc}

08008ed6 <__swrite>:
 8008ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	461f      	mov	r7, r3
 8008edc:	898b      	ldrh	r3, [r1, #12]
 8008ede:	05db      	lsls	r3, r3, #23
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	d505      	bpl.n	8008ef4 <__swrite+0x1e>
 8008ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eec:	2302      	movs	r3, #2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f000 f91a 	bl	8009128 <_lseek_r>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	4632      	mov	r2, r6
 8008f02:	463b      	mov	r3, r7
 8008f04:	4628      	mov	r0, r5
 8008f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	f000 b829 	b.w	8008f60 <_write_r>

08008f0e <__sseek>:
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	460c      	mov	r4, r1
 8008f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f16:	f000 f907 	bl	8009128 <_lseek_r>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	bf15      	itete	ne
 8008f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f2a:	81a3      	strheq	r3, [r4, #12]
 8008f2c:	bf18      	it	ne
 8008f2e:	81a3      	strhne	r3, [r4, #12]
 8008f30:	bd10      	pop	{r4, pc}

08008f32 <__sclose>:
 8008f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f36:	f000 b825 	b.w	8008f84 <_close_r>

08008f3a <strncpy>:
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	3901      	subs	r1, #1
 8008f3e:	4603      	mov	r3, r0
 8008f40:	b132      	cbz	r2, 8008f50 <strncpy+0x16>
 8008f42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f46:	f803 4b01 	strb.w	r4, [r3], #1
 8008f4a:	3a01      	subs	r2, #1
 8008f4c:	2c00      	cmp	r4, #0
 8008f4e:	d1f7      	bne.n	8008f40 <strncpy+0x6>
 8008f50:	441a      	add	r2, r3
 8008f52:	2100      	movs	r1, #0
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d100      	bne.n	8008f5a <strncpy+0x20>
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5e:	e7f9      	b.n	8008f54 <strncpy+0x1a>

08008f60 <_write_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	; (8008f80 <_write_r+0x20>)
 8008f64:	4604      	mov	r4, r0
 8008f66:	4608      	mov	r0, r1
 8008f68:	4611      	mov	r1, r2
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f7f8 f9e3 	bl	800133a <_write>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_write_r+0x1e>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_write_r+0x1e>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	200042c8 	.word	0x200042c8

08008f84 <_close_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_close_r+0x1c>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	f7f8 f9ef 	bl	8001372 <_close>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_close_r+0x1a>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_close_r+0x1a>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	200042c8 	.word	0x200042c8

08008fa4 <__sflush_r>:
 8008fa4:	898a      	ldrh	r2, [r1, #12]
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	4605      	mov	r5, r0
 8008fac:	0710      	lsls	r0, r2, #28
 8008fae:	460c      	mov	r4, r1
 8008fb0:	d458      	bmi.n	8009064 <__sflush_r+0xc0>
 8008fb2:	684b      	ldr	r3, [r1, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dc05      	bgt.n	8008fc4 <__sflush_r+0x20>
 8008fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dc02      	bgt.n	8008fc4 <__sflush_r+0x20>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	d0f9      	beq.n	8008fbe <__sflush_r+0x1a>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fd0:	682f      	ldr	r7, [r5, #0]
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	d032      	beq.n	800903c <__sflush_r+0x98>
 8008fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	075a      	lsls	r2, r3, #29
 8008fdc:	d505      	bpl.n	8008fea <__sflush_r+0x46>
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	1ac0      	subs	r0, r0, r3
 8008fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fe4:	b10b      	cbz	r3, 8008fea <__sflush_r+0x46>
 8008fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	2300      	movs	r3, #0
 8008fec:	4602      	mov	r2, r0
 8008fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ff0:	6a21      	ldr	r1, [r4, #32]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b0      	blx	r6
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	d106      	bne.n	800900a <__sflush_r+0x66>
 8008ffc:	6829      	ldr	r1, [r5, #0]
 8008ffe:	291d      	cmp	r1, #29
 8009000:	d82c      	bhi.n	800905c <__sflush_r+0xb8>
 8009002:	4a2a      	ldr	r2, [pc, #168]	; (80090ac <__sflush_r+0x108>)
 8009004:	40ca      	lsrs	r2, r1
 8009006:	07d6      	lsls	r6, r2, #31
 8009008:	d528      	bpl.n	800905c <__sflush_r+0xb8>
 800900a:	2200      	movs	r2, #0
 800900c:	6062      	str	r2, [r4, #4]
 800900e:	04d9      	lsls	r1, r3, #19
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	d504      	bpl.n	8009020 <__sflush_r+0x7c>
 8009016:	1c42      	adds	r2, r0, #1
 8009018:	d101      	bne.n	800901e <__sflush_r+0x7a>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b903      	cbnz	r3, 8009020 <__sflush_r+0x7c>
 800901e:	6560      	str	r0, [r4, #84]	; 0x54
 8009020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009022:	602f      	str	r7, [r5, #0]
 8009024:	2900      	cmp	r1, #0
 8009026:	d0ca      	beq.n	8008fbe <__sflush_r+0x1a>
 8009028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800902c:	4299      	cmp	r1, r3
 800902e:	d002      	beq.n	8009036 <__sflush_r+0x92>
 8009030:	4628      	mov	r0, r5
 8009032:	f000 f897 	bl	8009164 <_free_r>
 8009036:	2000      	movs	r0, #0
 8009038:	6360      	str	r0, [r4, #52]	; 0x34
 800903a:	e7c1      	b.n	8008fc0 <__sflush_r+0x1c>
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	2301      	movs	r3, #1
 8009040:	4628      	mov	r0, r5
 8009042:	47b0      	blx	r6
 8009044:	1c41      	adds	r1, r0, #1
 8009046:	d1c7      	bne.n	8008fd8 <__sflush_r+0x34>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c4      	beq.n	8008fd8 <__sflush_r+0x34>
 800904e:	2b1d      	cmp	r3, #29
 8009050:	d001      	beq.n	8009056 <__sflush_r+0xb2>
 8009052:	2b16      	cmp	r3, #22
 8009054:	d101      	bne.n	800905a <__sflush_r+0xb6>
 8009056:	602f      	str	r7, [r5, #0]
 8009058:	e7b1      	b.n	8008fbe <__sflush_r+0x1a>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	e7ad      	b.n	8008fc0 <__sflush_r+0x1c>
 8009064:	690f      	ldr	r7, [r1, #16]
 8009066:	2f00      	cmp	r7, #0
 8009068:	d0a9      	beq.n	8008fbe <__sflush_r+0x1a>
 800906a:	0793      	lsls	r3, r2, #30
 800906c:	680e      	ldr	r6, [r1, #0]
 800906e:	bf08      	it	eq
 8009070:	694b      	ldreq	r3, [r1, #20]
 8009072:	600f      	str	r7, [r1, #0]
 8009074:	bf18      	it	ne
 8009076:	2300      	movne	r3, #0
 8009078:	eba6 0807 	sub.w	r8, r6, r7
 800907c:	608b      	str	r3, [r1, #8]
 800907e:	f1b8 0f00 	cmp.w	r8, #0
 8009082:	dd9c      	ble.n	8008fbe <__sflush_r+0x1a>
 8009084:	6a21      	ldr	r1, [r4, #32]
 8009086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009088:	4643      	mov	r3, r8
 800908a:	463a      	mov	r2, r7
 800908c:	4628      	mov	r0, r5
 800908e:	47b0      	blx	r6
 8009090:	2800      	cmp	r0, #0
 8009092:	dc06      	bgt.n	80090a2 <__sflush_r+0xfe>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	e78e      	b.n	8008fc0 <__sflush_r+0x1c>
 80090a2:	4407      	add	r7, r0
 80090a4:	eba8 0800 	sub.w	r8, r8, r0
 80090a8:	e7e9      	b.n	800907e <__sflush_r+0xda>
 80090aa:	bf00      	nop
 80090ac:	20400001 	.word	0x20400001

080090b0 <_fflush_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	b913      	cbnz	r3, 80090c0 <_fflush_r+0x10>
 80090ba:	2500      	movs	r5, #0
 80090bc:	4628      	mov	r0, r5
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	b118      	cbz	r0, 80090ca <_fflush_r+0x1a>
 80090c2:	6983      	ldr	r3, [r0, #24]
 80090c4:	b90b      	cbnz	r3, 80090ca <_fflush_r+0x1a>
 80090c6:	f7ff fcaf 	bl	8008a28 <__sinit>
 80090ca:	4b14      	ldr	r3, [pc, #80]	; (800911c <_fflush_r+0x6c>)
 80090cc:	429c      	cmp	r4, r3
 80090ce:	d11b      	bne.n	8009108 <_fflush_r+0x58>
 80090d0:	686c      	ldr	r4, [r5, #4]
 80090d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0ef      	beq.n	80090ba <_fflush_r+0xa>
 80090da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090dc:	07d0      	lsls	r0, r2, #31
 80090de:	d404      	bmi.n	80090ea <_fflush_r+0x3a>
 80090e0:	0599      	lsls	r1, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_fflush_r+0x3a>
 80090e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e6:	f7ff fd62 	bl	8008bae <__retarget_lock_acquire_recursive>
 80090ea:	4628      	mov	r0, r5
 80090ec:	4621      	mov	r1, r4
 80090ee:	f7ff ff59 	bl	8008fa4 <__sflush_r>
 80090f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090f4:	07da      	lsls	r2, r3, #31
 80090f6:	4605      	mov	r5, r0
 80090f8:	d4e0      	bmi.n	80090bc <_fflush_r+0xc>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	059b      	lsls	r3, r3, #22
 80090fe:	d4dd      	bmi.n	80090bc <_fflush_r+0xc>
 8009100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009102:	f7ff fd55 	bl	8008bb0 <__retarget_lock_release_recursive>
 8009106:	e7d9      	b.n	80090bc <_fflush_r+0xc>
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <_fflush_r+0x70>)
 800910a:	429c      	cmp	r4, r3
 800910c:	d101      	bne.n	8009112 <_fflush_r+0x62>
 800910e:	68ac      	ldr	r4, [r5, #8]
 8009110:	e7df      	b.n	80090d2 <_fflush_r+0x22>
 8009112:	4b04      	ldr	r3, [pc, #16]	; (8009124 <_fflush_r+0x74>)
 8009114:	429c      	cmp	r4, r3
 8009116:	bf08      	it	eq
 8009118:	68ec      	ldreq	r4, [r5, #12]
 800911a:	e7da      	b.n	80090d2 <_fflush_r+0x22>
 800911c:	0800a058 	.word	0x0800a058
 8009120:	0800a078 	.word	0x0800a078
 8009124:	0800a038 	.word	0x0800a038

08009128 <_lseek_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	; (8009148 <_lseek_r+0x20>)
 800912c:	4604      	mov	r4, r0
 800912e:	4608      	mov	r0, r1
 8009130:	4611      	mov	r1, r2
 8009132:	2200      	movs	r2, #0
 8009134:	602a      	str	r2, [r5, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f7f8 f942 	bl	80013c0 <_lseek>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_lseek_r+0x1e>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_lseek_r+0x1e>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	200042c8 	.word	0x200042c8

0800914c <__malloc_lock>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__malloc_lock+0x8>)
 800914e:	f7ff bd2e 	b.w	8008bae <__retarget_lock_acquire_recursive>
 8009152:	bf00      	nop
 8009154:	200042bc 	.word	0x200042bc

08009158 <__malloc_unlock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__malloc_unlock+0x8>)
 800915a:	f7ff bd29 	b.w	8008bb0 <__retarget_lock_release_recursive>
 800915e:	bf00      	nop
 8009160:	200042bc 	.word	0x200042bc

08009164 <_free_r>:
 8009164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009166:	2900      	cmp	r1, #0
 8009168:	d044      	beq.n	80091f4 <_free_r+0x90>
 800916a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800916e:	9001      	str	r0, [sp, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f1a1 0404 	sub.w	r4, r1, #4
 8009176:	bfb8      	it	lt
 8009178:	18e4      	addlt	r4, r4, r3
 800917a:	f7ff ffe7 	bl	800914c <__malloc_lock>
 800917e:	4a1e      	ldr	r2, [pc, #120]	; (80091f8 <_free_r+0x94>)
 8009180:	9801      	ldr	r0, [sp, #4]
 8009182:	6813      	ldr	r3, [r2, #0]
 8009184:	b933      	cbnz	r3, 8009194 <_free_r+0x30>
 8009186:	6063      	str	r3, [r4, #4]
 8009188:	6014      	str	r4, [r2, #0]
 800918a:	b003      	add	sp, #12
 800918c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009190:	f7ff bfe2 	b.w	8009158 <__malloc_unlock>
 8009194:	42a3      	cmp	r3, r4
 8009196:	d908      	bls.n	80091aa <_free_r+0x46>
 8009198:	6825      	ldr	r5, [r4, #0]
 800919a:	1961      	adds	r1, r4, r5
 800919c:	428b      	cmp	r3, r1
 800919e:	bf01      	itttt	eq
 80091a0:	6819      	ldreq	r1, [r3, #0]
 80091a2:	685b      	ldreq	r3, [r3, #4]
 80091a4:	1949      	addeq	r1, r1, r5
 80091a6:	6021      	streq	r1, [r4, #0]
 80091a8:	e7ed      	b.n	8009186 <_free_r+0x22>
 80091aa:	461a      	mov	r2, r3
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	b10b      	cbz	r3, 80091b4 <_free_r+0x50>
 80091b0:	42a3      	cmp	r3, r4
 80091b2:	d9fa      	bls.n	80091aa <_free_r+0x46>
 80091b4:	6811      	ldr	r1, [r2, #0]
 80091b6:	1855      	adds	r5, r2, r1
 80091b8:	42a5      	cmp	r5, r4
 80091ba:	d10b      	bne.n	80091d4 <_free_r+0x70>
 80091bc:	6824      	ldr	r4, [r4, #0]
 80091be:	4421      	add	r1, r4
 80091c0:	1854      	adds	r4, r2, r1
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	6011      	str	r1, [r2, #0]
 80091c6:	d1e0      	bne.n	800918a <_free_r+0x26>
 80091c8:	681c      	ldr	r4, [r3, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	6053      	str	r3, [r2, #4]
 80091ce:	4421      	add	r1, r4
 80091d0:	6011      	str	r1, [r2, #0]
 80091d2:	e7da      	b.n	800918a <_free_r+0x26>
 80091d4:	d902      	bls.n	80091dc <_free_r+0x78>
 80091d6:	230c      	movs	r3, #12
 80091d8:	6003      	str	r3, [r0, #0]
 80091da:	e7d6      	b.n	800918a <_free_r+0x26>
 80091dc:	6825      	ldr	r5, [r4, #0]
 80091de:	1961      	adds	r1, r4, r5
 80091e0:	428b      	cmp	r3, r1
 80091e2:	bf04      	itt	eq
 80091e4:	6819      	ldreq	r1, [r3, #0]
 80091e6:	685b      	ldreq	r3, [r3, #4]
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	bf04      	itt	eq
 80091ec:	1949      	addeq	r1, r1, r5
 80091ee:	6021      	streq	r1, [r4, #0]
 80091f0:	6054      	str	r4, [r2, #4]
 80091f2:	e7ca      	b.n	800918a <_free_r+0x26>
 80091f4:	b003      	add	sp, #12
 80091f6:	bd30      	pop	{r4, r5, pc}
 80091f8:	200042c0 	.word	0x200042c0

080091fc <__ssputs_r>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	688e      	ldr	r6, [r1, #8]
 8009202:	429e      	cmp	r6, r3
 8009204:	4682      	mov	sl, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4690      	mov	r8, r2
 800920a:	461f      	mov	r7, r3
 800920c:	d838      	bhi.n	8009280 <__ssputs_r+0x84>
 800920e:	898a      	ldrh	r2, [r1, #12]
 8009210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009214:	d032      	beq.n	800927c <__ssputs_r+0x80>
 8009216:	6825      	ldr	r5, [r4, #0]
 8009218:	6909      	ldr	r1, [r1, #16]
 800921a:	eba5 0901 	sub.w	r9, r5, r1
 800921e:	6965      	ldr	r5, [r4, #20]
 8009220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009228:	3301      	adds	r3, #1
 800922a:	444b      	add	r3, r9
 800922c:	106d      	asrs	r5, r5, #1
 800922e:	429d      	cmp	r5, r3
 8009230:	bf38      	it	cc
 8009232:	461d      	movcc	r5, r3
 8009234:	0553      	lsls	r3, r2, #21
 8009236:	d531      	bpl.n	800929c <__ssputs_r+0xa0>
 8009238:	4629      	mov	r1, r5
 800923a:	f7ff fd01 	bl	8008c40 <_malloc_r>
 800923e:	4606      	mov	r6, r0
 8009240:	b950      	cbnz	r0, 8009258 <__ssputs_r+0x5c>
 8009242:	230c      	movs	r3, #12
 8009244:	f8ca 3000 	str.w	r3, [sl]
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	6921      	ldr	r1, [r4, #16]
 800925a:	464a      	mov	r2, r9
 800925c:	f7ff fcb9 	bl	8008bd2 <memcpy>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	6126      	str	r6, [r4, #16]
 800926e:	6165      	str	r5, [r4, #20]
 8009270:	444e      	add	r6, r9
 8009272:	eba5 0509 	sub.w	r5, r5, r9
 8009276:	6026      	str	r6, [r4, #0]
 8009278:	60a5      	str	r5, [r4, #8]
 800927a:	463e      	mov	r6, r7
 800927c:	42be      	cmp	r6, r7
 800927e:	d900      	bls.n	8009282 <__ssputs_r+0x86>
 8009280:	463e      	mov	r6, r7
 8009282:	6820      	ldr	r0, [r4, #0]
 8009284:	4632      	mov	r2, r6
 8009286:	4641      	mov	r1, r8
 8009288:	f000 fd3a 	bl	8009d00 <memmove>
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	1b9b      	subs	r3, r3, r6
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	4433      	add	r3, r6
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	2000      	movs	r0, #0
 800929a:	e7db      	b.n	8009254 <__ssputs_r+0x58>
 800929c:	462a      	mov	r2, r5
 800929e:	f000 fd49 	bl	8009d34 <_realloc_r>
 80092a2:	4606      	mov	r6, r0
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d1e1      	bne.n	800926c <__ssputs_r+0x70>
 80092a8:	6921      	ldr	r1, [r4, #16]
 80092aa:	4650      	mov	r0, sl
 80092ac:	f7ff ff5a 	bl	8009164 <_free_r>
 80092b0:	e7c7      	b.n	8009242 <__ssputs_r+0x46>
	...

080092b4 <_svfiprintf_r>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	4698      	mov	r8, r3
 80092ba:	898b      	ldrh	r3, [r1, #12]
 80092bc:	061b      	lsls	r3, r3, #24
 80092be:	b09d      	sub	sp, #116	; 0x74
 80092c0:	4607      	mov	r7, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	4614      	mov	r4, r2
 80092c6:	d50e      	bpl.n	80092e6 <_svfiprintf_r+0x32>
 80092c8:	690b      	ldr	r3, [r1, #16]
 80092ca:	b963      	cbnz	r3, 80092e6 <_svfiprintf_r+0x32>
 80092cc:	2140      	movs	r1, #64	; 0x40
 80092ce:	f7ff fcb7 	bl	8008c40 <_malloc_r>
 80092d2:	6028      	str	r0, [r5, #0]
 80092d4:	6128      	str	r0, [r5, #16]
 80092d6:	b920      	cbnz	r0, 80092e2 <_svfiprintf_r+0x2e>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e0:	e0d1      	b.n	8009486 <_svfiprintf_r+0x1d2>
 80092e2:	2340      	movs	r3, #64	; 0x40
 80092e4:	616b      	str	r3, [r5, #20]
 80092e6:	2300      	movs	r3, #0
 80092e8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ea:	2320      	movs	r3, #32
 80092ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f4:	2330      	movs	r3, #48	; 0x30
 80092f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094a0 <_svfiprintf_r+0x1ec>
 80092fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092fe:	f04f 0901 	mov.w	r9, #1
 8009302:	4623      	mov	r3, r4
 8009304:	469a      	mov	sl, r3
 8009306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930a:	b10a      	cbz	r2, 8009310 <_svfiprintf_r+0x5c>
 800930c:	2a25      	cmp	r2, #37	; 0x25
 800930e:	d1f9      	bne.n	8009304 <_svfiprintf_r+0x50>
 8009310:	ebba 0b04 	subs.w	fp, sl, r4
 8009314:	d00b      	beq.n	800932e <_svfiprintf_r+0x7a>
 8009316:	465b      	mov	r3, fp
 8009318:	4622      	mov	r2, r4
 800931a:	4629      	mov	r1, r5
 800931c:	4638      	mov	r0, r7
 800931e:	f7ff ff6d 	bl	80091fc <__ssputs_r>
 8009322:	3001      	adds	r0, #1
 8009324:	f000 80aa 	beq.w	800947c <_svfiprintf_r+0x1c8>
 8009328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932a:	445a      	add	r2, fp
 800932c:	9209      	str	r2, [sp, #36]	; 0x24
 800932e:	f89a 3000 	ldrb.w	r3, [sl]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80a2 	beq.w	800947c <_svfiprintf_r+0x1c8>
 8009338:	2300      	movs	r3, #0
 800933a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800933e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009342:	f10a 0a01 	add.w	sl, sl, #1
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800934e:	931a      	str	r3, [sp, #104]	; 0x68
 8009350:	4654      	mov	r4, sl
 8009352:	2205      	movs	r2, #5
 8009354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009358:	4851      	ldr	r0, [pc, #324]	; (80094a0 <_svfiprintf_r+0x1ec>)
 800935a:	f7f6 ff41 	bl	80001e0 <memchr>
 800935e:	9a04      	ldr	r2, [sp, #16]
 8009360:	b9d8      	cbnz	r0, 800939a <_svfiprintf_r+0xe6>
 8009362:	06d0      	lsls	r0, r2, #27
 8009364:	bf44      	itt	mi
 8009366:	2320      	movmi	r3, #32
 8009368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936c:	0711      	lsls	r1, r2, #28
 800936e:	bf44      	itt	mi
 8009370:	232b      	movmi	r3, #43	; 0x2b
 8009372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009376:	f89a 3000 	ldrb.w	r3, [sl]
 800937a:	2b2a      	cmp	r3, #42	; 0x2a
 800937c:	d015      	beq.n	80093aa <_svfiprintf_r+0xf6>
 800937e:	9a07      	ldr	r2, [sp, #28]
 8009380:	4654      	mov	r4, sl
 8009382:	2000      	movs	r0, #0
 8009384:	f04f 0c0a 	mov.w	ip, #10
 8009388:	4621      	mov	r1, r4
 800938a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938e:	3b30      	subs	r3, #48	; 0x30
 8009390:	2b09      	cmp	r3, #9
 8009392:	d94e      	bls.n	8009432 <_svfiprintf_r+0x17e>
 8009394:	b1b0      	cbz	r0, 80093c4 <_svfiprintf_r+0x110>
 8009396:	9207      	str	r2, [sp, #28]
 8009398:	e014      	b.n	80093c4 <_svfiprintf_r+0x110>
 800939a:	eba0 0308 	sub.w	r3, r0, r8
 800939e:	fa09 f303 	lsl.w	r3, r9, r3
 80093a2:	4313      	orrs	r3, r2
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	46a2      	mov	sl, r4
 80093a8:	e7d2      	b.n	8009350 <_svfiprintf_r+0x9c>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	1d19      	adds	r1, r3, #4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	9103      	str	r1, [sp, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bfbb      	ittet	lt
 80093b6:	425b      	neglt	r3, r3
 80093b8:	f042 0202 	orrlt.w	r2, r2, #2
 80093bc:	9307      	strge	r3, [sp, #28]
 80093be:	9307      	strlt	r3, [sp, #28]
 80093c0:	bfb8      	it	lt
 80093c2:	9204      	strlt	r2, [sp, #16]
 80093c4:	7823      	ldrb	r3, [r4, #0]
 80093c6:	2b2e      	cmp	r3, #46	; 0x2e
 80093c8:	d10c      	bne.n	80093e4 <_svfiprintf_r+0x130>
 80093ca:	7863      	ldrb	r3, [r4, #1]
 80093cc:	2b2a      	cmp	r3, #42	; 0x2a
 80093ce:	d135      	bne.n	800943c <_svfiprintf_r+0x188>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	1d1a      	adds	r2, r3, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	9203      	str	r2, [sp, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bfb8      	it	lt
 80093dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093e0:	3402      	adds	r4, #2
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094b0 <_svfiprintf_r+0x1fc>
 80093e8:	7821      	ldrb	r1, [r4, #0]
 80093ea:	2203      	movs	r2, #3
 80093ec:	4650      	mov	r0, sl
 80093ee:	f7f6 fef7 	bl	80001e0 <memchr>
 80093f2:	b140      	cbz	r0, 8009406 <_svfiprintf_r+0x152>
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	eba0 000a 	sub.w	r0, r0, sl
 80093fa:	fa03 f000 	lsl.w	r0, r3, r0
 80093fe:	9b04      	ldr	r3, [sp, #16]
 8009400:	4303      	orrs	r3, r0
 8009402:	3401      	adds	r4, #1
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800940a:	4826      	ldr	r0, [pc, #152]	; (80094a4 <_svfiprintf_r+0x1f0>)
 800940c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009410:	2206      	movs	r2, #6
 8009412:	f7f6 fee5 	bl	80001e0 <memchr>
 8009416:	2800      	cmp	r0, #0
 8009418:	d038      	beq.n	800948c <_svfiprintf_r+0x1d8>
 800941a:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <_svfiprintf_r+0x1f4>)
 800941c:	bb1b      	cbnz	r3, 8009466 <_svfiprintf_r+0x1b2>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	3307      	adds	r3, #7
 8009422:	f023 0307 	bic.w	r3, r3, #7
 8009426:	3308      	adds	r3, #8
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942c:	4433      	add	r3, r6
 800942e:	9309      	str	r3, [sp, #36]	; 0x24
 8009430:	e767      	b.n	8009302 <_svfiprintf_r+0x4e>
 8009432:	fb0c 3202 	mla	r2, ip, r2, r3
 8009436:	460c      	mov	r4, r1
 8009438:	2001      	movs	r0, #1
 800943a:	e7a5      	b.n	8009388 <_svfiprintf_r+0xd4>
 800943c:	2300      	movs	r3, #0
 800943e:	3401      	adds	r4, #1
 8009440:	9305      	str	r3, [sp, #20]
 8009442:	4619      	mov	r1, r3
 8009444:	f04f 0c0a 	mov.w	ip, #10
 8009448:	4620      	mov	r0, r4
 800944a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944e:	3a30      	subs	r2, #48	; 0x30
 8009450:	2a09      	cmp	r2, #9
 8009452:	d903      	bls.n	800945c <_svfiprintf_r+0x1a8>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0c5      	beq.n	80093e4 <_svfiprintf_r+0x130>
 8009458:	9105      	str	r1, [sp, #20]
 800945a:	e7c3      	b.n	80093e4 <_svfiprintf_r+0x130>
 800945c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009460:	4604      	mov	r4, r0
 8009462:	2301      	movs	r3, #1
 8009464:	e7f0      	b.n	8009448 <_svfiprintf_r+0x194>
 8009466:	ab03      	add	r3, sp, #12
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	462a      	mov	r2, r5
 800946c:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <_svfiprintf_r+0x1f8>)
 800946e:	a904      	add	r1, sp, #16
 8009470:	4638      	mov	r0, r7
 8009472:	f3af 8000 	nop.w
 8009476:	1c42      	adds	r2, r0, #1
 8009478:	4606      	mov	r6, r0
 800947a:	d1d6      	bne.n	800942a <_svfiprintf_r+0x176>
 800947c:	89ab      	ldrh	r3, [r5, #12]
 800947e:	065b      	lsls	r3, r3, #25
 8009480:	f53f af2c 	bmi.w	80092dc <_svfiprintf_r+0x28>
 8009484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009486:	b01d      	add	sp, #116	; 0x74
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	ab03      	add	r3, sp, #12
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	462a      	mov	r2, r5
 8009492:	4b06      	ldr	r3, [pc, #24]	; (80094ac <_svfiprintf_r+0x1f8>)
 8009494:	a904      	add	r1, sp, #16
 8009496:	4638      	mov	r0, r7
 8009498:	f000 f9d4 	bl	8009844 <_printf_i>
 800949c:	e7eb      	b.n	8009476 <_svfiprintf_r+0x1c2>
 800949e:	bf00      	nop
 80094a0:	0800a09c 	.word	0x0800a09c
 80094a4:	0800a0a6 	.word	0x0800a0a6
 80094a8:	00000000 	.word	0x00000000
 80094ac:	080091fd 	.word	0x080091fd
 80094b0:	0800a0a2 	.word	0x0800a0a2

080094b4 <__sfputc_r>:
 80094b4:	6893      	ldr	r3, [r2, #8]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	b410      	push	{r4}
 80094bc:	6093      	str	r3, [r2, #8]
 80094be:	da08      	bge.n	80094d2 <__sfputc_r+0x1e>
 80094c0:	6994      	ldr	r4, [r2, #24]
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	db01      	blt.n	80094ca <__sfputc_r+0x16>
 80094c6:	290a      	cmp	r1, #10
 80094c8:	d103      	bne.n	80094d2 <__sfputc_r+0x1e>
 80094ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ce:	f000 baf1 	b.w	8009ab4 <__swbuf_r>
 80094d2:	6813      	ldr	r3, [r2, #0]
 80094d4:	1c58      	adds	r0, r3, #1
 80094d6:	6010      	str	r0, [r2, #0]
 80094d8:	7019      	strb	r1, [r3, #0]
 80094da:	4608      	mov	r0, r1
 80094dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <__sfputs_r>:
 80094e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e4:	4606      	mov	r6, r0
 80094e6:	460f      	mov	r7, r1
 80094e8:	4614      	mov	r4, r2
 80094ea:	18d5      	adds	r5, r2, r3
 80094ec:	42ac      	cmp	r4, r5
 80094ee:	d101      	bne.n	80094f4 <__sfputs_r+0x12>
 80094f0:	2000      	movs	r0, #0
 80094f2:	e007      	b.n	8009504 <__sfputs_r+0x22>
 80094f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f8:	463a      	mov	r2, r7
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7ff ffda 	bl	80094b4 <__sfputc_r>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d1f3      	bne.n	80094ec <__sfputs_r+0xa>
 8009504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009508 <_vfiprintf_r>:
 8009508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	460d      	mov	r5, r1
 800950e:	b09d      	sub	sp, #116	; 0x74
 8009510:	4614      	mov	r4, r2
 8009512:	4698      	mov	r8, r3
 8009514:	4606      	mov	r6, r0
 8009516:	b118      	cbz	r0, 8009520 <_vfiprintf_r+0x18>
 8009518:	6983      	ldr	r3, [r0, #24]
 800951a:	b90b      	cbnz	r3, 8009520 <_vfiprintf_r+0x18>
 800951c:	f7ff fa84 	bl	8008a28 <__sinit>
 8009520:	4b89      	ldr	r3, [pc, #548]	; (8009748 <_vfiprintf_r+0x240>)
 8009522:	429d      	cmp	r5, r3
 8009524:	d11b      	bne.n	800955e <_vfiprintf_r+0x56>
 8009526:	6875      	ldr	r5, [r6, #4]
 8009528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800952a:	07d9      	lsls	r1, r3, #31
 800952c:	d405      	bmi.n	800953a <_vfiprintf_r+0x32>
 800952e:	89ab      	ldrh	r3, [r5, #12]
 8009530:	059a      	lsls	r2, r3, #22
 8009532:	d402      	bmi.n	800953a <_vfiprintf_r+0x32>
 8009534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009536:	f7ff fb3a 	bl	8008bae <__retarget_lock_acquire_recursive>
 800953a:	89ab      	ldrh	r3, [r5, #12]
 800953c:	071b      	lsls	r3, r3, #28
 800953e:	d501      	bpl.n	8009544 <_vfiprintf_r+0x3c>
 8009540:	692b      	ldr	r3, [r5, #16]
 8009542:	b9eb      	cbnz	r3, 8009580 <_vfiprintf_r+0x78>
 8009544:	4629      	mov	r1, r5
 8009546:	4630      	mov	r0, r6
 8009548:	f000 fb06 	bl	8009b58 <__swsetup_r>
 800954c:	b1c0      	cbz	r0, 8009580 <_vfiprintf_r+0x78>
 800954e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009550:	07dc      	lsls	r4, r3, #31
 8009552:	d50e      	bpl.n	8009572 <_vfiprintf_r+0x6a>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009558:	b01d      	add	sp, #116	; 0x74
 800955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955e:	4b7b      	ldr	r3, [pc, #492]	; (800974c <_vfiprintf_r+0x244>)
 8009560:	429d      	cmp	r5, r3
 8009562:	d101      	bne.n	8009568 <_vfiprintf_r+0x60>
 8009564:	68b5      	ldr	r5, [r6, #8]
 8009566:	e7df      	b.n	8009528 <_vfiprintf_r+0x20>
 8009568:	4b79      	ldr	r3, [pc, #484]	; (8009750 <_vfiprintf_r+0x248>)
 800956a:	429d      	cmp	r5, r3
 800956c:	bf08      	it	eq
 800956e:	68f5      	ldreq	r5, [r6, #12]
 8009570:	e7da      	b.n	8009528 <_vfiprintf_r+0x20>
 8009572:	89ab      	ldrh	r3, [r5, #12]
 8009574:	0598      	lsls	r0, r3, #22
 8009576:	d4ed      	bmi.n	8009554 <_vfiprintf_r+0x4c>
 8009578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800957a:	f7ff fb19 	bl	8008bb0 <__retarget_lock_release_recursive>
 800957e:	e7e9      	b.n	8009554 <_vfiprintf_r+0x4c>
 8009580:	2300      	movs	r3, #0
 8009582:	9309      	str	r3, [sp, #36]	; 0x24
 8009584:	2320      	movs	r3, #32
 8009586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800958a:	f8cd 800c 	str.w	r8, [sp, #12]
 800958e:	2330      	movs	r3, #48	; 0x30
 8009590:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009754 <_vfiprintf_r+0x24c>
 8009594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009598:	f04f 0901 	mov.w	r9, #1
 800959c:	4623      	mov	r3, r4
 800959e:	469a      	mov	sl, r3
 80095a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a4:	b10a      	cbz	r2, 80095aa <_vfiprintf_r+0xa2>
 80095a6:	2a25      	cmp	r2, #37	; 0x25
 80095a8:	d1f9      	bne.n	800959e <_vfiprintf_r+0x96>
 80095aa:	ebba 0b04 	subs.w	fp, sl, r4
 80095ae:	d00b      	beq.n	80095c8 <_vfiprintf_r+0xc0>
 80095b0:	465b      	mov	r3, fp
 80095b2:	4622      	mov	r2, r4
 80095b4:	4629      	mov	r1, r5
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7ff ff93 	bl	80094e2 <__sfputs_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	f000 80aa 	beq.w	8009716 <_vfiprintf_r+0x20e>
 80095c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c4:	445a      	add	r2, fp
 80095c6:	9209      	str	r2, [sp, #36]	; 0x24
 80095c8:	f89a 3000 	ldrb.w	r3, [sl]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 80a2 	beq.w	8009716 <_vfiprintf_r+0x20e>
 80095d2:	2300      	movs	r3, #0
 80095d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095dc:	f10a 0a01 	add.w	sl, sl, #1
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	9307      	str	r3, [sp, #28]
 80095e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095e8:	931a      	str	r3, [sp, #104]	; 0x68
 80095ea:	4654      	mov	r4, sl
 80095ec:	2205      	movs	r2, #5
 80095ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f2:	4858      	ldr	r0, [pc, #352]	; (8009754 <_vfiprintf_r+0x24c>)
 80095f4:	f7f6 fdf4 	bl	80001e0 <memchr>
 80095f8:	9a04      	ldr	r2, [sp, #16]
 80095fa:	b9d8      	cbnz	r0, 8009634 <_vfiprintf_r+0x12c>
 80095fc:	06d1      	lsls	r1, r2, #27
 80095fe:	bf44      	itt	mi
 8009600:	2320      	movmi	r3, #32
 8009602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009606:	0713      	lsls	r3, r2, #28
 8009608:	bf44      	itt	mi
 800960a:	232b      	movmi	r3, #43	; 0x2b
 800960c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009610:	f89a 3000 	ldrb.w	r3, [sl]
 8009614:	2b2a      	cmp	r3, #42	; 0x2a
 8009616:	d015      	beq.n	8009644 <_vfiprintf_r+0x13c>
 8009618:	9a07      	ldr	r2, [sp, #28]
 800961a:	4654      	mov	r4, sl
 800961c:	2000      	movs	r0, #0
 800961e:	f04f 0c0a 	mov.w	ip, #10
 8009622:	4621      	mov	r1, r4
 8009624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009628:	3b30      	subs	r3, #48	; 0x30
 800962a:	2b09      	cmp	r3, #9
 800962c:	d94e      	bls.n	80096cc <_vfiprintf_r+0x1c4>
 800962e:	b1b0      	cbz	r0, 800965e <_vfiprintf_r+0x156>
 8009630:	9207      	str	r2, [sp, #28]
 8009632:	e014      	b.n	800965e <_vfiprintf_r+0x156>
 8009634:	eba0 0308 	sub.w	r3, r0, r8
 8009638:	fa09 f303 	lsl.w	r3, r9, r3
 800963c:	4313      	orrs	r3, r2
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	46a2      	mov	sl, r4
 8009642:	e7d2      	b.n	80095ea <_vfiprintf_r+0xe2>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	1d19      	adds	r1, r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	9103      	str	r1, [sp, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	bfbb      	ittet	lt
 8009650:	425b      	neglt	r3, r3
 8009652:	f042 0202 	orrlt.w	r2, r2, #2
 8009656:	9307      	strge	r3, [sp, #28]
 8009658:	9307      	strlt	r3, [sp, #28]
 800965a:	bfb8      	it	lt
 800965c:	9204      	strlt	r2, [sp, #16]
 800965e:	7823      	ldrb	r3, [r4, #0]
 8009660:	2b2e      	cmp	r3, #46	; 0x2e
 8009662:	d10c      	bne.n	800967e <_vfiprintf_r+0x176>
 8009664:	7863      	ldrb	r3, [r4, #1]
 8009666:	2b2a      	cmp	r3, #42	; 0x2a
 8009668:	d135      	bne.n	80096d6 <_vfiprintf_r+0x1ce>
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	1d1a      	adds	r2, r3, #4
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	9203      	str	r2, [sp, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	bfb8      	it	lt
 8009676:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800967a:	3402      	adds	r4, #2
 800967c:	9305      	str	r3, [sp, #20]
 800967e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009764 <_vfiprintf_r+0x25c>
 8009682:	7821      	ldrb	r1, [r4, #0]
 8009684:	2203      	movs	r2, #3
 8009686:	4650      	mov	r0, sl
 8009688:	f7f6 fdaa 	bl	80001e0 <memchr>
 800968c:	b140      	cbz	r0, 80096a0 <_vfiprintf_r+0x198>
 800968e:	2340      	movs	r3, #64	; 0x40
 8009690:	eba0 000a 	sub.w	r0, r0, sl
 8009694:	fa03 f000 	lsl.w	r0, r3, r0
 8009698:	9b04      	ldr	r3, [sp, #16]
 800969a:	4303      	orrs	r3, r0
 800969c:	3401      	adds	r4, #1
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a4:	482c      	ldr	r0, [pc, #176]	; (8009758 <_vfiprintf_r+0x250>)
 80096a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096aa:	2206      	movs	r2, #6
 80096ac:	f7f6 fd98 	bl	80001e0 <memchr>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d03f      	beq.n	8009734 <_vfiprintf_r+0x22c>
 80096b4:	4b29      	ldr	r3, [pc, #164]	; (800975c <_vfiprintf_r+0x254>)
 80096b6:	bb1b      	cbnz	r3, 8009700 <_vfiprintf_r+0x1f8>
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	3307      	adds	r3, #7
 80096bc:	f023 0307 	bic.w	r3, r3, #7
 80096c0:	3308      	adds	r3, #8
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c6:	443b      	add	r3, r7
 80096c8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ca:	e767      	b.n	800959c <_vfiprintf_r+0x94>
 80096cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80096d0:	460c      	mov	r4, r1
 80096d2:	2001      	movs	r0, #1
 80096d4:	e7a5      	b.n	8009622 <_vfiprintf_r+0x11a>
 80096d6:	2300      	movs	r3, #0
 80096d8:	3401      	adds	r4, #1
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	4619      	mov	r1, r3
 80096de:	f04f 0c0a 	mov.w	ip, #10
 80096e2:	4620      	mov	r0, r4
 80096e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e8:	3a30      	subs	r2, #48	; 0x30
 80096ea:	2a09      	cmp	r2, #9
 80096ec:	d903      	bls.n	80096f6 <_vfiprintf_r+0x1ee>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0c5      	beq.n	800967e <_vfiprintf_r+0x176>
 80096f2:	9105      	str	r1, [sp, #20]
 80096f4:	e7c3      	b.n	800967e <_vfiprintf_r+0x176>
 80096f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80096fa:	4604      	mov	r4, r0
 80096fc:	2301      	movs	r3, #1
 80096fe:	e7f0      	b.n	80096e2 <_vfiprintf_r+0x1da>
 8009700:	ab03      	add	r3, sp, #12
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	462a      	mov	r2, r5
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <_vfiprintf_r+0x258>)
 8009708:	a904      	add	r1, sp, #16
 800970a:	4630      	mov	r0, r6
 800970c:	f3af 8000 	nop.w
 8009710:	4607      	mov	r7, r0
 8009712:	1c78      	adds	r0, r7, #1
 8009714:	d1d6      	bne.n	80096c4 <_vfiprintf_r+0x1bc>
 8009716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009718:	07d9      	lsls	r1, r3, #31
 800971a:	d405      	bmi.n	8009728 <_vfiprintf_r+0x220>
 800971c:	89ab      	ldrh	r3, [r5, #12]
 800971e:	059a      	lsls	r2, r3, #22
 8009720:	d402      	bmi.n	8009728 <_vfiprintf_r+0x220>
 8009722:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009724:	f7ff fa44 	bl	8008bb0 <__retarget_lock_release_recursive>
 8009728:	89ab      	ldrh	r3, [r5, #12]
 800972a:	065b      	lsls	r3, r3, #25
 800972c:	f53f af12 	bmi.w	8009554 <_vfiprintf_r+0x4c>
 8009730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009732:	e711      	b.n	8009558 <_vfiprintf_r+0x50>
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	462a      	mov	r2, r5
 800973a:	4b09      	ldr	r3, [pc, #36]	; (8009760 <_vfiprintf_r+0x258>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4630      	mov	r0, r6
 8009740:	f000 f880 	bl	8009844 <_printf_i>
 8009744:	e7e4      	b.n	8009710 <_vfiprintf_r+0x208>
 8009746:	bf00      	nop
 8009748:	0800a058 	.word	0x0800a058
 800974c:	0800a078 	.word	0x0800a078
 8009750:	0800a038 	.word	0x0800a038
 8009754:	0800a09c 	.word	0x0800a09c
 8009758:	0800a0a6 	.word	0x0800a0a6
 800975c:	00000000 	.word	0x00000000
 8009760:	080094e3 	.word	0x080094e3
 8009764:	0800a0a2 	.word	0x0800a0a2

08009768 <_printf_common>:
 8009768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	4616      	mov	r6, r2
 800976e:	4699      	mov	r9, r3
 8009770:	688a      	ldr	r2, [r1, #8]
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009778:	4293      	cmp	r3, r2
 800977a:	bfb8      	it	lt
 800977c:	4613      	movlt	r3, r2
 800977e:	6033      	str	r3, [r6, #0]
 8009780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009784:	4607      	mov	r7, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b10a      	cbz	r2, 800978e <_printf_common+0x26>
 800978a:	3301      	adds	r3, #1
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	0699      	lsls	r1, r3, #26
 8009792:	bf42      	ittt	mi
 8009794:	6833      	ldrmi	r3, [r6, #0]
 8009796:	3302      	addmi	r3, #2
 8009798:	6033      	strmi	r3, [r6, #0]
 800979a:	6825      	ldr	r5, [r4, #0]
 800979c:	f015 0506 	ands.w	r5, r5, #6
 80097a0:	d106      	bne.n	80097b0 <_printf_common+0x48>
 80097a2:	f104 0a19 	add.w	sl, r4, #25
 80097a6:	68e3      	ldr	r3, [r4, #12]
 80097a8:	6832      	ldr	r2, [r6, #0]
 80097aa:	1a9b      	subs	r3, r3, r2
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	dc26      	bgt.n	80097fe <_printf_common+0x96>
 80097b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097b4:	1e13      	subs	r3, r2, #0
 80097b6:	6822      	ldr	r2, [r4, #0]
 80097b8:	bf18      	it	ne
 80097ba:	2301      	movne	r3, #1
 80097bc:	0692      	lsls	r2, r2, #26
 80097be:	d42b      	bmi.n	8009818 <_printf_common+0xb0>
 80097c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097c4:	4649      	mov	r1, r9
 80097c6:	4638      	mov	r0, r7
 80097c8:	47c0      	blx	r8
 80097ca:	3001      	adds	r0, #1
 80097cc:	d01e      	beq.n	800980c <_printf_common+0xa4>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	68e5      	ldr	r5, [r4, #12]
 80097d2:	6832      	ldr	r2, [r6, #0]
 80097d4:	f003 0306 	and.w	r3, r3, #6
 80097d8:	2b04      	cmp	r3, #4
 80097da:	bf08      	it	eq
 80097dc:	1aad      	subeq	r5, r5, r2
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	6922      	ldr	r2, [r4, #16]
 80097e2:	bf0c      	ite	eq
 80097e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097e8:	2500      	movne	r5, #0
 80097ea:	4293      	cmp	r3, r2
 80097ec:	bfc4      	itt	gt
 80097ee:	1a9b      	subgt	r3, r3, r2
 80097f0:	18ed      	addgt	r5, r5, r3
 80097f2:	2600      	movs	r6, #0
 80097f4:	341a      	adds	r4, #26
 80097f6:	42b5      	cmp	r5, r6
 80097f8:	d11a      	bne.n	8009830 <_printf_common+0xc8>
 80097fa:	2000      	movs	r0, #0
 80097fc:	e008      	b.n	8009810 <_printf_common+0xa8>
 80097fe:	2301      	movs	r3, #1
 8009800:	4652      	mov	r2, sl
 8009802:	4649      	mov	r1, r9
 8009804:	4638      	mov	r0, r7
 8009806:	47c0      	blx	r8
 8009808:	3001      	adds	r0, #1
 800980a:	d103      	bne.n	8009814 <_printf_common+0xac>
 800980c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	3501      	adds	r5, #1
 8009816:	e7c6      	b.n	80097a6 <_printf_common+0x3e>
 8009818:	18e1      	adds	r1, r4, r3
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	2030      	movs	r0, #48	; 0x30
 800981e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009822:	4422      	add	r2, r4
 8009824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800982c:	3302      	adds	r3, #2
 800982e:	e7c7      	b.n	80097c0 <_printf_common+0x58>
 8009830:	2301      	movs	r3, #1
 8009832:	4622      	mov	r2, r4
 8009834:	4649      	mov	r1, r9
 8009836:	4638      	mov	r0, r7
 8009838:	47c0      	blx	r8
 800983a:	3001      	adds	r0, #1
 800983c:	d0e6      	beq.n	800980c <_printf_common+0xa4>
 800983e:	3601      	adds	r6, #1
 8009840:	e7d9      	b.n	80097f6 <_printf_common+0x8e>
	...

08009844 <_printf_i>:
 8009844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009848:	7e0f      	ldrb	r7, [r1, #24]
 800984a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800984c:	2f78      	cmp	r7, #120	; 0x78
 800984e:	4691      	mov	r9, r2
 8009850:	4680      	mov	r8, r0
 8009852:	460c      	mov	r4, r1
 8009854:	469a      	mov	sl, r3
 8009856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800985a:	d807      	bhi.n	800986c <_printf_i+0x28>
 800985c:	2f62      	cmp	r7, #98	; 0x62
 800985e:	d80a      	bhi.n	8009876 <_printf_i+0x32>
 8009860:	2f00      	cmp	r7, #0
 8009862:	f000 80d8 	beq.w	8009a16 <_printf_i+0x1d2>
 8009866:	2f58      	cmp	r7, #88	; 0x58
 8009868:	f000 80a3 	beq.w	80099b2 <_printf_i+0x16e>
 800986c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009874:	e03a      	b.n	80098ec <_printf_i+0xa8>
 8009876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800987a:	2b15      	cmp	r3, #21
 800987c:	d8f6      	bhi.n	800986c <_printf_i+0x28>
 800987e:	a101      	add	r1, pc, #4	; (adr r1, 8009884 <_printf_i+0x40>)
 8009880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009884:	080098dd 	.word	0x080098dd
 8009888:	080098f1 	.word	0x080098f1
 800988c:	0800986d 	.word	0x0800986d
 8009890:	0800986d 	.word	0x0800986d
 8009894:	0800986d 	.word	0x0800986d
 8009898:	0800986d 	.word	0x0800986d
 800989c:	080098f1 	.word	0x080098f1
 80098a0:	0800986d 	.word	0x0800986d
 80098a4:	0800986d 	.word	0x0800986d
 80098a8:	0800986d 	.word	0x0800986d
 80098ac:	0800986d 	.word	0x0800986d
 80098b0:	080099fd 	.word	0x080099fd
 80098b4:	08009921 	.word	0x08009921
 80098b8:	080099df 	.word	0x080099df
 80098bc:	0800986d 	.word	0x0800986d
 80098c0:	0800986d 	.word	0x0800986d
 80098c4:	08009a1f 	.word	0x08009a1f
 80098c8:	0800986d 	.word	0x0800986d
 80098cc:	08009921 	.word	0x08009921
 80098d0:	0800986d 	.word	0x0800986d
 80098d4:	0800986d 	.word	0x0800986d
 80098d8:	080099e7 	.word	0x080099e7
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	1d1a      	adds	r2, r3, #4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	602a      	str	r2, [r5, #0]
 80098e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098ec:	2301      	movs	r3, #1
 80098ee:	e0a3      	b.n	8009a38 <_printf_i+0x1f4>
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	6829      	ldr	r1, [r5, #0]
 80098f4:	0606      	lsls	r6, r0, #24
 80098f6:	f101 0304 	add.w	r3, r1, #4
 80098fa:	d50a      	bpl.n	8009912 <_printf_i+0xce>
 80098fc:	680e      	ldr	r6, [r1, #0]
 80098fe:	602b      	str	r3, [r5, #0]
 8009900:	2e00      	cmp	r6, #0
 8009902:	da03      	bge.n	800990c <_printf_i+0xc8>
 8009904:	232d      	movs	r3, #45	; 0x2d
 8009906:	4276      	negs	r6, r6
 8009908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800990c:	485e      	ldr	r0, [pc, #376]	; (8009a88 <_printf_i+0x244>)
 800990e:	230a      	movs	r3, #10
 8009910:	e019      	b.n	8009946 <_printf_i+0x102>
 8009912:	680e      	ldr	r6, [r1, #0]
 8009914:	602b      	str	r3, [r5, #0]
 8009916:	f010 0f40 	tst.w	r0, #64	; 0x40
 800991a:	bf18      	it	ne
 800991c:	b236      	sxthne	r6, r6
 800991e:	e7ef      	b.n	8009900 <_printf_i+0xbc>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	6820      	ldr	r0, [r4, #0]
 8009924:	1d19      	adds	r1, r3, #4
 8009926:	6029      	str	r1, [r5, #0]
 8009928:	0601      	lsls	r1, r0, #24
 800992a:	d501      	bpl.n	8009930 <_printf_i+0xec>
 800992c:	681e      	ldr	r6, [r3, #0]
 800992e:	e002      	b.n	8009936 <_printf_i+0xf2>
 8009930:	0646      	lsls	r6, r0, #25
 8009932:	d5fb      	bpl.n	800992c <_printf_i+0xe8>
 8009934:	881e      	ldrh	r6, [r3, #0]
 8009936:	4854      	ldr	r0, [pc, #336]	; (8009a88 <_printf_i+0x244>)
 8009938:	2f6f      	cmp	r7, #111	; 0x6f
 800993a:	bf0c      	ite	eq
 800993c:	2308      	moveq	r3, #8
 800993e:	230a      	movne	r3, #10
 8009940:	2100      	movs	r1, #0
 8009942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009946:	6865      	ldr	r5, [r4, #4]
 8009948:	60a5      	str	r5, [r4, #8]
 800994a:	2d00      	cmp	r5, #0
 800994c:	bfa2      	ittt	ge
 800994e:	6821      	ldrge	r1, [r4, #0]
 8009950:	f021 0104 	bicge.w	r1, r1, #4
 8009954:	6021      	strge	r1, [r4, #0]
 8009956:	b90e      	cbnz	r6, 800995c <_printf_i+0x118>
 8009958:	2d00      	cmp	r5, #0
 800995a:	d04d      	beq.n	80099f8 <_printf_i+0x1b4>
 800995c:	4615      	mov	r5, r2
 800995e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009962:	fb03 6711 	mls	r7, r3, r1, r6
 8009966:	5dc7      	ldrb	r7, [r0, r7]
 8009968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800996c:	4637      	mov	r7, r6
 800996e:	42bb      	cmp	r3, r7
 8009970:	460e      	mov	r6, r1
 8009972:	d9f4      	bls.n	800995e <_printf_i+0x11a>
 8009974:	2b08      	cmp	r3, #8
 8009976:	d10b      	bne.n	8009990 <_printf_i+0x14c>
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	07de      	lsls	r6, r3, #31
 800997c:	d508      	bpl.n	8009990 <_printf_i+0x14c>
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	6861      	ldr	r1, [r4, #4]
 8009982:	4299      	cmp	r1, r3
 8009984:	bfde      	ittt	le
 8009986:	2330      	movle	r3, #48	; 0x30
 8009988:	f805 3c01 	strble.w	r3, [r5, #-1]
 800998c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009990:	1b52      	subs	r2, r2, r5
 8009992:	6122      	str	r2, [r4, #16]
 8009994:	f8cd a000 	str.w	sl, [sp]
 8009998:	464b      	mov	r3, r9
 800999a:	aa03      	add	r2, sp, #12
 800999c:	4621      	mov	r1, r4
 800999e:	4640      	mov	r0, r8
 80099a0:	f7ff fee2 	bl	8009768 <_printf_common>
 80099a4:	3001      	adds	r0, #1
 80099a6:	d14c      	bne.n	8009a42 <_printf_i+0x1fe>
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ac:	b004      	add	sp, #16
 80099ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b2:	4835      	ldr	r0, [pc, #212]	; (8009a88 <_printf_i+0x244>)
 80099b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099b8:	6829      	ldr	r1, [r5, #0]
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80099c0:	6029      	str	r1, [r5, #0]
 80099c2:	061d      	lsls	r5, r3, #24
 80099c4:	d514      	bpl.n	80099f0 <_printf_i+0x1ac>
 80099c6:	07df      	lsls	r7, r3, #31
 80099c8:	bf44      	itt	mi
 80099ca:	f043 0320 	orrmi.w	r3, r3, #32
 80099ce:	6023      	strmi	r3, [r4, #0]
 80099d0:	b91e      	cbnz	r6, 80099da <_printf_i+0x196>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	f023 0320 	bic.w	r3, r3, #32
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	2310      	movs	r3, #16
 80099dc:	e7b0      	b.n	8009940 <_printf_i+0xfc>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	f043 0320 	orr.w	r3, r3, #32
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	2378      	movs	r3, #120	; 0x78
 80099e8:	4828      	ldr	r0, [pc, #160]	; (8009a8c <_printf_i+0x248>)
 80099ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099ee:	e7e3      	b.n	80099b8 <_printf_i+0x174>
 80099f0:	0659      	lsls	r1, r3, #25
 80099f2:	bf48      	it	mi
 80099f4:	b2b6      	uxthmi	r6, r6
 80099f6:	e7e6      	b.n	80099c6 <_printf_i+0x182>
 80099f8:	4615      	mov	r5, r2
 80099fa:	e7bb      	b.n	8009974 <_printf_i+0x130>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	6826      	ldr	r6, [r4, #0]
 8009a00:	6961      	ldr	r1, [r4, #20]
 8009a02:	1d18      	adds	r0, r3, #4
 8009a04:	6028      	str	r0, [r5, #0]
 8009a06:	0635      	lsls	r5, r6, #24
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	d501      	bpl.n	8009a10 <_printf_i+0x1cc>
 8009a0c:	6019      	str	r1, [r3, #0]
 8009a0e:	e002      	b.n	8009a16 <_printf_i+0x1d2>
 8009a10:	0670      	lsls	r0, r6, #25
 8009a12:	d5fb      	bpl.n	8009a0c <_printf_i+0x1c8>
 8009a14:	8019      	strh	r1, [r3, #0]
 8009a16:	2300      	movs	r3, #0
 8009a18:	6123      	str	r3, [r4, #16]
 8009a1a:	4615      	mov	r5, r2
 8009a1c:	e7ba      	b.n	8009994 <_printf_i+0x150>
 8009a1e:	682b      	ldr	r3, [r5, #0]
 8009a20:	1d1a      	adds	r2, r3, #4
 8009a22:	602a      	str	r2, [r5, #0]
 8009a24:	681d      	ldr	r5, [r3, #0]
 8009a26:	6862      	ldr	r2, [r4, #4]
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f7f6 fbd8 	bl	80001e0 <memchr>
 8009a30:	b108      	cbz	r0, 8009a36 <_printf_i+0x1f2>
 8009a32:	1b40      	subs	r0, r0, r5
 8009a34:	6060      	str	r0, [r4, #4]
 8009a36:	6863      	ldr	r3, [r4, #4]
 8009a38:	6123      	str	r3, [r4, #16]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a40:	e7a8      	b.n	8009994 <_printf_i+0x150>
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	462a      	mov	r2, r5
 8009a46:	4649      	mov	r1, r9
 8009a48:	4640      	mov	r0, r8
 8009a4a:	47d0      	blx	sl
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d0ab      	beq.n	80099a8 <_printf_i+0x164>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	079b      	lsls	r3, r3, #30
 8009a54:	d413      	bmi.n	8009a7e <_printf_i+0x23a>
 8009a56:	68e0      	ldr	r0, [r4, #12]
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	4298      	cmp	r0, r3
 8009a5c:	bfb8      	it	lt
 8009a5e:	4618      	movlt	r0, r3
 8009a60:	e7a4      	b.n	80099ac <_printf_i+0x168>
 8009a62:	2301      	movs	r3, #1
 8009a64:	4632      	mov	r2, r6
 8009a66:	4649      	mov	r1, r9
 8009a68:	4640      	mov	r0, r8
 8009a6a:	47d0      	blx	sl
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d09b      	beq.n	80099a8 <_printf_i+0x164>
 8009a70:	3501      	adds	r5, #1
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	9903      	ldr	r1, [sp, #12]
 8009a76:	1a5b      	subs	r3, r3, r1
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dcf2      	bgt.n	8009a62 <_printf_i+0x21e>
 8009a7c:	e7eb      	b.n	8009a56 <_printf_i+0x212>
 8009a7e:	2500      	movs	r5, #0
 8009a80:	f104 0619 	add.w	r6, r4, #25
 8009a84:	e7f5      	b.n	8009a72 <_printf_i+0x22e>
 8009a86:	bf00      	nop
 8009a88:	0800a0ad 	.word	0x0800a0ad
 8009a8c:	0800a0be 	.word	0x0800a0be

08009a90 <_read_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	; (8009ab0 <_read_r+0x20>)
 8009a94:	4604      	mov	r4, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	602a      	str	r2, [r5, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7f7 fc2e 	bl	8001300 <_read>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_read_r+0x1e>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_read_r+0x1e>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	200042c8 	.word	0x200042c8

08009ab4 <__swbuf_r>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	460e      	mov	r6, r1
 8009ab8:	4614      	mov	r4, r2
 8009aba:	4605      	mov	r5, r0
 8009abc:	b118      	cbz	r0, 8009ac6 <__swbuf_r+0x12>
 8009abe:	6983      	ldr	r3, [r0, #24]
 8009ac0:	b90b      	cbnz	r3, 8009ac6 <__swbuf_r+0x12>
 8009ac2:	f7fe ffb1 	bl	8008a28 <__sinit>
 8009ac6:	4b21      	ldr	r3, [pc, #132]	; (8009b4c <__swbuf_r+0x98>)
 8009ac8:	429c      	cmp	r4, r3
 8009aca:	d12b      	bne.n	8009b24 <__swbuf_r+0x70>
 8009acc:	686c      	ldr	r4, [r5, #4]
 8009ace:	69a3      	ldr	r3, [r4, #24]
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	071a      	lsls	r2, r3, #28
 8009ad6:	d52f      	bpl.n	8009b38 <__swbuf_r+0x84>
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	b36b      	cbz	r3, 8009b38 <__swbuf_r+0x84>
 8009adc:	6923      	ldr	r3, [r4, #16]
 8009ade:	6820      	ldr	r0, [r4, #0]
 8009ae0:	1ac0      	subs	r0, r0, r3
 8009ae2:	6963      	ldr	r3, [r4, #20]
 8009ae4:	b2f6      	uxtb	r6, r6
 8009ae6:	4283      	cmp	r3, r0
 8009ae8:	4637      	mov	r7, r6
 8009aea:	dc04      	bgt.n	8009af6 <__swbuf_r+0x42>
 8009aec:	4621      	mov	r1, r4
 8009aee:	4628      	mov	r0, r5
 8009af0:	f7ff fade 	bl	80090b0 <_fflush_r>
 8009af4:	bb30      	cbnz	r0, 8009b44 <__swbuf_r+0x90>
 8009af6:	68a3      	ldr	r3, [r4, #8]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	60a3      	str	r3, [r4, #8]
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	6022      	str	r2, [r4, #0]
 8009b02:	701e      	strb	r6, [r3, #0]
 8009b04:	6963      	ldr	r3, [r4, #20]
 8009b06:	3001      	adds	r0, #1
 8009b08:	4283      	cmp	r3, r0
 8009b0a:	d004      	beq.n	8009b16 <__swbuf_r+0x62>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	07db      	lsls	r3, r3, #31
 8009b10:	d506      	bpl.n	8009b20 <__swbuf_r+0x6c>
 8009b12:	2e0a      	cmp	r6, #10
 8009b14:	d104      	bne.n	8009b20 <__swbuf_r+0x6c>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f7ff fac9 	bl	80090b0 <_fflush_r>
 8009b1e:	b988      	cbnz	r0, 8009b44 <__swbuf_r+0x90>
 8009b20:	4638      	mov	r0, r7
 8009b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b24:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <__swbuf_r+0x9c>)
 8009b26:	429c      	cmp	r4, r3
 8009b28:	d101      	bne.n	8009b2e <__swbuf_r+0x7a>
 8009b2a:	68ac      	ldr	r4, [r5, #8]
 8009b2c:	e7cf      	b.n	8009ace <__swbuf_r+0x1a>
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <__swbuf_r+0xa0>)
 8009b30:	429c      	cmp	r4, r3
 8009b32:	bf08      	it	eq
 8009b34:	68ec      	ldreq	r4, [r5, #12]
 8009b36:	e7ca      	b.n	8009ace <__swbuf_r+0x1a>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 f80c 	bl	8009b58 <__swsetup_r>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0cb      	beq.n	8009adc <__swbuf_r+0x28>
 8009b44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b48:	e7ea      	b.n	8009b20 <__swbuf_r+0x6c>
 8009b4a:	bf00      	nop
 8009b4c:	0800a058 	.word	0x0800a058
 8009b50:	0800a078 	.word	0x0800a078
 8009b54:	0800a038 	.word	0x0800a038

08009b58 <__swsetup_r>:
 8009b58:	4b32      	ldr	r3, [pc, #200]	; (8009c24 <__swsetup_r+0xcc>)
 8009b5a:	b570      	push	{r4, r5, r6, lr}
 8009b5c:	681d      	ldr	r5, [r3, #0]
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460c      	mov	r4, r1
 8009b62:	b125      	cbz	r5, 8009b6e <__swsetup_r+0x16>
 8009b64:	69ab      	ldr	r3, [r5, #24]
 8009b66:	b913      	cbnz	r3, 8009b6e <__swsetup_r+0x16>
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f7fe ff5d 	bl	8008a28 <__sinit>
 8009b6e:	4b2e      	ldr	r3, [pc, #184]	; (8009c28 <__swsetup_r+0xd0>)
 8009b70:	429c      	cmp	r4, r3
 8009b72:	d10f      	bne.n	8009b94 <__swsetup_r+0x3c>
 8009b74:	686c      	ldr	r4, [r5, #4]
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b7c:	0719      	lsls	r1, r3, #28
 8009b7e:	d42c      	bmi.n	8009bda <__swsetup_r+0x82>
 8009b80:	06dd      	lsls	r5, r3, #27
 8009b82:	d411      	bmi.n	8009ba8 <__swsetup_r+0x50>
 8009b84:	2309      	movs	r3, #9
 8009b86:	6033      	str	r3, [r6, #0]
 8009b88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b92:	e03e      	b.n	8009c12 <__swsetup_r+0xba>
 8009b94:	4b25      	ldr	r3, [pc, #148]	; (8009c2c <__swsetup_r+0xd4>)
 8009b96:	429c      	cmp	r4, r3
 8009b98:	d101      	bne.n	8009b9e <__swsetup_r+0x46>
 8009b9a:	68ac      	ldr	r4, [r5, #8]
 8009b9c:	e7eb      	b.n	8009b76 <__swsetup_r+0x1e>
 8009b9e:	4b24      	ldr	r3, [pc, #144]	; (8009c30 <__swsetup_r+0xd8>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	bf08      	it	eq
 8009ba4:	68ec      	ldreq	r4, [r5, #12]
 8009ba6:	e7e6      	b.n	8009b76 <__swsetup_r+0x1e>
 8009ba8:	0758      	lsls	r0, r3, #29
 8009baa:	d512      	bpl.n	8009bd2 <__swsetup_r+0x7a>
 8009bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bae:	b141      	cbz	r1, 8009bc2 <__swsetup_r+0x6a>
 8009bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bb4:	4299      	cmp	r1, r3
 8009bb6:	d002      	beq.n	8009bbe <__swsetup_r+0x66>
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff fad3 	bl	8009164 <_free_r>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6063      	str	r3, [r4, #4]
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f043 0308 	orr.w	r3, r3, #8
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	b94b      	cbnz	r3, 8009bf2 <__swsetup_r+0x9a>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009be8:	d003      	beq.n	8009bf2 <__swsetup_r+0x9a>
 8009bea:	4621      	mov	r1, r4
 8009bec:	4630      	mov	r0, r6
 8009bee:	f000 f847 	bl	8009c80 <__smakebuf_r>
 8009bf2:	89a0      	ldrh	r0, [r4, #12]
 8009bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bf8:	f010 0301 	ands.w	r3, r0, #1
 8009bfc:	d00a      	beq.n	8009c14 <__swsetup_r+0xbc>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60a3      	str	r3, [r4, #8]
 8009c02:	6963      	ldr	r3, [r4, #20]
 8009c04:	425b      	negs	r3, r3
 8009c06:	61a3      	str	r3, [r4, #24]
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	b943      	cbnz	r3, 8009c1e <__swsetup_r+0xc6>
 8009c0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c10:	d1ba      	bne.n	8009b88 <__swsetup_r+0x30>
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	0781      	lsls	r1, r0, #30
 8009c16:	bf58      	it	pl
 8009c18:	6963      	ldrpl	r3, [r4, #20]
 8009c1a:	60a3      	str	r3, [r4, #8]
 8009c1c:	e7f4      	b.n	8009c08 <__swsetup_r+0xb0>
 8009c1e:	2000      	movs	r0, #0
 8009c20:	e7f7      	b.n	8009c12 <__swsetup_r+0xba>
 8009c22:	bf00      	nop
 8009c24:	20000018 	.word	0x20000018
 8009c28:	0800a058 	.word	0x0800a058
 8009c2c:	0800a078 	.word	0x0800a078
 8009c30:	0800a038 	.word	0x0800a038

08009c34 <__swhatbuf_r>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	460e      	mov	r6, r1
 8009c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	b096      	sub	sp, #88	; 0x58
 8009c40:	4614      	mov	r4, r2
 8009c42:	461d      	mov	r5, r3
 8009c44:	da08      	bge.n	8009c58 <__swhatbuf_r+0x24>
 8009c46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	602a      	str	r2, [r5, #0]
 8009c4e:	061a      	lsls	r2, r3, #24
 8009c50:	d410      	bmi.n	8009c74 <__swhatbuf_r+0x40>
 8009c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c56:	e00e      	b.n	8009c76 <__swhatbuf_r+0x42>
 8009c58:	466a      	mov	r2, sp
 8009c5a:	f000 f89b 	bl	8009d94 <_fstat_r>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	dbf1      	blt.n	8009c46 <__swhatbuf_r+0x12>
 8009c62:	9a01      	ldr	r2, [sp, #4]
 8009c64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c6c:	425a      	negs	r2, r3
 8009c6e:	415a      	adcs	r2, r3
 8009c70:	602a      	str	r2, [r5, #0]
 8009c72:	e7ee      	b.n	8009c52 <__swhatbuf_r+0x1e>
 8009c74:	2340      	movs	r3, #64	; 0x40
 8009c76:	2000      	movs	r0, #0
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	b016      	add	sp, #88	; 0x58
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c80 <__smakebuf_r>:
 8009c80:	898b      	ldrh	r3, [r1, #12]
 8009c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c84:	079d      	lsls	r5, r3, #30
 8009c86:	4606      	mov	r6, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	d507      	bpl.n	8009c9c <__smakebuf_r+0x1c>
 8009c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	6123      	str	r3, [r4, #16]
 8009c94:	2301      	movs	r3, #1
 8009c96:	6163      	str	r3, [r4, #20]
 8009c98:	b002      	add	sp, #8
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	ab01      	add	r3, sp, #4
 8009c9e:	466a      	mov	r2, sp
 8009ca0:	f7ff ffc8 	bl	8009c34 <__swhatbuf_r>
 8009ca4:	9900      	ldr	r1, [sp, #0]
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7fe ffc9 	bl	8008c40 <_malloc_r>
 8009cae:	b948      	cbnz	r0, 8009cc4 <__smakebuf_r+0x44>
 8009cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb4:	059a      	lsls	r2, r3, #22
 8009cb6:	d4ef      	bmi.n	8009c98 <__smakebuf_r+0x18>
 8009cb8:	f023 0303 	bic.w	r3, r3, #3
 8009cbc:	f043 0302 	orr.w	r3, r3, #2
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e7e3      	b.n	8009c8c <__smakebuf_r+0xc>
 8009cc4:	4b0d      	ldr	r3, [pc, #52]	; (8009cfc <__smakebuf_r+0x7c>)
 8009cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	6020      	str	r0, [r4, #0]
 8009ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	6163      	str	r3, [r4, #20]
 8009cd6:	9b01      	ldr	r3, [sp, #4]
 8009cd8:	6120      	str	r0, [r4, #16]
 8009cda:	b15b      	cbz	r3, 8009cf4 <__smakebuf_r+0x74>
 8009cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	f000 f869 	bl	8009db8 <_isatty_r>
 8009ce6:	b128      	cbz	r0, 8009cf4 <__smakebuf_r+0x74>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	89a0      	ldrh	r0, [r4, #12]
 8009cf6:	4305      	orrs	r5, r0
 8009cf8:	81a5      	strh	r5, [r4, #12]
 8009cfa:	e7cd      	b.n	8009c98 <__smakebuf_r+0x18>
 8009cfc:	080089c1 	.word	0x080089c1

08009d00 <memmove>:
 8009d00:	4288      	cmp	r0, r1
 8009d02:	b510      	push	{r4, lr}
 8009d04:	eb01 0402 	add.w	r4, r1, r2
 8009d08:	d902      	bls.n	8009d10 <memmove+0x10>
 8009d0a:	4284      	cmp	r4, r0
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	d807      	bhi.n	8009d20 <memmove+0x20>
 8009d10:	1e43      	subs	r3, r0, #1
 8009d12:	42a1      	cmp	r1, r4
 8009d14:	d008      	beq.n	8009d28 <memmove+0x28>
 8009d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d1e:	e7f8      	b.n	8009d12 <memmove+0x12>
 8009d20:	4402      	add	r2, r0
 8009d22:	4601      	mov	r1, r0
 8009d24:	428a      	cmp	r2, r1
 8009d26:	d100      	bne.n	8009d2a <memmove+0x2a>
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d32:	e7f7      	b.n	8009d24 <memmove+0x24>

08009d34 <_realloc_r>:
 8009d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d38:	4680      	mov	r8, r0
 8009d3a:	4614      	mov	r4, r2
 8009d3c:	460e      	mov	r6, r1
 8009d3e:	b921      	cbnz	r1, 8009d4a <_realloc_r+0x16>
 8009d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d44:	4611      	mov	r1, r2
 8009d46:	f7fe bf7b 	b.w	8008c40 <_malloc_r>
 8009d4a:	b92a      	cbnz	r2, 8009d58 <_realloc_r+0x24>
 8009d4c:	f7ff fa0a 	bl	8009164 <_free_r>
 8009d50:	4625      	mov	r5, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d58:	f000 f83e 	bl	8009dd8 <_malloc_usable_size_r>
 8009d5c:	4284      	cmp	r4, r0
 8009d5e:	4607      	mov	r7, r0
 8009d60:	d802      	bhi.n	8009d68 <_realloc_r+0x34>
 8009d62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d66:	d812      	bhi.n	8009d8e <_realloc_r+0x5a>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	f7fe ff68 	bl	8008c40 <_malloc_r>
 8009d70:	4605      	mov	r5, r0
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d0ed      	beq.n	8009d52 <_realloc_r+0x1e>
 8009d76:	42bc      	cmp	r4, r7
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	bf28      	it	cs
 8009d7e:	463a      	movcs	r2, r7
 8009d80:	f7fe ff27 	bl	8008bd2 <memcpy>
 8009d84:	4631      	mov	r1, r6
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7ff f9ec 	bl	8009164 <_free_r>
 8009d8c:	e7e1      	b.n	8009d52 <_realloc_r+0x1e>
 8009d8e:	4635      	mov	r5, r6
 8009d90:	e7df      	b.n	8009d52 <_realloc_r+0x1e>
	...

08009d94 <_fstat_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d07      	ldr	r5, [pc, #28]	; (8009db4 <_fstat_r+0x20>)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	4611      	mov	r1, r2
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	f7f7 faf2 	bl	800138a <_fstat>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d102      	bne.n	8009db0 <_fstat_r+0x1c>
 8009daa:	682b      	ldr	r3, [r5, #0]
 8009dac:	b103      	cbz	r3, 8009db0 <_fstat_r+0x1c>
 8009dae:	6023      	str	r3, [r4, #0]
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
 8009db2:	bf00      	nop
 8009db4:	200042c8 	.word	0x200042c8

08009db8 <_isatty_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d06      	ldr	r5, [pc, #24]	; (8009dd4 <_isatty_r+0x1c>)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	602b      	str	r3, [r5, #0]
 8009dc4:	f7f7 faf1 	bl	80013aa <_isatty>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_isatty_r+0x1a>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_isatty_r+0x1a>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	200042c8 	.word	0x200042c8

08009dd8 <_malloc_usable_size_r>:
 8009dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ddc:	1f18      	subs	r0, r3, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfbc      	itt	lt
 8009de2:	580b      	ldrlt	r3, [r1, r0]
 8009de4:	18c0      	addlt	r0, r0, r3
 8009de6:	4770      	bx	lr

08009de8 <_init>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr

08009df4 <_fini>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	bf00      	nop
 8009df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	469e      	mov	lr, r3
 8009dfe:	4770      	bx	lr
