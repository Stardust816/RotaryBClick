
Rtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000853c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088b0  080088b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080088b0  080088b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088b8  080088b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b8  080088b8  000188b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088bc  080088bc  000188bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080088c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002da4  20000074  08008934  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e18  08008934  00022e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8cd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef7  00000000  00000000  0003f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00043868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00045120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005093  00000000  00000000  00046850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba96  00000000  00000000  0004b8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6f5f  00000000  00000000  00067379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e2d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070bc  00000000  00000000  0013e328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086b4 	.word	0x080086b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080086b4 	.word	0x080086b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setleds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setleds(uint16_t ledring) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]

	//uint16_t ledring = 0b1010101010101010;

	for (int i = 0; i < 16; i++) {
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e01f      	b.n	80005d4 <setleds+0x50>

		if (ledring & (1 << i)) {
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	fa42 f303 	asr.w	r3, r2, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <setleds+0x2c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4815      	ldr	r0, [pc, #84]	; (8000600 <setleds+0x7c>)
 80005aa:	f001 f9d3 	bl	8001954 <HAL_GPIO_WritePin>
 80005ae:	e004      	b.n	80005ba <setleds+0x36>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <setleds+0x7c>)
 80005b6:	f001 f9cd 	bl	8001954 <HAL_GPIO_WritePin>
		}

		//SCK
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <setleds+0x7c>)
 80005c0:	f001 f9c8 	bl	8001954 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <setleds+0x7c>)
 80005ca:	f001 f9c3 	bl	8001954 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	dddc      	ble.n	8000594 <setleds+0x10>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	}

	//Latch
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2101      	movs	r1, #1
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <setleds+0x7c>)
 80005e0:	f001 f9b8 	bl	8001954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <setleds+0x7c>)
 80005ea:	f001 f9b3 	bl	8001954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <setleds+0x7c>)
 80005f4:	f001 f9ae 	bl	8001954 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000400 	.word	0x48000400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd21 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f836 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f8b4 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f000 f894 	bl	8000740 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000618:	f000 fbda 	bl	8000dd0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800061c:	f000 fba8 	bl	8000d70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f003 feb6 	bl	8004390 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RotaryEncoderQueue */
  RotaryEncoderQueueHandle = osMessageQueueNew (16, sizeof(InputEvent), &RotaryEncoderQueue_attributes);
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <main+0x58>)
 8000626:	2108      	movs	r1, #8
 8000628:	2010      	movs	r0, #16
 800062a:	f003 ffa8 	bl	800457e <osMessageQueueNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <main+0x5c>)
 8000632:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <main+0x60>)
 8000636:	2100      	movs	r1, #0
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <main+0x64>)
 800063a:	f003 fef3 	bl	8004424 <osThreadNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <main+0x68>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <main+0x6c>)
 8000646:	2100      	movs	r1, #0
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0x70>)
 800064a:	f003 feeb 	bl	8004424 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <main+0x74>)
 8000652:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000654:	f003 fec0 	bl	80043d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000658:	e7fe      	b.n	8000658 <main+0x54>
 800065a:	bf00      	nop
 800065c:	080087b8 	.word	0x080087b8
 8000660:	20000610 	.word	0x20000610
 8000664:	08008770 	.word	0x08008770
 8000668:	08000845 	.word	0x08000845
 800066c:	20000090 	.word	0x20000090
 8000670:	08008794 	.word	0x08008794
 8000674:	080008a9 	.word	0x080008a9
 8000678:	20000350 	.word	0x20000350

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	; 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 ff27 	bl	80074de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a2:	f001 f98d 	bl	80019c0 <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f000 f9c4 	bl	8000a38 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b0:	f001 f968 	bl	8001984 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <SystemClock_Config+0xc0>)
 80006b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <SystemClock_Config+0xc0>)
 80006bc:	f023 0318 	bic.w	r3, r3, #24
 80006c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006c4:	2314      	movs	r3, #20
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d4:	2360      	movs	r3, #96	; 0x60
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006dc:	2301      	movs	r3, #1
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006e4:	2310      	movs	r3, #16
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f9b7 	bl	8001a6c <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000704:	f000 f998 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2303      	movs	r3, #3
 800070e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	2101      	movs	r1, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fdb7 	bl	8002294 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800072c:	f000 f984 	bl	8000a38 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000730:	f002 f9fc 	bl	8002b2c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	; 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_DMA_Init+0x38>)
 8000748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <MX_DMA_Init+0x38>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6493      	str	r3, [r2, #72]	; 0x48
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_DMA_Init+0x38>)
 8000754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2105      	movs	r1, #5
 8000762:	200f      	movs	r0, #15
 8000764:	f000 fd64 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000768:	200f      	movs	r0, #15
 800076a:	f000 fd7d 	bl	8001268 <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_GPIO_Init+0xc0>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a29      	ldr	r2, [pc, #164]	; (800083c <MX_GPIO_Init+0xc0>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_GPIO_Init+0xc0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0xc0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_GPIO_Init+0xc0>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_GPIO_Init+0xc0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_GPIO_Init+0xc0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <MX_GPIO_Init+0xc0>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_GPIO_Init+0xc0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2129      	movs	r1, #41	; 0x29
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007e0:	f001 f8b8 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80007e4:	2309      	movs	r3, #9
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 ff29 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_5;
 80007fe:	2329      	movs	r3, #41	; 0x29
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <MX_GPIO_Init+0xc4>)
 8000816:	f000 ff1b 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0xc4>)
 800082e:	f000 ff0f 	bl	8001650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400

08000844 <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
		/*setleds(0b1010101010101010);
		 osDelay(1000);
		 setleds(0b0101010101010101);
		 osDelay(1000);*/

		osStatus_t ret = osMessageQueueGet(RotaryEncoderQueueHandle, &event, 0,
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <StartLedTask+0x58>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	f107 0108 	add.w	r1, r7, #8
 8000854:	230a      	movs	r3, #10
 8000856:	2200      	movs	r2, #0
 8000858:	f003 ff64 	bl	8004724 <osMessageQueueGet>
 800085c:	6138      	str	r0, [r7, #16]
				10);
		if (ret != osOK) {
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <StartLedTask+0x28>
			//something went wrong
			printf("\r\ncannot read item from queue");
 8000864:	480e      	ldr	r0, [pc, #56]	; (80008a0 <StartLedTask+0x5c>)
 8000866:	f006 fed7 	bl	8007618 <iprintf>
 800086a:	e013      	b.n	8000894 <StartLedTask+0x50>
		} else {
			printf("\r\nread item");
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <StartLedTask+0x60>)
 800086e:	f006 fed3 	bl	8007618 <iprintf>

			uint32_t value;

			if (event.button_pressed) { //If 6th bit set, button was pressed -> pause game -> display on leds
 8000872:	7a3b      	ldrb	r3, [r7, #8]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d003      	beq.n	8000880 <StartLedTask+0x3c>
				value = 0b1010101010101010;
 8000878:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e004      	b.n	800088a <StartLedTask+0x46>
			} else {
				value = 1 << event.counter;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2201      	movs	r2, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
			}
			setleds(value);
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe78 	bl	8000584 <setleds>
		}

		osDelay(2);
 8000894:	2002      	movs	r0, #2
 8000896:	f003 fe57 	bl	8004548 <osDelay>
	for (;;) {
 800089a:	e7d7      	b.n	800084c <StartLedTask+0x8>
 800089c:	20000610 	.word	0x20000610
 80008a0:	080086f4 	.word	0x080086f4
 80008a4:	08008714 	.word	0x08008714

080008a8 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	uint16_t counter = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	86bb      	strh	r3, [r7, #52]	; 0x34
	//uint16_t old_counter = 0;
	uint8_t old_state_a = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state_button = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	InputEvent event;
	event.button_pressed = true;
 80008c0:	2301      	movs	r3, #1
 80008c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	event.counter = LEDSTART;
 80008c6:	2307      	movs	r3, #7
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
	InputEvent oldevent;
	/* Infinite loop */
	for (;;) {

		uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80008ca:	2101      	movs	r1, #1
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f001 f828 	bl	8001924 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80008da:	2102      	movs	r1, #2
 80008dc:	4847      	ldr	r0, [pc, #284]	; (80009fc <StartEncoderTask+0x154>)
 80008de:	f001 f821 	bl	8001924 <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint8_t button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80008e8:	2108      	movs	r1, #8
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f001 f819 	bl	8001924 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if (a != old_state_a && event.counter <= 16) {
 80008f8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80008fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000900:	429a      	cmp	r2, r3
 8000902:	d015      	beq.n	8000930 <StartEncoderTask+0x88>
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	2b10      	cmp	r3, #16
 8000908:	dc12      	bgt.n	8000930 <StartEncoderTask+0x88>

			if (a != b) {
 800090a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800090e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000912:	429a      	cmp	r2, r3
 8000914:	d006      	beq.n	8000924 <StartEncoderTask+0x7c>
				if (LEDMAX > event.counter)
 8000916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000918:	2b0a      	cmp	r3, #10
 800091a:	dc09      	bgt.n	8000930 <StartEncoderTask+0x88>
					event.counter++;
 800091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091e:	3301      	adds	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
 8000922:	e005      	b.n	8000930 <StartEncoderTask+0x88>

			} else if (LEDMIN != event.counter) {
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	2b03      	cmp	r3, #3
 8000928:	d002      	beq.n	8000930 <StartEncoderTask+0x88>
				//if(counter != 3)
				event.counter--;
 800092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092c:	3b01      	subs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28

			}
		}

		if (old_state_button != button && button) {
 8000930:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000934:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000938:	429a      	cmp	r2, r3
 800093a:	d014      	beq.n	8000966 <StartEncoderTask+0xbe>
 800093c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000940:	2b00      	cmp	r3, #0
 8000942:	d010      	beq.n	8000966 <StartEncoderTask+0xbe>
			event.button_pressed = !event.button_pressed; //Bit toggle -> XOR -> toggle 6th bit
 8000944:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f083 0301 	eor.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			event.counter = LEDSTART;
 8000962:	2307      	movs	r3, #7
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
			//setleds(0b1010101010101010);
		}

		if (memcmp(&oldevent, &event, sizeof(event))) {
 8000966:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2208      	movs	r2, #8
 8000970:	4618      	mov	r0, r3
 8000972:	f006 fd96 	bl	80074a2 <memcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d02b      	beq.n	80009d4 <StartEncoderTask+0x12c>

			char msg1[16];
			snprintf(msg1, sizeof(msg1), "%d\r\n", event.counter);
 800097c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097e:	f107 000c 	add.w	r0, r7, #12
 8000982:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <StartEncoderTask+0x158>)
 8000984:	2110      	movs	r1, #16
 8000986:	f006 fed9 	bl	800773c <sniprintf>

			HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), 1000);
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc1e 	bl	80001d0 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	f107 010c 	add.w	r1, r7, #12
 800099c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <StartEncoderTask+0x15c>)
 80009a2:	f002 fc93 	bl	80032cc <HAL_UART_Transmit>

			//uint32_t leds = 0xFFFF0000;

			//leds = leds >> counter;
			//event.counter = counter;
			osStatus_t ret = osMessageQueuePut(RotaryEncoderQueueHandle,
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <StartEncoderTask+0x160>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009ae:	230a      	movs	r3, #10
 80009b0:	2200      	movs	r2, #0
 80009b2:	f003 fe57 	bl	8004664 <osMessageQueuePut>
 80009b6:	62f8      	str	r0, [r7, #44]	; 0x2c
					&event, 0, 10);

			if (ret != osOK) {
 80009b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d005      	beq.n	80009ca <StartEncoderTask+0x122>
				//something went wrong
				printf("\r\ncannot enqueue item %u", counter);
 80009be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009c0:	4619      	mov	r1, r3
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <StartEncoderTask+0x164>)
 80009c4:	f006 fe28 	bl	8007618 <iprintf>
 80009c8:	e004      	b.n	80009d4 <StartEncoderTask+0x12c>
			} else {
				printf("\r\nenqueued item %u", counter);
 80009ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009cc:	4619      	mov	r1, r3
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <StartEncoderTask+0x168>)
 80009d0:	f006 fe22 	bl	8007618 <iprintf>
			}
		}
		old_state_a = a;
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		old_state_button = button;
 80009dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80009e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//old_counter = counter;
		memcpy(&oldevent, &event, sizeof(event));
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f0:	e883 0003 	stmia.w	r3, {r0, r1}
		osDelay(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f003 fda7 	bl	8004548 <osDelay>
	for (;;) {
 80009fa:	e766      	b.n	80008ca <StartEncoderTask+0x22>
 80009fc:	48000400 	.word	0x48000400
 8000a00:	08008720 	.word	0x08008720
 8000a04:	200007b8 	.word	0x200007b8
 8000a08:	20000610 	.word	0x20000610
 8000a0c:	08008728 	.word	0x08008728
 8000a10:	08008744 	.word	0x08008744

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 fb2b 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40001000 	.word	0x40001000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	; 0x60
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 fbd5 	bl	8001230 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <HAL_InitTick+0xe0>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <HAL_InitTick+0xe0>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <HAL_InitTick+0xe0>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aba:	f107 0210 	add.w	r2, r7, #16
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fda9 	bl	800261c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d103      	bne.n	8000adc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad4:	f001 fd76 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8000ad8:	6378      	str	r0, [r7, #52]	; 0x34
 8000ada:	e004      	b.n	8000ae6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000adc:	f001 fd72 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae8:	4a23      	ldr	r2, [pc, #140]	; (8000b78 <HAL_InitTick+0xe4>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_InitTick+0xe8>)
 8000af6:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <HAL_InitTick+0xec>)
 8000af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <HAL_InitTick+0xe8>)
 8000afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <HAL_InitTick+0xe8>)
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_InitTick+0xe8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_InitTick+0xe8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_InitTick+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b1a:	4818      	ldr	r0, [pc, #96]	; (8000b7c <HAL_InitTick+0xe8>)
 8000b1c:	f002 f908 	bl	8002d30 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d11b      	bne.n	8000b66 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b2e:	4813      	ldr	r0, [pc, #76]	; (8000b7c <HAL_InitTick+0xe8>)
 8000b30:	f002 f960 	bl	8002df4 <HAL_TIM_Base_Start_IT>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d111      	bne.n	8000b66 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b42:	2036      	movs	r0, #54	; 0x36
 8000b44:	f000 fb90 	bl	8001268 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d808      	bhi.n	8000b60 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	2036      	movs	r0, #54	; 0x36
 8000b54:	f000 fb6c 	bl	8001230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_InitTick+0xf0>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e002      	b.n	8000b66 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3738      	adds	r7, #56	; 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	200006e4 	.word	0x200006e4
 8000b80:	40001000 	.word	0x40001000
 8000b84:	20000004 	.word	0x20000004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <DMA1_Channel5_IRQHandler+0x10>)
 8000bba:	f000 fc9a 	bl	80014f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000083c 	.word	0x2000083c

08000bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART1_IRQHandler+0x10>)
 8000bce:	f002 fc11 	bl	80033f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000734 	.word	0x20000734

08000bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART2_IRQHandler+0x10>)
 8000be2:	f002 fc07 	bl	80033f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200007b8 	.word	0x200007b8

08000bf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM6_DAC_IRQHandler+0x10>)
 8000bf6:	f002 f951 	bl	8002e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200006e4 	.word	0x200006e4

08000c04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
  }

  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
  }
  return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_isatty>:

int _isatty(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f006 faa4 	bl	800725c <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20010000 	.word	0x20010000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000730 	.word	0x20000730
 8000d48:	20002e18 	.word	0x20002e18

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MX_USART1_UART_Init+0x5c>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000db4:	f002 fa3c 	bl	8003230 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f7ff fe3b 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000734 	.word	0x20000734
 8000dcc:	40013800 	.word	0x40013800

08000dd0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000dd6:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <MX_USART2_UART_Init+0x5c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000e14:	f002 fa0c 	bl	8003230 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e1e:	f7ff fe0b 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200007b8 	.word	0x200007b8
 8000e2c:	40004400 	.word	0x40004400

08000e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0a0      	sub	sp, #128	; 0x80
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	2254      	movs	r2, #84	; 0x54
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f006 fb44 	bl	80074de <memset>
  if(uartHandle->Instance==USART1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a63      	ldr	r2, [pc, #396]	; (8000fe8 <HAL_UART_MspInit+0x1b8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d169      	bne.n	8000f34 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fc67 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e78:	f7ff fdde 	bl	8000a38 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e80:	4a5a      	ldr	r2, [pc, #360]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6613      	str	r3, [r2, #96]	; 0x60
 8000e88:	4b58      	ldr	r3, [pc, #352]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b55      	ldr	r3, [pc, #340]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a54      	ldr	r2, [pc, #336]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 fbc0 	bl	8001650 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ed0:	4b47      	ldr	r3, [pc, #284]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000ed2:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_UART_MspInit+0x1c4>)
 8000ed4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000ed6:	4b46      	ldr	r3, [pc, #280]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000edc:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eee:	4b40      	ldr	r3, [pc, #256]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef4:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000efc:	2220      	movs	r2, #32
 8000efe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f00:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f06:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000f08:	f000 f9bc 	bl	8001284 <HAL_DMA_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f12:	f7ff fd91 	bl	8000a38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a35      	ldr	r2, [pc, #212]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000f1a:	671a      	str	r2, [r3, #112]	; 0x70
 8000f1c:	4a34      	ldr	r2, [pc, #208]	; (8000ff0 <HAL_UART_MspInit+0x1c0>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	2025      	movs	r0, #37	; 0x25
 8000f28:	f000 f982 	bl	8001230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f2c:	2025      	movs	r0, #37	; 0x25
 8000f2e:	f000 f99b 	bl	8001268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f32:	e055      	b.n	8000fe0 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <HAL_UART_MspInit+0x1c8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d150      	bne.n	8000fe0 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fbf8 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8000f56:	f7ff fd6f 	bl	8000a38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_UART_MspInit+0x1bc>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fb52 	bl	8001650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f000 fb40 	bl	8001650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	2026      	movs	r0, #38	; 0x26
 8000fd6:	f000 f92b 	bl	8001230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fda:	2026      	movs	r0, #38	; 0x26
 8000fdc:	f000 f944 	bl	8001268 <HAL_NVIC_EnableIRQ>
}
 8000fe0:	bf00      	nop
 8000fe2:	3780      	adds	r7, #128	; 0x80
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	2000083c 	.word	0x2000083c
 8000ff4:	40020058 	.word	0x40020058
 8000ff8:	40004400 	.word	0x40004400

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001000:	f7ff fea4 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f006 fa13 	bl	8007454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fae9 	bl	8000604 <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001034:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001040:	080088c0 	.word	0x080088c0
  ldr r2, =_sbss
 8001044:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001048:	20002e18 	.word	0x20002e18

0800104c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_IRQHandler>

0800104e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f8de 	bl	800121a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	200f      	movs	r0, #15
 8001060:	f7ff fd18 	bl	8000a94 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fce8 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000884 	.word	0x20000884

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000884 	.word	0x20000884

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4c 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001242:	f7ff ff61 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001246:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff ffb1 	bl	80011b4 <NVIC_EncodePriority>
 8001252:	4602      	mov	r2, r0
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff80 	bl	8001160 <__NVIC_SetPriority>
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff54 	bl	8001124 <__NVIC_EnableIRQ>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e098      	b.n	80013c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_DMA_Init+0x150>)
 800129e:	429a      	cmp	r2, r3
 80012a0:	d80f      	bhi.n	80012c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <HAL_DMA_Init+0x154>)
 80012aa:	4413      	add	r3, r2
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_DMA_Init+0x158>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	009a      	lsls	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a48      	ldr	r2, [pc, #288]	; (80013e0 <HAL_DMA_Init+0x15c>)
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
 80012c0:	e00e      	b.n	80012e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <HAL_DMA_Init+0x160>)
 80012ca:	4413      	add	r3, r2
 80012cc:	4a43      	ldr	r2, [pc, #268]	; (80013dc <HAL_DMA_Init+0x158>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	009a      	lsls	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a42      	ldr	r2, [pc, #264]	; (80013e8 <HAL_DMA_Init+0x164>)
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800133a:	d039      	beq.n	80013b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <HAL_DMA_Init+0x15c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d11a      	bne.n	800137c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_DMA_Init+0x168>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f003 031c 	and.w	r3, r3, #28
 8001352:	210f      	movs	r1, #15
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	4924      	ldr	r1, [pc, #144]	; (80013ec <HAL_DMA_Init+0x168>)
 800135c:	4013      	ands	r3, r2
 800135e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_DMA_Init+0x168>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f003 031c 	and.w	r3, r3, #28
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	491d      	ldr	r1, [pc, #116]	; (80013ec <HAL_DMA_Init+0x168>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
 800137a:	e019      	b.n	80013b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_DMA_Init+0x16c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f003 031c 	and.w	r3, r3, #28
 8001388:	210f      	movs	r1, #15
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	4917      	ldr	r1, [pc, #92]	; (80013f0 <HAL_DMA_Init+0x16c>)
 8001392:	4013      	ands	r3, r2
 8001394:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_DMA_Init+0x16c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6859      	ldr	r1, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f003 031c 	and.w	r3, r3, #28
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	4911      	ldr	r1, [pc, #68]	; (80013f0 <HAL_DMA_Init+0x16c>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40020407 	.word	0x40020407
 80013d8:	bffdfff8 	.word	0xbffdfff8
 80013dc:	cccccccd 	.word	0xcccccccd
 80013e0:	40020000 	.word	0x40020000
 80013e4:	bffdfbf8 	.word	0xbffdfbf8
 80013e8:	40020400 	.word	0x40020400
 80013ec:	400200a8 	.word	0x400200a8
 80013f0:	400204a8 	.word	0x400204a8

080013f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d008      	beq.n	800141e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2204      	movs	r2, #4
 8001410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e022      	b.n	8001464 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 020e 	bic.w	r2, r2, #14
 800142c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 021c 	and.w	r2, r3, #28
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2101      	movs	r1, #1
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d005      	beq.n	8001494 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2204      	movs	r2, #4
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e029      	b.n	80014e8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 020e 	bic.w	r2, r2, #14
 80014a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	f003 021c 	and.w	r2, r3, #28
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	2101      	movs	r1, #1
 80014c2:	fa01 f202 	lsl.w	r2, r1, r2
 80014c6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
    }
  }
  return status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f003 031c 	and.w	r3, r3, #28
 8001512:	2204      	movs	r2, #4
 8001514:	409a      	lsls	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d026      	beq.n	800156c <HAL_DMA_IRQHandler+0x7a>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d021      	beq.n	800156c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0204 	bic.w	r2, r2, #4
 8001544:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021c 	and.w	r2, r3, #28
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2104      	movs	r1, #4
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	2b00      	cmp	r3, #0
 8001560:	d071      	beq.n	8001646 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800156a:	e06c      	b.n	8001646 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f003 031c 	and.w	r3, r3, #28
 8001574:	2202      	movs	r2, #2
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d02e      	beq.n	80015de <HAL_DMA_IRQHandler+0xec>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d029      	beq.n	80015de <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10b      	bne.n	80015b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 020a 	bic.w	r2, r2, #10
 80015a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f003 021c 	and.w	r2, r3, #28
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2102      	movs	r1, #2
 80015be:	fa01 f202 	lsl.w	r2, r1, r2
 80015c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d038      	beq.n	8001646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015dc:	e033      	b.n	8001646 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f003 031c 	and.w	r3, r3, #28
 80015e6:	2208      	movs	r2, #8
 80015e8:	409a      	lsls	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d02a      	beq.n	8001648 <HAL_DMA_IRQHandler+0x156>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d025      	beq.n	8001648 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 020e 	bic.w	r2, r2, #14
 800160a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f003 021c 	and.w	r2, r3, #28
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001646:	bf00      	nop
 8001648:	bf00      	nop
}
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e148      	b.n	80018f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 813a 	beq.w	80018ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0201 	and.w	r2, r3, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	6939      	ldr	r1, [r7, #16]
 800177e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0203 	and.w	r2, r3, #3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8094 	beq.w	80018ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b52      	ldr	r3, [pc, #328]	; (8001910 <HAL_GPIO_Init+0x2c0>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c8:	4a51      	ldr	r2, [pc, #324]	; (8001910 <HAL_GPIO_Init+0x2c0>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6613      	str	r3, [r2, #96]	; 0x60
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_GPIO_Init+0x2c0>)
 80017d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_GPIO_Init+0x2c4>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001806:	d00d      	beq.n	8001824 <HAL_GPIO_Init+0x1d4>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a43      	ldr	r2, [pc, #268]	; (8001918 <HAL_GPIO_Init+0x2c8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x1d0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a42      	ldr	r2, [pc, #264]	; (800191c <HAL_GPIO_Init+0x2cc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_GPIO_Init+0x1cc>
 8001818:	2302      	movs	r3, #2
 800181a:	e004      	b.n	8001826 <HAL_GPIO_Init+0x1d6>
 800181c:	2307      	movs	r3, #7
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x1d6>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_GPIO_Init+0x1d6>
 8001824:	2300      	movs	r3, #0
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	f002 0203 	and.w	r2, r2, #3
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	4093      	lsls	r3, r2
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001836:	4937      	ldr	r1, [pc, #220]	; (8001914 <HAL_GPIO_Init+0x2c4>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001868:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f47f aeaf 	bne.w	8001660 <HAL_GPIO_Init+0x10>
  }
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e002      	b.n	8001978 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000

080019a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_PWREx_GetVoltageRange+0x18>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ce:	d130      	bne.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019dc:	d038      	beq.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2232      	movs	r2, #50	; 0x32
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0c9b      	lsrs	r3, r3, #18
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a04:	e002      	b.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a18:	d102      	bne.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f2      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2c:	d110      	bne.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e00f      	b.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3e:	d007      	beq.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000
 8001a64:	20000000 	.word	0x20000000
 8001a68:	431bde83 	.word	0x431bde83

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f000 bc02 	b.w	8002284 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a80:	4b96      	ldr	r3, [pc, #600]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8a:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80e4 	beq.w	8001c6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4c>
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	f040 808b 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	f040 8087 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab8:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x64>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e3d9      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	4b81      	ldr	r3, [pc, #516]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_RCC_OscConfig+0x7e>
 8001ae0:	4b7e      	ldr	r3, [pc, #504]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae8:	e005      	b.n	8001af6 <HAL_RCC_OscConfig+0x8a>
 8001aea:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d223      	bcs.n	8001b42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fdbe 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e3ba      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b70      	ldr	r3, [pc, #448]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	496d      	ldr	r1, [pc, #436]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	4968      	ldr	r1, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e025      	b.n	8001b8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b42:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4960      	ldr	r1, [pc, #384]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b60:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	495b      	ldr	r1, [pc, #364]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fd7e 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e37a      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8e:	f000 fc81 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4950      	ldr	r1, [pc, #320]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_RCC_OscConfig+0x278>)
 8001bac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bae:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <HAL_RCC_OscConfig+0x27c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ff6e 	bl	8000a94 <HAL_InitTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d052      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	e35e      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d032      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bda:	f7ff fa65 	bl	80010a8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be2:	f7ff fa61 	bl	80010a8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e347      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf4:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a35      	ldr	r2, [pc, #212]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4930      	ldr	r1, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	492b      	ldr	r1, [pc, #172]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
 8001c32:	e01a      	b.n	8001c6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa32 	bl	80010a8 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c48:	f7ff fa2e 	bl	80010a8 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e314      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1dc>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d073      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x21c>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d10e      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d10b      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d063      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d15f      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e2f1      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e025      	b.n	8001d04 <HAL_RCC_OscConfig+0x298>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d114      	bne.n	8001cec <HAL_RCC_OscConfig+0x280>
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a02      	ldr	r2, [pc, #8]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e013      	b.n	8001d04 <HAL_RCC_OscConfig+0x298>
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	080087d0 	.word	0x080087d0
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	4ba0      	ldr	r3, [pc, #640]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a9f      	ldr	r2, [pc, #636]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b9d      	ldr	r3, [pc, #628]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a9c      	ldr	r2, [pc, #624]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f9cc 	bl	80010a8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f9c8 	bl	80010a8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e2ae      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d26:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2a8>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f9b8 	bl	80010a8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f9b4 	bl	80010a8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e29a      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2d0>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d060      	beq.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x310>
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d119      	bne.n	8001daa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d116      	bne.n	8001daa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7c:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_OscConfig+0x328>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e277      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	4973      	ldr	r1, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da8:	e040      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d023      	beq.n	8001dfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff f973 	bl	80010a8 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f96f 	bl	80010a8 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e255      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd8:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b62      	ldr	r3, [pc, #392]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	495f      	ldr	r1, [pc, #380]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	e018      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5c      	ldr	r2, [pc, #368]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f94f 	bl	80010a8 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f94b 	bl	80010a8 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e231      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e20:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e46:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff f926 	bl	80010a8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e20c      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ef      	beq.n	8001e58 <HAL_RCC_OscConfig+0x3ec>
 8001e78:	e01b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e80:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7ff f90d 	bl	80010a8 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff f909 	bl	80010a8 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1ef      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ef      	bne.n	8001e92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80a6 	beq.w	800200c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x508>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d118      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_RCC_OscConfig+0x508>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_RCC_OscConfig+0x508>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f04:	f7ff f8d0 	bl	80010a8 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7ff f8cc 	bl	80010a8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1b2      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_RCC_OscConfig+0x508>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4d8>
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f42:	e029      	b.n	8001f98 <HAL_RCC_OscConfig+0x52c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d115      	bne.n	8001f78 <HAL_RCC_OscConfig+0x50c>
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x52c>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40007000 	.word	0x40007000
 8001f78:	4b9a      	ldr	r3, [pc, #616]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a99      	ldr	r2, [pc, #612]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f88:	4b96      	ldr	r3, [pc, #600]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	4a95      	ldr	r2, [pc, #596]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d016      	beq.n	8001fce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff f882 	bl	80010a8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f87e 	bl	80010a8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e162      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbe:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ed      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x53c>
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff f86b 	bl	80010a8 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff f867 	bl	80010a8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e14b      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fec:	4b7d      	ldr	r3, [pc, #500]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ed      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03c      	beq.n	8002092 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01c      	beq.n	800205a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002020:	4b70      	ldr	r3, [pc, #448]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002026:	4a6f      	ldr	r2, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff f83a 	bl	80010a8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e11c      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800204a:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 800204c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCC_OscConfig+0x5cc>
 8002058:	e01b      	b.n	8002092 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800205a:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 800205c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002060:	4a60      	ldr	r2, [pc, #384]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7ff f81d 	bl	80010a8 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002072:	f7ff f819 	bl	80010a8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0ff      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002084:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ef      	bne.n	8002072 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80f3 	beq.w	8002282 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	f040 80c9 	bne.w	8002238 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020a6:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0203 	and.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d12c      	bne.n	8002114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	3b01      	subs	r3, #1
 80020c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d123      	bne.n	8002114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d11b      	bne.n	8002114 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d113      	bne.n	8002114 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	3b01      	subs	r3, #1
 80020fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d109      	bne.n	8002114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d06b      	beq.n	80021ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d062      	beq.n	80021e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0ac      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2d      	ldr	r2, [pc, #180]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002134:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002136:	f7fe ffb7 	bl	80010a8 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe ffb3 	bl	80010a8 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e099      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x77c>)
 8002162:	4013      	ands	r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800216c:	3a01      	subs	r2, #1
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002176:	0212      	lsls	r2, r2, #8
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800217e:	0852      	lsrs	r2, r2, #1
 8002180:	3a01      	subs	r2, #1
 8002182:	0552      	lsls	r2, r2, #21
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800218a:	0852      	lsrs	r2, r2, #1
 800218c:	3a01      	subs	r2, #1
 800218e:	0652      	lsls	r2, r2, #25
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002196:	06d2      	lsls	r2, r2, #27
 8002198:	430a      	orrs	r2, r1
 800219a:	4912      	ldr	r1, [pc, #72]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b8:	f7fe ff76 	bl	80010a8 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe ff72 	bl	80010a8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e058      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_RCC_OscConfig+0x778>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021de:	e050      	b.n	8002282 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e04f      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x820>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d144      	bne.n	8002282 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x820>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_RCC_OscConfig+0x820>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCC_OscConfig+0x820>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a20      	ldr	r2, [pc, #128]	; (800228c <HAL_RCC_OscConfig+0x820>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002210:	f7fe ff4a 	bl	80010a8 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe ff46 	bl	80010a8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e02c      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_RCC_OscConfig+0x820>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x7ac>
 8002236:	e024      	b.n	8002282 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d01f      	beq.n	800227e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_RCC_OscConfig+0x820>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_RCC_OscConfig+0x820>)
 8002244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7fe ff2d 	bl	80010a8 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7fe ff29 	bl	80010a8 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e00f      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_OscConfig+0x820>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x820>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4905      	ldr	r1, [pc, #20]	; (800228c <HAL_RCC_OscConfig+0x820>)
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x824>)
 8002278:	4013      	ands	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
 800227c:	e001      	b.n	8002282 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	feeefffc 	.word	0xfeeefffc

08002294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0e7      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b75      	ldr	r3, [pc, #468]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d910      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4970      	ldr	r1, [pc, #448]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b6e      	ldr	r3, [pc, #440]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0cf      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d908      	bls.n	8002306 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4960      	ldr	r1, [pc, #384]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04c      	beq.n	80023ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d121      	bne.n	800236a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0a6      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002332:	4b54      	ldr	r3, [pc, #336]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e09a      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e08e      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e086      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4943      	ldr	r1, [pc, #268]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800237c:	f7fe fe94 	bl	80010a8 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fe90 	bl	80010a8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e06e      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d208      	bcs.n	80023da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	492b      	ldr	r1, [pc, #172]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d210      	bcs.n	800240a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 0207 	bic.w	r2, r3, #7
 80023f0:	4923      	ldr	r1, [pc, #140]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCC_ClockConfig+0x1ec>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e036      	b.n	8002478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4918      	ldr	r1, [pc, #96]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4910      	ldr	r1, [pc, #64]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002448:	f000 f824 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	490b      	ldr	r1, [pc, #44]	; (8002488 <HAL_RCC_ClockConfig+0x1f4>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1f8>)
 8002466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1fc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fb11 	bl	8000a94 <HAL_InitTick>
 8002472:	4603      	mov	r3, r0
 8002474:	72fb      	strb	r3, [r7, #11]

  return status;
 8002476:	7afb      	ldrb	r3, [r7, #11]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	080087d0 	.word	0x080087d0
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d11e      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002504:	e00a      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d102      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e004      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d101      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800251a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d134      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0xa6>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d003      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0xac>
 8002538:	e005      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800253c:	617b      	str	r3, [r7, #20]
      break;
 800253e:	e005      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002542:	617b      	str	r3, [r7, #20]
      break;
 8002544:	e002      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	617b      	str	r3, [r7, #20]
      break;
 800254a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	3301      	adds	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	fb03 f202 	mul.w	r2, r3, r2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	0e5b      	lsrs	r3, r3, #25
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	3301      	adds	r3, #1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800258c:	69bb      	ldr	r3, [r7, #24]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	080087e8 	.word	0x080087e8
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200

080025ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025c8:	f7ff fff0 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4904      	ldr	r1, [pc, #16]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	080087e0 	.word	0x080087e0

080025f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025f4:	f7ff ffda 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0adb      	lsrs	r3, r3, #11
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4904      	ldr	r1, [pc, #16]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	080087e0 	.word	0x080087e0

0800261c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	220f      	movs	r2, #15
 800262a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	08db      	lsrs	r3, r3, #3
 8002656:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_RCC_GetClockConfig+0x60>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0207 	and.w	r2, r3, #7
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	40022000 	.word	0x40022000

08002680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002698:	f7ff f984 	bl	80019a4 <HAL_PWREx_GetVoltageRange>
 800269c:	6178      	str	r0, [r7, #20]
 800269e:	e014      	b.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	4a24      	ldr	r2, [pc, #144]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6593      	str	r3, [r2, #88]	; 0x58
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026b8:	f7ff f974 	bl	80019a4 <HAL_PWREx_GetVoltageRange>
 80026bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d0:	d10b      	bne.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d919      	bls.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2ba0      	cmp	r3, #160	; 0xa0
 80026dc:	d902      	bls.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026de:	2302      	movs	r3, #2
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e013      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e4:	2301      	movs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e010      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d902      	bls.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026f0:	2303      	movs	r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e00a      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d102      	bne.n	8002702 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026fc:	2302      	movs	r3, #2
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	e004      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d101      	bne.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002708:	2301      	movs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 0207 	bic.w	r2, r3, #7
 8002714:	4909      	ldr	r1, [pc, #36]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002748:	2300      	movs	r3, #0
 800274a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800274c:	2300      	movs	r3, #0
 800274e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002758:	2b00      	cmp	r3, #0
 800275a:	d031      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002764:	d01a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002766:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800276a:	d814      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002774:	d10f      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002776:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4a5c      	ldr	r2, [pc, #368]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002782:	e00c      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f9de 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002794:	e003      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	74fb      	strb	r3, [r7, #19]
      break;
 800279a:	e000      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800279c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a4:	4b51      	ldr	r3, [pc, #324]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	494e      	ldr	r1, [pc, #312]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ba:	e001      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 809e 	beq.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d2:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b40      	ldr	r3, [pc, #256]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a3f      	ldr	r2, [pc, #252]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a39      	ldr	r2, [pc, #228]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002810:	f7fe fc4a 	bl	80010a8 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002816:	e009      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fe fc46 	bl	80010a8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d902      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	74fb      	strb	r3, [r7, #19]
        break;
 800282a:	e005      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ef      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d15a      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283e:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002848:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01e      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	429a      	cmp	r2, r3
 8002858:	d019      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002886:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d016      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fc06 	bl	80010a8 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289e:	e00b      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe fc02 	bl	80010a8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d902      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	74fb      	strb	r3, [r7, #19]
            break;
 80028b6:	e006      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ec      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e2:	e009      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f8:	7c7b      	ldrb	r3, [r7, #17]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b8a      	ldr	r3, [pc, #552]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	4a89      	ldr	r2, [pc, #548]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002916:	4b84      	ldr	r3, [pc, #528]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4980      	ldr	r1, [pc, #512]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002938:	4b7b      	ldr	r3, [pc, #492]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	4978      	ldr	r1, [pc, #480]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800295a:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	496f      	ldr	r1, [pc, #444]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800297c:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	4967      	ldr	r1, [pc, #412]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800299e:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	495e      	ldr	r1, [pc, #376]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c0:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	4956      	ldr	r1, [pc, #344]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029e2:	4b51      	ldr	r3, [pc, #324]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	494d      	ldr	r1, [pc, #308]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d028      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a04:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4945      	ldr	r1, [pc, #276]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a22:	d106      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a3f      	ldr	r2, [pc, #252]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2e:	60d3      	str	r3, [r2, #12]
 8002a30:	e011      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f882 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	492d      	ldr	r1, [pc, #180]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a80:	d106      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8c:	60d3      	str	r3, [r2, #12]
 8002a8e:	e011      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f853 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01c      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	4916      	ldr	r1, [pc, #88]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ade:	d10c      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f830 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b5a:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b66:	4b71      	ldr	r3, [pc, #452]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d10d      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
       ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b7e:	4b6b      	ldr	r3, [pc, #428]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d047      	beq.n	8002c22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e044      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d018      	beq.n	8002bd2 <RCCEx_PLLSAI1_Config+0x86>
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d825      	bhi.n	8002bf0 <RCCEx_PLLSAI1_Config+0xa4>
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d002      	beq.n	8002bae <RCCEx_PLLSAI1_Config+0x62>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d009      	beq.n	8002bc0 <RCCEx_PLLSAI1_Config+0x74>
 8002bac:	e020      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11d      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbe:	e01a      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc0:	4b5a      	ldr	r3, [pc, #360]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e013      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bd2:	4b56      	ldr	r3, [pc, #344]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bde:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bee:	e006      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e004      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	4943      	ldr	r1, [pc, #268]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d17c      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fa38 	bl	80010a8 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c3a:	e009      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c3c:	f7fe fa34 	bl	80010a8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d902      	bls.n	8002c50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c4e:	e005      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ef      	bne.n	8002c3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d15f      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d110      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	0211      	lsls	r1, r2, #8
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	06d2      	lsls	r2, r2, #27
 8002c80:	430a      	orrs	r2, r1
 8002c82:	492a      	ldr	r1, [pc, #168]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	610b      	str	r3, [r1, #16]
 8002c88:	e027      	b.n	8002cda <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d112      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6892      	ldr	r2, [r2, #8]
 8002ca0:	0211      	lsls	r1, r2, #8
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6912      	ldr	r2, [r2, #16]
 8002ca6:	0852      	lsrs	r2, r2, #1
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	0552      	lsls	r2, r2, #21
 8002cac:	430a      	orrs	r2, r1
 8002cae:	491f      	ldr	r1, [pc, #124]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	610b      	str	r3, [r1, #16]
 8002cb4:	e011      	b.n	8002cda <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	0211      	lsls	r1, r2, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6952      	ldr	r2, [r2, #20]
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0652      	lsls	r2, r2, #25
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	4915      	ldr	r1, [pc, #84]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe f9df 	bl	80010a8 <HAL_GetTick>
 8002cea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cec:	e009      	b.n	8002d02 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cee:	f7fe f9db 	bl	80010a8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d902      	bls.n	8002d02 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8002d00:	e005      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ef      	beq.n	8002cee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e049      	b.n	8002dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f841 	bl	8002dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f000 f9dc 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d001      	beq.n	8002e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e03b      	b.n	8002e84 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x4e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d004      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x4e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d115      	bne.n	8002e6e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_TIM_Base_Start_IT+0xa4>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d015      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x8c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d011      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	e008      	b.n	8002e80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e000      	b.n	8002e82 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40014000 	.word	0x40014000
 8002e98:	00010007 	.word	0x00010007

08002e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d122      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0202 	mvn.w	r2, #2
 8002ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f905 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8f7 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f908 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11b      	bne.n	8002f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0204 	mvn.w	r2, #4
 8002f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8db 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8cd 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8de 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d122      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d11b      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0208 	mvn.w	r2, #8
 8002f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2204      	movs	r2, #4
 8002f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8b1 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8a3 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8b4 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d122      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d11b      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0210 	mvn.w	r2, #16
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f887 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f879 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f88a 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0201 	mvn.w	r2, #1
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fcfa 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8de 	bl	8003208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305a:	d10e      	bne.n	800307a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d107      	bne.n	800307a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8d1 	bl	800321c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d10e      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d107      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800309e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f838 	bl	8003116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d10e      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d107      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0220 	mvn.w	r2, #32
 80030ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f891 	bl	80031f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_Base_SetConfig+0x20>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d108      	bne.n	800315e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00b      	beq.n	800317e <TIM_Base_SetConfig+0x52>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d007      	beq.n	800317e <TIM_Base_SetConfig+0x52>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d003      	beq.n	800317e <TIM_Base_SetConfig+0x52>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <TIM_Base_SetConfig+0xc4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <TIM_Base_SetConfig+0xa0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0xa0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <TIM_Base_SetConfig+0xc4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40014000 	.word	0x40014000
 80031f0:	40014400 	.word	0x40014400

080031f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e040      	b.n	80032c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fdec 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fbc2 	bl	80039f8 <UART_SetConfig>
 8003274:	4603      	mov	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e022      	b.n	80032c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fde2 	bl	8003e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800329a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fe69 	bl	8003f94 <UART_CheckIdleState>
 80032c2:	4603      	mov	r3, r0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f040 8082 	bne.w	80033ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_UART_Transmit+0x26>
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07a      	b.n	80033ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Transmit+0x38>
 8003300:	2302      	movs	r3, #2
 8003302:	e073      	b.n	80033ec <HAL_UART_Transmit+0x120>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2221      	movs	r2, #33	; 0x21
 8003318:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331a:	f7fd fec5 	bl	80010a8 <HAL_GetTick>
 800331e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	88fa      	ldrh	r2, [r7, #6]
 8003324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d108      	bne.n	800334c <HAL_UART_Transmit+0x80>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d104      	bne.n	800334c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	e003      	b.n	8003354 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800335c:	e02d      	b.n	80033ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fe5c 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e039      	b.n	80033ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800338a:	b292      	uxth	r2, r2
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	3302      	adds	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	e008      	b.n	80033a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b292      	uxth	r2, r2
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1cb      	bne.n	800335e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fe28 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e005      	b.n	80033ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0ba      	sub	sp, #232	; 0xe8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800341a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800341e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003422:	4013      	ands	r3, r2
 8003424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d115      	bne.n	800345c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00f      	beq.n	800345c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 82a6 	beq.w	800399e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
      }
      return;
 800345a:	e2a0      	b.n	800399e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800345c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8117 	beq.w	8003694 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003476:	4b85      	ldr	r3, [pc, #532]	; (800368c <HAL_UART_IRQHandler+0x298>)
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 810a 	beq.w	8003694 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d011      	beq.n	80034b0 <HAL_UART_IRQHandler+0xbc>
 800348c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2201      	movs	r2, #1
 800349e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d011      	beq.n	80034e0 <HAL_UART_IRQHandler+0xec>
 80034bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2202      	movs	r2, #2
 80034ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d011      	beq.n	8003510 <HAL_UART_IRQHandler+0x11c>
 80034ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2204      	movs	r2, #4
 80034fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003506:	f043 0202 	orr.w	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d017      	beq.n	800354c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800351c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800352c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2208      	movs	r2, #8
 800353a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003542:	f043 0208 	orr.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800354c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <HAL_UART_IRQHandler+0x18a>
 8003558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800356c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 820c 	beq.w	80039a2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d005      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d04f      	beq.n	8003676 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fde9 	bl	80041ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d141      	bne.n	800366e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3308      	adds	r3, #8
 80035f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003616:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800361a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800362e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1d9      	bne.n	80035ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	2b00      	cmp	r3, #0
 800363c:	d013      	beq.n	8003666 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <HAL_UART_IRQHandler+0x29c>)
 8003644:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd ff10 	bl	8001470 <HAL_DMA_Abort_IT>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d017      	beq.n	8003686 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003660:	4610      	mov	r0, r2
 8003662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e00f      	b.n	8003686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9b0 	bl	80039cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	e00b      	b.n	8003686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f9ac 	bl	80039cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	e007      	b.n	8003686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f9a8 	bl	80039cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003684:	e18d      	b.n	80039a2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003686:	bf00      	nop
    return;
 8003688:	e18b      	b.n	80039a2 <HAL_UART_IRQHandler+0x5ae>
 800368a:	bf00      	nop
 800368c:	04000120 	.word	0x04000120
 8003690:	08004275 	.word	0x08004275

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	2b01      	cmp	r3, #1
 800369a:	f040 8146 	bne.w	800392a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 813f 	beq.w	800392a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8138 	beq.w	800392a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2210      	movs	r2, #16
 80036c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	f040 80b4 	bne.w	800383a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 815f 	beq.w	80039a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036f2:	429a      	cmp	r2, r3
 80036f4:	f080 8157 	bcs.w	80039a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8085 	bne.w	800381e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800372c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800373e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003742:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800374a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1da      	bne.n	8003714 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800376e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3308      	adds	r3, #8
 800377e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003782:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003786:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800378a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e1      	bne.n	800375e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3308      	adds	r3, #8
 80037a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3308      	adds	r3, #8
 80037ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e3      	bne.n	800379a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ee:	f023 0310 	bic.w	r3, r3, #16
 80037f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003800:	65bb      	str	r3, [r7, #88]	; 0x58
 8003802:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800380e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e4      	bne.n	80037de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fdeb 	bl	80013f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800382a:	b29b      	uxth	r3, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	b29b      	uxth	r3, r3
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8d4 	bl	80039e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003838:	e0b5      	b.n	80039a6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003846:	b29b      	uxth	r3, r3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80a7 	beq.w	80039aa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800385c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a2 	beq.w	80039aa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800387a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
 800388a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800388e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e4      	bne.n	8003866 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	623b      	str	r3, [r7, #32]
   return(result);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3308      	adds	r3, #8
 80038bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038c0:	633a      	str	r2, [r7, #48]	; 0x30
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e3      	bne.n	800389c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0310 	bic.w	r3, r3, #16
 80038fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	617b      	str	r3, [r7, #20]
   return(result);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e4      	bne.n	80038e6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800391c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f85c 	bl	80039e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003928:	e03f      	b.n	80039aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00e      	beq.n	8003954 <HAL_UART_IRQHandler+0x560>
 8003936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800394a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fcd1 	bl	80042f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003952:	e02d      	b.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00e      	beq.n	800397e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01c      	beq.n	80039ae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
    }
    return;
 800397c:	e017      	b.n	80039ae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
 800398a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fc82 	bl	80042a0 <UART_EndTransmit_IT>
    return;
 800399c:	e008      	b.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800399e:	bf00      	nop
 80039a0:	e006      	b.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80039a2:	bf00      	nop
 80039a4:	e004      	b.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80039a6:	bf00      	nop
 80039a8:	e002      	b.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80039ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80039b0:	37e8      	adds	r7, #232	; 0xe8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop

080039b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039fc:	b08a      	sub	sp, #40	; 0x28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4bb4      	ldr	r3, [pc, #720]	; (8003cf8 <UART_SetConfig+0x300>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4aa9      	ldr	r2, [pc, #676]	; (8003cfc <UART_SetConfig+0x304>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	4313      	orrs	r3, r2
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	430a      	orrs	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4aa0      	ldr	r2, [pc, #640]	; (8003d00 <UART_SetConfig+0x308>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d126      	bne.n	8003ad0 <UART_SetConfig+0xd8>
 8003a82:	4ba0      	ldr	r3, [pc, #640]	; (8003d04 <UART_SetConfig+0x30c>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d81b      	bhi.n	8003ac8 <UART_SetConfig+0xd0>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0xa0>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab9 	.word	0x08003ab9
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003ac1 	.word	0x08003ac1
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e080      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e07c      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abe:	e078      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac6:	e074      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ace:	e070      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a8c      	ldr	r2, [pc, #560]	; (8003d08 <UART_SetConfig+0x310>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d138      	bne.n	8003b4c <UART_SetConfig+0x154>
 8003ada:	4b8a      	ldr	r3, [pc, #552]	; (8003d04 <UART_SetConfig+0x30c>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	d82d      	bhi.n	8003b44 <UART_SetConfig+0x14c>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <UART_SetConfig+0xf8>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b25 	.word	0x08003b25
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b45 	.word	0x08003b45
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b45 	.word	0x08003b45
 8003b10:	08003b2d 	.word	0x08003b2d
 8003b14:	08003b45 	.word	0x08003b45
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	08003b3d 	.word	0x08003b3d
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e042      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e03e      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b34:	2304      	movs	r3, #4
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3a:	e03a      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e036      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b44:	2310      	movs	r3, #16
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e032      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a6a      	ldr	r2, [pc, #424]	; (8003cfc <UART_SetConfig+0x304>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12a      	bne.n	8003bac <UART_SetConfig+0x1b4>
 8003b56:	4b6b      	ldr	r3, [pc, #428]	; (8003d04 <UART_SetConfig+0x30c>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b64:	d01a      	beq.n	8003b9c <UART_SetConfig+0x1a4>
 8003b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b6a:	d81b      	bhi.n	8003ba4 <UART_SetConfig+0x1ac>
 8003b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b70:	d00c      	beq.n	8003b8c <UART_SetConfig+0x194>
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b76:	d815      	bhi.n	8003ba4 <UART_SetConfig+0x1ac>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <UART_SetConfig+0x18c>
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b80:	d008      	beq.n	8003b94 <UART_SetConfig+0x19c>
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x1ac>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e012      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e00e      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e00a      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e006      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e002      	b.n	8003bb2 <UART_SetConfig+0x1ba>
 8003bac:	2310      	movs	r3, #16
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a51      	ldr	r2, [pc, #324]	; (8003cfc <UART_SetConfig+0x304>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d17a      	bne.n	8003cb2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d824      	bhi.n	8003c0e <UART_SetConfig+0x216>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0x1d4>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bf1 	.word	0x08003bf1
 8003bd0:	08003c0f 	.word	0x08003c0f
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003bff 	.word	0x08003bff
 8003be0:	08003c0f 	.word	0x08003c0f
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c0f 	.word	0x08003c0f
 8003bec:	08003c07 	.word	0x08003c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f7fe fce8 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	61f8      	str	r0, [r7, #28]
        break;
 8003bf6:	e010      	b.n	8003c1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf8:	4b44      	ldr	r3, [pc, #272]	; (8003d0c <UART_SetConfig+0x314>)
 8003bfa:	61fb      	str	r3, [r7, #28]
        break;
 8003bfc:	e00d      	b.n	8003c1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfe:	f7fe fc49 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003c02:	61f8      	str	r0, [r7, #28]
        break;
 8003c04:	e009      	b.n	8003c1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0a:	61fb      	str	r3, [r7, #28]
        break;
 8003c0c:	e005      	b.n	8003c1a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8107 	beq.w	8003e30 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d305      	bcc.n	8003c3e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d903      	bls.n	8003c46 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c44:	e0f4      	b.n	8003e30 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	461c      	mov	r4, r3
 8003c4c:	4615      	mov	r5, r2
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	022b      	lsls	r3, r5, #8
 8003c58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c5c:	0222      	lsls	r2, r4, #8
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	6849      	ldr	r1, [r1, #4]
 8003c62:	0849      	lsrs	r1, r1, #1
 8003c64:	2000      	movs	r0, #0
 8003c66:	4688      	mov	r8, r1
 8003c68:	4681      	mov	r9, r0
 8003c6a:	eb12 0a08 	adds.w	sl, r2, r8
 8003c6e:	eb43 0b09 	adc.w	fp, r3, r9
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c80:	4650      	mov	r0, sl
 8003c82:	4659      	mov	r1, fp
 8003c84:	f7fc fafc 	bl	8000280 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c96:	d308      	bcc.n	8003caa <UART_SetConfig+0x2b2>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9e:	d204      	bcs.n	8003caa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	e0c2      	b.n	8003e30 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cb0:	e0be      	b.n	8003e30 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cba:	d16a      	bne.n	8003d92 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d834      	bhi.n	8003d2e <UART_SetConfig+0x336>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <UART_SetConfig+0x2d4>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003d11 	.word	0x08003d11
 8003cd4:	08003d19 	.word	0x08003d19
 8003cd8:	08003d2f 	.word	0x08003d2f
 8003cdc:	08003d1f 	.word	0x08003d1f
 8003ce0:	08003d2f 	.word	0x08003d2f
 8003ce4:	08003d2f 	.word	0x08003d2f
 8003ce8:	08003d2f 	.word	0x08003d2f
 8003cec:	08003d27 	.word	0x08003d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7fe fc68 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8003cf4:	61f8      	str	r0, [r7, #28]
        break;
 8003cf6:	e020      	b.n	8003d3a <UART_SetConfig+0x342>
 8003cf8:	efff69f3 	.word	0xefff69f3
 8003cfc:	40008000 	.word	0x40008000
 8003d00:	40013800 	.word	0x40013800
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40004400 	.word	0x40004400
 8003d0c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d10:	f7fe fc6e 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8003d14:	61f8      	str	r0, [r7, #28]
        break;
 8003d16:	e010      	b.n	8003d3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d18:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <UART_SetConfig+0x454>)
 8003d1a:	61fb      	str	r3, [r7, #28]
        break;
 8003d1c:	e00d      	b.n	8003d3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1e:	f7fe fbb9 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003d22:	61f8      	str	r0, [r7, #28]
        break;
 8003d24:	e009      	b.n	8003d3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	61fb      	str	r3, [r7, #28]
        break;
 8003d2c:	e005      	b.n	8003d3a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d077      	beq.n	8003e30 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005a      	lsls	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b0f      	cmp	r3, #15
 8003d5a:	d916      	bls.n	8003d8a <UART_SetConfig+0x392>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d62:	d212      	bcs.n	8003d8a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f023 030f 	bic.w	r3, r3, #15
 8003d6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	8afb      	ldrh	r3, [r7, #22]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	8afa      	ldrh	r2, [r7, #22]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e052      	b.n	8003e30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d90:	e04e      	b.n	8003e30 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d827      	bhi.n	8003dea <UART_SetConfig+0x3f2>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x3a8>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dd5 	.word	0x08003dd5
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003deb 	.word	0x08003deb
 8003dbc:	08003deb 	.word	0x08003deb
 8003dc0:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe fbfe 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	61f8      	str	r0, [r7, #28]
        break;
 8003dca:	e014      	b.n	8003df6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7fe fc10 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	61f8      	str	r0, [r7, #28]
        break;
 8003dd2:	e010      	b.n	8003df6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <UART_SetConfig+0x454>)
 8003dd6:	61fb      	str	r3, [r7, #28]
        break;
 8003dd8:	e00d      	b.n	8003df6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7fe fb5b 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003dde:	61f8      	str	r0, [r7, #28]
        break;
 8003de0:	e009      	b.n	8003df6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	61fb      	str	r3, [r7, #28]
        break;
 8003de8:	e005      	b.n	8003df6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003df4:	bf00      	nop
    }

    if (pclk != 0U)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d019      	beq.n	8003e30 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	085a      	lsrs	r2, r3, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	441a      	add	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	d909      	bls.n	8003e2a <UART_SetConfig+0x432>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d205      	bcs.n	8003e2a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	e002      	b.n	8003e30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4a:	bf00      	nop
 8003e4c:	00f42400 	.word	0x00f42400

08003e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01a      	beq.n	8003f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f4e:	d10a      	bne.n	8003f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa4:	f7fd f880 	bl	80010a8 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d10e      	bne.n	8003fd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f82d 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e023      	b.n	800401e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d10e      	bne.n	8004002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f817 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e00d      	b.n	800401e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b09c      	sub	sp, #112	; 0x70
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004036:	e0a5      	b.n	8004184 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403e:	f000 80a1 	beq.w	8004184 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fd f831 	bl	80010a8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
 8004052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13e      	bne.n	80040d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800406c:	667b      	str	r3, [r7, #100]	; 0x64
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004078:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800407c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3308      	adds	r3, #8
 80040a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e067      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d04f      	beq.n	8004184 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f2:	d147      	bne.n	8004184 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
 800411e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3308      	adds	r3, #8
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	613b      	str	r3, [r7, #16]
   return(result);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	66bb      	str	r3, [r7, #104]	; 0x68
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3308      	adds	r3, #8
 800414e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004150:	623a      	str	r2, [r7, #32]
 8004152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	61bb      	str	r3, [r7, #24]
   return(result);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e010      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	429a      	cmp	r2, r3
 80041a0:	f43f af4a 	beq.w	8004038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3770      	adds	r7, #112	; 0x70
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b095      	sub	sp, #84	; 0x54
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	643b      	str	r3, [r7, #64]	; 0x40
 80041d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e6      	bne.n	80041b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	2b01      	cmp	r3, #1
 8004222:	d118      	bne.n	8004256 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	60bb      	str	r3, [r7, #8]
   return(result);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f023 0310 	bic.w	r3, r3, #16
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6979      	ldr	r1, [r7, #20]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	613b      	str	r3, [r7, #16]
   return(result);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e6      	bne.n	8004224 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004268:	bf00      	nop
 800426a:	3754      	adds	r7, #84	; 0x54
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fb9a 	bl	80039cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e6      	bne.n	80042a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fb66 	bl	80039b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ec:	bf00      	nop
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <__NVIC_SetPriority>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	; (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <SysTick_Handler+0x1c>)
 8004362:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004364:	f001 ff12 	bl	800618c <xTaskGetSchedulerState>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800436e:	f002 fcfb 	bl	8006d68 <xPortSysTickHandler>
  }
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004380:	2100      	movs	r1, #0
 8004382:	f06f 0004 	mvn.w	r0, #4
 8004386:	f7ff ffbf 	bl	8004308 <__NVIC_SetPriority>
#endif
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004396:	f3ef 8305 	mrs	r3, IPSR
 800439a:	603b      	str	r3, [r7, #0]
  return(result);
 800439c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043a2:	f06f 0305 	mvn.w	r3, #5
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e00c      	b.n	80043c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <osKernelInitialize+0x44>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <osKernelInitialize+0x44>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	e002      	b.n	80043c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043c4:	687b      	ldr	r3, [r7, #4]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000888 	.word	0x20000888

080043d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043de:	f3ef 8305 	mrs	r3, IPSR
 80043e2:	603b      	str	r3, [r7, #0]
  return(result);
 80043e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ea:	f06f 0305 	mvn.w	r3, #5
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e010      	b.n	8004414 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <osKernelStart+0x48>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d109      	bne.n	800440e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043fa:	f7ff ffbf 	bl	800437c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <osKernelStart+0x48>)
 8004400:	2202      	movs	r2, #2
 8004402:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004404:	f001 fa66 	bl	80058d4 <vTaskStartScheduler>
      stat = osOK;
 8004408:	2300      	movs	r3, #0
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	e002      	b.n	8004414 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004412:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004414:	687b      	ldr	r3, [r7, #4]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000888 	.word	0x20000888

08004424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b08e      	sub	sp, #56	; 0x38
 8004428:	af04      	add	r7, sp, #16
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004434:	f3ef 8305 	mrs	r3, IPSR
 8004438:	617b      	str	r3, [r7, #20]
  return(result);
 800443a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800443c:	2b00      	cmp	r3, #0
 800443e:	d17e      	bne.n	800453e <osThreadNew+0x11a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d07b      	beq.n	800453e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800444a:	2318      	movs	r3, #24
 800444c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004456:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d045      	beq.n	80044ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <osThreadNew+0x48>
        name = attr->name;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <osThreadNew+0x6e>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b38      	cmp	r3, #56	; 0x38
 8004484:	d805      	bhi.n	8004492 <osThreadNew+0x6e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <osThreadNew+0x72>
        return (NULL);
 8004492:	2300      	movs	r3, #0
 8004494:	e054      	b.n	8004540 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00e      	beq.n	80044cc <osThreadNew+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2bbb      	cmp	r3, #187	; 0xbb
 80044b4:	d90a      	bls.n	80044cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <osThreadNew+0xa8>
        mem = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e010      	b.n	80044ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <osThreadNew+0xca>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <osThreadNew+0xca>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <osThreadNew+0xca>
          mem = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e001      	b.n	80044ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044fc:	9202      	str	r2, [sp, #8]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fff6 	bl	80054fc <xTaskCreateStatic>
 8004510:	4603      	mov	r3, r0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e013      	b.n	800453e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d110      	bne.n	800453e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	b29a      	uxth	r2, r3
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f001 f841 	bl	80055b6 <xTaskCreate>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <osThreadNew+0x11a>
            hTask = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800453e:	693b      	ldr	r3, [r7, #16]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3728      	adds	r7, #40	; 0x28
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004550:	f3ef 8305 	mrs	r3, IPSR
 8004554:	60bb      	str	r3, [r7, #8]
  return(result);
 8004556:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <osDelay+0x1c>
    stat = osErrorISR;
 800455c:	f06f 0305 	mvn.w	r3, #5
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e007      	b.n	8004574 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <osDelay+0x2c>
      vTaskDelay(ticks);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 f97c 	bl	800586c <vTaskDelay>
    }
  }

  return (stat);
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800457e:	b580      	push	{r7, lr}
 8004580:	b08a      	sub	sp, #40	; 0x28
 8004582:	af02      	add	r7, sp, #8
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458e:	f3ef 8305 	mrs	r3, IPSR
 8004592:	613b      	str	r3, [r7, #16]
  return(result);
 8004594:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004596:	2b00      	cmp	r3, #0
 8004598:	d15f      	bne.n	800465a <osMessageQueueNew+0xdc>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <osMessageQueueNew+0xdc>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d059      	beq.n	800465a <osMessageQueueNew+0xdc>
    mem = -1;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d029      	beq.n	8004606 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d012      	beq.n	80045e0 <osMessageQueueNew+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b4f      	cmp	r3, #79	; 0x4f
 80045c0:	d90e      	bls.n	80045e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <osMessageQueueNew+0x62>
        mem = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e014      	b.n	800460a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d110      	bne.n	800460a <osMessageQueueNew+0x8c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10c      	bne.n	800460a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d108      	bne.n	800460a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <osMessageQueueNew+0x8c>
          mem = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e001      	b.n	800460a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10b      	bne.n	8004628 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2100      	movs	r1, #0
 800461a:	9100      	str	r1, [sp, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa2e 	bl	8004a80 <xQueueGenericCreateStatic>
 8004624:	61f8      	str	r0, [r7, #28]
 8004626:	e008      	b.n	800463a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800462e:	2200      	movs	r2, #0
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fa9c 	bl	8004b70 <xQueueGenericCreate>
 8004638:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e001      	b.n	8004652 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004652:	6979      	ldr	r1, [r7, #20]
 8004654:	69f8      	ldr	r0, [r7, #28]
 8004656:	f000 fef3 	bl	8005440 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800465a:	69fb      	ldr	r3, [r7, #28]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467c:	f3ef 8305 	mrs	r3, IPSR
 8004680:	617b      	str	r3, [r7, #20]
  return(result);
 8004682:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004684:	2b00      	cmp	r3, #0
 8004686:	d028      	beq.n	80046da <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <osMessageQueuePut+0x36>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <osMessageQueuePut+0x36>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800469a:	f06f 0303 	mvn.w	r3, #3
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	e038      	b.n	8004714 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80046a6:	f107 0210 	add.w	r2, r7, #16
 80046aa:	2300      	movs	r3, #0
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	69b8      	ldr	r0, [r7, #24]
 80046b0:	f000 fbba 	bl	8004e28 <xQueueGenericSendFromISR>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d003      	beq.n	80046c2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80046ba:	f06f 0302 	mvn.w	r3, #2
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e028      	b.n	8004714 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d025      	beq.n	8004714 <osMessageQueuePut+0xb0>
 80046c8:	4b15      	ldr	r3, [pc, #84]	; (8004720 <osMessageQueuePut+0xbc>)
 80046ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	e01c      	b.n	8004714 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <osMessageQueuePut+0x82>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80046e6:	f06f 0303 	mvn.w	r3, #3
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	e012      	b.n	8004714 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80046ee:	2300      	movs	r3, #0
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	69b8      	ldr	r0, [r7, #24]
 80046f6:	f000 fa99 	bl	8004c2c <xQueueGenericSend>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d009      	beq.n	8004714 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004706:	f06f 0301 	mvn.w	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	e002      	b.n	8004714 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800470e:	f06f 0302 	mvn.w	r3, #2
 8004712:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004714:	69fb      	ldr	r3, [r7, #28]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800473a:	f3ef 8305 	mrs	r3, IPSR
 800473e:	617b      	str	r3, [r7, #20]
  return(result);
 8004740:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004742:	2b00      	cmp	r3, #0
 8004744:	d028      	beq.n	8004798 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <osMessageQueueGet+0x34>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <osMessageQueueGet+0x34>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004758:	f06f 0303 	mvn.w	r3, #3
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e037      	b.n	80047d0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	461a      	mov	r2, r3
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	69b8      	ldr	r0, [r7, #24]
 800476e:	f000 fcd7 	bl	8005120 <xQueueReceiveFromISR>
 8004772:	4603      	mov	r3, r0
 8004774:	2b01      	cmp	r3, #1
 8004776:	d003      	beq.n	8004780 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004778:	f06f 0302 	mvn.w	r3, #2
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e027      	b.n	80047d0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d024      	beq.n	80047d0 <osMessageQueueGet+0xac>
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <osMessageQueueGet+0xb8>)
 8004788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	e01b      	b.n	80047d0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <osMessageQueueGet+0x80>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80047a4:	f06f 0303 	mvn.w	r3, #3
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e011      	b.n	80047d0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	69b8      	ldr	r0, [r7, #24]
 80047b2:	f000 fbd5 	bl	8004f60 <xQueueReceive>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d009      	beq.n	80047d0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80047c2:	f06f 0301 	mvn.w	r3, #1
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	e002      	b.n	80047d0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80047ca:	f06f 0302 	mvn.w	r3, #2
 80047ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80047d0:	69fb      	ldr	r3, [r7, #28]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a07      	ldr	r2, [pc, #28]	; (800480c <vApplicationGetIdleTaskMemory+0x2c>)
 80047f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4a06      	ldr	r2, [pc, #24]	; (8004810 <vApplicationGetIdleTaskMemory+0x30>)
 80047f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2280      	movs	r2, #128	; 0x80
 80047fc:	601a      	str	r2, [r3, #0]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000088c 	.word	0x2000088c
 8004810:	20000948 	.word	0x20000948

08004814 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a07      	ldr	r2, [pc, #28]	; (8004840 <vApplicationGetTimerTaskMemory+0x2c>)
 8004824:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4a06      	ldr	r2, [pc, #24]	; (8004844 <vApplicationGetTimerTaskMemory+0x30>)
 800482a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004832:	601a      	str	r2, [r3, #0]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	20000b48 	.word	0x20000b48
 8004844:	20000c04 	.word	0x20000c04

08004848 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f103 0208 	add.w	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004860:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 0208 	add.w	r2, r3, #8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f103 0208 	add.w	r2, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004900:	d103      	bne.n	800490a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e00c      	b.n	8004924 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3308      	adds	r3, #8
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e002      	b.n	8004918 <vListInsert+0x2e>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	429a      	cmp	r2, r3
 8004922:	d2f6      	bcs.n	8004912 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6852      	ldr	r2, [r2, #4]
 800497c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d103      	bne.n	8004990 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049da:	f002 f933 	bl	8006c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	22ff      	movs	r2, #255	; 0xff
 8004a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d114      	bne.n	8004a5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01a      	beq.n	8004a6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3310      	adds	r3, #16
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 f9e3 	bl	8005e08 <xTaskRemoveFromEventList>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d012      	beq.n	8004a6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <xQueueGenericReset+0xcc>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	e009      	b.n	8004a6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fef2 	bl	8004848 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff feed 	bl	8004848 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a6e:	f002 f919 	bl	8006ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a72:	2301      	movs	r3, #1
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08e      	sub	sp, #56	; 0x38
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <xQueueGenericCreateStatic+0x52>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <xQueueGenericCreateStatic+0x56>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xQueueGenericCreateStatic+0x58>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	623b      	str	r3, [r7, #32]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <xQueueGenericCreateStatic+0x7e>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <xQueueGenericCreateStatic+0x82>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xQueueGenericCreateStatic+0x84>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	61fb      	str	r3, [r7, #28]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b1e:	2350      	movs	r3, #80	; 0x50
 8004b20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b50      	cmp	r3, #80	; 0x50
 8004b26:	d00a      	beq.n	8004b3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61bb      	str	r3, [r7, #24]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f83f 	bl	8004be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3730      	adds	r7, #48	; 0x30
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	613b      	str	r3, [r7, #16]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	3350      	adds	r3, #80	; 0x50
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f002 f96d 	bl	8006e88 <pvPortMalloc>
 8004bae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d011      	beq.n	8004bda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	3350      	adds	r3, #80	; 0x50
 8004bbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bc8:	79fa      	ldrb	r2, [r7, #7]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f805 	bl	8004be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bda:	69bb      	ldr	r3, [r7, #24]
	}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c12:	2101      	movs	r1, #1
 8004c14:	69b8      	ldr	r0, [r7, #24]
 8004c16:	f7ff fecb 	bl	80049b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08e      	sub	sp, #56	; 0x38
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericSend+0x32>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <xQueueGenericSend+0x40>
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <xQueueGenericSend+0x44>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <xQueueGenericSend+0x46>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <xQueueGenericSend+0x60>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d103      	bne.n	8004c9a <xQueueGenericSend+0x6e>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <xQueueGenericSend+0x72>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <xQueueGenericSend+0x74>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xQueueGenericSend+0x8e>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	623b      	str	r3, [r7, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cba:	f001 fa67 	bl	800618c <xTaskGetSchedulerState>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <xQueueGenericSend+0x9e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <xQueueGenericSend+0xa2>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueGenericSend+0xa4>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueGenericSend+0xbe>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	61fb      	str	r3, [r7, #28]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cea:	f001 ffab 	bl	8006c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <xQueueGenericSend+0xd4>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d129      	bne.n	8004d54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d06:	f000 fa8b 	bl	8005220 <prvCopyDataToQueue>
 8004d0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	3324      	adds	r3, #36	; 0x24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 f875 	bl	8005e08 <xTaskRemoveFromEventList>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <xQueueGenericSend+0x1f8>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	e00a      	b.n	8004d4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <xQueueGenericSend+0x1f8>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d4c:	f001 ffaa 	bl	8006ca4 <vPortExitCritical>
				return pdPASS;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e063      	b.n	8004e1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d5a:	f001 ffa3 	bl	8006ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e05c      	b.n	8004e1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d68:	f107 0314 	add.w	r3, r7, #20
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 f8af 	bl	8005ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d76:	f001 ff95 	bl	8006ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7a:	f000 fe1b 	bl	80059b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d7e:	f001 ff61 	bl	8006c44 <vPortEnterCritical>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d88:	b25b      	sxtb	r3, r3
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d8e:	d103      	bne.n	8004d98 <xQueueGenericSend+0x16c>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da4:	d103      	bne.n	8004dae <xQueueGenericSend+0x182>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dae:	f001 ff79 	bl	8006ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db2:	1d3a      	adds	r2, r7, #4
 8004db4:	f107 0314 	add.w	r3, r7, #20
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f001 f89e 	bl	8005efc <xTaskCheckForTimeOut>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d124      	bne.n	8004e10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dc8:	f000 fb22 	bl	8005410 <prvIsQueueFull>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d018      	beq.n	8004e04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 ffc4 	bl	8005d68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004de2:	f000 faad 	bl	8005340 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004de6:	f000 fdf3 	bl	80059d0 <xTaskResumeAll>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f af7c 	bne.w	8004cea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <xQueueGenericSend+0x1f8>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	e772      	b.n	8004cea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e06:	f000 fa9b 	bl	8005340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e0a:	f000 fde1 	bl	80059d0 <xTaskResumeAll>
 8004e0e:	e76c      	b.n	8004cea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e12:	f000 fa95 	bl	8005340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e16:	f000 fddb 	bl	80059d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3738      	adds	r7, #56	; 0x38
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	; 0x40
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d103      	bne.n	8004e64 <xQueueGenericSendFromISR+0x3c>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <xQueueGenericSendFromISR+0x40>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <xQueueGenericSendFromISR+0x42>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d103      	bne.n	8004e92 <xQueueGenericSendFromISR+0x6a>
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <xQueueGenericSendFromISR+0x6e>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <xQueueGenericSendFromISR+0x70>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	623b      	str	r3, [r7, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eb2:	f001 ffa9 	bl	8006e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	61fa      	str	r2, [r7, #28]
 8004ecc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ece:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <xQueueGenericSendFromISR+0xbc>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d12f      	bne.n	8004f44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004efa:	f000 f991 	bl	8005220 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004efe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f06:	d112      	bne.n	8004f2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d016      	beq.n	8004f3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	3324      	adds	r3, #36	; 0x24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 ff77 	bl	8005e08 <xTaskRemoveFromEventList>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e007      	b.n	8004f3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f32:	3301      	adds	r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	b25a      	sxtb	r2, r3
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004f42:	e001      	b.n	8004f48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3740      	adds	r7, #64	; 0x40
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08c      	sub	sp, #48	; 0x30
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <xQueueReceive+0x30>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	623b      	str	r3, [r7, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <xQueueReceive+0x3e>
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <xQueueReceive+0x42>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xQueueReceive+0x44>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xQueueReceive+0x5e>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61fb      	str	r3, [r7, #28]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fbe:	f001 f8e5 	bl	800618c <xTaskGetSchedulerState>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <xQueueReceive+0x6e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <xQueueReceive+0x72>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <xQueueReceive+0x74>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xQueueReceive+0x8e>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	61bb      	str	r3, [r7, #24]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fee:	f001 fe29 	bl	8006c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01f      	beq.n	800503e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005002:	f000 f977 	bl	80052f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00f      	beq.n	8005036 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	3310      	adds	r3, #16
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fef4 	bl	8005e08 <xTaskRemoveFromEventList>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005026:	4b3d      	ldr	r3, [pc, #244]	; (800511c <xQueueReceive+0x1bc>)
 8005028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005036:	f001 fe35 	bl	8006ca4 <vPortExitCritical>
				return pdPASS;
 800503a:	2301      	movs	r3, #1
 800503c:	e069      	b.n	8005112 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005044:	f001 fe2e 	bl	8006ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005048:	2300      	movs	r3, #0
 800504a:	e062      	b.n	8005112 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005052:	f107 0310 	add.w	r3, r7, #16
 8005056:	4618      	mov	r0, r3
 8005058:	f000 ff3a 	bl	8005ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800505c:	2301      	movs	r3, #1
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005060:	f001 fe20 	bl	8006ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005064:	f000 fca6 	bl	80059b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005068:	f001 fdec 	bl	8006c44 <vPortEnterCritical>
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005072:	b25b      	sxtb	r3, r3
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005078:	d103      	bne.n	8005082 <xQueueReceive+0x122>
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005088:	b25b      	sxtb	r3, r3
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800508e:	d103      	bne.n	8005098 <xQueueReceive+0x138>
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005098:	f001 fe04 	bl	8006ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800509c:	1d3a      	adds	r2, r7, #4
 800509e:	f107 0310 	add.w	r3, r7, #16
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 ff29 	bl	8005efc <xTaskCheckForTimeOut>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d123      	bne.n	80050f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b2:	f000 f997 	bl	80053e4 <prvIsQueueEmpty>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d017      	beq.n	80050ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fe4f 	bl	8005d68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050cc:	f000 f938 	bl	8005340 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050d0:	f000 fc7e 	bl	80059d0 <xTaskResumeAll>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d189      	bne.n	8004fee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <xQueueReceive+0x1bc>)
 80050dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	e780      	b.n	8004fee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ee:	f000 f927 	bl	8005340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050f2:	f000 fc6d 	bl	80059d0 <xTaskResumeAll>
 80050f6:	e77a      	b.n	8004fee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fa:	f000 f921 	bl	8005340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050fe:	f000 fc67 	bl	80059d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005104:	f000 f96e 	bl	80053e4 <prvIsQueueEmpty>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	f43f af6f 	beq.w	8004fee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005112:	4618      	mov	r0, r3
 8005114:	3730      	adds	r7, #48	; 0x30
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08e      	sub	sp, #56	; 0x38
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	623b      	str	r3, [r7, #32]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <xQueueReceiveFromISR+0x3a>
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <xQueueReceiveFromISR+0x3e>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <xQueueReceiveFromISR+0x40>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61fb      	str	r3, [r7, #28]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800517a:	f001 fe45 	bl	8006e08 <vPortValidateInterruptPriority>
	__asm volatile
 800517e:	f3ef 8211 	mrs	r2, BASEPRI
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	61ba      	str	r2, [r7, #24]
 8005194:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005196:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02f      	beq.n	8005206 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b4:	f000 f89e 	bl	80052f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80051c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c8:	d112      	bne.n	80051f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	3310      	adds	r3, #16
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fe16 	bl	8005e08 <xTaskRemoveFromEventList>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00e      	beq.n	8005200 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e007      	b.n	8005200 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	b25a      	sxtb	r2, r3
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005200:	2301      	movs	r3, #1
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
 8005204:	e001      	b.n	800520a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f383 8811 	msr	BASEPRI, r3
}
 8005214:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005218:	4618      	mov	r0, r3
 800521a:	3738      	adds	r7, #56	; 0x38
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d14d      	bne.n	80052e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 ffbc 	bl	80061c8 <xTaskPriorityDisinherit>
 8005250:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	e043      	b.n	80052e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d119      	bne.n	8005294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6858      	ldr	r0, [r3, #4]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	461a      	mov	r2, r3
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	f002 f929 	bl	80074c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d32b      	bcc.n	80052e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	e026      	b.n	80052e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68d8      	ldr	r0, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	461a      	mov	r2, r3
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	f002 f90f 	bl	80074c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	425b      	negs	r3, r3
 80052ae:	441a      	add	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d207      	bcs.n	80052d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	425b      	negs	r3, r3
 80052ca:	441a      	add	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d105      	bne.n	80052e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3b01      	subs	r3, #1
 80052e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052ea:	697b      	ldr	r3, [r7, #20]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d018      	beq.n	8005338 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	441a      	add	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	d303      	bcc.n	8005328 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68d9      	ldr	r1, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	461a      	mov	r2, r3
 8005332:	6838      	ldr	r0, [r7, #0]
 8005334:	f002 f8c5 	bl	80074c2 <memcpy>
	}
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005348:	f001 fc7c 	bl	8006c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005352:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005354:	e011      	b.n	800537a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d012      	beq.n	8005384 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3324      	adds	r3, #36	; 0x24
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fd50 	bl	8005e08 <xTaskRemoveFromEventList>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800536e:	f000 fe27 	bl	8005fc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	3b01      	subs	r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800537a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800537e:	2b00      	cmp	r3, #0
 8005380:	dce9      	bgt.n	8005356 <prvUnlockQueue+0x16>
 8005382:	e000      	b.n	8005386 <prvUnlockQueue+0x46>
					break;
 8005384:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	22ff      	movs	r2, #255	; 0xff
 800538a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800538e:	f001 fc89 	bl	8006ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005392:	f001 fc57 	bl	8006c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800539c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800539e:	e011      	b.n	80053c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3310      	adds	r3, #16
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fd2b 	bl	8005e08 <xTaskRemoveFromEventList>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053b8:	f000 fe02 	bl	8005fc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	3b01      	subs	r3, #1
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dce9      	bgt.n	80053a0 <prvUnlockQueue+0x60>
 80053cc:	e000      	b.n	80053d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	22ff      	movs	r2, #255	; 0xff
 80053d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053d8:	f001 fc64 	bl	8006ca4 <vPortExitCritical>
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053ec:	f001 fc2a 	bl	8006c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053f8:	2301      	movs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e001      	b.n	8005402 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005402:	f001 fc4f 	bl	8006ca4 <vPortExitCritical>

	return xReturn;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005418:	f001 fc14 	bl	8006c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	429a      	cmp	r2, r3
 8005426:	d102      	bne.n	800542e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005428:	2301      	movs	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e001      	b.n	8005432 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005432:	f001 fc37 	bl	8006ca4 <vPortExitCritical>

	return xReturn;
 8005436:	68fb      	ldr	r3, [r7, #12]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e014      	b.n	800547a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005450:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <vQueueAddToRegistry+0x50>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800545c:	490c      	ldr	r1, [pc, #48]	; (8005490 <vQueueAddToRegistry+0x50>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005466:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <vQueueAddToRegistry+0x50>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4413      	add	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005472:	e006      	b.n	8005482 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b07      	cmp	r3, #7
 800547e:	d9e7      	bls.n	8005450 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20001004 	.word	0x20001004

08005494 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054a4:	f001 fbce 	bl	8006c44 <vPortEnterCritical>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b4:	d103      	bne.n	80054be <vQueueWaitForMessageRestricted+0x2a>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ca:	d103      	bne.n	80054d4 <vQueueWaitForMessageRestricted+0x40>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d4:	f001 fbe6 	bl	8006ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fc61 	bl	8005db0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054ee:	6978      	ldr	r0, [r7, #20]
 80054f0:	f7ff ff26 	bl	8005340 <prvUnlockQueue>
	}
 80054f4:	bf00      	nop
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af04      	add	r7, sp, #16
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	623b      	str	r3, [r7, #32]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <xTaskCreateStatic+0x46>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	61fb      	str	r3, [r7, #28]
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005542:	23bc      	movs	r3, #188	; 0xbc
 8005544:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2bbc      	cmp	r3, #188	; 0xbc
 800554a:	d00a      	beq.n	8005562 <xTaskCreateStatic+0x66>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61bb      	str	r3, [r7, #24]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005562:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01e      	beq.n	80055a8 <xTaskCreateStatic+0xac>
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005578:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	2202      	movs	r2, #2
 800557e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005582:	2300      	movs	r3, #0
 8005584:	9303      	str	r3, [sp, #12]
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	9302      	str	r3, [sp, #8]
 800558a:	f107 0314 	add.w	r3, r7, #20
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f850 	bl	8005640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055a2:	f000 f8f3 	bl	800578c <prvAddNewTaskToReadyList>
 80055a6:	e001      	b.n	80055ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055ac:	697b      	ldr	r3, [r7, #20]
	}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3728      	adds	r7, #40	; 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b08c      	sub	sp, #48	; 0x30
 80055ba:	af04      	add	r7, sp, #16
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fc5c 	bl	8006e88 <pvPortMalloc>
 80055d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055d8:	20bc      	movs	r0, #188	; 0xbc
 80055da:	f001 fc55 	bl	8006e88 <pvPortMalloc>
 80055de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
 80055ec:	e005      	b.n	80055fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055ee:	6978      	ldr	r0, [r7, #20]
 80055f0:	f001 fd16 	bl	8007020 <vPortFree>
 80055f4:	e001      	b.n	80055fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d017      	beq.n	8005630 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	2300      	movs	r3, #0
 800560c:	9303      	str	r3, [sp, #12]
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	9302      	str	r3, [sp, #8]
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f80e 	bl	8005640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005624:	69f8      	ldr	r0, [r7, #28]
 8005626:	f000 f8b1 	bl	800578c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800562a:	2301      	movs	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e002      	b.n	8005636 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005634:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005636:	69bb      	ldr	r3, [r7, #24]
	}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	461a      	mov	r2, r3
 8005658:	21a5      	movs	r1, #165	; 0xa5
 800565a:	f001 ff40 	bl	80074de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005668:	3b01      	subs	r3, #1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f023 0307 	bic.w	r3, r3, #7
 8005676:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	617b      	str	r3, [r7, #20]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01f      	beq.n	80056de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	e012      	b.n	80056ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	7819      	ldrb	r1, [r3, #0]
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	3334      	adds	r3, #52	; 0x34
 80056b4:	460a      	mov	r2, r1
 80056b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2b0f      	cmp	r3, #15
 80056ce:	d9e9      	bls.n	80056a4 <prvInitialiseNewTask+0x64>
 80056d0:	e000      	b.n	80056d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80056d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056dc:	e003      	b.n	80056e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	2b37      	cmp	r3, #55	; 0x37
 80056ea:	d901      	bls.n	80056f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056ec:	2337      	movs	r3, #55	; 0x37
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2200      	movs	r2, #0
 8005700:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	3304      	adds	r3, #4
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff f8be 	bl	8004888 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	3318      	adds	r3, #24
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff f8b9 	bl	8004888 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	2200      	movs	r2, #0
 8005738:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	3354      	adds	r3, #84	; 0x54
 8005740:	2260      	movs	r2, #96	; 0x60
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f001 feca 	bl	80074de <memset>
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <prvInitialiseNewTask+0x140>)
 800574e:	659a      	str	r2, [r3, #88]	; 0x58
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <prvInitialiseNewTask+0x144>)
 8005754:	65da      	str	r2, [r3, #92]	; 0x5c
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <prvInitialiseNewTask+0x148>)
 800575a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	69b8      	ldr	r0, [r7, #24]
 8005762:	f001 f941 	bl	80069e8 <pxPortInitialiseStack>
 8005766:	4602      	mov	r2, r0
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005776:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005778:	bf00      	nop
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	08008838 	.word	0x08008838
 8005784:	08008858 	.word	0x08008858
 8005788:	08008818 	.word	0x08008818

0800578c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005794:	f001 fa56 	bl	8006c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005798:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <prvAddNewTaskToReadyList+0xc4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <prvAddNewTaskToReadyList+0xc4>)
 80057a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057a2:	4b2c      	ldr	r3, [pc, #176]	; (8005854 <prvAddNewTaskToReadyList+0xc8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057aa:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <prvAddNewTaskToReadyList+0xc8>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <prvAddNewTaskToReadyList+0xc4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d110      	bne.n	80057da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057b8:	f000 fc26 	bl	8006008 <prvInitialiseTaskLists>
 80057bc:	e00d      	b.n	80057da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057be:	4b26      	ldr	r3, [pc, #152]	; (8005858 <prvAddNewTaskToReadyList+0xcc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057c6:	4b23      	ldr	r3, [pc, #140]	; (8005854 <prvAddNewTaskToReadyList+0xc8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d802      	bhi.n	80057da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <prvAddNewTaskToReadyList+0xc8>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057da:	4b20      	ldr	r3, [pc, #128]	; (800585c <prvAddNewTaskToReadyList+0xd0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3301      	adds	r3, #1
 80057e0:	4a1e      	ldr	r2, [pc, #120]	; (800585c <prvAddNewTaskToReadyList+0xd0>)
 80057e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <prvAddNewTaskToReadyList+0xd0>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <prvAddNewTaskToReadyList+0xd4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d903      	bls.n	8005800 <prvAddNewTaskToReadyList+0x74>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a18      	ldr	r2, [pc, #96]	; (8005860 <prvAddNewTaskToReadyList+0xd4>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4a15      	ldr	r2, [pc, #84]	; (8005864 <prvAddNewTaskToReadyList+0xd8>)
 800580e:	441a      	add	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f7ff f843 	bl	80048a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800581c:	f001 fa42 	bl	8006ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005820:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <prvAddNewTaskToReadyList+0xcc>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <prvAddNewTaskToReadyList+0xc8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	429a      	cmp	r2, r3
 8005834:	d207      	bcs.n	8005846 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <prvAddNewTaskToReadyList+0xdc>)
 8005838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20001518 	.word	0x20001518
 8005854:	20001044 	.word	0x20001044
 8005858:	20001524 	.word	0x20001524
 800585c:	20001534 	.word	0x20001534
 8005860:	20001520 	.word	0x20001520
 8005864:	20001048 	.word	0x20001048
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d017      	beq.n	80058ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <vTaskDelay+0x60>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <vTaskDelay+0x30>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60bb      	str	r3, [r7, #8]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800589c:	f000 f88a 	bl	80059b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058a0:	2100      	movs	r1, #0
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fcfe 	bl	80062a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058a8:	f000 f892 	bl	80059d0 <xTaskResumeAll>
 80058ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <vTaskDelay+0x64>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20001540 	.word	0x20001540
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058e2:	463a      	mov	r2, r7
 80058e4:	1d39      	adds	r1, r7, #4
 80058e6:	f107 0308 	add.w	r3, r7, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe ff78 	bl	80047e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	9202      	str	r2, [sp, #8]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	460a      	mov	r2, r1
 8005902:	4924      	ldr	r1, [pc, #144]	; (8005994 <vTaskStartScheduler+0xc0>)
 8005904:	4824      	ldr	r0, [pc, #144]	; (8005998 <vTaskStartScheduler+0xc4>)
 8005906:	f7ff fdf9 	bl	80054fc <xTaskCreateStatic>
 800590a:	4603      	mov	r3, r0
 800590c:	4a23      	ldr	r2, [pc, #140]	; (800599c <vTaskStartScheduler+0xc8>)
 800590e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005910:	4b22      	ldr	r3, [pc, #136]	; (800599c <vTaskStartScheduler+0xc8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005918:	2301      	movs	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e001      	b.n	8005922 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d102      	bne.n	800592e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005928:	f000 fd10 	bl	800634c <xTimerCreateTimerTask>
 800592c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d11b      	bne.n	800596c <vTaskStartScheduler+0x98>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	613b      	str	r3, [r7, #16]
}
 8005946:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <vTaskStartScheduler+0xcc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3354      	adds	r3, #84	; 0x54
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <vTaskStartScheduler+0xd0>)
 8005950:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <vTaskStartScheduler+0xd4>)
 8005954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005958:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800595a:	4b14      	ldr	r3, [pc, #80]	; (80059ac <vTaskStartScheduler+0xd8>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <vTaskStartScheduler+0xdc>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005966:	f001 f8cb 	bl	8006b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800596a:	e00e      	b.n	800598a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005972:	d10a      	bne.n	800598a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <vTaskStartScheduler+0xb4>
}
 800598a:	bf00      	nop
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	08008758 	.word	0x08008758
 8005998:	08005fd9 	.word	0x08005fd9
 800599c:	2000153c 	.word	0x2000153c
 80059a0:	20001044 	.word	0x20001044
 80059a4:	20000010 	.word	0x20000010
 80059a8:	20001538 	.word	0x20001538
 80059ac:	20001524 	.word	0x20001524
 80059b0:	2000151c 	.word	0x2000151c

080059b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <vTaskSuspendAll+0x18>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	4a03      	ldr	r2, [pc, #12]	; (80059cc <vTaskSuspendAll+0x18>)
 80059c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059c2:	bf00      	nop
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20001540 	.word	0x20001540

080059d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059de:	4b42      	ldr	r3, [pc, #264]	; (8005ae8 <xTaskResumeAll+0x118>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <xTaskResumeAll+0x2c>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	603b      	str	r3, [r7, #0]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059fc:	f001 f922 	bl	8006c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a00:	4b39      	ldr	r3, [pc, #228]	; (8005ae8 <xTaskResumeAll+0x118>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	4a38      	ldr	r2, [pc, #224]	; (8005ae8 <xTaskResumeAll+0x118>)
 8005a08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a0a:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <xTaskResumeAll+0x118>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d162      	bne.n	8005ad8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a12:	4b36      	ldr	r3, [pc, #216]	; (8005aec <xTaskResumeAll+0x11c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d05e      	beq.n	8005ad8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a1a:	e02f      	b.n	8005a7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <xTaskResumeAll+0x120>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe ff97 	bl	800495c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe ff92 	bl	800495c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3c:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <xTaskResumeAll+0x124>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d903      	bls.n	8005a4c <xTaskResumeAll+0x7c>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <xTaskResumeAll+0x124>)
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <xTaskResumeAll+0x128>)
 8005a5a:	441a      	add	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f7fe ff1d 	bl	80048a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4b23      	ldr	r3, [pc, #140]	; (8005afc <xTaskResumeAll+0x12c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <xTaskResumeAll+0x130>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a7c:	4b1c      	ldr	r3, [pc, #112]	; (8005af0 <xTaskResumeAll+0x120>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1cb      	bne.n	8005a1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a8a:	f000 fb5f 	bl	800614c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <xTaskResumeAll+0x134>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d010      	beq.n	8005abc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a9a:	f000 f847 	bl	8005b2c <xTaskIncrementTick>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005aa4:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <xTaskResumeAll+0x130>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f1      	bne.n	8005a9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <xTaskResumeAll+0x134>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005abc:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <xTaskResumeAll+0x130>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <xTaskResumeAll+0x138>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ad8:	f001 f8e4 	bl	8006ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8005adc:	68bb      	ldr	r3, [r7, #8]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20001540 	.word	0x20001540
 8005aec:	20001518 	.word	0x20001518
 8005af0:	200014d8 	.word	0x200014d8
 8005af4:	20001520 	.word	0x20001520
 8005af8:	20001048 	.word	0x20001048
 8005afc:	20001044 	.word	0x20001044
 8005b00:	2000152c 	.word	0x2000152c
 8005b04:	20001528 	.word	0x20001528
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <xTaskGetTickCount+0x1c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b18:	687b      	ldr	r3, [r7, #4]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	2000151c 	.word	0x2000151c

08005b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b36:	4b4f      	ldr	r3, [pc, #316]	; (8005c74 <xTaskIncrementTick+0x148>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 808f 	bne.w	8005c5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b40:	4b4d      	ldr	r3, [pc, #308]	; (8005c78 <xTaskIncrementTick+0x14c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b48:	4a4b      	ldr	r2, [pc, #300]	; (8005c78 <xTaskIncrementTick+0x14c>)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d120      	bne.n	8005b96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b54:	4b49      	ldr	r3, [pc, #292]	; (8005c7c <xTaskIncrementTick+0x150>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	603b      	str	r3, [r7, #0]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <xTaskIncrementTick+0x46>
 8005b74:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <xTaskIncrementTick+0x150>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <xTaskIncrementTick+0x154>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <xTaskIncrementTick+0x150>)
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <xTaskIncrementTick+0x154>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4b3e      	ldr	r3, [pc, #248]	; (8005c84 <xTaskIncrementTick+0x158>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <xTaskIncrementTick+0x158>)
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	f000 fadb 	bl	800614c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b96:	4b3c      	ldr	r3, [pc, #240]	; (8005c88 <xTaskIncrementTick+0x15c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d349      	bcc.n	8005c34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ba0:	4b36      	ldr	r3, [pc, #216]	; (8005c7c <xTaskIncrementTick+0x150>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005baa:	4b37      	ldr	r3, [pc, #220]	; (8005c88 <xTaskIncrementTick+0x15c>)
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bb0:	601a      	str	r2, [r3, #0]
					break;
 8005bb2:	e03f      	b.n	8005c34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb4:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <xTaskIncrementTick+0x150>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d203      	bcs.n	8005bd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bcc:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <xTaskIncrementTick+0x15c>)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bd2:	e02f      	b.n	8005c34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe febf 	bl	800495c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3318      	adds	r3, #24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe feb6 	bl	800495c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <xTaskIncrementTick+0x160>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d903      	bls.n	8005c04 <xTaskIncrementTick+0xd8>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	4a22      	ldr	r2, [pc, #136]	; (8005c8c <xTaskIncrementTick+0x160>)
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <xTaskIncrementTick+0x164>)
 8005c12:	441a      	add	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f7fe fe41 	bl	80048a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <xTaskIncrementTick+0x168>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3b8      	bcc.n	8005ba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c32:	e7b5      	b.n	8005ba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c34:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <xTaskIncrementTick+0x168>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	4915      	ldr	r1, [pc, #84]	; (8005c90 <xTaskIncrementTick+0x164>)
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d901      	bls.n	8005c50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <xTaskIncrementTick+0x16c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	e004      	b.n	8005c68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <xTaskIncrementTick+0x170>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	4a0d      	ldr	r2, [pc, #52]	; (8005c9c <xTaskIncrementTick+0x170>)
 8005c66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c68:	697b      	ldr	r3, [r7, #20]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20001540 	.word	0x20001540
 8005c78:	2000151c 	.word	0x2000151c
 8005c7c:	200014d0 	.word	0x200014d0
 8005c80:	200014d4 	.word	0x200014d4
 8005c84:	20001530 	.word	0x20001530
 8005c88:	20001538 	.word	0x20001538
 8005c8c:	20001520 	.word	0x20001520
 8005c90:	20001048 	.word	0x20001048
 8005c94:	20001044 	.word	0x20001044
 8005c98:	2000152c 	.word	0x2000152c
 8005c9c:	20001528 	.word	0x20001528

08005ca0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ca6:	4b2a      	ldr	r3, [pc, #168]	; (8005d50 <vTaskSwitchContext+0xb0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cae:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <vTaskSwitchContext+0xb4>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cb4:	e046      	b.n	8005d44 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005cb6:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <vTaskSwitchContext+0xb4>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cbc:	4b26      	ldr	r3, [pc, #152]	; (8005d58 <vTaskSwitchContext+0xb8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e010      	b.n	8005ce6 <vTaskSwitchContext+0x46>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	607b      	str	r3, [r7, #4]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <vTaskSwitchContext+0x3e>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	491d      	ldr	r1, [pc, #116]	; (8005d5c <vTaskSwitchContext+0xbc>)
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0e4      	beq.n	8005cc4 <vTaskSwitchContext+0x24>
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a15      	ldr	r2, [pc, #84]	; (8005d5c <vTaskSwitchContext+0xbc>)
 8005d06:	4413      	add	r3, r2
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	605a      	str	r2, [r3, #4]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d104      	bne.n	8005d2a <vTaskSwitchContext+0x8a>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	605a      	str	r2, [r3, #4]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a0b      	ldr	r2, [pc, #44]	; (8005d60 <vTaskSwitchContext+0xc0>)
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <vTaskSwitchContext+0xb8>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <vTaskSwitchContext+0xc0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3354      	adds	r3, #84	; 0x54
 8005d40:	4a08      	ldr	r2, [pc, #32]	; (8005d64 <vTaskSwitchContext+0xc4>)
 8005d42:	6013      	str	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	20001540 	.word	0x20001540
 8005d54:	2000152c 	.word	0x2000152c
 8005d58:	20001520 	.word	0x20001520
 8005d5c:	20001048 	.word	0x20001048
 8005d60:	20001044 	.word	0x20001044
 8005d64:	20000010 	.word	0x20000010

08005d68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	60fb      	str	r3, [r7, #12]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <vTaskPlaceOnEventList+0x44>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fe fda7 	bl	80048ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	6838      	ldr	r0, [r7, #0]
 8005da0:	f000 fa80 	bl	80062a4 <prvAddCurrentTaskToDelayedList>
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20001044 	.word	0x20001044

08005db0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	617b      	str	r3, [r7, #20]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <vTaskPlaceOnEventListRestricted+0x54>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3318      	adds	r3, #24
 8005dde:	4619      	mov	r1, r3
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7fe fd5e 	bl	80048a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68b8      	ldr	r0, [r7, #8]
 8005df6:	f000 fa55 	bl	80062a4 <prvAddCurrentTaskToDelayedList>
	}
 8005dfa:	bf00      	nop
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20001044 	.word	0x20001044

08005e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	60fb      	str	r3, [r7, #12]
}
 8005e30:	bf00      	nop
 8005e32:	e7fe      	b.n	8005e32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	3318      	adds	r3, #24
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fd8f 	bl	800495c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <xTaskRemoveFromEventList+0xb0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11d      	bne.n	8005e82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fd86 	bl	800495c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <xTaskRemoveFromEventList+0xb4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d903      	bls.n	8005e64 <xTaskRemoveFromEventList+0x5c>
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <xTaskRemoveFromEventList+0xb4>)
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <xTaskRemoveFromEventList+0xb8>)
 8005e72:	441a      	add	r2, r3
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f7fe fd11 	bl	80048a2 <vListInsertEnd>
 8005e80:	e005      	b.n	8005e8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3318      	adds	r3, #24
 8005e86:	4619      	mov	r1, r3
 8005e88:	480e      	ldr	r0, [pc, #56]	; (8005ec4 <xTaskRemoveFromEventList+0xbc>)
 8005e8a:	f7fe fd0a 	bl	80048a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <xTaskRemoveFromEventList+0xc0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d905      	bls.n	8005ea8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <xTaskRemoveFromEventList+0xc4>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e001      	b.n	8005eac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20001540 	.word	0x20001540
 8005ebc:	20001520 	.word	0x20001520
 8005ec0:	20001048 	.word	0x20001048
 8005ec4:	200014d8 	.word	0x200014d8
 8005ec8:	20001044 	.word	0x20001044
 8005ecc:	2000152c 	.word	0x2000152c

08005ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <vTaskInternalSetTimeOutState+0x24>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <vTaskInternalSetTimeOutState+0x28>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	605a      	str	r2, [r3, #4]
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	20001530 	.word	0x20001530
 8005ef8:	2000151c 	.word	0x2000151c

08005efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	613b      	str	r3, [r7, #16]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f3e:	f000 fe81 	bl	8006c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f42:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <xTaskCheckForTimeOut+0xbc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f5a:	d102      	bne.n	8005f62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	e023      	b.n	8005faa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <xTaskCheckForTimeOut+0xc0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d007      	beq.n	8005f7e <xTaskCheckForTimeOut+0x82>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d302      	bcc.n	8005f7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	e015      	b.n	8005faa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d20b      	bcs.n	8005fa0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ff9b 	bl	8005ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	e004      	b.n	8005faa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005faa:	f000 fe7b 	bl	8006ca4 <vPortExitCritical>

	return xReturn;
 8005fae:	69fb      	ldr	r3, [r7, #28]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	2000151c 	.word	0x2000151c
 8005fbc:	20001530 	.word	0x20001530

08005fc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <vTaskMissedYield+0x14>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	2000152c 	.word	0x2000152c

08005fd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fe0:	f000 f852 	bl	8006088 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <prvIdleTask+0x28>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d9f9      	bls.n	8005fe0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <prvIdleTask+0x2c>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ffc:	e7f0      	b.n	8005fe0 <prvIdleTask+0x8>
 8005ffe:	bf00      	nop
 8006000:	20001048 	.word	0x20001048
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800600e:	2300      	movs	r3, #0
 8006010:	607b      	str	r3, [r7, #4]
 8006012:	e00c      	b.n	800602e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <prvInitialiseTaskLists+0x60>)
 8006020:	4413      	add	r3, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fc10 	bl	8004848 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3301      	adds	r3, #1
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b37      	cmp	r3, #55	; 0x37
 8006032:	d9ef      	bls.n	8006014 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006034:	480d      	ldr	r0, [pc, #52]	; (800606c <prvInitialiseTaskLists+0x64>)
 8006036:	f7fe fc07 	bl	8004848 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800603a:	480d      	ldr	r0, [pc, #52]	; (8006070 <prvInitialiseTaskLists+0x68>)
 800603c:	f7fe fc04 	bl	8004848 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006040:	480c      	ldr	r0, [pc, #48]	; (8006074 <prvInitialiseTaskLists+0x6c>)
 8006042:	f7fe fc01 	bl	8004848 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006046:	480c      	ldr	r0, [pc, #48]	; (8006078 <prvInitialiseTaskLists+0x70>)
 8006048:	f7fe fbfe 	bl	8004848 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800604c:	480b      	ldr	r0, [pc, #44]	; (800607c <prvInitialiseTaskLists+0x74>)
 800604e:	f7fe fbfb 	bl	8004848 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <prvInitialiseTaskLists+0x78>)
 8006054:	4a05      	ldr	r2, [pc, #20]	; (800606c <prvInitialiseTaskLists+0x64>)
 8006056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvInitialiseTaskLists+0x7c>)
 800605a:	4a05      	ldr	r2, [pc, #20]	; (8006070 <prvInitialiseTaskLists+0x68>)
 800605c:	601a      	str	r2, [r3, #0]
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20001048 	.word	0x20001048
 800606c:	200014a8 	.word	0x200014a8
 8006070:	200014bc 	.word	0x200014bc
 8006074:	200014d8 	.word	0x200014d8
 8006078:	200014ec 	.word	0x200014ec
 800607c:	20001504 	.word	0x20001504
 8006080:	200014d0 	.word	0x200014d0
 8006084:	200014d4 	.word	0x200014d4

08006088 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800608e:	e019      	b.n	80060c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006090:	f000 fdd8 	bl	8006c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <prvCheckTasksWaitingTermination+0x50>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3304      	adds	r3, #4
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fc5b 	bl	800495c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060a6:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <prvCheckTasksWaitingTermination+0x54>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	4a0b      	ldr	r2, [pc, #44]	; (80060dc <prvCheckTasksWaitingTermination+0x54>)
 80060ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <prvCheckTasksWaitingTermination+0x58>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	4a0a      	ldr	r2, [pc, #40]	; (80060e0 <prvCheckTasksWaitingTermination+0x58>)
 80060b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ba:	f000 fdf3 	bl	8006ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f810 	bl	80060e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <prvCheckTasksWaitingTermination+0x58>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e1      	bne.n	8006090 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	200014ec 	.word	0x200014ec
 80060dc:	20001518 	.word	0x20001518
 80060e0:	20001500 	.word	0x20001500

080060e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3354      	adds	r3, #84	; 0x54
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fab7 	bl	8007664 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d108      	bne.n	8006112 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	4618      	mov	r0, r3
 8006106:	f000 ff8b 	bl	8007020 <vPortFree>
				vPortFree( pxTCB );
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 ff88 	bl	8007020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006110:	e018      	b.n	8006144 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006118:	2b01      	cmp	r3, #1
 800611a:	d103      	bne.n	8006124 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 ff7f 	bl	8007020 <vPortFree>
	}
 8006122:	e00f      	b.n	8006144 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800612a:	2b02      	cmp	r3, #2
 800612c:	d00a      	beq.n	8006144 <prvDeleteTCB+0x60>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60fb      	str	r3, [r7, #12]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <prvDeleteTCB+0x5e>
	}
 8006144:	bf00      	nop
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006152:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <prvResetNextTaskUnblockTime+0x38>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <prvResetNextTaskUnblockTime+0x3c>)
 800615e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006162:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006164:	e008      	b.n	8006178 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <prvResetNextTaskUnblockTime+0x38>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4a04      	ldr	r2, [pc, #16]	; (8006188 <prvResetNextTaskUnblockTime+0x3c>)
 8006176:	6013      	str	r3, [r2, #0]
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	200014d0 	.word	0x200014d0
 8006188:	20001538 	.word	0x20001538

0800618c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <xTaskGetSchedulerState+0x34>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800619a:	2301      	movs	r3, #1
 800619c:	607b      	str	r3, [r7, #4]
 800619e:	e008      	b.n	80061b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <xTaskGetSchedulerState+0x38>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d102      	bne.n	80061ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061a8:	2302      	movs	r3, #2
 80061aa:	607b      	str	r3, [r7, #4]
 80061ac:	e001      	b.n	80061b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061ae:	2300      	movs	r3, #0
 80061b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061b2:	687b      	ldr	r3, [r7, #4]
	}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	20001524 	.word	0x20001524
 80061c4:	20001540 	.word	0x20001540

080061c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d056      	beq.n	800628c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061de:	4b2e      	ldr	r3, [pc, #184]	; (8006298 <xTaskPriorityDisinherit+0xd0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d00a      	beq.n	80061fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60fb      	str	r3, [r7, #12]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60bb      	str	r3, [r7, #8]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006220:	1e5a      	subs	r2, r3, #1
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622e:	429a      	cmp	r2, r3
 8006230:	d02c      	beq.n	800628c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006236:	2b00      	cmp	r3, #0
 8006238:	d128      	bne.n	800628c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fb8c 	bl	800495c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625c:	4b0f      	ldr	r3, [pc, #60]	; (800629c <xTaskPriorityDisinherit+0xd4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d903      	bls.n	800626c <xTaskPriorityDisinherit+0xa4>
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	4a0c      	ldr	r2, [pc, #48]	; (800629c <xTaskPriorityDisinherit+0xd4>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <xTaskPriorityDisinherit+0xd8>)
 800627a:	441a      	add	r2, r3
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f7fe fb0d 	bl	80048a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006288:	2301      	movs	r3, #1
 800628a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800628c:	697b      	ldr	r3, [r7, #20]
	}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20001044 	.word	0x20001044
 800629c:	20001520 	.word	0x20001520
 80062a0:	20001048 	.word	0x20001048

080062a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <prvAddCurrentTaskToDelayedList+0x90>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b4:	4b20      	ldr	r3, [pc, #128]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fb4e 	bl	800495c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c6:	d10a      	bne.n	80062de <prvAddCurrentTaskToDelayedList+0x3a>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4819      	ldr	r0, [pc, #100]	; (800633c <prvAddCurrentTaskToDelayedList+0x98>)
 80062d8:	f7fe fae3 	bl	80048a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062dc:	e026      	b.n	800632c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4413      	add	r3, r2
 80062e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d209      	bcs.n	800630a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3304      	adds	r3, #4
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f7fe faf1 	bl	80048ea <vListInsert>
}
 8006308:	e010      	b.n	800632c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <prvAddCurrentTaskToDelayedList+0xa0>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fe fae7 	bl	80048ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <prvAddCurrentTaskToDelayedList+0xa4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d202      	bcs.n	800632c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006326:	4a08      	ldr	r2, [pc, #32]	; (8006348 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	2000151c 	.word	0x2000151c
 8006338:	20001044 	.word	0x20001044
 800633c:	20001504 	.word	0x20001504
 8006340:	200014d4 	.word	0x200014d4
 8006344:	200014d0 	.word	0x200014d0
 8006348:	20001538 	.word	0x20001538

0800634c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	; 0x28
 8006350:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006356:	f000 fb07 	bl	8006968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <xTimerCreateTimerTask+0x80>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d021      	beq.n	80063a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800636a:	1d3a      	adds	r2, r7, #4
 800636c:	f107 0108 	add.w	r1, r7, #8
 8006370:	f107 030c 	add.w	r3, r7, #12
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe fa4d 	bl	8004814 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	9202      	str	r2, [sp, #8]
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	2302      	movs	r3, #2
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	2300      	movs	r3, #0
 800638a:	460a      	mov	r2, r1
 800638c:	4910      	ldr	r1, [pc, #64]	; (80063d0 <xTimerCreateTimerTask+0x84>)
 800638e:	4811      	ldr	r0, [pc, #68]	; (80063d4 <xTimerCreateTimerTask+0x88>)
 8006390:	f7ff f8b4 	bl	80054fc <xTaskCreateStatic>
 8006394:	4603      	mov	r3, r0
 8006396:	4a10      	ldr	r2, [pc, #64]	; (80063d8 <xTimerCreateTimerTask+0x8c>)
 8006398:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <xTimerCreateTimerTask+0x8c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063a2:	2301      	movs	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	613b      	str	r3, [r7, #16]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063c2:	697b      	ldr	r3, [r7, #20]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20001574 	.word	0x20001574
 80063d0:	08008760 	.word	0x08008760
 80063d4:	08006511 	.word	0x08006511
 80063d8:	20001578 	.word	0x20001578

080063dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xTimerGenericCommand+0x2e>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	623b      	str	r3, [r7, #32]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800640a:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <xTimerGenericCommand+0x98>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d02a      	beq.n	8006468 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b05      	cmp	r3, #5
 8006422:	dc18      	bgt.n	8006456 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006424:	f7ff feb2 	bl	800618c <xTaskGetSchedulerState>
 8006428:	4603      	mov	r3, r0
 800642a:	2b02      	cmp	r3, #2
 800642c:	d109      	bne.n	8006442 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <xTimerGenericCommand+0x98>)
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	f107 0110 	add.w	r1, r7, #16
 8006436:	2300      	movs	r3, #0
 8006438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643a:	f7fe fbf7 	bl	8004c2c <xQueueGenericSend>
 800643e:	6278      	str	r0, [r7, #36]	; 0x24
 8006440:	e012      	b.n	8006468 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <xTimerGenericCommand+0x98>)
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	f107 0110 	add.w	r1, r7, #16
 800644a:	2300      	movs	r3, #0
 800644c:	2200      	movs	r2, #0
 800644e:	f7fe fbed 	bl	8004c2c <xQueueGenericSend>
 8006452:	6278      	str	r0, [r7, #36]	; 0x24
 8006454:	e008      	b.n	8006468 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <xTimerGenericCommand+0x98>)
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f107 0110 	add.w	r1, r7, #16
 800645e:	2300      	movs	r3, #0
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	f7fe fce1 	bl	8004e28 <xQueueGenericSendFromISR>
 8006466:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800646a:	4618      	mov	r0, r3
 800646c:	3728      	adds	r7, #40	; 0x28
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20001574 	.word	0x20001574

08006478 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006482:	4b22      	ldr	r3, [pc, #136]	; (800650c <prvProcessExpiredTimer+0x94>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	3304      	adds	r3, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fa63 	bl	800495c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d022      	beq.n	80064ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	18d1      	adds	r1, r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	6978      	ldr	r0, [r7, #20]
 80064b2:	f000 f8d1 	bl	8006658 <prvInsertTimerInActiveList>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01f      	beq.n	80064fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064bc:	2300      	movs	r3, #0
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2300      	movs	r3, #0
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	2100      	movs	r1, #0
 80064c6:	6978      	ldr	r0, [r7, #20]
 80064c8:	f7ff ff88 	bl	80063dc <xTimerGenericCommand>
 80064cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d113      	bne.n	80064fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60fb      	str	r3, [r7, #12]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	6978      	ldr	r0, [r7, #20]
 8006502:	4798      	blx	r3
}
 8006504:	bf00      	nop
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	2000156c 	.word	0x2000156c

08006510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006518:	f107 0308 	add.w	r3, r7, #8
 800651c:	4618      	mov	r0, r3
 800651e:	f000 f857 	bl	80065d0 <prvGetNextExpireTime>
 8006522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4619      	mov	r1, r3
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f803 	bl	8006534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800652e:	f000 f8d5 	bl	80066dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006532:	e7f1      	b.n	8006518 <prvTimerTask+0x8>

08006534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800653e:	f7ff fa39 	bl	80059b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f866 	bl	8006618 <prvSampleTimeNow>
 800654c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d130      	bne.n	80065b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <prvProcessTimerOrBlockTask+0x3c>
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	429a      	cmp	r2, r3
 8006560:	d806      	bhi.n	8006570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006562:	f7ff fa35 	bl	80059d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff85 	bl	8006478 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800656e:	e024      	b.n	80065ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <prvProcessTimerOrBlockTask+0x90>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <prvProcessTimerOrBlockTask+0x50>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <prvProcessTimerOrBlockTask+0x52>
 8006584:	2300      	movs	r3, #0
 8006586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <prvProcessTimerOrBlockTask+0x94>)
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4619      	mov	r1, r3
 8006596:	f7fe ff7d 	bl	8005494 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800659a:	f7ff fa19 	bl	80059d0 <xTaskResumeAll>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <prvProcessTimerOrBlockTask+0x98>)
 80065a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	f3bf 8f6f 	isb	sy
}
 80065b4:	e001      	b.n	80065ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065b6:	f7ff fa0b 	bl	80059d0 <xTaskResumeAll>
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20001570 	.word	0x20001570
 80065c8:	20001574 	.word	0x20001574
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065d8:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <prvGetNextExpireTime+0x44>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <prvGetNextExpireTime+0x16>
 80065e2:	2201      	movs	r2, #1
 80065e4:	e000      	b.n	80065e8 <prvGetNextExpireTime+0x18>
 80065e6:	2200      	movs	r2, #0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065f4:	4b07      	ldr	r3, [pc, #28]	; (8006614 <prvGetNextExpireTime+0x44>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e001      	b.n	8006604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	2000156c 	.word	0x2000156c

08006618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006620:	f7ff fa74 	bl	8005b0c <xTaskGetTickCount>
 8006624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <prvSampleTimeNow+0x3c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	429a      	cmp	r2, r3
 800662e:	d205      	bcs.n	800663c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006630:	f000 f936 	bl	80068a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	e002      	b.n	8006642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006642:	4a04      	ldr	r2, [pc, #16]	; (8006654 <prvSampleTimeNow+0x3c>)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006648:	68fb      	ldr	r3, [r7, #12]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	2000157c 	.word	0x2000157c

08006658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	429a      	cmp	r2, r3
 800667c:	d812      	bhi.n	80066a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800668c:	2301      	movs	r3, #1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e01b      	b.n	80066ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <prvInsertTimerInActiveList+0x7c>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7fe f924 	bl	80048ea <vListInsert>
 80066a2:	e012      	b.n	80066ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d206      	bcs.n	80066ba <prvInsertTimerInActiveList+0x62>
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d302      	bcc.n	80066ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e007      	b.n	80066ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <prvInsertTimerInActiveList+0x80>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3304      	adds	r3, #4
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f7fe f910 	bl	80048ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066ca:	697b      	ldr	r3, [r7, #20]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20001570 	.word	0x20001570
 80066d8:	2000156c 	.word	0x2000156c

080066dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08e      	sub	sp, #56	; 0x38
 80066e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066e2:	e0ca      	b.n	800687a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	da18      	bge.n	800671c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066ea:	1d3b      	adds	r3, r7, #4
 80066ec:	3304      	adds	r3, #4
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	61fb      	str	r3, [r7, #28]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006712:	6850      	ldr	r0, [r2, #4]
 8006714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006716:	6892      	ldr	r2, [r2, #8]
 8006718:	4611      	mov	r1, r2
 800671a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f2c0 80aa 	blt.w	8006878 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d004      	beq.n	800673a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	3304      	adds	r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe f911 	bl	800495c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800673a:	463b      	mov	r3, r7
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff6b 	bl	8006618 <prvSampleTimeNow>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b09      	cmp	r3, #9
 8006748:	f200 8097 	bhi.w	800687a <prvProcessReceivedCommands+0x19e>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <prvProcessReceivedCommands+0x78>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	0800677d 	.word	0x0800677d
 8006758:	0800677d 	.word	0x0800677d
 800675c:	0800677d 	.word	0x0800677d
 8006760:	080067f1 	.word	0x080067f1
 8006764:	08006805 	.word	0x08006805
 8006768:	0800684f 	.word	0x0800684f
 800676c:	0800677d 	.word	0x0800677d
 8006770:	0800677d 	.word	0x0800677d
 8006774:	080067f1 	.word	0x080067f1
 8006778:	08006805 	.word	0x08006805
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	18d1      	adds	r1, r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679c:	f7ff ff5c 	bl	8006658 <prvInsertTimerInActiveList>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d069      	beq.n	800687a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d05e      	beq.n	800687a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	441a      	add	r2, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2300      	movs	r3, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ce:	f7ff fe05 	bl	80063dc <xTimerGenericCommand>
 80067d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d14f      	bne.n	800687a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	61bb      	str	r3, [r7, #24]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006802:	e03a      	b.n	800687a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	617b      	str	r3, [r7, #20]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	18d1      	adds	r1, r2, r3
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006848:	f7ff ff06 	bl	8006658 <prvInsertTimerInActiveList>
					break;
 800684c:	e015      	b.n	800687a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800685c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800685e:	f000 fbdf 	bl	8007020 <vPortFree>
 8006862:	e00a      	b.n	800687a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	b2da      	uxtb	r2, r3
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006876:	e000      	b.n	800687a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006878:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800687a:	4b08      	ldr	r3, [pc, #32]	; (800689c <prvProcessReceivedCommands+0x1c0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	1d39      	adds	r1, r7, #4
 8006880:	2200      	movs	r2, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fb6c 	bl	8004f60 <xQueueReceive>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	f47f af2a 	bne.w	80066e4 <prvProcessReceivedCommands+0x8>
	}
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	3730      	adds	r7, #48	; 0x30
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20001574 	.word	0x20001574

080068a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068a6:	e048      	b.n	800693a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068a8:	4b2d      	ldr	r3, [pc, #180]	; (8006960 <prvSwitchTimerLists+0xc0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b2:	4b2b      	ldr	r3, [pc, #172]	; (8006960 <prvSwitchTimerLists+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3304      	adds	r3, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe f84b 	bl	800495c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d02e      	beq.n	800693a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90e      	bls.n	800690c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068fa:	4b19      	ldr	r3, [pc, #100]	; (8006960 <prvSwitchTimerLists+0xc0>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3304      	adds	r3, #4
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f7fd fff0 	bl	80048ea <vListInsert>
 800690a:	e016      	b.n	800693a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800690c:	2300      	movs	r3, #0
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	2100      	movs	r1, #0
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff fd60 	bl	80063dc <xTimerGenericCommand>
 800691c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	603b      	str	r3, [r7, #0]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <prvSwitchTimerLists+0xc0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1b1      	bne.n	80068a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <prvSwitchTimerLists+0xc0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <prvSwitchTimerLists+0xc4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a04      	ldr	r2, [pc, #16]	; (8006960 <prvSwitchTimerLists+0xc0>)
 8006950:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006952:	4a04      	ldr	r2, [pc, #16]	; (8006964 <prvSwitchTimerLists+0xc4>)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	2000156c 	.word	0x2000156c
 8006964:	20001570 	.word	0x20001570

08006968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800696e:	f000 f969 	bl	8006c44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d120      	bne.n	80069bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800697a:	4814      	ldr	r0, [pc, #80]	; (80069cc <prvCheckForValidListAndQueue+0x64>)
 800697c:	f7fd ff64 	bl	8004848 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006980:	4813      	ldr	r0, [pc, #76]	; (80069d0 <prvCheckForValidListAndQueue+0x68>)
 8006982:	f7fd ff61 	bl	8004848 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <prvCheckForValidListAndQueue+0x6c>)
 8006988:	4a10      	ldr	r2, [pc, #64]	; (80069cc <prvCheckForValidListAndQueue+0x64>)
 800698a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800698c:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <prvCheckForValidListAndQueue+0x70>)
 800698e:	4a10      	ldr	r2, [pc, #64]	; (80069d0 <prvCheckForValidListAndQueue+0x68>)
 8006990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006992:	2300      	movs	r3, #0
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	4b11      	ldr	r3, [pc, #68]	; (80069dc <prvCheckForValidListAndQueue+0x74>)
 8006998:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <prvCheckForValidListAndQueue+0x78>)
 800699a:	2110      	movs	r1, #16
 800699c:	200a      	movs	r0, #10
 800699e:	f7fe f86f 	bl	8004a80 <xQueueGenericCreateStatic>
 80069a2:	4603      	mov	r3, r0
 80069a4:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 80069a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069a8:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	490b      	ldr	r1, [pc, #44]	; (80069e4 <prvCheckForValidListAndQueue+0x7c>)
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe fd42 	bl	8005440 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069bc:	f000 f972 	bl	8006ca4 <vPortExitCritical>
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20001574 	.word	0x20001574
 80069cc:	20001544 	.word	0x20001544
 80069d0:	20001558 	.word	0x20001558
 80069d4:	2000156c 	.word	0x2000156c
 80069d8:	20001570 	.word	0x20001570
 80069dc:	20001620 	.word	0x20001620
 80069e0:	20001580 	.word	0x20001580
 80069e4:	08008768 	.word	0x08008768

080069e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3b04      	subs	r3, #4
 80069f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b04      	subs	r3, #4
 8006a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3b04      	subs	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a18:	4a0c      	ldr	r2, [pc, #48]	; (8006a4c <pxPortInitialiseStack+0x64>)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3b14      	subs	r3, #20
 8006a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f06f 0202 	mvn.w	r2, #2
 8006a36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3b20      	subs	r3, #32
 8006a3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	08006a51 	.word	0x08006a51

08006a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a5a:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <prvTaskExitError+0x54>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a62:	d00a      	beq.n	8006a7a <prvTaskExitError+0x2a>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	60fb      	str	r3, [r7, #12]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <prvTaskExitError+0x28>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	60bb      	str	r3, [r7, #8]
}
 8006a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a8e:	bf00      	nop
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0fc      	beq.n	8006a90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	2000000c 	.word	0x2000000c
	...

08006ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ab0:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <pxCurrentTCBConst2>)
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	f380 8809 	msr	PSP, r0
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	4770      	bx	lr
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst2>:
 8006ad0:	20001044 	.word	0x20001044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop

08006ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ad8:	4808      	ldr	r0, [pc, #32]	; (8006afc <prvPortStartFirstTask+0x24>)
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f380 8808 	msr	MSP, r0
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8814 	msr	CONTROL, r0
 8006aea:	b662      	cpsie	i
 8006aec:	b661      	cpsie	f
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	df00      	svc	0
 8006af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006afa:	bf00      	nop
 8006afc:	e000ed08 	.word	0xe000ed08

08006b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b06:	4b46      	ldr	r3, [pc, #280]	; (8006c20 <xPortStartScheduler+0x120>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a46      	ldr	r2, [pc, #280]	; (8006c24 <xPortStartScheduler+0x124>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10a      	bne.n	8006b26 <xPortStartScheduler+0x26>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b26:	4b3e      	ldr	r3, [pc, #248]	; (8006c20 <xPortStartScheduler+0x120>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a3f      	ldr	r2, [pc, #252]	; (8006c28 <xPortStartScheduler+0x128>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d10a      	bne.n	8006b46 <xPortStartScheduler+0x46>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b46:	4b39      	ldr	r3, [pc, #228]	; (8006c2c <xPortStartScheduler+0x12c>)
 8006b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	4b31      	ldr	r3, [pc, #196]	; (8006c30 <xPortStartScheduler+0x130>)
 8006b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b6e:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <xPortStartScheduler+0x134>)
 8006b70:	2207      	movs	r2, #7
 8006b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b74:	e009      	b.n	8006b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b76:	4b2f      	ldr	r3, [pc, #188]	; (8006c34 <xPortStartScheduler+0x134>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	4a2d      	ldr	r2, [pc, #180]	; (8006c34 <xPortStartScheduler+0x134>)
 8006b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b92:	2b80      	cmp	r3, #128	; 0x80
 8006b94:	d0ef      	beq.n	8006b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b96:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <xPortStartScheduler+0x134>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f1c3 0307 	rsb	r3, r3, #7
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d00a      	beq.n	8006bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60bb      	str	r3, [r7, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <xPortStartScheduler+0x134>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <xPortStartScheduler+0x134>)
 8006bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bc2:	4b1c      	ldr	r3, [pc, #112]	; (8006c34 <xPortStartScheduler+0x134>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bca:	4a1a      	ldr	r2, [pc, #104]	; (8006c34 <xPortStartScheduler+0x134>)
 8006bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bd6:	4b18      	ldr	r3, [pc, #96]	; (8006c38 <xPortStartScheduler+0x138>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <xPortStartScheduler+0x138>)
 8006bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <xPortStartScheduler+0x138>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a14      	ldr	r2, [pc, #80]	; (8006c38 <xPortStartScheduler+0x138>)
 8006be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bee:	f000 f8dd 	bl	8006dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bf2:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <xPortStartScheduler+0x13c>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bf8:	f000 f8fc 	bl	8006df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <xPortStartScheduler+0x140>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a0f      	ldr	r2, [pc, #60]	; (8006c40 <xPortStartScheduler+0x140>)
 8006c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c08:	f7ff ff66 	bl	8006ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c0c:	f7ff f848 	bl	8005ca0 <vTaskSwitchContext>
	prvTaskExitError();
 8006c10:	f7ff ff1e 	bl	8006a50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	e000ed00 	.word	0xe000ed00
 8006c24:	410fc271 	.word	0x410fc271
 8006c28:	410fc270 	.word	0x410fc270
 8006c2c:	e000e400 	.word	0xe000e400
 8006c30:	20001670 	.word	0x20001670
 8006c34:	20001674 	.word	0x20001674
 8006c38:	e000ed20 	.word	0xe000ed20
 8006c3c:	2000000c 	.word	0x2000000c
 8006c40:	e000ef34 	.word	0xe000ef34

08006c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	607b      	str	r3, [r7, #4]
}
 8006c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c5e:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <vPortEnterCritical+0x58>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	4a0d      	ldr	r2, [pc, #52]	; (8006c9c <vPortEnterCritical+0x58>)
 8006c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <vPortEnterCritical+0x58>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d10f      	bne.n	8006c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <vPortEnterCritical+0x5c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	603b      	str	r3, [r7, #0]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <vPortEnterCritical+0x4a>
	}
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	2000000c 	.word	0x2000000c
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006caa:	4b12      	ldr	r3, [pc, #72]	; (8006cf4 <vPortExitCritical+0x50>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <vPortExitCritical+0x24>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	607b      	str	r3, [r7, #4]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	; (8006cf4 <vPortExitCritical+0x50>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <vPortExitCritical+0x50>)
 8006cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cd2:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <vPortExitCritical+0x50>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d105      	bne.n	8006ce6 <vPortExitCritical+0x42>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	f383 8811 	msr	BASEPRI, r3
}
 8006ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	2000000c 	.word	0x2000000c
	...

08006d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d00:	f3ef 8009 	mrs	r0, PSP
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <pxCurrentTCBConst>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	f01e 0f10 	tst.w	lr, #16
 8006d10:	bf08      	it	eq
 8006d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1a:	6010      	str	r0, [r2, #0]
 8006d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d24:	f380 8811 	msr	BASEPRI, r0
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f7fe ffb6 	bl	8005ca0 <vTaskSwitchContext>
 8006d34:	f04f 0000 	mov.w	r0, #0
 8006d38:	f380 8811 	msr	BASEPRI, r0
 8006d3c:	bc09      	pop	{r0, r3}
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	6808      	ldr	r0, [r1, #0]
 8006d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d46:	f01e 0f10 	tst.w	lr, #16
 8006d4a:	bf08      	it	eq
 8006d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d50:	f380 8809 	msr	PSP, r0
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w

08006d60 <pxCurrentTCBConst>:
 8006d60:	20001044 	.word	0x20001044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop

08006d68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	607b      	str	r3, [r7, #4]
}
 8006d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d82:	f7fe fed3 	bl	8005b2c <xTaskIncrementTick>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <xPortSysTickHandler+0x40>)
 8006d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	2300      	movs	r3, #0
 8006d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f383 8811 	msr	BASEPRI, r3
}
 8006d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <vPortSetupTimerInterrupt+0x34>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006db6:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <vPortSetupTimerInterrupt+0x38>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <vPortSetupTimerInterrupt+0x3c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <vPortSetupTimerInterrupt+0x40>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	099b      	lsrs	r3, r3, #6
 8006dc8:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <vPortSetupTimerInterrupt+0x44>)
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dce:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <vPortSetupTimerInterrupt+0x34>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	e000e010 	.word	0xe000e010
 8006de4:	e000e018 	.word	0xe000e018
 8006de8:	20000000 	.word	0x20000000
 8006dec:	10624dd3 	.word	0x10624dd3
 8006df0:	e000e014 	.word	0xe000e014

08006df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e04 <vPortEnableVFP+0x10>
 8006df8:	6801      	ldr	r1, [r0, #0]
 8006dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dfe:	6001      	str	r1, [r0, #0]
 8006e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e02:	bf00      	nop
 8006e04:	e000ed88 	.word	0xe000ed88

08006e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e0e:	f3ef 8305 	mrs	r3, IPSR
 8006e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d914      	bls.n	8006e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <vPortValidateInterruptPriority+0x70>)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e24:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <vPortValidateInterruptPriority+0x74>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	7afa      	ldrb	r2, [r7, #11]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d20a      	bcs.n	8006e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	607b      	str	r3, [r7, #4]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <vPortValidateInterruptPriority+0x78>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e4c:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <vPortValidateInterruptPriority+0x7c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d90a      	bls.n	8006e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	603b      	str	r3, [r7, #0]
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <vPortValidateInterruptPriority+0x60>
	}
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	e000e3f0 	.word	0xe000e3f0
 8006e7c:	20001670 	.word	0x20001670
 8006e80:	e000ed0c 	.word	0xe000ed0c
 8006e84:	20001674 	.word	0x20001674

08006e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e94:	f7fe fd8e 	bl	80059b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e98:	4b5b      	ldr	r3, [pc, #364]	; (8007008 <pvPortMalloc+0x180>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ea0:	f000 f920 	bl	80070e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ea4:	4b59      	ldr	r3, [pc, #356]	; (800700c <pvPortMalloc+0x184>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f040 8093 	bne.w	8006fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01d      	beq.n	8006ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006eb8:	2208      	movs	r2, #8
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d014      	beq.n	8006ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f023 0307 	bic.w	r3, r3, #7
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	617b      	str	r3, [r7, #20]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d06e      	beq.n	8006fd8 <pvPortMalloc+0x150>
 8006efa:	4b45      	ldr	r3, [pc, #276]	; (8007010 <pvPortMalloc+0x188>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d869      	bhi.n	8006fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f04:	4b43      	ldr	r3, [pc, #268]	; (8007014 <pvPortMalloc+0x18c>)
 8006f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f08:	4b42      	ldr	r3, [pc, #264]	; (8007014 <pvPortMalloc+0x18c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f0e:	e004      	b.n	8006f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d903      	bls.n	8006f2c <pvPortMalloc+0xa4>
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f1      	bne.n	8006f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f2c:	4b36      	ldr	r3, [pc, #216]	; (8007008 <pvPortMalloc+0x180>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d050      	beq.n	8006fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2208      	movs	r2, #8
 8006f3c:	4413      	add	r3, r2
 8006f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	1ad2      	subs	r2, r2, r3
 8006f50:	2308      	movs	r3, #8
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d91f      	bls.n	8006f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <pvPortMalloc+0xf8>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	613b      	str	r3, [r7, #16]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f92:	69b8      	ldr	r0, [r7, #24]
 8006f94:	f000 f908 	bl	80071a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f98:	4b1d      	ldr	r3, [pc, #116]	; (8007010 <pvPortMalloc+0x188>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <pvPortMalloc+0x188>)
 8006fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fa6:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <pvPortMalloc+0x188>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <pvPortMalloc+0x190>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d203      	bcs.n	8006fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fb2:	4b17      	ldr	r3, [pc, #92]	; (8007010 <pvPortMalloc+0x188>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a18      	ldr	r2, [pc, #96]	; (8007018 <pvPortMalloc+0x190>)
 8006fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	4b13      	ldr	r3, [pc, #76]	; (800700c <pvPortMalloc+0x184>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <pvPortMalloc+0x194>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	4a11      	ldr	r2, [pc, #68]	; (800701c <pvPortMalloc+0x194>)
 8006fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fd8:	f7fe fcfa 	bl	80059d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <pvPortMalloc+0x174>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	60fb      	str	r3, [r7, #12]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <pvPortMalloc+0x172>
	return pvReturn;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3728      	adds	r7, #40	; 0x28
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20002df0 	.word	0x20002df0
 800700c:	20002e04 	.word	0x20002e04
 8007010:	20002df4 	.word	0x20002df4
 8007014:	20002de8 	.word	0x20002de8
 8007018:	20002df8 	.word	0x20002df8
 800701c:	20002dfc 	.word	0x20002dfc

08007020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d04d      	beq.n	80070ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007032:	2308      	movs	r3, #8
 8007034:	425b      	negs	r3, r3
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	4b24      	ldr	r3, [pc, #144]	; (80070d8 <vPortFree+0xb8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <vPortFree+0x44>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60fb      	str	r3, [r7, #12]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <vPortFree+0x62>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	60bb      	str	r3, [r7, #8]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <vPortFree+0xb8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01e      	beq.n	80070ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d11a      	bne.n	80070ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <vPortFree+0xb8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	401a      	ands	r2, r3
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070a8:	f7fe fc84 	bl	80059b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <vPortFree+0xbc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4413      	add	r3, r2
 80070b6:	4a09      	ldr	r2, [pc, #36]	; (80070dc <vPortFree+0xbc>)
 80070b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070ba:	6938      	ldr	r0, [r7, #16]
 80070bc:	f000 f874 	bl	80071a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <vPortFree+0xc0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a06      	ldr	r2, [pc, #24]	; (80070e0 <vPortFree+0xc0>)
 80070c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070ca:	f7fe fc81 	bl	80059d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070ce:	bf00      	nop
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20002e04 	.word	0x20002e04
 80070dc:	20002df4 	.word	0x20002df4
 80070e0:	20002e00 	.word	0x20002e00

080070e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ea:	f241 7370 	movw	r3, #6000	; 0x1770
 80070ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070f0:	4b27      	ldr	r3, [pc, #156]	; (8007190 <prvHeapInit+0xac>)
 80070f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00c      	beq.n	8007118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3307      	adds	r3, #7
 8007102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0307 	bic.w	r3, r3, #7
 800710a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	4a1f      	ldr	r2, [pc, #124]	; (8007190 <prvHeapInit+0xac>)
 8007114:	4413      	add	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <prvHeapInit+0xb0>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007122:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <prvHeapInit+0xb0>)
 8007124:	2200      	movs	r2, #0
 8007126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4413      	add	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007130:	2208      	movs	r2, #8
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 0307 	bic.w	r3, r3, #7
 800713e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4a15      	ldr	r2, [pc, #84]	; (8007198 <prvHeapInit+0xb4>)
 8007144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <prvHeapInit+0xb4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <prvHeapInit+0xb4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <prvHeapInit+0xb4>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	4a0a      	ldr	r2, [pc, #40]	; (800719c <prvHeapInit+0xb8>)
 8007172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	4a09      	ldr	r2, [pc, #36]	; (80071a0 <prvHeapInit+0xbc>)
 800717a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <prvHeapInit+0xc0>)
 800717e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007182:	601a      	str	r2, [r3, #0]
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	20001678 	.word	0x20001678
 8007194:	20002de8 	.word	0x20002de8
 8007198:	20002df0 	.word	0x20002df0
 800719c:	20002df8 	.word	0x20002df8
 80071a0:	20002df4 	.word	0x20002df4
 80071a4:	20002e04 	.word	0x20002e04

080071a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071b0:	4b28      	ldr	r3, [pc, #160]	; (8007254 <prvInsertBlockIntoFreeList+0xac>)
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	e002      	b.n	80071bc <prvInsertBlockIntoFreeList+0x14>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d8f7      	bhi.n	80071b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	4413      	add	r3, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d108      	bne.n	80071ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	441a      	add	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d118      	bne.n	8007230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b15      	ldr	r3, [pc, #84]	; (8007258 <prvInsertBlockIntoFreeList+0xb0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d00d      	beq.n	8007226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	441a      	add	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	e008      	b.n	8007238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <prvInsertBlockIntoFreeList+0xb0>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	e003      	b.n	8007238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	429a      	cmp	r2, r3
 800723e:	d002      	beq.n	8007246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20002de8 	.word	0x20002de8
 8007258:	20002df0 	.word	0x20002df0

0800725c <__errno>:
 800725c:	4b01      	ldr	r3, [pc, #4]	; (8007264 <__errno+0x8>)
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000010 	.word	0x20000010

08007268 <std>:
 8007268:	2300      	movs	r3, #0
 800726a:	b510      	push	{r4, lr}
 800726c:	4604      	mov	r4, r0
 800726e:	e9c0 3300 	strd	r3, r3, [r0]
 8007272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007276:	6083      	str	r3, [r0, #8]
 8007278:	8181      	strh	r1, [r0, #12]
 800727a:	6643      	str	r3, [r0, #100]	; 0x64
 800727c:	81c2      	strh	r2, [r0, #14]
 800727e:	6183      	str	r3, [r0, #24]
 8007280:	4619      	mov	r1, r3
 8007282:	2208      	movs	r2, #8
 8007284:	305c      	adds	r0, #92	; 0x5c
 8007286:	f000 f92a 	bl	80074de <memset>
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <std+0x38>)
 800728c:	6263      	str	r3, [r4, #36]	; 0x24
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <std+0x3c>)
 8007290:	62a3      	str	r3, [r4, #40]	; 0x28
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <std+0x40>)
 8007294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <std+0x44>)
 8007298:	6224      	str	r4, [r4, #32]
 800729a:	6323      	str	r3, [r4, #48]	; 0x30
 800729c:	bd10      	pop	{r4, pc}
 800729e:	bf00      	nop
 80072a0:	080077a5 	.word	0x080077a5
 80072a4:	080077c7 	.word	0x080077c7
 80072a8:	080077ff 	.word	0x080077ff
 80072ac:	08007823 	.word	0x08007823

080072b0 <_cleanup_r>:
 80072b0:	4901      	ldr	r1, [pc, #4]	; (80072b8 <_cleanup_r+0x8>)
 80072b2:	f000 b8af 	b.w	8007414 <_fwalk_reent>
 80072b6:	bf00      	nop
 80072b8:	0800797d 	.word	0x0800797d

080072bc <__sfmoreglue>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	2268      	movs	r2, #104	; 0x68
 80072c0:	1e4d      	subs	r5, r1, #1
 80072c2:	4355      	muls	r5, r2
 80072c4:	460e      	mov	r6, r1
 80072c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072ca:	f000 f931 	bl	8007530 <_malloc_r>
 80072ce:	4604      	mov	r4, r0
 80072d0:	b140      	cbz	r0, 80072e4 <__sfmoreglue+0x28>
 80072d2:	2100      	movs	r1, #0
 80072d4:	e9c0 1600 	strd	r1, r6, [r0]
 80072d8:	300c      	adds	r0, #12
 80072da:	60a0      	str	r0, [r4, #8]
 80072dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072e0:	f000 f8fd 	bl	80074de <memset>
 80072e4:	4620      	mov	r0, r4
 80072e6:	bd70      	pop	{r4, r5, r6, pc}

080072e8 <__sfp_lock_acquire>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__sfp_lock_acquire+0x8>)
 80072ea:	f000 b8d8 	b.w	800749e <__retarget_lock_acquire_recursive>
 80072ee:	bf00      	nop
 80072f0:	20002e09 	.word	0x20002e09

080072f4 <__sfp_lock_release>:
 80072f4:	4801      	ldr	r0, [pc, #4]	; (80072fc <__sfp_lock_release+0x8>)
 80072f6:	f000 b8d3 	b.w	80074a0 <__retarget_lock_release_recursive>
 80072fa:	bf00      	nop
 80072fc:	20002e09 	.word	0x20002e09

08007300 <__sinit_lock_acquire>:
 8007300:	4801      	ldr	r0, [pc, #4]	; (8007308 <__sinit_lock_acquire+0x8>)
 8007302:	f000 b8cc 	b.w	800749e <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	20002e0a 	.word	0x20002e0a

0800730c <__sinit_lock_release>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <__sinit_lock_release+0x8>)
 800730e:	f000 b8c7 	b.w	80074a0 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	20002e0a 	.word	0x20002e0a

08007318 <__sinit>:
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	f7ff fff0 	bl	8007300 <__sinit_lock_acquire>
 8007320:	69a3      	ldr	r3, [r4, #24]
 8007322:	b11b      	cbz	r3, 800732c <__sinit+0x14>
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	f7ff bff0 	b.w	800730c <__sinit_lock_release>
 800732c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007330:	6523      	str	r3, [r4, #80]	; 0x50
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <__sinit+0x68>)
 8007334:	4a13      	ldr	r2, [pc, #76]	; (8007384 <__sinit+0x6c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	62a2      	str	r2, [r4, #40]	; 0x28
 800733a:	42a3      	cmp	r3, r4
 800733c:	bf04      	itt	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	61a3      	streq	r3, [r4, #24]
 8007342:	4620      	mov	r0, r4
 8007344:	f000 f820 	bl	8007388 <__sfp>
 8007348:	6060      	str	r0, [r4, #4]
 800734a:	4620      	mov	r0, r4
 800734c:	f000 f81c 	bl	8007388 <__sfp>
 8007350:	60a0      	str	r0, [r4, #8]
 8007352:	4620      	mov	r0, r4
 8007354:	f000 f818 	bl	8007388 <__sfp>
 8007358:	2200      	movs	r2, #0
 800735a:	60e0      	str	r0, [r4, #12]
 800735c:	2104      	movs	r1, #4
 800735e:	6860      	ldr	r0, [r4, #4]
 8007360:	f7ff ff82 	bl	8007268 <std>
 8007364:	68a0      	ldr	r0, [r4, #8]
 8007366:	2201      	movs	r2, #1
 8007368:	2109      	movs	r1, #9
 800736a:	f7ff ff7d 	bl	8007268 <std>
 800736e:	68e0      	ldr	r0, [r4, #12]
 8007370:	2202      	movs	r2, #2
 8007372:	2112      	movs	r1, #18
 8007374:	f7ff ff78 	bl	8007268 <std>
 8007378:	2301      	movs	r3, #1
 800737a:	61a3      	str	r3, [r4, #24]
 800737c:	e7d2      	b.n	8007324 <__sinit+0xc>
 800737e:	bf00      	nop
 8007380:	08008878 	.word	0x08008878
 8007384:	080072b1 	.word	0x080072b1

08007388 <__sfp>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	4607      	mov	r7, r0
 800738c:	f7ff ffac 	bl	80072e8 <__sfp_lock_acquire>
 8007390:	4b1e      	ldr	r3, [pc, #120]	; (800740c <__sfp+0x84>)
 8007392:	681e      	ldr	r6, [r3, #0]
 8007394:	69b3      	ldr	r3, [r6, #24]
 8007396:	b913      	cbnz	r3, 800739e <__sfp+0x16>
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff ffbd 	bl	8007318 <__sinit>
 800739e:	3648      	adds	r6, #72	; 0x48
 80073a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	d503      	bpl.n	80073b0 <__sfp+0x28>
 80073a8:	6833      	ldr	r3, [r6, #0]
 80073aa:	b30b      	cbz	r3, 80073f0 <__sfp+0x68>
 80073ac:	6836      	ldr	r6, [r6, #0]
 80073ae:	e7f7      	b.n	80073a0 <__sfp+0x18>
 80073b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073b4:	b9d5      	cbnz	r5, 80073ec <__sfp+0x64>
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <__sfp+0x88>)
 80073b8:	60e3      	str	r3, [r4, #12]
 80073ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073be:	6665      	str	r5, [r4, #100]	; 0x64
 80073c0:	f000 f86c 	bl	800749c <__retarget_lock_init_recursive>
 80073c4:	f7ff ff96 	bl	80072f4 <__sfp_lock_release>
 80073c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073d0:	6025      	str	r5, [r4, #0]
 80073d2:	61a5      	str	r5, [r4, #24]
 80073d4:	2208      	movs	r2, #8
 80073d6:	4629      	mov	r1, r5
 80073d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073dc:	f000 f87f 	bl	80074de <memset>
 80073e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073e8:	4620      	mov	r0, r4
 80073ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ec:	3468      	adds	r4, #104	; 0x68
 80073ee:	e7d9      	b.n	80073a4 <__sfp+0x1c>
 80073f0:	2104      	movs	r1, #4
 80073f2:	4638      	mov	r0, r7
 80073f4:	f7ff ff62 	bl	80072bc <__sfmoreglue>
 80073f8:	4604      	mov	r4, r0
 80073fa:	6030      	str	r0, [r6, #0]
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1d5      	bne.n	80073ac <__sfp+0x24>
 8007400:	f7ff ff78 	bl	80072f4 <__sfp_lock_release>
 8007404:	230c      	movs	r3, #12
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	e7ee      	b.n	80073e8 <__sfp+0x60>
 800740a:	bf00      	nop
 800740c:	08008878 	.word	0x08008878
 8007410:	ffff0001 	.word	0xffff0001

08007414 <_fwalk_reent>:
 8007414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007418:	4606      	mov	r6, r0
 800741a:	4688      	mov	r8, r1
 800741c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007420:	2700      	movs	r7, #0
 8007422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007426:	f1b9 0901 	subs.w	r9, r9, #1
 800742a:	d505      	bpl.n	8007438 <_fwalk_reent+0x24>
 800742c:	6824      	ldr	r4, [r4, #0]
 800742e:	2c00      	cmp	r4, #0
 8007430:	d1f7      	bne.n	8007422 <_fwalk_reent+0xe>
 8007432:	4638      	mov	r0, r7
 8007434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007438:	89ab      	ldrh	r3, [r5, #12]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d907      	bls.n	800744e <_fwalk_reent+0x3a>
 800743e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007442:	3301      	adds	r3, #1
 8007444:	d003      	beq.n	800744e <_fwalk_reent+0x3a>
 8007446:	4629      	mov	r1, r5
 8007448:	4630      	mov	r0, r6
 800744a:	47c0      	blx	r8
 800744c:	4307      	orrs	r7, r0
 800744e:	3568      	adds	r5, #104	; 0x68
 8007450:	e7e9      	b.n	8007426 <_fwalk_reent+0x12>
	...

08007454 <__libc_init_array>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4d0d      	ldr	r5, [pc, #52]	; (800748c <__libc_init_array+0x38>)
 8007458:	4c0d      	ldr	r4, [pc, #52]	; (8007490 <__libc_init_array+0x3c>)
 800745a:	1b64      	subs	r4, r4, r5
 800745c:	10a4      	asrs	r4, r4, #2
 800745e:	2600      	movs	r6, #0
 8007460:	42a6      	cmp	r6, r4
 8007462:	d109      	bne.n	8007478 <__libc_init_array+0x24>
 8007464:	4d0b      	ldr	r5, [pc, #44]	; (8007494 <__libc_init_array+0x40>)
 8007466:	4c0c      	ldr	r4, [pc, #48]	; (8007498 <__libc_init_array+0x44>)
 8007468:	f001 f924 	bl	80086b4 <_init>
 800746c:	1b64      	subs	r4, r4, r5
 800746e:	10a4      	asrs	r4, r4, #2
 8007470:	2600      	movs	r6, #0
 8007472:	42a6      	cmp	r6, r4
 8007474:	d105      	bne.n	8007482 <__libc_init_array+0x2e>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	f855 3b04 	ldr.w	r3, [r5], #4
 800747c:	4798      	blx	r3
 800747e:	3601      	adds	r6, #1
 8007480:	e7ee      	b.n	8007460 <__libc_init_array+0xc>
 8007482:	f855 3b04 	ldr.w	r3, [r5], #4
 8007486:	4798      	blx	r3
 8007488:	3601      	adds	r6, #1
 800748a:	e7f2      	b.n	8007472 <__libc_init_array+0x1e>
 800748c:	080088b8 	.word	0x080088b8
 8007490:	080088b8 	.word	0x080088b8
 8007494:	080088b8 	.word	0x080088b8
 8007498:	080088bc 	.word	0x080088bc

0800749c <__retarget_lock_init_recursive>:
 800749c:	4770      	bx	lr

0800749e <__retarget_lock_acquire_recursive>:
 800749e:	4770      	bx	lr

080074a0 <__retarget_lock_release_recursive>:
 80074a0:	4770      	bx	lr

080074a2 <memcmp>:
 80074a2:	b510      	push	{r4, lr}
 80074a4:	3901      	subs	r1, #1
 80074a6:	4402      	add	r2, r0
 80074a8:	4290      	cmp	r0, r2
 80074aa:	d101      	bne.n	80074b0 <memcmp+0xe>
 80074ac:	2000      	movs	r0, #0
 80074ae:	e005      	b.n	80074bc <memcmp+0x1a>
 80074b0:	7803      	ldrb	r3, [r0, #0]
 80074b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	d001      	beq.n	80074be <memcmp+0x1c>
 80074ba:	1b18      	subs	r0, r3, r4
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	3001      	adds	r0, #1
 80074c0:	e7f2      	b.n	80074a8 <memcmp+0x6>

080074c2 <memcpy>:
 80074c2:	440a      	add	r2, r1
 80074c4:	4291      	cmp	r1, r2
 80074c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074ca:	d100      	bne.n	80074ce <memcpy+0xc>
 80074cc:	4770      	bx	lr
 80074ce:	b510      	push	{r4, lr}
 80074d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d8:	4291      	cmp	r1, r2
 80074da:	d1f9      	bne.n	80074d0 <memcpy+0xe>
 80074dc:	bd10      	pop	{r4, pc}

080074de <memset>:
 80074de:	4402      	add	r2, r0
 80074e0:	4603      	mov	r3, r0
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d100      	bne.n	80074e8 <memset+0xa>
 80074e6:	4770      	bx	lr
 80074e8:	f803 1b01 	strb.w	r1, [r3], #1
 80074ec:	e7f9      	b.n	80074e2 <memset+0x4>
	...

080074f0 <sbrk_aligned>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4e0e      	ldr	r6, [pc, #56]	; (800752c <sbrk_aligned+0x3c>)
 80074f4:	460c      	mov	r4, r1
 80074f6:	6831      	ldr	r1, [r6, #0]
 80074f8:	4605      	mov	r5, r0
 80074fa:	b911      	cbnz	r1, 8007502 <sbrk_aligned+0x12>
 80074fc:	f000 f90e 	bl	800771c <_sbrk_r>
 8007500:	6030      	str	r0, [r6, #0]
 8007502:	4621      	mov	r1, r4
 8007504:	4628      	mov	r0, r5
 8007506:	f000 f909 	bl	800771c <_sbrk_r>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d00a      	beq.n	8007524 <sbrk_aligned+0x34>
 800750e:	1cc4      	adds	r4, r0, #3
 8007510:	f024 0403 	bic.w	r4, r4, #3
 8007514:	42a0      	cmp	r0, r4
 8007516:	d007      	beq.n	8007528 <sbrk_aligned+0x38>
 8007518:	1a21      	subs	r1, r4, r0
 800751a:	4628      	mov	r0, r5
 800751c:	f000 f8fe 	bl	800771c <_sbrk_r>
 8007520:	3001      	adds	r0, #1
 8007522:	d101      	bne.n	8007528 <sbrk_aligned+0x38>
 8007524:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007528:	4620      	mov	r0, r4
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	20002e10 	.word	0x20002e10

08007530 <_malloc_r>:
 8007530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007534:	1ccd      	adds	r5, r1, #3
 8007536:	f025 0503 	bic.w	r5, r5, #3
 800753a:	3508      	adds	r5, #8
 800753c:	2d0c      	cmp	r5, #12
 800753e:	bf38      	it	cc
 8007540:	250c      	movcc	r5, #12
 8007542:	2d00      	cmp	r5, #0
 8007544:	4607      	mov	r7, r0
 8007546:	db01      	blt.n	800754c <_malloc_r+0x1c>
 8007548:	42a9      	cmp	r1, r5
 800754a:	d905      	bls.n	8007558 <_malloc_r+0x28>
 800754c:	230c      	movs	r3, #12
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	2600      	movs	r6, #0
 8007552:	4630      	mov	r0, r6
 8007554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007558:	4e2e      	ldr	r6, [pc, #184]	; (8007614 <_malloc_r+0xe4>)
 800755a:	f000 fa5d 	bl	8007a18 <__malloc_lock>
 800755e:	6833      	ldr	r3, [r6, #0]
 8007560:	461c      	mov	r4, r3
 8007562:	bb34      	cbnz	r4, 80075b2 <_malloc_r+0x82>
 8007564:	4629      	mov	r1, r5
 8007566:	4638      	mov	r0, r7
 8007568:	f7ff ffc2 	bl	80074f0 <sbrk_aligned>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	4604      	mov	r4, r0
 8007570:	d14d      	bne.n	800760e <_malloc_r+0xde>
 8007572:	6834      	ldr	r4, [r6, #0]
 8007574:	4626      	mov	r6, r4
 8007576:	2e00      	cmp	r6, #0
 8007578:	d140      	bne.n	80075fc <_malloc_r+0xcc>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	4631      	mov	r1, r6
 800757e:	4638      	mov	r0, r7
 8007580:	eb04 0803 	add.w	r8, r4, r3
 8007584:	f000 f8ca 	bl	800771c <_sbrk_r>
 8007588:	4580      	cmp	r8, r0
 800758a:	d13a      	bne.n	8007602 <_malloc_r+0xd2>
 800758c:	6821      	ldr	r1, [r4, #0]
 800758e:	3503      	adds	r5, #3
 8007590:	1a6d      	subs	r5, r5, r1
 8007592:	f025 0503 	bic.w	r5, r5, #3
 8007596:	3508      	adds	r5, #8
 8007598:	2d0c      	cmp	r5, #12
 800759a:	bf38      	it	cc
 800759c:	250c      	movcc	r5, #12
 800759e:	4629      	mov	r1, r5
 80075a0:	4638      	mov	r0, r7
 80075a2:	f7ff ffa5 	bl	80074f0 <sbrk_aligned>
 80075a6:	3001      	adds	r0, #1
 80075a8:	d02b      	beq.n	8007602 <_malloc_r+0xd2>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	442b      	add	r3, r5
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	e00e      	b.n	80075d0 <_malloc_r+0xa0>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	1b52      	subs	r2, r2, r5
 80075b6:	d41e      	bmi.n	80075f6 <_malloc_r+0xc6>
 80075b8:	2a0b      	cmp	r2, #11
 80075ba:	d916      	bls.n	80075ea <_malloc_r+0xba>
 80075bc:	1961      	adds	r1, r4, r5
 80075be:	42a3      	cmp	r3, r4
 80075c0:	6025      	str	r5, [r4, #0]
 80075c2:	bf18      	it	ne
 80075c4:	6059      	strne	r1, [r3, #4]
 80075c6:	6863      	ldr	r3, [r4, #4]
 80075c8:	bf08      	it	eq
 80075ca:	6031      	streq	r1, [r6, #0]
 80075cc:	5162      	str	r2, [r4, r5]
 80075ce:	604b      	str	r3, [r1, #4]
 80075d0:	4638      	mov	r0, r7
 80075d2:	f104 060b 	add.w	r6, r4, #11
 80075d6:	f000 fa25 	bl	8007a24 <__malloc_unlock>
 80075da:	f026 0607 	bic.w	r6, r6, #7
 80075de:	1d23      	adds	r3, r4, #4
 80075e0:	1af2      	subs	r2, r6, r3
 80075e2:	d0b6      	beq.n	8007552 <_malloc_r+0x22>
 80075e4:	1b9b      	subs	r3, r3, r6
 80075e6:	50a3      	str	r3, [r4, r2]
 80075e8:	e7b3      	b.n	8007552 <_malloc_r+0x22>
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	bf0c      	ite	eq
 80075f0:	6032      	streq	r2, [r6, #0]
 80075f2:	605a      	strne	r2, [r3, #4]
 80075f4:	e7ec      	b.n	80075d0 <_malloc_r+0xa0>
 80075f6:	4623      	mov	r3, r4
 80075f8:	6864      	ldr	r4, [r4, #4]
 80075fa:	e7b2      	b.n	8007562 <_malloc_r+0x32>
 80075fc:	4634      	mov	r4, r6
 80075fe:	6876      	ldr	r6, [r6, #4]
 8007600:	e7b9      	b.n	8007576 <_malloc_r+0x46>
 8007602:	230c      	movs	r3, #12
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	4638      	mov	r0, r7
 8007608:	f000 fa0c 	bl	8007a24 <__malloc_unlock>
 800760c:	e7a1      	b.n	8007552 <_malloc_r+0x22>
 800760e:	6025      	str	r5, [r4, #0]
 8007610:	e7de      	b.n	80075d0 <_malloc_r+0xa0>
 8007612:	bf00      	nop
 8007614:	20002e0c 	.word	0x20002e0c

08007618 <iprintf>:
 8007618:	b40f      	push	{r0, r1, r2, r3}
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <iprintf+0x2c>)
 800761c:	b513      	push	{r0, r1, r4, lr}
 800761e:	681c      	ldr	r4, [r3, #0]
 8007620:	b124      	cbz	r4, 800762c <iprintf+0x14>
 8007622:	69a3      	ldr	r3, [r4, #24]
 8007624:	b913      	cbnz	r3, 800762c <iprintf+0x14>
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff fe76 	bl	8007318 <__sinit>
 800762c:	ab05      	add	r3, sp, #20
 800762e:	9a04      	ldr	r2, [sp, #16]
 8007630:	68a1      	ldr	r1, [r4, #8]
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	4620      	mov	r0, r4
 8007636:	f000 fbcd 	bl	8007dd4 <_vfiprintf_r>
 800763a:	b002      	add	sp, #8
 800763c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007640:	b004      	add	sp, #16
 8007642:	4770      	bx	lr
 8007644:	20000010 	.word	0x20000010

08007648 <cleanup_glue>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	460c      	mov	r4, r1
 800764c:	6809      	ldr	r1, [r1, #0]
 800764e:	4605      	mov	r5, r0
 8007650:	b109      	cbz	r1, 8007656 <cleanup_glue+0xe>
 8007652:	f7ff fff9 	bl	8007648 <cleanup_glue>
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800765e:	f000 b9e7 	b.w	8007a30 <_free_r>
	...

08007664 <_reclaim_reent>:
 8007664:	4b2c      	ldr	r3, [pc, #176]	; (8007718 <_reclaim_reent+0xb4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4283      	cmp	r3, r0
 800766a:	b570      	push	{r4, r5, r6, lr}
 800766c:	4604      	mov	r4, r0
 800766e:	d051      	beq.n	8007714 <_reclaim_reent+0xb0>
 8007670:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007672:	b143      	cbz	r3, 8007686 <_reclaim_reent+0x22>
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d14a      	bne.n	8007710 <_reclaim_reent+0xac>
 800767a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	b111      	cbz	r1, 8007686 <_reclaim_reent+0x22>
 8007680:	4620      	mov	r0, r4
 8007682:	f000 f9d5 	bl	8007a30 <_free_r>
 8007686:	6961      	ldr	r1, [r4, #20]
 8007688:	b111      	cbz	r1, 8007690 <_reclaim_reent+0x2c>
 800768a:	4620      	mov	r0, r4
 800768c:	f000 f9d0 	bl	8007a30 <_free_r>
 8007690:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007692:	b111      	cbz	r1, 800769a <_reclaim_reent+0x36>
 8007694:	4620      	mov	r0, r4
 8007696:	f000 f9cb 	bl	8007a30 <_free_r>
 800769a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800769c:	b111      	cbz	r1, 80076a4 <_reclaim_reent+0x40>
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f9c6 	bl	8007a30 <_free_r>
 80076a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80076a6:	b111      	cbz	r1, 80076ae <_reclaim_reent+0x4a>
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f9c1 	bl	8007a30 <_free_r>
 80076ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076b0:	b111      	cbz	r1, 80076b8 <_reclaim_reent+0x54>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f9bc 	bl	8007a30 <_free_r>
 80076b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80076ba:	b111      	cbz	r1, 80076c2 <_reclaim_reent+0x5e>
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 f9b7 	bl	8007a30 <_free_r>
 80076c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80076c4:	b111      	cbz	r1, 80076cc <_reclaim_reent+0x68>
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 f9b2 	bl	8007a30 <_free_r>
 80076cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ce:	b111      	cbz	r1, 80076d6 <_reclaim_reent+0x72>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 f9ad 	bl	8007a30 <_free_r>
 80076d6:	69a3      	ldr	r3, [r4, #24]
 80076d8:	b1e3      	cbz	r3, 8007714 <_reclaim_reent+0xb0>
 80076da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076dc:	4620      	mov	r0, r4
 80076de:	4798      	blx	r3
 80076e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80076e2:	b1b9      	cbz	r1, 8007714 <_reclaim_reent+0xb0>
 80076e4:	4620      	mov	r0, r4
 80076e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076ea:	f7ff bfad 	b.w	8007648 <cleanup_glue>
 80076ee:	5949      	ldr	r1, [r1, r5]
 80076f0:	b941      	cbnz	r1, 8007704 <_reclaim_reent+0xa0>
 80076f2:	3504      	adds	r5, #4
 80076f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f6:	2d80      	cmp	r5, #128	; 0x80
 80076f8:	68d9      	ldr	r1, [r3, #12]
 80076fa:	d1f8      	bne.n	80076ee <_reclaim_reent+0x8a>
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 f997 	bl	8007a30 <_free_r>
 8007702:	e7ba      	b.n	800767a <_reclaim_reent+0x16>
 8007704:	680e      	ldr	r6, [r1, #0]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f992 	bl	8007a30 <_free_r>
 800770c:	4631      	mov	r1, r6
 800770e:	e7ef      	b.n	80076f0 <_reclaim_reent+0x8c>
 8007710:	2500      	movs	r5, #0
 8007712:	e7ef      	b.n	80076f4 <_reclaim_reent+0x90>
 8007714:	bd70      	pop	{r4, r5, r6, pc}
 8007716:	bf00      	nop
 8007718:	20000010 	.word	0x20000010

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_sbrk_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7f9 fada 	bl	8000ce0 <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20002e14 	.word	0x20002e14

0800773c <sniprintf>:
 800773c:	b40c      	push	{r2, r3}
 800773e:	b530      	push	{r4, r5, lr}
 8007740:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <sniprintf+0x64>)
 8007742:	1e0c      	subs	r4, r1, #0
 8007744:	681d      	ldr	r5, [r3, #0]
 8007746:	b09d      	sub	sp, #116	; 0x74
 8007748:	da08      	bge.n	800775c <sniprintf+0x20>
 800774a:	238b      	movs	r3, #139	; 0x8b
 800774c:	602b      	str	r3, [r5, #0]
 800774e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007752:	b01d      	add	sp, #116	; 0x74
 8007754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007758:	b002      	add	sp, #8
 800775a:	4770      	bx	lr
 800775c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007760:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007764:	bf14      	ite	ne
 8007766:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800776a:	4623      	moveq	r3, r4
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	9307      	str	r3, [sp, #28]
 8007770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007774:	9002      	str	r0, [sp, #8]
 8007776:	9006      	str	r0, [sp, #24]
 8007778:	f8ad 3016 	strh.w	r3, [sp, #22]
 800777c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800777e:	ab21      	add	r3, sp, #132	; 0x84
 8007780:	a902      	add	r1, sp, #8
 8007782:	4628      	mov	r0, r5
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	f000 f9fb 	bl	8007b80 <_svfiprintf_r>
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	bfbc      	itt	lt
 800778e:	238b      	movlt	r3, #139	; 0x8b
 8007790:	602b      	strlt	r3, [r5, #0]
 8007792:	2c00      	cmp	r4, #0
 8007794:	d0dd      	beq.n	8007752 <sniprintf+0x16>
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
 800779c:	e7d9      	b.n	8007752 <sniprintf+0x16>
 800779e:	bf00      	nop
 80077a0:	20000010 	.word	0x20000010

080077a4 <__sread>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	460c      	mov	r4, r1
 80077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ac:	f000 fdd6 	bl	800835c <_read_r>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	bfab      	itete	ge
 80077b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077b6:	89a3      	ldrhlt	r3, [r4, #12]
 80077b8:	181b      	addge	r3, r3, r0
 80077ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077be:	bfac      	ite	ge
 80077c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077c2:	81a3      	strhlt	r3, [r4, #12]
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <__swrite>:
 80077c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ca:	461f      	mov	r7, r3
 80077cc:	898b      	ldrh	r3, [r1, #12]
 80077ce:	05db      	lsls	r3, r3, #23
 80077d0:	4605      	mov	r5, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	4616      	mov	r6, r2
 80077d6:	d505      	bpl.n	80077e4 <__swrite+0x1e>
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	2302      	movs	r3, #2
 80077de:	2200      	movs	r2, #0
 80077e0:	f000 f908 	bl	80079f4 <_lseek_r>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	4632      	mov	r2, r6
 80077f2:	463b      	mov	r3, r7
 80077f4:	4628      	mov	r0, r5
 80077f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fa:	f000 b817 	b.w	800782c <_write_r>

080077fe <__sseek>:
 80077fe:	b510      	push	{r4, lr}
 8007800:	460c      	mov	r4, r1
 8007802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007806:	f000 f8f5 	bl	80079f4 <_lseek_r>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	bf15      	itete	ne
 8007810:	6560      	strne	r0, [r4, #84]	; 0x54
 8007812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800781a:	81a3      	strheq	r3, [r4, #12]
 800781c:	bf18      	it	ne
 800781e:	81a3      	strhne	r3, [r4, #12]
 8007820:	bd10      	pop	{r4, pc}

08007822 <__sclose>:
 8007822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007826:	f000 b813 	b.w	8007850 <_close_r>
	...

0800782c <_write_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	; (800784c <_write_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7f9 f9ff 	bl	8000c3e <_write>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_write_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_write_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20002e14 	.word	0x20002e14

08007850 <_close_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d06      	ldr	r5, [pc, #24]	; (800786c <_close_r+0x1c>)
 8007854:	2300      	movs	r3, #0
 8007856:	4604      	mov	r4, r0
 8007858:	4608      	mov	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7f9 fa0b 	bl	8000c76 <_close>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_close_r+0x1a>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_close_r+0x1a>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	20002e14 	.word	0x20002e14

08007870 <__sflush_r>:
 8007870:	898a      	ldrh	r2, [r1, #12]
 8007872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	4605      	mov	r5, r0
 8007878:	0710      	lsls	r0, r2, #28
 800787a:	460c      	mov	r4, r1
 800787c:	d458      	bmi.n	8007930 <__sflush_r+0xc0>
 800787e:	684b      	ldr	r3, [r1, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	dc05      	bgt.n	8007890 <__sflush_r+0x20>
 8007884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	dc02      	bgt.n	8007890 <__sflush_r+0x20>
 800788a:	2000      	movs	r0, #0
 800788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007892:	2e00      	cmp	r6, #0
 8007894:	d0f9      	beq.n	800788a <__sflush_r+0x1a>
 8007896:	2300      	movs	r3, #0
 8007898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800789c:	682f      	ldr	r7, [r5, #0]
 800789e:	602b      	str	r3, [r5, #0]
 80078a0:	d032      	beq.n	8007908 <__sflush_r+0x98>
 80078a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	075a      	lsls	r2, r3, #29
 80078a8:	d505      	bpl.n	80078b6 <__sflush_r+0x46>
 80078aa:	6863      	ldr	r3, [r4, #4]
 80078ac:	1ac0      	subs	r0, r0, r3
 80078ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078b0:	b10b      	cbz	r3, 80078b6 <__sflush_r+0x46>
 80078b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078b4:	1ac0      	subs	r0, r0, r3
 80078b6:	2300      	movs	r3, #0
 80078b8:	4602      	mov	r2, r0
 80078ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078bc:	6a21      	ldr	r1, [r4, #32]
 80078be:	4628      	mov	r0, r5
 80078c0:	47b0      	blx	r6
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	d106      	bne.n	80078d6 <__sflush_r+0x66>
 80078c8:	6829      	ldr	r1, [r5, #0]
 80078ca:	291d      	cmp	r1, #29
 80078cc:	d82c      	bhi.n	8007928 <__sflush_r+0xb8>
 80078ce:	4a2a      	ldr	r2, [pc, #168]	; (8007978 <__sflush_r+0x108>)
 80078d0:	40ca      	lsrs	r2, r1
 80078d2:	07d6      	lsls	r6, r2, #31
 80078d4:	d528      	bpl.n	8007928 <__sflush_r+0xb8>
 80078d6:	2200      	movs	r2, #0
 80078d8:	6062      	str	r2, [r4, #4]
 80078da:	04d9      	lsls	r1, r3, #19
 80078dc:	6922      	ldr	r2, [r4, #16]
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	d504      	bpl.n	80078ec <__sflush_r+0x7c>
 80078e2:	1c42      	adds	r2, r0, #1
 80078e4:	d101      	bne.n	80078ea <__sflush_r+0x7a>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	b903      	cbnz	r3, 80078ec <__sflush_r+0x7c>
 80078ea:	6560      	str	r0, [r4, #84]	; 0x54
 80078ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ee:	602f      	str	r7, [r5, #0]
 80078f0:	2900      	cmp	r1, #0
 80078f2:	d0ca      	beq.n	800788a <__sflush_r+0x1a>
 80078f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078f8:	4299      	cmp	r1, r3
 80078fa:	d002      	beq.n	8007902 <__sflush_r+0x92>
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f897 	bl	8007a30 <_free_r>
 8007902:	2000      	movs	r0, #0
 8007904:	6360      	str	r0, [r4, #52]	; 0x34
 8007906:	e7c1      	b.n	800788c <__sflush_r+0x1c>
 8007908:	6a21      	ldr	r1, [r4, #32]
 800790a:	2301      	movs	r3, #1
 800790c:	4628      	mov	r0, r5
 800790e:	47b0      	blx	r6
 8007910:	1c41      	adds	r1, r0, #1
 8007912:	d1c7      	bne.n	80078a4 <__sflush_r+0x34>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0c4      	beq.n	80078a4 <__sflush_r+0x34>
 800791a:	2b1d      	cmp	r3, #29
 800791c:	d001      	beq.n	8007922 <__sflush_r+0xb2>
 800791e:	2b16      	cmp	r3, #22
 8007920:	d101      	bne.n	8007926 <__sflush_r+0xb6>
 8007922:	602f      	str	r7, [r5, #0]
 8007924:	e7b1      	b.n	800788a <__sflush_r+0x1a>
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	e7ad      	b.n	800788c <__sflush_r+0x1c>
 8007930:	690f      	ldr	r7, [r1, #16]
 8007932:	2f00      	cmp	r7, #0
 8007934:	d0a9      	beq.n	800788a <__sflush_r+0x1a>
 8007936:	0793      	lsls	r3, r2, #30
 8007938:	680e      	ldr	r6, [r1, #0]
 800793a:	bf08      	it	eq
 800793c:	694b      	ldreq	r3, [r1, #20]
 800793e:	600f      	str	r7, [r1, #0]
 8007940:	bf18      	it	ne
 8007942:	2300      	movne	r3, #0
 8007944:	eba6 0807 	sub.w	r8, r6, r7
 8007948:	608b      	str	r3, [r1, #8]
 800794a:	f1b8 0f00 	cmp.w	r8, #0
 800794e:	dd9c      	ble.n	800788a <__sflush_r+0x1a>
 8007950:	6a21      	ldr	r1, [r4, #32]
 8007952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007954:	4643      	mov	r3, r8
 8007956:	463a      	mov	r2, r7
 8007958:	4628      	mov	r0, r5
 800795a:	47b0      	blx	r6
 800795c:	2800      	cmp	r0, #0
 800795e:	dc06      	bgt.n	800796e <__sflush_r+0xfe>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007966:	81a3      	strh	r3, [r4, #12]
 8007968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800796c:	e78e      	b.n	800788c <__sflush_r+0x1c>
 800796e:	4407      	add	r7, r0
 8007970:	eba8 0800 	sub.w	r8, r8, r0
 8007974:	e7e9      	b.n	800794a <__sflush_r+0xda>
 8007976:	bf00      	nop
 8007978:	20400001 	.word	0x20400001

0800797c <_fflush_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	690b      	ldr	r3, [r1, #16]
 8007980:	4605      	mov	r5, r0
 8007982:	460c      	mov	r4, r1
 8007984:	b913      	cbnz	r3, 800798c <_fflush_r+0x10>
 8007986:	2500      	movs	r5, #0
 8007988:	4628      	mov	r0, r5
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	b118      	cbz	r0, 8007996 <_fflush_r+0x1a>
 800798e:	6983      	ldr	r3, [r0, #24]
 8007990:	b90b      	cbnz	r3, 8007996 <_fflush_r+0x1a>
 8007992:	f7ff fcc1 	bl	8007318 <__sinit>
 8007996:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <_fflush_r+0x6c>)
 8007998:	429c      	cmp	r4, r3
 800799a:	d11b      	bne.n	80079d4 <_fflush_r+0x58>
 800799c:	686c      	ldr	r4, [r5, #4]
 800799e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0ef      	beq.n	8007986 <_fflush_r+0xa>
 80079a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079a8:	07d0      	lsls	r0, r2, #31
 80079aa:	d404      	bmi.n	80079b6 <_fflush_r+0x3a>
 80079ac:	0599      	lsls	r1, r3, #22
 80079ae:	d402      	bmi.n	80079b6 <_fflush_r+0x3a>
 80079b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b2:	f7ff fd74 	bl	800749e <__retarget_lock_acquire_recursive>
 80079b6:	4628      	mov	r0, r5
 80079b8:	4621      	mov	r1, r4
 80079ba:	f7ff ff59 	bl	8007870 <__sflush_r>
 80079be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079c0:	07da      	lsls	r2, r3, #31
 80079c2:	4605      	mov	r5, r0
 80079c4:	d4e0      	bmi.n	8007988 <_fflush_r+0xc>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	059b      	lsls	r3, r3, #22
 80079ca:	d4dd      	bmi.n	8007988 <_fflush_r+0xc>
 80079cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ce:	f7ff fd67 	bl	80074a0 <__retarget_lock_release_recursive>
 80079d2:	e7d9      	b.n	8007988 <_fflush_r+0xc>
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <_fflush_r+0x70>)
 80079d6:	429c      	cmp	r4, r3
 80079d8:	d101      	bne.n	80079de <_fflush_r+0x62>
 80079da:	68ac      	ldr	r4, [r5, #8]
 80079dc:	e7df      	b.n	800799e <_fflush_r+0x22>
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <_fflush_r+0x74>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	bf08      	it	eq
 80079e4:	68ec      	ldreq	r4, [r5, #12]
 80079e6:	e7da      	b.n	800799e <_fflush_r+0x22>
 80079e8:	08008838 	.word	0x08008838
 80079ec:	08008858 	.word	0x08008858
 80079f0:	08008818 	.word	0x08008818

080079f4 <_lseek_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d07      	ldr	r5, [pc, #28]	; (8007a14 <_lseek_r+0x20>)
 80079f8:	4604      	mov	r4, r0
 80079fa:	4608      	mov	r0, r1
 80079fc:	4611      	mov	r1, r2
 80079fe:	2200      	movs	r2, #0
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f7f9 f95e 	bl	8000cc4 <_lseek>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_lseek_r+0x1e>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_lseek_r+0x1e>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	20002e14 	.word	0x20002e14

08007a18 <__malloc_lock>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__malloc_lock+0x8>)
 8007a1a:	f7ff bd40 	b.w	800749e <__retarget_lock_acquire_recursive>
 8007a1e:	bf00      	nop
 8007a20:	20002e08 	.word	0x20002e08

08007a24 <__malloc_unlock>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__malloc_unlock+0x8>)
 8007a26:	f7ff bd3b 	b.w	80074a0 <__retarget_lock_release_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	20002e08 	.word	0x20002e08

08007a30 <_free_r>:
 8007a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a32:	2900      	cmp	r1, #0
 8007a34:	d044      	beq.n	8007ac0 <_free_r+0x90>
 8007a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a3a:	9001      	str	r0, [sp, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a42:	bfb8      	it	lt
 8007a44:	18e4      	addlt	r4, r4, r3
 8007a46:	f7ff ffe7 	bl	8007a18 <__malloc_lock>
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ac4 <_free_r+0x94>)
 8007a4c:	9801      	ldr	r0, [sp, #4]
 8007a4e:	6813      	ldr	r3, [r2, #0]
 8007a50:	b933      	cbnz	r3, 8007a60 <_free_r+0x30>
 8007a52:	6063      	str	r3, [r4, #4]
 8007a54:	6014      	str	r4, [r2, #0]
 8007a56:	b003      	add	sp, #12
 8007a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a5c:	f7ff bfe2 	b.w	8007a24 <__malloc_unlock>
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d908      	bls.n	8007a76 <_free_r+0x46>
 8007a64:	6825      	ldr	r5, [r4, #0]
 8007a66:	1961      	adds	r1, r4, r5
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf01      	itttt	eq
 8007a6c:	6819      	ldreq	r1, [r3, #0]
 8007a6e:	685b      	ldreq	r3, [r3, #4]
 8007a70:	1949      	addeq	r1, r1, r5
 8007a72:	6021      	streq	r1, [r4, #0]
 8007a74:	e7ed      	b.n	8007a52 <_free_r+0x22>
 8007a76:	461a      	mov	r2, r3
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	b10b      	cbz	r3, 8007a80 <_free_r+0x50>
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	d9fa      	bls.n	8007a76 <_free_r+0x46>
 8007a80:	6811      	ldr	r1, [r2, #0]
 8007a82:	1855      	adds	r5, r2, r1
 8007a84:	42a5      	cmp	r5, r4
 8007a86:	d10b      	bne.n	8007aa0 <_free_r+0x70>
 8007a88:	6824      	ldr	r4, [r4, #0]
 8007a8a:	4421      	add	r1, r4
 8007a8c:	1854      	adds	r4, r2, r1
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	6011      	str	r1, [r2, #0]
 8007a92:	d1e0      	bne.n	8007a56 <_free_r+0x26>
 8007a94:	681c      	ldr	r4, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	6053      	str	r3, [r2, #4]
 8007a9a:	4421      	add	r1, r4
 8007a9c:	6011      	str	r1, [r2, #0]
 8007a9e:	e7da      	b.n	8007a56 <_free_r+0x26>
 8007aa0:	d902      	bls.n	8007aa8 <_free_r+0x78>
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	6003      	str	r3, [r0, #0]
 8007aa6:	e7d6      	b.n	8007a56 <_free_r+0x26>
 8007aa8:	6825      	ldr	r5, [r4, #0]
 8007aaa:	1961      	adds	r1, r4, r5
 8007aac:	428b      	cmp	r3, r1
 8007aae:	bf04      	itt	eq
 8007ab0:	6819      	ldreq	r1, [r3, #0]
 8007ab2:	685b      	ldreq	r3, [r3, #4]
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	bf04      	itt	eq
 8007ab8:	1949      	addeq	r1, r1, r5
 8007aba:	6021      	streq	r1, [r4, #0]
 8007abc:	6054      	str	r4, [r2, #4]
 8007abe:	e7ca      	b.n	8007a56 <_free_r+0x26>
 8007ac0:	b003      	add	sp, #12
 8007ac2:	bd30      	pop	{r4, r5, pc}
 8007ac4:	20002e0c 	.word	0x20002e0c

08007ac8 <__ssputs_r>:
 8007ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	688e      	ldr	r6, [r1, #8]
 8007ace:	429e      	cmp	r6, r3
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4690      	mov	r8, r2
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	d838      	bhi.n	8007b4c <__ssputs_r+0x84>
 8007ada:	898a      	ldrh	r2, [r1, #12]
 8007adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ae0:	d032      	beq.n	8007b48 <__ssputs_r+0x80>
 8007ae2:	6825      	ldr	r5, [r4, #0]
 8007ae4:	6909      	ldr	r1, [r1, #16]
 8007ae6:	eba5 0901 	sub.w	r9, r5, r1
 8007aea:	6965      	ldr	r5, [r4, #20]
 8007aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af4:	3301      	adds	r3, #1
 8007af6:	444b      	add	r3, r9
 8007af8:	106d      	asrs	r5, r5, #1
 8007afa:	429d      	cmp	r5, r3
 8007afc:	bf38      	it	cc
 8007afe:	461d      	movcc	r5, r3
 8007b00:	0553      	lsls	r3, r2, #21
 8007b02:	d531      	bpl.n	8007b68 <__ssputs_r+0xa0>
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7ff fd13 	bl	8007530 <_malloc_r>
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	b950      	cbnz	r0, 8007b24 <__ssputs_r+0x5c>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	f8ca 3000 	str.w	r3, [sl]
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b24:	6921      	ldr	r1, [r4, #16]
 8007b26:	464a      	mov	r2, r9
 8007b28:	f7ff fccb 	bl	80074c2 <memcpy>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	6126      	str	r6, [r4, #16]
 8007b3a:	6165      	str	r5, [r4, #20]
 8007b3c:	444e      	add	r6, r9
 8007b3e:	eba5 0509 	sub.w	r5, r5, r9
 8007b42:	6026      	str	r6, [r4, #0]
 8007b44:	60a5      	str	r5, [r4, #8]
 8007b46:	463e      	mov	r6, r7
 8007b48:	42be      	cmp	r6, r7
 8007b4a:	d900      	bls.n	8007b4e <__ssputs_r+0x86>
 8007b4c:	463e      	mov	r6, r7
 8007b4e:	6820      	ldr	r0, [r4, #0]
 8007b50:	4632      	mov	r2, r6
 8007b52:	4641      	mov	r1, r8
 8007b54:	f000 fd3a 	bl	80085cc <memmove>
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	1b9b      	subs	r3, r3, r6
 8007b5c:	60a3      	str	r3, [r4, #8]
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	4433      	add	r3, r6
 8007b62:	6023      	str	r3, [r4, #0]
 8007b64:	2000      	movs	r0, #0
 8007b66:	e7db      	b.n	8007b20 <__ssputs_r+0x58>
 8007b68:	462a      	mov	r2, r5
 8007b6a:	f000 fd49 	bl	8008600 <_realloc_r>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1e1      	bne.n	8007b38 <__ssputs_r+0x70>
 8007b74:	6921      	ldr	r1, [r4, #16]
 8007b76:	4650      	mov	r0, sl
 8007b78:	f7ff ff5a 	bl	8007a30 <_free_r>
 8007b7c:	e7c7      	b.n	8007b0e <__ssputs_r+0x46>
	...

08007b80 <_svfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4698      	mov	r8, r3
 8007b86:	898b      	ldrh	r3, [r1, #12]
 8007b88:	061b      	lsls	r3, r3, #24
 8007b8a:	b09d      	sub	sp, #116	; 0x74
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	4614      	mov	r4, r2
 8007b92:	d50e      	bpl.n	8007bb2 <_svfiprintf_r+0x32>
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	b963      	cbnz	r3, 8007bb2 <_svfiprintf_r+0x32>
 8007b98:	2140      	movs	r1, #64	; 0x40
 8007b9a:	f7ff fcc9 	bl	8007530 <_malloc_r>
 8007b9e:	6028      	str	r0, [r5, #0]
 8007ba0:	6128      	str	r0, [r5, #16]
 8007ba2:	b920      	cbnz	r0, 8007bae <_svfiprintf_r+0x2e>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bac:	e0d1      	b.n	8007d52 <_svfiprintf_r+0x1d2>
 8007bae:	2340      	movs	r3, #64	; 0x40
 8007bb0:	616b      	str	r3, [r5, #20]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb6:	2320      	movs	r3, #32
 8007bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc0:	2330      	movs	r3, #48	; 0x30
 8007bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d6c <_svfiprintf_r+0x1ec>
 8007bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bca:	f04f 0901 	mov.w	r9, #1
 8007bce:	4623      	mov	r3, r4
 8007bd0:	469a      	mov	sl, r3
 8007bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bd6:	b10a      	cbz	r2, 8007bdc <_svfiprintf_r+0x5c>
 8007bd8:	2a25      	cmp	r2, #37	; 0x25
 8007bda:	d1f9      	bne.n	8007bd0 <_svfiprintf_r+0x50>
 8007bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8007be0:	d00b      	beq.n	8007bfa <_svfiprintf_r+0x7a>
 8007be2:	465b      	mov	r3, fp
 8007be4:	4622      	mov	r2, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff ff6d 	bl	8007ac8 <__ssputs_r>
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f000 80aa 	beq.w	8007d48 <_svfiprintf_r+0x1c8>
 8007bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bf6:	445a      	add	r2, fp
 8007bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8007bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80a2 	beq.w	8007d48 <_svfiprintf_r+0x1c8>
 8007c04:	2300      	movs	r3, #0
 8007c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c0e:	f10a 0a01 	add.w	sl, sl, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	9307      	str	r3, [sp, #28]
 8007c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c1c:	4654      	mov	r4, sl
 8007c1e:	2205      	movs	r2, #5
 8007c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c24:	4851      	ldr	r0, [pc, #324]	; (8007d6c <_svfiprintf_r+0x1ec>)
 8007c26:	f7f8 fadb 	bl	80001e0 <memchr>
 8007c2a:	9a04      	ldr	r2, [sp, #16]
 8007c2c:	b9d8      	cbnz	r0, 8007c66 <_svfiprintf_r+0xe6>
 8007c2e:	06d0      	lsls	r0, r2, #27
 8007c30:	bf44      	itt	mi
 8007c32:	2320      	movmi	r3, #32
 8007c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c38:	0711      	lsls	r1, r2, #28
 8007c3a:	bf44      	itt	mi
 8007c3c:	232b      	movmi	r3, #43	; 0x2b
 8007c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c42:	f89a 3000 	ldrb.w	r3, [sl]
 8007c46:	2b2a      	cmp	r3, #42	; 0x2a
 8007c48:	d015      	beq.n	8007c76 <_svfiprintf_r+0xf6>
 8007c4a:	9a07      	ldr	r2, [sp, #28]
 8007c4c:	4654      	mov	r4, sl
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f04f 0c0a 	mov.w	ip, #10
 8007c54:	4621      	mov	r1, r4
 8007c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5a:	3b30      	subs	r3, #48	; 0x30
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d94e      	bls.n	8007cfe <_svfiprintf_r+0x17e>
 8007c60:	b1b0      	cbz	r0, 8007c90 <_svfiprintf_r+0x110>
 8007c62:	9207      	str	r2, [sp, #28]
 8007c64:	e014      	b.n	8007c90 <_svfiprintf_r+0x110>
 8007c66:	eba0 0308 	sub.w	r3, r0, r8
 8007c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	46a2      	mov	sl, r4
 8007c74:	e7d2      	b.n	8007c1c <_svfiprintf_r+0x9c>
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	1d19      	adds	r1, r3, #4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	9103      	str	r1, [sp, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bfbb      	ittet	lt
 8007c82:	425b      	neglt	r3, r3
 8007c84:	f042 0202 	orrlt.w	r2, r2, #2
 8007c88:	9307      	strge	r3, [sp, #28]
 8007c8a:	9307      	strlt	r3, [sp, #28]
 8007c8c:	bfb8      	it	lt
 8007c8e:	9204      	strlt	r2, [sp, #16]
 8007c90:	7823      	ldrb	r3, [r4, #0]
 8007c92:	2b2e      	cmp	r3, #46	; 0x2e
 8007c94:	d10c      	bne.n	8007cb0 <_svfiprintf_r+0x130>
 8007c96:	7863      	ldrb	r3, [r4, #1]
 8007c98:	2b2a      	cmp	r3, #42	; 0x2a
 8007c9a:	d135      	bne.n	8007d08 <_svfiprintf_r+0x188>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	9203      	str	r2, [sp, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfb8      	it	lt
 8007ca8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007cac:	3402      	adds	r4, #2
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d7c <_svfiprintf_r+0x1fc>
 8007cb4:	7821      	ldrb	r1, [r4, #0]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f7f8 fa91 	bl	80001e0 <memchr>
 8007cbe:	b140      	cbz	r0, 8007cd2 <_svfiprintf_r+0x152>
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	eba0 000a 	sub.w	r0, r0, sl
 8007cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	4303      	orrs	r3, r0
 8007cce:	3401      	adds	r4, #1
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd6:	4826      	ldr	r0, [pc, #152]	; (8007d70 <_svfiprintf_r+0x1f0>)
 8007cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cdc:	2206      	movs	r2, #6
 8007cde:	f7f8 fa7f 	bl	80001e0 <memchr>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d038      	beq.n	8007d58 <_svfiprintf_r+0x1d8>
 8007ce6:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <_svfiprintf_r+0x1f4>)
 8007ce8:	bb1b      	cbnz	r3, 8007d32 <_svfiprintf_r+0x1b2>
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	3307      	adds	r3, #7
 8007cee:	f023 0307 	bic.w	r3, r3, #7
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	9303      	str	r3, [sp, #12]
 8007cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf8:	4433      	add	r3, r6
 8007cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfc:	e767      	b.n	8007bce <_svfiprintf_r+0x4e>
 8007cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d02:	460c      	mov	r4, r1
 8007d04:	2001      	movs	r0, #1
 8007d06:	e7a5      	b.n	8007c54 <_svfiprintf_r+0xd4>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	3401      	adds	r4, #1
 8007d0c:	9305      	str	r3, [sp, #20]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f04f 0c0a 	mov.w	ip, #10
 8007d14:	4620      	mov	r0, r4
 8007d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d1a:	3a30      	subs	r2, #48	; 0x30
 8007d1c:	2a09      	cmp	r2, #9
 8007d1e:	d903      	bls.n	8007d28 <_svfiprintf_r+0x1a8>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0c5      	beq.n	8007cb0 <_svfiprintf_r+0x130>
 8007d24:	9105      	str	r1, [sp, #20]
 8007d26:	e7c3      	b.n	8007cb0 <_svfiprintf_r+0x130>
 8007d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e7f0      	b.n	8007d14 <_svfiprintf_r+0x194>
 8007d32:	ab03      	add	r3, sp, #12
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	462a      	mov	r2, r5
 8007d38:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <_svfiprintf_r+0x1f8>)
 8007d3a:	a904      	add	r1, sp, #16
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f3af 8000 	nop.w
 8007d42:	1c42      	adds	r2, r0, #1
 8007d44:	4606      	mov	r6, r0
 8007d46:	d1d6      	bne.n	8007cf6 <_svfiprintf_r+0x176>
 8007d48:	89ab      	ldrh	r3, [r5, #12]
 8007d4a:	065b      	lsls	r3, r3, #25
 8007d4c:	f53f af2c 	bmi.w	8007ba8 <_svfiprintf_r+0x28>
 8007d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d52:	b01d      	add	sp, #116	; 0x74
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <_svfiprintf_r+0x1f8>)
 8007d60:	a904      	add	r1, sp, #16
 8007d62:	4638      	mov	r0, r7
 8007d64:	f000 f9d4 	bl	8008110 <_printf_i>
 8007d68:	e7eb      	b.n	8007d42 <_svfiprintf_r+0x1c2>
 8007d6a:	bf00      	nop
 8007d6c:	0800887c 	.word	0x0800887c
 8007d70:	08008886 	.word	0x08008886
 8007d74:	00000000 	.word	0x00000000
 8007d78:	08007ac9 	.word	0x08007ac9
 8007d7c:	08008882 	.word	0x08008882

08007d80 <__sfputc_r>:
 8007d80:	6893      	ldr	r3, [r2, #8]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	b410      	push	{r4}
 8007d88:	6093      	str	r3, [r2, #8]
 8007d8a:	da08      	bge.n	8007d9e <__sfputc_r+0x1e>
 8007d8c:	6994      	ldr	r4, [r2, #24]
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	db01      	blt.n	8007d96 <__sfputc_r+0x16>
 8007d92:	290a      	cmp	r1, #10
 8007d94:	d103      	bne.n	8007d9e <__sfputc_r+0x1e>
 8007d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d9a:	f000 baf1 	b.w	8008380 <__swbuf_r>
 8007d9e:	6813      	ldr	r3, [r2, #0]
 8007da0:	1c58      	adds	r0, r3, #1
 8007da2:	6010      	str	r0, [r2, #0]
 8007da4:	7019      	strb	r1, [r3, #0]
 8007da6:	4608      	mov	r0, r1
 8007da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <__sfputs_r>:
 8007dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db0:	4606      	mov	r6, r0
 8007db2:	460f      	mov	r7, r1
 8007db4:	4614      	mov	r4, r2
 8007db6:	18d5      	adds	r5, r2, r3
 8007db8:	42ac      	cmp	r4, r5
 8007dba:	d101      	bne.n	8007dc0 <__sfputs_r+0x12>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e007      	b.n	8007dd0 <__sfputs_r+0x22>
 8007dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc4:	463a      	mov	r2, r7
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7ff ffda 	bl	8007d80 <__sfputc_r>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d1f3      	bne.n	8007db8 <__sfputs_r+0xa>
 8007dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dd4 <_vfiprintf_r>:
 8007dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	460d      	mov	r5, r1
 8007dda:	b09d      	sub	sp, #116	; 0x74
 8007ddc:	4614      	mov	r4, r2
 8007dde:	4698      	mov	r8, r3
 8007de0:	4606      	mov	r6, r0
 8007de2:	b118      	cbz	r0, 8007dec <_vfiprintf_r+0x18>
 8007de4:	6983      	ldr	r3, [r0, #24]
 8007de6:	b90b      	cbnz	r3, 8007dec <_vfiprintf_r+0x18>
 8007de8:	f7ff fa96 	bl	8007318 <__sinit>
 8007dec:	4b89      	ldr	r3, [pc, #548]	; (8008014 <_vfiprintf_r+0x240>)
 8007dee:	429d      	cmp	r5, r3
 8007df0:	d11b      	bne.n	8007e2a <_vfiprintf_r+0x56>
 8007df2:	6875      	ldr	r5, [r6, #4]
 8007df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df6:	07d9      	lsls	r1, r3, #31
 8007df8:	d405      	bmi.n	8007e06 <_vfiprintf_r+0x32>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	059a      	lsls	r2, r3, #22
 8007dfe:	d402      	bmi.n	8007e06 <_vfiprintf_r+0x32>
 8007e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e02:	f7ff fb4c 	bl	800749e <__retarget_lock_acquire_recursive>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	071b      	lsls	r3, r3, #28
 8007e0a:	d501      	bpl.n	8007e10 <_vfiprintf_r+0x3c>
 8007e0c:	692b      	ldr	r3, [r5, #16]
 8007e0e:	b9eb      	cbnz	r3, 8007e4c <_vfiprintf_r+0x78>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f000 fb06 	bl	8008424 <__swsetup_r>
 8007e18:	b1c0      	cbz	r0, 8007e4c <_vfiprintf_r+0x78>
 8007e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e1c:	07dc      	lsls	r4, r3, #31
 8007e1e:	d50e      	bpl.n	8007e3e <_vfiprintf_r+0x6a>
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e24:	b01d      	add	sp, #116	; 0x74
 8007e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2a:	4b7b      	ldr	r3, [pc, #492]	; (8008018 <_vfiprintf_r+0x244>)
 8007e2c:	429d      	cmp	r5, r3
 8007e2e:	d101      	bne.n	8007e34 <_vfiprintf_r+0x60>
 8007e30:	68b5      	ldr	r5, [r6, #8]
 8007e32:	e7df      	b.n	8007df4 <_vfiprintf_r+0x20>
 8007e34:	4b79      	ldr	r3, [pc, #484]	; (800801c <_vfiprintf_r+0x248>)
 8007e36:	429d      	cmp	r5, r3
 8007e38:	bf08      	it	eq
 8007e3a:	68f5      	ldreq	r5, [r6, #12]
 8007e3c:	e7da      	b.n	8007df4 <_vfiprintf_r+0x20>
 8007e3e:	89ab      	ldrh	r3, [r5, #12]
 8007e40:	0598      	lsls	r0, r3, #22
 8007e42:	d4ed      	bmi.n	8007e20 <_vfiprintf_r+0x4c>
 8007e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e46:	f7ff fb2b 	bl	80074a0 <__retarget_lock_release_recursive>
 8007e4a:	e7e9      	b.n	8007e20 <_vfiprintf_r+0x4c>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e50:	2320      	movs	r3, #32
 8007e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e5a:	2330      	movs	r3, #48	; 0x30
 8007e5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008020 <_vfiprintf_r+0x24c>
 8007e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e64:	f04f 0901 	mov.w	r9, #1
 8007e68:	4623      	mov	r3, r4
 8007e6a:	469a      	mov	sl, r3
 8007e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e70:	b10a      	cbz	r2, 8007e76 <_vfiprintf_r+0xa2>
 8007e72:	2a25      	cmp	r2, #37	; 0x25
 8007e74:	d1f9      	bne.n	8007e6a <_vfiprintf_r+0x96>
 8007e76:	ebba 0b04 	subs.w	fp, sl, r4
 8007e7a:	d00b      	beq.n	8007e94 <_vfiprintf_r+0xc0>
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	4622      	mov	r2, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ff93 	bl	8007dae <__sfputs_r>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f000 80aa 	beq.w	8007fe2 <_vfiprintf_r+0x20e>
 8007e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e90:	445a      	add	r2, fp
 8007e92:	9209      	str	r2, [sp, #36]	; 0x24
 8007e94:	f89a 3000 	ldrb.w	r3, [sl]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 80a2 	beq.w	8007fe2 <_vfiprintf_r+0x20e>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea8:	f10a 0a01 	add.w	sl, sl, #1
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb6:	4654      	mov	r4, sl
 8007eb8:	2205      	movs	r2, #5
 8007eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebe:	4858      	ldr	r0, [pc, #352]	; (8008020 <_vfiprintf_r+0x24c>)
 8007ec0:	f7f8 f98e 	bl	80001e0 <memchr>
 8007ec4:	9a04      	ldr	r2, [sp, #16]
 8007ec6:	b9d8      	cbnz	r0, 8007f00 <_vfiprintf_r+0x12c>
 8007ec8:	06d1      	lsls	r1, r2, #27
 8007eca:	bf44      	itt	mi
 8007ecc:	2320      	movmi	r3, #32
 8007ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed2:	0713      	lsls	r3, r2, #28
 8007ed4:	bf44      	itt	mi
 8007ed6:	232b      	movmi	r3, #43	; 0x2b
 8007ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007edc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee2:	d015      	beq.n	8007f10 <_vfiprintf_r+0x13c>
 8007ee4:	9a07      	ldr	r2, [sp, #28]
 8007ee6:	4654      	mov	r4, sl
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f04f 0c0a 	mov.w	ip, #10
 8007eee:	4621      	mov	r1, r4
 8007ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef4:	3b30      	subs	r3, #48	; 0x30
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	d94e      	bls.n	8007f98 <_vfiprintf_r+0x1c4>
 8007efa:	b1b0      	cbz	r0, 8007f2a <_vfiprintf_r+0x156>
 8007efc:	9207      	str	r2, [sp, #28]
 8007efe:	e014      	b.n	8007f2a <_vfiprintf_r+0x156>
 8007f00:	eba0 0308 	sub.w	r3, r0, r8
 8007f04:	fa09 f303 	lsl.w	r3, r9, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	46a2      	mov	sl, r4
 8007f0e:	e7d2      	b.n	8007eb6 <_vfiprintf_r+0xe2>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	1d19      	adds	r1, r3, #4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	9103      	str	r1, [sp, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bfbb      	ittet	lt
 8007f1c:	425b      	neglt	r3, r3
 8007f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f22:	9307      	strge	r3, [sp, #28]
 8007f24:	9307      	strlt	r3, [sp, #28]
 8007f26:	bfb8      	it	lt
 8007f28:	9204      	strlt	r2, [sp, #16]
 8007f2a:	7823      	ldrb	r3, [r4, #0]
 8007f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f2e:	d10c      	bne.n	8007f4a <_vfiprintf_r+0x176>
 8007f30:	7863      	ldrb	r3, [r4, #1]
 8007f32:	2b2a      	cmp	r3, #42	; 0x2a
 8007f34:	d135      	bne.n	8007fa2 <_vfiprintf_r+0x1ce>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	1d1a      	adds	r2, r3, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	9203      	str	r2, [sp, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfb8      	it	lt
 8007f42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f46:	3402      	adds	r4, #2
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008030 <_vfiprintf_r+0x25c>
 8007f4e:	7821      	ldrb	r1, [r4, #0]
 8007f50:	2203      	movs	r2, #3
 8007f52:	4650      	mov	r0, sl
 8007f54:	f7f8 f944 	bl	80001e0 <memchr>
 8007f58:	b140      	cbz	r0, 8007f6c <_vfiprintf_r+0x198>
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	eba0 000a 	sub.w	r0, r0, sl
 8007f60:	fa03 f000 	lsl.w	r0, r3, r0
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	4303      	orrs	r3, r0
 8007f68:	3401      	adds	r4, #1
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f70:	482c      	ldr	r0, [pc, #176]	; (8008024 <_vfiprintf_r+0x250>)
 8007f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f76:	2206      	movs	r2, #6
 8007f78:	f7f8 f932 	bl	80001e0 <memchr>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d03f      	beq.n	8008000 <_vfiprintf_r+0x22c>
 8007f80:	4b29      	ldr	r3, [pc, #164]	; (8008028 <_vfiprintf_r+0x254>)
 8007f82:	bb1b      	cbnz	r3, 8007fcc <_vfiprintf_r+0x1f8>
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	3307      	adds	r3, #7
 8007f88:	f023 0307 	bic.w	r3, r3, #7
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	443b      	add	r3, r7
 8007f94:	9309      	str	r3, [sp, #36]	; 0x24
 8007f96:	e767      	b.n	8007e68 <_vfiprintf_r+0x94>
 8007f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	e7a5      	b.n	8007eee <_vfiprintf_r+0x11a>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	3401      	adds	r4, #1
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f04f 0c0a 	mov.w	ip, #10
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fb4:	3a30      	subs	r2, #48	; 0x30
 8007fb6:	2a09      	cmp	r2, #9
 8007fb8:	d903      	bls.n	8007fc2 <_vfiprintf_r+0x1ee>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0c5      	beq.n	8007f4a <_vfiprintf_r+0x176>
 8007fbe:	9105      	str	r1, [sp, #20]
 8007fc0:	e7c3      	b.n	8007f4a <_vfiprintf_r+0x176>
 8007fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e7f0      	b.n	8007fae <_vfiprintf_r+0x1da>
 8007fcc:	ab03      	add	r3, sp, #12
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4b16      	ldr	r3, [pc, #88]	; (800802c <_vfiprintf_r+0x258>)
 8007fd4:	a904      	add	r1, sp, #16
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f3af 8000 	nop.w
 8007fdc:	4607      	mov	r7, r0
 8007fde:	1c78      	adds	r0, r7, #1
 8007fe0:	d1d6      	bne.n	8007f90 <_vfiprintf_r+0x1bc>
 8007fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe4:	07d9      	lsls	r1, r3, #31
 8007fe6:	d405      	bmi.n	8007ff4 <_vfiprintf_r+0x220>
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	059a      	lsls	r2, r3, #22
 8007fec:	d402      	bmi.n	8007ff4 <_vfiprintf_r+0x220>
 8007fee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ff0:	f7ff fa56 	bl	80074a0 <__retarget_lock_release_recursive>
 8007ff4:	89ab      	ldrh	r3, [r5, #12]
 8007ff6:	065b      	lsls	r3, r3, #25
 8007ff8:	f53f af12 	bmi.w	8007e20 <_vfiprintf_r+0x4c>
 8007ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ffe:	e711      	b.n	8007e24 <_vfiprintf_r+0x50>
 8008000:	ab03      	add	r3, sp, #12
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	462a      	mov	r2, r5
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <_vfiprintf_r+0x258>)
 8008008:	a904      	add	r1, sp, #16
 800800a:	4630      	mov	r0, r6
 800800c:	f000 f880 	bl	8008110 <_printf_i>
 8008010:	e7e4      	b.n	8007fdc <_vfiprintf_r+0x208>
 8008012:	bf00      	nop
 8008014:	08008838 	.word	0x08008838
 8008018:	08008858 	.word	0x08008858
 800801c:	08008818 	.word	0x08008818
 8008020:	0800887c 	.word	0x0800887c
 8008024:	08008886 	.word	0x08008886
 8008028:	00000000 	.word	0x00000000
 800802c:	08007daf 	.word	0x08007daf
 8008030:	08008882 	.word	0x08008882

08008034 <_printf_common>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	4616      	mov	r6, r2
 800803a:	4699      	mov	r9, r3
 800803c:	688a      	ldr	r2, [r1, #8]
 800803e:	690b      	ldr	r3, [r1, #16]
 8008040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008044:	4293      	cmp	r3, r2
 8008046:	bfb8      	it	lt
 8008048:	4613      	movlt	r3, r2
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008050:	4607      	mov	r7, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b10a      	cbz	r2, 800805a <_printf_common+0x26>
 8008056:	3301      	adds	r3, #1
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	0699      	lsls	r1, r3, #26
 800805e:	bf42      	ittt	mi
 8008060:	6833      	ldrmi	r3, [r6, #0]
 8008062:	3302      	addmi	r3, #2
 8008064:	6033      	strmi	r3, [r6, #0]
 8008066:	6825      	ldr	r5, [r4, #0]
 8008068:	f015 0506 	ands.w	r5, r5, #6
 800806c:	d106      	bne.n	800807c <_printf_common+0x48>
 800806e:	f104 0a19 	add.w	sl, r4, #25
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	6832      	ldr	r2, [r6, #0]
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	42ab      	cmp	r3, r5
 800807a:	dc26      	bgt.n	80080ca <_printf_common+0x96>
 800807c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008080:	1e13      	subs	r3, r2, #0
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	bf18      	it	ne
 8008086:	2301      	movne	r3, #1
 8008088:	0692      	lsls	r2, r2, #26
 800808a:	d42b      	bmi.n	80080e4 <_printf_common+0xb0>
 800808c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008090:	4649      	mov	r1, r9
 8008092:	4638      	mov	r0, r7
 8008094:	47c0      	blx	r8
 8008096:	3001      	adds	r0, #1
 8008098:	d01e      	beq.n	80080d8 <_printf_common+0xa4>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	68e5      	ldr	r5, [r4, #12]
 800809e:	6832      	ldr	r2, [r6, #0]
 80080a0:	f003 0306 	and.w	r3, r3, #6
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	bf08      	it	eq
 80080a8:	1aad      	subeq	r5, r5, r2
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	6922      	ldr	r2, [r4, #16]
 80080ae:	bf0c      	ite	eq
 80080b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b4:	2500      	movne	r5, #0
 80080b6:	4293      	cmp	r3, r2
 80080b8:	bfc4      	itt	gt
 80080ba:	1a9b      	subgt	r3, r3, r2
 80080bc:	18ed      	addgt	r5, r5, r3
 80080be:	2600      	movs	r6, #0
 80080c0:	341a      	adds	r4, #26
 80080c2:	42b5      	cmp	r5, r6
 80080c4:	d11a      	bne.n	80080fc <_printf_common+0xc8>
 80080c6:	2000      	movs	r0, #0
 80080c8:	e008      	b.n	80080dc <_printf_common+0xa8>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4652      	mov	r2, sl
 80080ce:	4649      	mov	r1, r9
 80080d0:	4638      	mov	r0, r7
 80080d2:	47c0      	blx	r8
 80080d4:	3001      	adds	r0, #1
 80080d6:	d103      	bne.n	80080e0 <_printf_common+0xac>
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	3501      	adds	r5, #1
 80080e2:	e7c6      	b.n	8008072 <_printf_common+0x3e>
 80080e4:	18e1      	adds	r1, r4, r3
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	2030      	movs	r0, #48	; 0x30
 80080ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ee:	4422      	add	r2, r4
 80080f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080f8:	3302      	adds	r3, #2
 80080fa:	e7c7      	b.n	800808c <_printf_common+0x58>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4622      	mov	r2, r4
 8008100:	4649      	mov	r1, r9
 8008102:	4638      	mov	r0, r7
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d0e6      	beq.n	80080d8 <_printf_common+0xa4>
 800810a:	3601      	adds	r6, #1
 800810c:	e7d9      	b.n	80080c2 <_printf_common+0x8e>
	...

08008110 <_printf_i>:
 8008110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	7e0f      	ldrb	r7, [r1, #24]
 8008116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008118:	2f78      	cmp	r7, #120	; 0x78
 800811a:	4691      	mov	r9, r2
 800811c:	4680      	mov	r8, r0
 800811e:	460c      	mov	r4, r1
 8008120:	469a      	mov	sl, r3
 8008122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008126:	d807      	bhi.n	8008138 <_printf_i+0x28>
 8008128:	2f62      	cmp	r7, #98	; 0x62
 800812a:	d80a      	bhi.n	8008142 <_printf_i+0x32>
 800812c:	2f00      	cmp	r7, #0
 800812e:	f000 80d8 	beq.w	80082e2 <_printf_i+0x1d2>
 8008132:	2f58      	cmp	r7, #88	; 0x58
 8008134:	f000 80a3 	beq.w	800827e <_printf_i+0x16e>
 8008138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800813c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008140:	e03a      	b.n	80081b8 <_printf_i+0xa8>
 8008142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008146:	2b15      	cmp	r3, #21
 8008148:	d8f6      	bhi.n	8008138 <_printf_i+0x28>
 800814a:	a101      	add	r1, pc, #4	; (adr r1, 8008150 <_printf_i+0x40>)
 800814c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008150:	080081a9 	.word	0x080081a9
 8008154:	080081bd 	.word	0x080081bd
 8008158:	08008139 	.word	0x08008139
 800815c:	08008139 	.word	0x08008139
 8008160:	08008139 	.word	0x08008139
 8008164:	08008139 	.word	0x08008139
 8008168:	080081bd 	.word	0x080081bd
 800816c:	08008139 	.word	0x08008139
 8008170:	08008139 	.word	0x08008139
 8008174:	08008139 	.word	0x08008139
 8008178:	08008139 	.word	0x08008139
 800817c:	080082c9 	.word	0x080082c9
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080082ab 	.word	0x080082ab
 8008188:	08008139 	.word	0x08008139
 800818c:	08008139 	.word	0x08008139
 8008190:	080082eb 	.word	0x080082eb
 8008194:	08008139 	.word	0x08008139
 8008198:	080081ed 	.word	0x080081ed
 800819c:	08008139 	.word	0x08008139
 80081a0:	08008139 	.word	0x08008139
 80081a4:	080082b3 	.word	0x080082b3
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	1d1a      	adds	r2, r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0a3      	b.n	8008304 <_printf_i+0x1f4>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	6829      	ldr	r1, [r5, #0]
 80081c0:	0606      	lsls	r6, r0, #24
 80081c2:	f101 0304 	add.w	r3, r1, #4
 80081c6:	d50a      	bpl.n	80081de <_printf_i+0xce>
 80081c8:	680e      	ldr	r6, [r1, #0]
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	da03      	bge.n	80081d8 <_printf_i+0xc8>
 80081d0:	232d      	movs	r3, #45	; 0x2d
 80081d2:	4276      	negs	r6, r6
 80081d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d8:	485e      	ldr	r0, [pc, #376]	; (8008354 <_printf_i+0x244>)
 80081da:	230a      	movs	r3, #10
 80081dc:	e019      	b.n	8008212 <_printf_i+0x102>
 80081de:	680e      	ldr	r6, [r1, #0]
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081e6:	bf18      	it	ne
 80081e8:	b236      	sxthne	r6, r6
 80081ea:	e7ef      	b.n	80081cc <_printf_i+0xbc>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	6820      	ldr	r0, [r4, #0]
 80081f0:	1d19      	adds	r1, r3, #4
 80081f2:	6029      	str	r1, [r5, #0]
 80081f4:	0601      	lsls	r1, r0, #24
 80081f6:	d501      	bpl.n	80081fc <_printf_i+0xec>
 80081f8:	681e      	ldr	r6, [r3, #0]
 80081fa:	e002      	b.n	8008202 <_printf_i+0xf2>
 80081fc:	0646      	lsls	r6, r0, #25
 80081fe:	d5fb      	bpl.n	80081f8 <_printf_i+0xe8>
 8008200:	881e      	ldrh	r6, [r3, #0]
 8008202:	4854      	ldr	r0, [pc, #336]	; (8008354 <_printf_i+0x244>)
 8008204:	2f6f      	cmp	r7, #111	; 0x6f
 8008206:	bf0c      	ite	eq
 8008208:	2308      	moveq	r3, #8
 800820a:	230a      	movne	r3, #10
 800820c:	2100      	movs	r1, #0
 800820e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008212:	6865      	ldr	r5, [r4, #4]
 8008214:	60a5      	str	r5, [r4, #8]
 8008216:	2d00      	cmp	r5, #0
 8008218:	bfa2      	ittt	ge
 800821a:	6821      	ldrge	r1, [r4, #0]
 800821c:	f021 0104 	bicge.w	r1, r1, #4
 8008220:	6021      	strge	r1, [r4, #0]
 8008222:	b90e      	cbnz	r6, 8008228 <_printf_i+0x118>
 8008224:	2d00      	cmp	r5, #0
 8008226:	d04d      	beq.n	80082c4 <_printf_i+0x1b4>
 8008228:	4615      	mov	r5, r2
 800822a:	fbb6 f1f3 	udiv	r1, r6, r3
 800822e:	fb03 6711 	mls	r7, r3, r1, r6
 8008232:	5dc7      	ldrb	r7, [r0, r7]
 8008234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008238:	4637      	mov	r7, r6
 800823a:	42bb      	cmp	r3, r7
 800823c:	460e      	mov	r6, r1
 800823e:	d9f4      	bls.n	800822a <_printf_i+0x11a>
 8008240:	2b08      	cmp	r3, #8
 8008242:	d10b      	bne.n	800825c <_printf_i+0x14c>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	07de      	lsls	r6, r3, #31
 8008248:	d508      	bpl.n	800825c <_printf_i+0x14c>
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	6861      	ldr	r1, [r4, #4]
 800824e:	4299      	cmp	r1, r3
 8008250:	bfde      	ittt	le
 8008252:	2330      	movle	r3, #48	; 0x30
 8008254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008258:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800825c:	1b52      	subs	r2, r2, r5
 800825e:	6122      	str	r2, [r4, #16]
 8008260:	f8cd a000 	str.w	sl, [sp]
 8008264:	464b      	mov	r3, r9
 8008266:	aa03      	add	r2, sp, #12
 8008268:	4621      	mov	r1, r4
 800826a:	4640      	mov	r0, r8
 800826c:	f7ff fee2 	bl	8008034 <_printf_common>
 8008270:	3001      	adds	r0, #1
 8008272:	d14c      	bne.n	800830e <_printf_i+0x1fe>
 8008274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008278:	b004      	add	sp, #16
 800827a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827e:	4835      	ldr	r0, [pc, #212]	; (8008354 <_printf_i+0x244>)
 8008280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008284:	6829      	ldr	r1, [r5, #0]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	f851 6b04 	ldr.w	r6, [r1], #4
 800828c:	6029      	str	r1, [r5, #0]
 800828e:	061d      	lsls	r5, r3, #24
 8008290:	d514      	bpl.n	80082bc <_printf_i+0x1ac>
 8008292:	07df      	lsls	r7, r3, #31
 8008294:	bf44      	itt	mi
 8008296:	f043 0320 	orrmi.w	r3, r3, #32
 800829a:	6023      	strmi	r3, [r4, #0]
 800829c:	b91e      	cbnz	r6, 80082a6 <_printf_i+0x196>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	f023 0320 	bic.w	r3, r3, #32
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	2310      	movs	r3, #16
 80082a8:	e7b0      	b.n	800820c <_printf_i+0xfc>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	f043 0320 	orr.w	r3, r3, #32
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	2378      	movs	r3, #120	; 0x78
 80082b4:	4828      	ldr	r0, [pc, #160]	; (8008358 <_printf_i+0x248>)
 80082b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082ba:	e7e3      	b.n	8008284 <_printf_i+0x174>
 80082bc:	0659      	lsls	r1, r3, #25
 80082be:	bf48      	it	mi
 80082c0:	b2b6      	uxthmi	r6, r6
 80082c2:	e7e6      	b.n	8008292 <_printf_i+0x182>
 80082c4:	4615      	mov	r5, r2
 80082c6:	e7bb      	b.n	8008240 <_printf_i+0x130>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	6826      	ldr	r6, [r4, #0]
 80082cc:	6961      	ldr	r1, [r4, #20]
 80082ce:	1d18      	adds	r0, r3, #4
 80082d0:	6028      	str	r0, [r5, #0]
 80082d2:	0635      	lsls	r5, r6, #24
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	d501      	bpl.n	80082dc <_printf_i+0x1cc>
 80082d8:	6019      	str	r1, [r3, #0]
 80082da:	e002      	b.n	80082e2 <_printf_i+0x1d2>
 80082dc:	0670      	lsls	r0, r6, #25
 80082de:	d5fb      	bpl.n	80082d8 <_printf_i+0x1c8>
 80082e0:	8019      	strh	r1, [r3, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	6123      	str	r3, [r4, #16]
 80082e6:	4615      	mov	r5, r2
 80082e8:	e7ba      	b.n	8008260 <_printf_i+0x150>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	1d1a      	adds	r2, r3, #4
 80082ee:	602a      	str	r2, [r5, #0]
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	6862      	ldr	r2, [r4, #4]
 80082f4:	2100      	movs	r1, #0
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7f7 ff72 	bl	80001e0 <memchr>
 80082fc:	b108      	cbz	r0, 8008302 <_printf_i+0x1f2>
 80082fe:	1b40      	subs	r0, r0, r5
 8008300:	6060      	str	r0, [r4, #4]
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	2300      	movs	r3, #0
 8008308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800830c:	e7a8      	b.n	8008260 <_printf_i+0x150>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	462a      	mov	r2, r5
 8008312:	4649      	mov	r1, r9
 8008314:	4640      	mov	r0, r8
 8008316:	47d0      	blx	sl
 8008318:	3001      	adds	r0, #1
 800831a:	d0ab      	beq.n	8008274 <_printf_i+0x164>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	079b      	lsls	r3, r3, #30
 8008320:	d413      	bmi.n	800834a <_printf_i+0x23a>
 8008322:	68e0      	ldr	r0, [r4, #12]
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	4298      	cmp	r0, r3
 8008328:	bfb8      	it	lt
 800832a:	4618      	movlt	r0, r3
 800832c:	e7a4      	b.n	8008278 <_printf_i+0x168>
 800832e:	2301      	movs	r3, #1
 8008330:	4632      	mov	r2, r6
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d09b      	beq.n	8008274 <_printf_i+0x164>
 800833c:	3501      	adds	r5, #1
 800833e:	68e3      	ldr	r3, [r4, #12]
 8008340:	9903      	ldr	r1, [sp, #12]
 8008342:	1a5b      	subs	r3, r3, r1
 8008344:	42ab      	cmp	r3, r5
 8008346:	dcf2      	bgt.n	800832e <_printf_i+0x21e>
 8008348:	e7eb      	b.n	8008322 <_printf_i+0x212>
 800834a:	2500      	movs	r5, #0
 800834c:	f104 0619 	add.w	r6, r4, #25
 8008350:	e7f5      	b.n	800833e <_printf_i+0x22e>
 8008352:	bf00      	nop
 8008354:	0800888d 	.word	0x0800888d
 8008358:	0800889e 	.word	0x0800889e

0800835c <_read_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	; (800837c <_read_r+0x20>)
 8008360:	4604      	mov	r4, r0
 8008362:	4608      	mov	r0, r1
 8008364:	4611      	mov	r1, r2
 8008366:	2200      	movs	r2, #0
 8008368:	602a      	str	r2, [r5, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	f7f8 fc4a 	bl	8000c04 <_read>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_read_r+0x1e>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_read_r+0x1e>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20002e14 	.word	0x20002e14

08008380 <__swbuf_r>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	460e      	mov	r6, r1
 8008384:	4614      	mov	r4, r2
 8008386:	4605      	mov	r5, r0
 8008388:	b118      	cbz	r0, 8008392 <__swbuf_r+0x12>
 800838a:	6983      	ldr	r3, [r0, #24]
 800838c:	b90b      	cbnz	r3, 8008392 <__swbuf_r+0x12>
 800838e:	f7fe ffc3 	bl	8007318 <__sinit>
 8008392:	4b21      	ldr	r3, [pc, #132]	; (8008418 <__swbuf_r+0x98>)
 8008394:	429c      	cmp	r4, r3
 8008396:	d12b      	bne.n	80083f0 <__swbuf_r+0x70>
 8008398:	686c      	ldr	r4, [r5, #4]
 800839a:	69a3      	ldr	r3, [r4, #24]
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	071a      	lsls	r2, r3, #28
 80083a2:	d52f      	bpl.n	8008404 <__swbuf_r+0x84>
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	b36b      	cbz	r3, 8008404 <__swbuf_r+0x84>
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	1ac0      	subs	r0, r0, r3
 80083ae:	6963      	ldr	r3, [r4, #20]
 80083b0:	b2f6      	uxtb	r6, r6
 80083b2:	4283      	cmp	r3, r0
 80083b4:	4637      	mov	r7, r6
 80083b6:	dc04      	bgt.n	80083c2 <__swbuf_r+0x42>
 80083b8:	4621      	mov	r1, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f7ff fade 	bl	800797c <_fflush_r>
 80083c0:	bb30      	cbnz	r0, 8008410 <__swbuf_r+0x90>
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	60a3      	str	r3, [r4, #8]
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	701e      	strb	r6, [r3, #0]
 80083d0:	6963      	ldr	r3, [r4, #20]
 80083d2:	3001      	adds	r0, #1
 80083d4:	4283      	cmp	r3, r0
 80083d6:	d004      	beq.n	80083e2 <__swbuf_r+0x62>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	07db      	lsls	r3, r3, #31
 80083dc:	d506      	bpl.n	80083ec <__swbuf_r+0x6c>
 80083de:	2e0a      	cmp	r6, #10
 80083e0:	d104      	bne.n	80083ec <__swbuf_r+0x6c>
 80083e2:	4621      	mov	r1, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	f7ff fac9 	bl	800797c <_fflush_r>
 80083ea:	b988      	cbnz	r0, 8008410 <__swbuf_r+0x90>
 80083ec:	4638      	mov	r0, r7
 80083ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <__swbuf_r+0x9c>)
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d101      	bne.n	80083fa <__swbuf_r+0x7a>
 80083f6:	68ac      	ldr	r4, [r5, #8]
 80083f8:	e7cf      	b.n	800839a <__swbuf_r+0x1a>
 80083fa:	4b09      	ldr	r3, [pc, #36]	; (8008420 <__swbuf_r+0xa0>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	bf08      	it	eq
 8008400:	68ec      	ldreq	r4, [r5, #12]
 8008402:	e7ca      	b.n	800839a <__swbuf_r+0x1a>
 8008404:	4621      	mov	r1, r4
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f80c 	bl	8008424 <__swsetup_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	d0cb      	beq.n	80083a8 <__swbuf_r+0x28>
 8008410:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008414:	e7ea      	b.n	80083ec <__swbuf_r+0x6c>
 8008416:	bf00      	nop
 8008418:	08008838 	.word	0x08008838
 800841c:	08008858 	.word	0x08008858
 8008420:	08008818 	.word	0x08008818

08008424 <__swsetup_r>:
 8008424:	4b32      	ldr	r3, [pc, #200]	; (80084f0 <__swsetup_r+0xcc>)
 8008426:	b570      	push	{r4, r5, r6, lr}
 8008428:	681d      	ldr	r5, [r3, #0]
 800842a:	4606      	mov	r6, r0
 800842c:	460c      	mov	r4, r1
 800842e:	b125      	cbz	r5, 800843a <__swsetup_r+0x16>
 8008430:	69ab      	ldr	r3, [r5, #24]
 8008432:	b913      	cbnz	r3, 800843a <__swsetup_r+0x16>
 8008434:	4628      	mov	r0, r5
 8008436:	f7fe ff6f 	bl	8007318 <__sinit>
 800843a:	4b2e      	ldr	r3, [pc, #184]	; (80084f4 <__swsetup_r+0xd0>)
 800843c:	429c      	cmp	r4, r3
 800843e:	d10f      	bne.n	8008460 <__swsetup_r+0x3c>
 8008440:	686c      	ldr	r4, [r5, #4]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008448:	0719      	lsls	r1, r3, #28
 800844a:	d42c      	bmi.n	80084a6 <__swsetup_r+0x82>
 800844c:	06dd      	lsls	r5, r3, #27
 800844e:	d411      	bmi.n	8008474 <__swsetup_r+0x50>
 8008450:	2309      	movs	r3, #9
 8008452:	6033      	str	r3, [r6, #0]
 8008454:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800845e:	e03e      	b.n	80084de <__swsetup_r+0xba>
 8008460:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <__swsetup_r+0xd4>)
 8008462:	429c      	cmp	r4, r3
 8008464:	d101      	bne.n	800846a <__swsetup_r+0x46>
 8008466:	68ac      	ldr	r4, [r5, #8]
 8008468:	e7eb      	b.n	8008442 <__swsetup_r+0x1e>
 800846a:	4b24      	ldr	r3, [pc, #144]	; (80084fc <__swsetup_r+0xd8>)
 800846c:	429c      	cmp	r4, r3
 800846e:	bf08      	it	eq
 8008470:	68ec      	ldreq	r4, [r5, #12]
 8008472:	e7e6      	b.n	8008442 <__swsetup_r+0x1e>
 8008474:	0758      	lsls	r0, r3, #29
 8008476:	d512      	bpl.n	800849e <__swsetup_r+0x7a>
 8008478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800847a:	b141      	cbz	r1, 800848e <__swsetup_r+0x6a>
 800847c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008480:	4299      	cmp	r1, r3
 8008482:	d002      	beq.n	800848a <__swsetup_r+0x66>
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fad3 	bl	8007a30 <_free_r>
 800848a:	2300      	movs	r3, #0
 800848c:	6363      	str	r3, [r4, #52]	; 0x34
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	2300      	movs	r3, #0
 8008498:	6063      	str	r3, [r4, #4]
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f043 0308 	orr.w	r3, r3, #8
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	b94b      	cbnz	r3, 80084be <__swsetup_r+0x9a>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b4:	d003      	beq.n	80084be <__swsetup_r+0x9a>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f847 	bl	800854c <__smakebuf_r>
 80084be:	89a0      	ldrh	r0, [r4, #12]
 80084c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084c4:	f010 0301 	ands.w	r3, r0, #1
 80084c8:	d00a      	beq.n	80084e0 <__swsetup_r+0xbc>
 80084ca:	2300      	movs	r3, #0
 80084cc:	60a3      	str	r3, [r4, #8]
 80084ce:	6963      	ldr	r3, [r4, #20]
 80084d0:	425b      	negs	r3, r3
 80084d2:	61a3      	str	r3, [r4, #24]
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	b943      	cbnz	r3, 80084ea <__swsetup_r+0xc6>
 80084d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084dc:	d1ba      	bne.n	8008454 <__swsetup_r+0x30>
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	0781      	lsls	r1, r0, #30
 80084e2:	bf58      	it	pl
 80084e4:	6963      	ldrpl	r3, [r4, #20]
 80084e6:	60a3      	str	r3, [r4, #8]
 80084e8:	e7f4      	b.n	80084d4 <__swsetup_r+0xb0>
 80084ea:	2000      	movs	r0, #0
 80084ec:	e7f7      	b.n	80084de <__swsetup_r+0xba>
 80084ee:	bf00      	nop
 80084f0:	20000010 	.word	0x20000010
 80084f4:	08008838 	.word	0x08008838
 80084f8:	08008858 	.word	0x08008858
 80084fc:	08008818 	.word	0x08008818

08008500 <__swhatbuf_r>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	460e      	mov	r6, r1
 8008504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008508:	2900      	cmp	r1, #0
 800850a:	b096      	sub	sp, #88	; 0x58
 800850c:	4614      	mov	r4, r2
 800850e:	461d      	mov	r5, r3
 8008510:	da08      	bge.n	8008524 <__swhatbuf_r+0x24>
 8008512:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	061a      	lsls	r2, r3, #24
 800851c:	d410      	bmi.n	8008540 <__swhatbuf_r+0x40>
 800851e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008522:	e00e      	b.n	8008542 <__swhatbuf_r+0x42>
 8008524:	466a      	mov	r2, sp
 8008526:	f000 f89b 	bl	8008660 <_fstat_r>
 800852a:	2800      	cmp	r0, #0
 800852c:	dbf1      	blt.n	8008512 <__swhatbuf_r+0x12>
 800852e:	9a01      	ldr	r2, [sp, #4]
 8008530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008538:	425a      	negs	r2, r3
 800853a:	415a      	adcs	r2, r3
 800853c:	602a      	str	r2, [r5, #0]
 800853e:	e7ee      	b.n	800851e <__swhatbuf_r+0x1e>
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	2000      	movs	r0, #0
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	b016      	add	sp, #88	; 0x58
 8008548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800854c <__smakebuf_r>:
 800854c:	898b      	ldrh	r3, [r1, #12]
 800854e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008550:	079d      	lsls	r5, r3, #30
 8008552:	4606      	mov	r6, r0
 8008554:	460c      	mov	r4, r1
 8008556:	d507      	bpl.n	8008568 <__smakebuf_r+0x1c>
 8008558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	6123      	str	r3, [r4, #16]
 8008560:	2301      	movs	r3, #1
 8008562:	6163      	str	r3, [r4, #20]
 8008564:	b002      	add	sp, #8
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	ab01      	add	r3, sp, #4
 800856a:	466a      	mov	r2, sp
 800856c:	f7ff ffc8 	bl	8008500 <__swhatbuf_r>
 8008570:	9900      	ldr	r1, [sp, #0]
 8008572:	4605      	mov	r5, r0
 8008574:	4630      	mov	r0, r6
 8008576:	f7fe ffdb 	bl	8007530 <_malloc_r>
 800857a:	b948      	cbnz	r0, 8008590 <__smakebuf_r+0x44>
 800857c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008580:	059a      	lsls	r2, r3, #22
 8008582:	d4ef      	bmi.n	8008564 <__smakebuf_r+0x18>
 8008584:	f023 0303 	bic.w	r3, r3, #3
 8008588:	f043 0302 	orr.w	r3, r3, #2
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	e7e3      	b.n	8008558 <__smakebuf_r+0xc>
 8008590:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <__smakebuf_r+0x7c>)
 8008592:	62b3      	str	r3, [r6, #40]	; 0x28
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	6020      	str	r0, [r4, #0]
 8008598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859c:	81a3      	strh	r3, [r4, #12]
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	6163      	str	r3, [r4, #20]
 80085a2:	9b01      	ldr	r3, [sp, #4]
 80085a4:	6120      	str	r0, [r4, #16]
 80085a6:	b15b      	cbz	r3, 80085c0 <__smakebuf_r+0x74>
 80085a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ac:	4630      	mov	r0, r6
 80085ae:	f000 f869 	bl	8008684 <_isatty_r>
 80085b2:	b128      	cbz	r0, 80085c0 <__smakebuf_r+0x74>
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	89a0      	ldrh	r0, [r4, #12]
 80085c2:	4305      	orrs	r5, r0
 80085c4:	81a5      	strh	r5, [r4, #12]
 80085c6:	e7cd      	b.n	8008564 <__smakebuf_r+0x18>
 80085c8:	080072b1 	.word	0x080072b1

080085cc <memmove>:
 80085cc:	4288      	cmp	r0, r1
 80085ce:	b510      	push	{r4, lr}
 80085d0:	eb01 0402 	add.w	r4, r1, r2
 80085d4:	d902      	bls.n	80085dc <memmove+0x10>
 80085d6:	4284      	cmp	r4, r0
 80085d8:	4623      	mov	r3, r4
 80085da:	d807      	bhi.n	80085ec <memmove+0x20>
 80085dc:	1e43      	subs	r3, r0, #1
 80085de:	42a1      	cmp	r1, r4
 80085e0:	d008      	beq.n	80085f4 <memmove+0x28>
 80085e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ea:	e7f8      	b.n	80085de <memmove+0x12>
 80085ec:	4402      	add	r2, r0
 80085ee:	4601      	mov	r1, r0
 80085f0:	428a      	cmp	r2, r1
 80085f2:	d100      	bne.n	80085f6 <memmove+0x2a>
 80085f4:	bd10      	pop	{r4, pc}
 80085f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085fe:	e7f7      	b.n	80085f0 <memmove+0x24>

08008600 <_realloc_r>:
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	4680      	mov	r8, r0
 8008606:	4614      	mov	r4, r2
 8008608:	460e      	mov	r6, r1
 800860a:	b921      	cbnz	r1, 8008616 <_realloc_r+0x16>
 800860c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008610:	4611      	mov	r1, r2
 8008612:	f7fe bf8d 	b.w	8007530 <_malloc_r>
 8008616:	b92a      	cbnz	r2, 8008624 <_realloc_r+0x24>
 8008618:	f7ff fa0a 	bl	8007a30 <_free_r>
 800861c:	4625      	mov	r5, r4
 800861e:	4628      	mov	r0, r5
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008624:	f000 f83e 	bl	80086a4 <_malloc_usable_size_r>
 8008628:	4284      	cmp	r4, r0
 800862a:	4607      	mov	r7, r0
 800862c:	d802      	bhi.n	8008634 <_realloc_r+0x34>
 800862e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008632:	d812      	bhi.n	800865a <_realloc_r+0x5a>
 8008634:	4621      	mov	r1, r4
 8008636:	4640      	mov	r0, r8
 8008638:	f7fe ff7a 	bl	8007530 <_malloc_r>
 800863c:	4605      	mov	r5, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	d0ed      	beq.n	800861e <_realloc_r+0x1e>
 8008642:	42bc      	cmp	r4, r7
 8008644:	4622      	mov	r2, r4
 8008646:	4631      	mov	r1, r6
 8008648:	bf28      	it	cs
 800864a:	463a      	movcs	r2, r7
 800864c:	f7fe ff39 	bl	80074c2 <memcpy>
 8008650:	4631      	mov	r1, r6
 8008652:	4640      	mov	r0, r8
 8008654:	f7ff f9ec 	bl	8007a30 <_free_r>
 8008658:	e7e1      	b.n	800861e <_realloc_r+0x1e>
 800865a:	4635      	mov	r5, r6
 800865c:	e7df      	b.n	800861e <_realloc_r+0x1e>
	...

08008660 <_fstat_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d07      	ldr	r5, [pc, #28]	; (8008680 <_fstat_r+0x20>)
 8008664:	2300      	movs	r3, #0
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	4611      	mov	r1, r2
 800866c:	602b      	str	r3, [r5, #0]
 800866e:	f7f8 fb0e 	bl	8000c8e <_fstat>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d102      	bne.n	800867c <_fstat_r+0x1c>
 8008676:	682b      	ldr	r3, [r5, #0]
 8008678:	b103      	cbz	r3, 800867c <_fstat_r+0x1c>
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	20002e14 	.word	0x20002e14

08008684 <_isatty_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4d06      	ldr	r5, [pc, #24]	; (80086a0 <_isatty_r+0x1c>)
 8008688:	2300      	movs	r3, #0
 800868a:	4604      	mov	r4, r0
 800868c:	4608      	mov	r0, r1
 800868e:	602b      	str	r3, [r5, #0]
 8008690:	f7f8 fb0d 	bl	8000cae <_isatty>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_isatty_r+0x1a>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_isatty_r+0x1a>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	20002e14 	.word	0x20002e14

080086a4 <_malloc_usable_size_r>:
 80086a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a8:	1f18      	subs	r0, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfbc      	itt	lt
 80086ae:	580b      	ldrlt	r3, [r1, r0]
 80086b0:	18c0      	addlt	r0, r0, r3
 80086b2:	4770      	bx	lr

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
