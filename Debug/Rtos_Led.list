
Rtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dec  08008dec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008dec  08008dec  00018dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df4  08008df4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002244  20000074  08008e70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022b8  08008e70  000222b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208c7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425b  00000000  00000000  0004096b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00044bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  000464e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000057e3  00000000  00000000  00047c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c007  00000000  00000000  0004d443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7113  00000000  00000000  0006944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014055d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007228  00000000  00000000  001405b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bd4 	.word	0x08008bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008bd4 	.word	0x08008bd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setleds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setleds(uint16_t ledring) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]

	//uint16_t ledring = 0b1010101010101010;

	for (int i = 0; i < 16; i++) {
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e01f      	b.n	80005d4 <setleds+0x50>

		if (ledring & (1 << i)) {
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	fa42 f303 	asr.w	r3, r2, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <setleds+0x2c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4815      	ldr	r0, [pc, #84]	; (8000600 <setleds+0x7c>)
 80005aa:	f001 fa41 	bl	8001a30 <HAL_GPIO_WritePin>
 80005ae:	e004      	b.n	80005ba <setleds+0x36>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <setleds+0x7c>)
 80005b6:	f001 fa3b 	bl	8001a30 <HAL_GPIO_WritePin>
		}

		//SCK
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <setleds+0x7c>)
 80005c0:	f001 fa36 	bl	8001a30 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <setleds+0x7c>)
 80005ca:	f001 fa31 	bl	8001a30 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	dddc      	ble.n	8000594 <setleds+0x10>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	}

	//Latch
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2101      	movs	r1, #1
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <setleds+0x7c>)
 80005e0:	f001 fa26 	bl	8001a30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <setleds+0x7c>)
 80005ea:	f001 fa21 	bl	8001a30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <setleds+0x7c>)
 80005f4:	f001 fa1c 	bl	8001a30 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000400 	.word	0x48000400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd8f 	bl	800112a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f842 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f8c0 	bl	8000794 <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f000 f8a0 	bl	8000758 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000618:	f000 fc48 	bl	8000eac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800061c:	f000 fc16 	bl	8000e4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f003 ff24 	bl	800446c <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSema */
  uartSemaHandle = osSemaphoreNew(1, 1, &uartSema_attributes);
 8000624:	4a11      	ldr	r2, [pc, #68]	; (800066c <main+0x68>)
 8000626:	2101      	movs	r1, #1
 8000628:	2001      	movs	r0, #1
 800062a:	f004 f816 	bl	800465a <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <main+0x6c>)
 8000632:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RotaryEncoderQueue */
  RotaryEncoderQueueHandle = osMessageQueueNew (16, sizeof(InputEvent), &RotaryEncoderQueue_attributes);
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <main+0x70>)
 8000636:	2108      	movs	r1, #8
 8000638:	2010      	movs	r0, #16
 800063a:	f004 f897 	bl	800476c <osMessageQueueNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <main+0x74>)
 8000642:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <main+0x78>)
 8000646:	2100      	movs	r1, #0
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <main+0x7c>)
 800064a:	f003 ff59 	bl	8004500 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <main+0x80>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 8000654:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <main+0x84>)
 8000656:	2100      	movs	r1, #0
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <main+0x88>)
 800065a:	f003 ff51 	bl	8004500 <osThreadNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <main+0x8c>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000664:	f003 ff26 	bl	80044b4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000668:	e7fe      	b.n	8000668 <main+0x64>
 800066a:	bf00      	nop
 800066c:	08008cfc 	.word	0x08008cfc
 8000670:	200006e4 	.word	0x200006e4
 8000674:	08008ce4 	.word	0x08008ce4
 8000678:	20000610 	.word	0x20000610
 800067c:	08008c9c 	.word	0x08008c9c
 8000680:	0800085d 	.word	0x0800085d
 8000684:	20000090 	.word	0x20000090
 8000688:	08008cc0 	.word	0x08008cc0
 800068c:	080008c1 	.word	0x080008c1
 8000690:	20000350 	.word	0x20000350

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 f9ab 	bl	80079fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ba:	f001 f9ef 	bl	8001a9c <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 f9c4 	bl	8000a50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c8:	f001 f9ca 	bl	8001a60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <SystemClock_Config+0xc0>)
 80006ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006d2:	4a20      	ldr	r2, [pc, #128]	; (8000754 <SystemClock_Config+0xc0>)
 80006d4:	f023 0318 	bic.w	r3, r3, #24
 80006d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006dc:	2314      	movs	r3, #20
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f4:	2301      	movs	r3, #1
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006fc:	2310      	movs	r3, #16
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000700:	2307      	movs	r3, #7
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fa19 	bl	8001b48 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800071c:	f000 f998 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2101      	movs	r1, #1
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fe19 	bl	8002370 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000744:	f000 f984 	bl	8000a50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000748:	f002 fa5e 	bl	8002c08 <HAL_RCCEx_EnableMSIPLLMode>
}
 800074c:	bf00      	nop
 800074e:	3758      	adds	r7, #88	; 0x58
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_DMA_Init+0x38>)
 8000760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <MX_DMA_Init+0x38>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6493      	str	r3, [r2, #72]	; 0x48
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_DMA_Init+0x38>)
 800076c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2105      	movs	r1, #5
 800077a:	200f      	movs	r0, #15
 800077c:	f000 fdc6 	bl	800130c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000780:	200f      	movs	r0, #15
 8000782:	f000 fddf 	bl	8001344 <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a29      	ldr	r2, [pc, #164]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a23      	ldr	r2, [pc, #140]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2129      	movs	r1, #41	; 0x29
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007f8:	f001 f91a 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80007fc:	2309      	movs	r3, #9
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f000 ff8b 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_5;
 8000816:	2329      	movs	r3, #41	; 0x29
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <MX_GPIO_Init+0xc4>)
 800082e:	f000 ff7d 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000832:	2302      	movs	r3, #2
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0xc4>)
 8000846:	f000 ff71 	bl	800172c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
		/*setleds(0b1010101010101010);
		 osDelay(1000);
		 setleds(0b0101010101010101);
		 osDelay(1000);*/

		osStatus_t ret = osMessageQueueGet(RotaryEncoderQueueHandle, &event, 0,
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <StartLedTask+0x58>)
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	f107 0108 	add.w	r1, r7, #8
 800086c:	230a      	movs	r3, #10
 800086e:	2200      	movs	r2, #0
 8000870:	f004 f850 	bl	8004914 <osMessageQueueGet>
 8000874:	6138      	str	r0, [r7, #16]
				10);
		if (ret != osOK) {
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <StartLedTask+0x28>
			//something went wrong
			printf("\r\ncannot read item from queue");
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <StartLedTask+0x5c>)
 800087e:	f007 f95b 	bl	8007b38 <iprintf>
 8000882:	e013      	b.n	80008ac <StartLedTask+0x50>
		} else {
			printf("\r\nread item");
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <StartLedTask+0x60>)
 8000886:	f007 f957 	bl	8007b38 <iprintf>

			uint32_t value;

			if (event.button_pressed) { //If 6th bit set, button was pressed -> pause game -> display on leds
 800088a:	7a3b      	ldrb	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d003      	beq.n	8000898 <StartLedTask+0x3c>
				value = 0b1010101010101010;
 8000890:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e004      	b.n	80008a2 <StartLedTask+0x46>
			} else {
				value = 1 << event.counter;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2201      	movs	r2, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	617b      	str	r3, [r7, #20]
			}
			setleds(value);
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe6c 	bl	8000584 <setleds>
		}

		osDelay(2);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f003 feb9 	bl	8004624 <osDelay>
	for (;;) {
 80008b2:	e7d7      	b.n	8000864 <StartLedTask+0x8>
 80008b4:	20000610 	.word	0x20000610
 80008b8:	08008c20 	.word	0x08008c20
 80008bc:	08008c40 	.word	0x08008c40

080008c0 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	uint16_t counter = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	86bb      	strh	r3, [r7, #52]	; 0x34
	//uint16_t old_counter = 0;
	uint8_t old_state_a = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state_button = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	InputEvent event;
	event.button_pressed = true;
 80008d8:	2301      	movs	r3, #1
 80008da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	event.counter = LEDSTART;
 80008de:	2307      	movs	r3, #7
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	InputEvent oldevent;
	/* Infinite loop */
	for (;;) {

		uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80008e2:	2101      	movs	r1, #1
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f001 f88a 	bl	8001a00 <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80008f2:	2102      	movs	r1, #2
 80008f4:	4847      	ldr	r0, [pc, #284]	; (8000a14 <StartEncoderTask+0x154>)
 80008f6:	f001 f883 	bl	8001a00 <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint8_t button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000900:	2108      	movs	r1, #8
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f001 f87b 	bl	8001a00 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if (a != old_state_a && event.counter <= 16) {
 8000910:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000914:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000918:	429a      	cmp	r2, r3
 800091a:	d015      	beq.n	8000948 <StartEncoderTask+0x88>
 800091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091e:	2b10      	cmp	r3, #16
 8000920:	dc12      	bgt.n	8000948 <StartEncoderTask+0x88>

			if (a != b) {
 8000922:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000926:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800092a:	429a      	cmp	r2, r3
 800092c:	d006      	beq.n	800093c <StartEncoderTask+0x7c>
				if (LEDMAX > event.counter)
 800092e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000930:	2b0a      	cmp	r3, #10
 8000932:	dc09      	bgt.n	8000948 <StartEncoderTask+0x88>
					event.counter++;
 8000934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000936:	3301      	adds	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
 800093a:	e005      	b.n	8000948 <StartEncoderTask+0x88>

			} else if (LEDMIN != event.counter) {
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	2b03      	cmp	r3, #3
 8000940:	d002      	beq.n	8000948 <StartEncoderTask+0x88>
				//if(counter != 3)
				event.counter--;
 8000942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000944:	3b01      	subs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28

			}
		}

		if (old_state_button != button && button) {
 8000948:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800094c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000950:	429a      	cmp	r2, r3
 8000952:	d014      	beq.n	800097e <StartEncoderTask+0xbe>
 8000954:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000958:	2b00      	cmp	r3, #0
 800095a:	d010      	beq.n	800097e <StartEncoderTask+0xbe>
			event.button_pressed = !event.button_pressed; //Bit toggle -> XOR -> toggle 6th bit
 800095c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f083 0301 	eor.w	r3, r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			event.counter = LEDSTART;
 800097a:	2307      	movs	r3, #7
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
			//setleds(0b1010101010101010);
		}

		if (memcmp(&oldevent, &event, sizeof(event))) {
 800097e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2208      	movs	r2, #8
 8000988:	4618      	mov	r0, r3
 800098a:	f007 f81a 	bl	80079c2 <memcmp>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d02b      	beq.n	80009ec <StartEncoderTask+0x12c>

			char msg1[16];
			snprintf(msg1, sizeof(msg1), "%d\r\n", event.counter);
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	f107 000c 	add.w	r0, r7, #12
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <StartEncoderTask+0x158>)
 800099c:	2110      	movs	r1, #16
 800099e:	f007 f95d 	bl	8007c5c <sniprintf>

			HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), 1000);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fc12 	bl	80001d0 <strlen>
 80009ac:	4603      	mov	r3, r0
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f107 010c 	add.w	r1, r7, #12
 80009b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b8:	4818      	ldr	r0, [pc, #96]	; (8000a1c <StartEncoderTask+0x15c>)
 80009ba:	f002 fcf5 	bl	80033a8 <HAL_UART_Transmit>

			//uint32_t leds = 0xFFFF0000;

			//leds = leds >> counter;
			//event.counter = counter;
			osStatus_t ret = osMessageQueuePut(RotaryEncoderQueueHandle,
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <StartEncoderTask+0x160>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009c6:	230a      	movs	r3, #10
 80009c8:	2200      	movs	r2, #0
 80009ca:	f003 ff43 	bl	8004854 <osMessageQueuePut>
 80009ce:	62f8      	str	r0, [r7, #44]	; 0x2c
					&event, 0, 10);

			if (ret != osOK) {
 80009d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d005      	beq.n	80009e2 <StartEncoderTask+0x122>
				//something went wrong
				printf("\r\ncannot enqueue item %u", counter);
 80009d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009d8:	4619      	mov	r1, r3
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <StartEncoderTask+0x164>)
 80009dc:	f007 f8ac 	bl	8007b38 <iprintf>
 80009e0:	e004      	b.n	80009ec <StartEncoderTask+0x12c>
			} else {
				printf("\r\nenqueued item %u", counter);
 80009e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009e4:	4619      	mov	r1, r3
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <StartEncoderTask+0x168>)
 80009e8:	f007 f8a6 	bl	8007b38 <iprintf>
			}
		}
		old_state_a = a;
 80009ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		old_state_button = button;
 80009f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80009f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//old_counter = counter;
		memcpy(&oldevent, &event, sizeof(event));
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a08:	e883 0003 	stmia.w	r3, {r0, r1}
		osDelay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f003 fe09 	bl	8004624 <osDelay>
	for (;;) {
 8000a12:	e766      	b.n	80008e2 <StartEncoderTask+0x22>
 8000a14:	48000400 	.word	0x48000400
 8000a18:	08008c4c 	.word	0x08008c4c
 8000a1c:	20000810 	.word	0x20000810
 8000a20:	20000610 	.word	0x20000610
 8000a24:	08008c54 	.word	0x08008c54
 8000a28:	08008c70 	.word	0x08008c70

08000a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3e:	f000 fb8d 	bl	800115c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40001000 	.word	0x40001000

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fc37 	bl	800130c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_InitTick+0xe0>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a33      	ldr	r2, [pc, #204]	; (8000b8c <HAL_InitTick+0xe0>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_InitTick+0xe0>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad2:	f107 0210 	add.w	r2, r7, #16
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fe0b 	bl	80026f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d103      	bne.n	8000af4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aec:	f001 fdd8 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000af0:	6378      	str	r0, [r7, #52]	; 0x34
 8000af2:	e004      	b.n	8000afe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000af4:	f001 fdd4 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000af8:	4603      	mov	r3, r0
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <HAL_InitTick+0xe4>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b0e:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <HAL_InitTick+0xec>)
 8000b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b34:	f002 f96a 	bl	8002e0c <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11b      	bne.n	8000b7e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <HAL_InitTick+0xe8>)
 8000b48:	f002 f9c2 	bl	8002ed0 <HAL_TIM_Base_Start_IT>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d111      	bne.n	8000b7e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b5a:	2036      	movs	r0, #54	; 0x36
 8000b5c:	f000 fbf2 	bl	8001344 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b0f      	cmp	r3, #15
 8000b64:	d808      	bhi.n	8000b78 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b66:	2200      	movs	r2, #0
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2036      	movs	r0, #54	; 0x36
 8000b6c:	f000 fbce 	bl	800130c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0xf0>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e002      	b.n	8000b7e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3738      	adds	r7, #56	; 0x38
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	2000073c 	.word	0x2000073c
 8000b98:	40001000 	.word	0x40001000
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	2b10      	cmp	r3, #16
 8000bb2:	d101      	bne.n	8000bb8 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	621a      	str	r2, [r3, #32]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	2b10      	cmp	r3, #16
 8000bf2:	d101      	bne.n	8000bf8 <LL_USART_IsEnabledIT_IDLE+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <LL_USART_IsEnabledIT_IDLE+0x1a>
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <HardFault_Handler+0x4>

08000c12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <BusFault_Handler+0x4>

08000c1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <UsageFault_Handler+0x4>

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <DMA1_Channel5_IRQHandler+0x10>)
 8000c3a:	f000 fcc8 	bl	80015ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000894 	.word	0x20000894

08000c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <USART1_IRQHandler+0x60>)
 8000c50:	f002 fc3e 	bl	80034d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <USART1_IRQHandler+0x64>)
 8000c56:	f7ff ffc3 	bl	8000be0 <LL_USART_IsEnabledIT_IDLE>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01e      	beq.n	8000c9e <USART1_IRQHandler+0x56>
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <USART1_IRQHandler+0x64>)
 8000c62:	f7ff ff9d 	bl	8000ba0 <LL_USART_IsActiveFlag_IDLE>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d018      	beq.n	8000c9e <USART1_IRQHandler+0x56>
  {
	  LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <USART1_IRQHandler+0x64>)
 8000c6e:	f7ff ffaa 	bl	8000bc6 <LL_USART_ClearFlag_IDLE>
	  // Give a task notification to the UART2 Task
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
	  xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <USART1_IRQHandler+0x68>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2201      	movs	r2, #1
 8000c82:	2101      	movs	r1, #1
 8000c84:	f005 fcbe 	bl	8006604 <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <USART1_IRQHandler+0x56>
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <USART1_IRQHandler+0x6c>)
 8000c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	f3bf 8f4f 	dsb	sy
 8000c9a:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000078c 	.word	0x2000078c
 8000cac:	40013800 	.word	0x40013800
 8000cb0:	20000738 	.word	0x20000738
 8000cb4:	e000ed04 	.word	0xe000ed04

08000cb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <USART2_IRQHandler+0x10>)
 8000cbe:	f002 fc07 	bl	80034d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000810 	.word	0x20000810

08000ccc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <TIM6_DAC_IRQHandler+0x10>)
 8000cd2:	f002 f951 	bl	8002f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000073c 	.word	0x2000073c

08000ce0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e00a      	b.n	8000d08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf2:	f3af 8000 	nop.w
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf0      	blt.n	8000cf2 <_read+0x12>
  }

  return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e009      	b.n	8000d40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60ba      	str	r2, [r7, #8]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf1      	blt.n	8000d2c <_write+0x12>
  }
  return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_close>:

int _close(int file)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_isatty>:

int _isatty(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f006 fcc6 	bl	800777c <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20010000 	.word	0x20010000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	20000788 	.word	0x20000788
 8000e24:	200022b8 	.word	0x200022b8

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <MX_USART1_UART_Init+0x5c>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e90:	f002 fa3c 	bl	800330c <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f7ff fdd9 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000078c 	.word	0x2000078c
 8000ea8:	40013800 	.word	0x40013800

08000eac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART2_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ef0:	f002 fa0c 	bl	800330c <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f7ff fda9 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000810 	.word	0x20000810
 8000f08:	40004400 	.word	0x40004400

08000f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0a0      	sub	sp, #128	; 0x80
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	2254      	movs	r2, #84	; 0x54
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 fd66 	bl	80079fe <memset>
  if(uartHandle->Instance==USART1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a63      	ldr	r2, [pc, #396]	; (80010c4 <HAL_UART_MspInit+0x1b8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d169      	bne.n	8001010 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fc67 	bl	800281c <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f54:	f7ff fd7c 	bl	8000a50 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f58:	4b5b      	ldr	r3, [pc, #364]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8000f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5c:	4a5a      	ldr	r2, [pc, #360]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	6613      	str	r3, [r2, #96]	; 0x60
 8000f64:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8000f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	4a54      	ldr	r2, [pc, #336]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7c:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fbc0 	bl	800172c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fae:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_UART_MspInit+0x1c4>)
 8000fb0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fca:	4b40      	ldr	r3, [pc, #256]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fd8:	2220      	movs	r2, #32
 8000fda:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fe2:	483a      	ldr	r0, [pc, #232]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000fe4:	f000 f9bc 	bl	8001360 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000fee:	f7ff fd2f 	bl	8000a50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a35      	ldr	r2, [pc, #212]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000ff6:	671a      	str	r2, [r3, #112]	; 0x70
 8000ff8:	4a34      	ldr	r2, [pc, #208]	; (80010cc <HAL_UART_MspInit+0x1c0>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	2025      	movs	r0, #37	; 0x25
 8001004:	f000 f982 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001008:	2025      	movs	r0, #37	; 0x25
 800100a:	f000 f99b 	bl	8001344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800100e:	e055      	b.n	80010bc <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <HAL_UART_MspInit+0x1c8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d150      	bne.n	80010bc <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800101e:	2300      	movs	r3, #0
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fbf8 	bl	800281c <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001032:	f7ff fd0d 	bl	8000a50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6593      	str	r3, [r2, #88]	; 0x58
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_UART_MspInit+0x1bc>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001066:	2304      	movs	r3, #4
 8001068:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001076:	2307      	movs	r3, #7
 8001078:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f000 fb52 	bl	800172c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800108c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800109a:	2303      	movs	r3, #3
 800109c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f000 fb40 	bl	800172c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2105      	movs	r1, #5
 80010b0:	2026      	movs	r0, #38	; 0x26
 80010b2:	f000 f92b 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010b6:	2026      	movs	r0, #38	; 0x26
 80010b8:	f000 f944 	bl	8001344 <HAL_NVIC_EnableIRQ>
}
 80010bc:	bf00      	nop
 80010be:	3780      	adds	r7, #128	; 0x80
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	20000894 	.word	0x20000894
 80010d0:	40020058 	.word	0x40020058
 80010d4:	40004400 	.word	0x40004400

080010d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff fea4 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f006 fc35 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff fa7b 	bl	8000604 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800111c:	08008dfc 	.word	0x08008dfc
  ldr r2, =_sbss
 8001120:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001124:	200022b8 	.word	0x200022b8

08001128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_IRQHandler>

0800112a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f8de 	bl	80012f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	200f      	movs	r0, #15
 800113c:	f7ff fcb6 	bl	8000aac <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114c:	f7ff fc86 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	200008dc 	.word	0x200008dc

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200008dc 	.word	0x200008dc

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4c 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131e:	f7ff ff61 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001322:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	6978      	ldr	r0, [r7, #20]
 800132a:	f7ff ffb1 	bl	8001290 <NVIC_EncodePriority>
 800132e:	4602      	mov	r2, r0
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff80 	bl	800123c <__NVIC_SetPriority>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff54 	bl	8001200 <__NVIC_EnableIRQ>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e098      	b.n	80014a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <HAL_DMA_Init+0x150>)
 800137a:	429a      	cmp	r2, r3
 800137c:	d80f      	bhi.n	800139e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <HAL_DMA_Init+0x154>)
 8001386:	4413      	add	r3, r2
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_DMA_Init+0x158>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	009a      	lsls	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a48      	ldr	r2, [pc, #288]	; (80014bc <HAL_DMA_Init+0x15c>)
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
 800139c:	e00e      	b.n	80013bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <HAL_DMA_Init+0x160>)
 80013a6:	4413      	add	r3, r2
 80013a8:	4a43      	ldr	r2, [pc, #268]	; (80014b8 <HAL_DMA_Init+0x158>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	009a      	lsls	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a42      	ldr	r2, [pc, #264]	; (80014c4 <HAL_DMA_Init+0x164>)
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001416:	d039      	beq.n	800148c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_DMA_Init+0x15c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d11a      	bne.n	8001458 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_DMA_Init+0x168>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 031c 	and.w	r3, r3, #28
 800142e:	210f      	movs	r1, #15
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	4924      	ldr	r1, [pc, #144]	; (80014c8 <HAL_DMA_Init+0x168>)
 8001438:	4013      	ands	r3, r2
 800143a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_DMA_Init+0x168>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f003 031c 	and.w	r3, r3, #28
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	491d      	ldr	r1, [pc, #116]	; (80014c8 <HAL_DMA_Init+0x168>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
 8001456:	e019      	b.n	800148c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_DMA_Init+0x16c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	f003 031c 	and.w	r3, r3, #28
 8001464:	210f      	movs	r1, #15
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	4917      	ldr	r1, [pc, #92]	; (80014cc <HAL_DMA_Init+0x16c>)
 800146e:	4013      	ands	r3, r2
 8001470:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_DMA_Init+0x16c>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f003 031c 	and.w	r3, r3, #28
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	4911      	ldr	r1, [pc, #68]	; (80014cc <HAL_DMA_Init+0x16c>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40020407 	.word	0x40020407
 80014b4:	bffdfff8 	.word	0xbffdfff8
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	40020000 	.word	0x40020000
 80014c0:	bffdfbf8 	.word	0xbffdfbf8
 80014c4:	40020400 	.word	0x40020400
 80014c8:	400200a8 	.word	0x400200a8
 80014cc:	400204a8 	.word	0x400204a8

080014d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d008      	beq.n	80014fa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2204      	movs	r2, #4
 80014ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e022      	b.n	8001540 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020e 	bic.w	r2, r2, #14
 8001508:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f003 021c 	and.w	r2, r3, #28
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d005      	beq.n	8001570 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2204      	movs	r2, #4
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e029      	b.n	80015c4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 020e 	bic.w	r2, r2, #14
 800157e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f003 021c 	and.w	r2, r3, #28
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	4798      	blx	r3
    }
  }
  return status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f003 031c 	and.w	r3, r3, #28
 80015ee:	2204      	movs	r2, #4
 80015f0:	409a      	lsls	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d026      	beq.n	8001648 <HAL_DMA_IRQHandler+0x7a>
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d021      	beq.n	8001648 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	2b00      	cmp	r3, #0
 8001610:	d107      	bne.n	8001622 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0204 	bic.w	r2, r2, #4
 8001620:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f003 021c 	and.w	r2, r3, #28
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2104      	movs	r1, #4
 8001630:	fa01 f202 	lsl.w	r2, r1, r2
 8001634:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	2b00      	cmp	r3, #0
 800163c:	d071      	beq.n	8001722 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001646:	e06c      	b.n	8001722 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 031c 	and.w	r3, r3, #28
 8001650:	2202      	movs	r2, #2
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02e      	beq.n	80016ba <HAL_DMA_IRQHandler+0xec>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d029      	beq.n	80016ba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10b      	bne.n	800168c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 020a 	bic.w	r2, r2, #10
 8001682:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f003 021c 	and.w	r2, r3, #28
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	2102      	movs	r1, #2
 800169a:	fa01 f202 	lsl.w	r2, r1, r2
 800169e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d038      	beq.n	8001722 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016b8:	e033      	b.n	8001722 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f003 031c 	and.w	r3, r3, #28
 80016c2:	2208      	movs	r2, #8
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d02a      	beq.n	8001724 <HAL_DMA_IRQHandler+0x156>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d025      	beq.n	8001724 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 020e 	bic.w	r2, r2, #14
 80016e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	f003 021c 	and.w	r2, r3, #28
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2101      	movs	r1, #1
 80016f6:	fa01 f202 	lsl.w	r2, r1, r2
 80016fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001722:	bf00      	nop
 8001724:	bf00      	nop
}
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e148      	b.n	80019ce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 813a 	beq.w	80019c8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d005      	beq.n	800176c <HAL_GPIO_Init+0x40>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d130      	bne.n	80017ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a2:	2201      	movs	r2, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 0201 	and.w	r2, r3, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d017      	beq.n	800180a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d123      	bne.n	800185e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	6939      	ldr	r1, [r7, #16]
 800185a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0203 	and.w	r2, r3, #3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8094 	beq.w	80019c8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a0:	4b52      	ldr	r3, [pc, #328]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	4a51      	ldr	r2, [pc, #324]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6613      	str	r3, [r2, #96]	; 0x60
 80018ac:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b8:	4a4d      	ldr	r2, [pc, #308]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1d4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a43      	ldr	r2, [pc, #268]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1d0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1cc>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e004      	b.n	8001902 <HAL_GPIO_Init+0x1d6>
 80018f8:	2307      	movs	r3, #7
 80018fa:	e002      	b.n	8001902 <HAL_GPIO_Init+0x1d6>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_GPIO_Init+0x1d6>
 8001900:	2300      	movs	r3, #0
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	f002 0203 	and.w	r2, r2, #3
 8001908:	0092      	lsls	r2, r2, #2
 800190a:	4093      	lsls	r3, r2
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001912:	4937      	ldr	r1, [pc, #220]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001998:	4a18      	ldr	r2, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c2:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f47f aeaf 	bne.w	800173c <HAL_GPIO_Init+0x10>
  }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000

08001a80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000

08001a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aaa:	d130      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab8:	d038      	beq.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2232      	movs	r2, #50	; 0x32
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0c9b      	lsrs	r3, r3, #18
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae0:	e002      	b.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af4:	d102      	bne.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f2      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d110      	bne.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e00f      	b.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d007      	beq.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b24:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	20000000 	.word	0x20000000
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f000 bc02 	b.w	8002360 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5c:	4b96      	ldr	r3, [pc, #600]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b66:	4b94      	ldr	r3, [pc, #592]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80e4 	beq.w	8001d46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4c>
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	f040 808b 	bne.w	8001ca2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	f040 8087 	bne.w	8001ca2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b94:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x64>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e3d9      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1a      	ldr	r2, [r3, #32]
 8001bb0:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x7e>
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc4:	e005      	b.n	8001bd2 <HAL_RCC_OscConfig+0x8a>
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d223      	bcs.n	8001c1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fdbe 	bl	800275c <RCC_SetFlashLatencyFromMSIRange>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e3ba      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a72      	ldr	r2, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b70      	ldr	r3, [pc, #448]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	496d      	ldr	r1, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c08:	4b6b      	ldr	r3, [pc, #428]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	4968      	ldr	r1, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e025      	b.n	8001c6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1e:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a65      	ldr	r2, [pc, #404]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4960      	ldr	r1, [pc, #384]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	495b      	ldr	r1, [pc, #364]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fd7e 	bl	800275c <RCC_SetFlashLatencyFromMSIRange>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e37a      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c6a:	f000 fc81 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	4950      	ldr	r1, [pc, #320]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a4e      	ldr	r2, [pc, #312]	; (8001dc0 <HAL_RCC_OscConfig+0x278>)
 8001c88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ff0c 	bl	8000aac <HAL_InitTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d052      	beq.n	8001d44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	e35e      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d032      	beq.n	8001d10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001caa:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fa65 	bl	8001184 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fa61 	bl	8001184 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e347      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd0:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4930      	ldr	r1, [pc, #192]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	492b      	ldr	r1, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
 8001d0e:	e01a      	b.n	8001d46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a28      	ldr	r2, [pc, #160]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fa32 	bl	8001184 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d24:	f7ff fa2e 	bl	8001184 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e314      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1dc>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d073      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_OscConfig+0x21c>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d10e      	bne.n	8001d7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d063      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d15f      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e2f1      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x24c>
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e025      	b.n	8001de0 <HAL_RCC_OscConfig+0x298>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d9c:	d114      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x280>
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a02      	ldr	r2, [pc, #8]	; (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e013      	b.n	8001de0 <HAL_RCC_OscConfig+0x298>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08008d0c 	.word	0x08008d0c
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004
 8001dc8:	4ba0      	ldr	r3, [pc, #640]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a9f      	ldr	r2, [pc, #636]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b9d      	ldr	r3, [pc, #628]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a9c      	ldr	r2, [pc, #624]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f9cc 	bl	8001184 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f9c8 	bl	8001184 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e2ae      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2a8>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f9b8 	bl	8001184 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff f9b4 	bl	8001184 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e29a      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d0>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d060      	beq.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x310>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d116      	bne.n	8001e86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e58:	4b7c      	ldr	r3, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x328>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e277      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	4973      	ldr	r1, [pc, #460]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	e040      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d023      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8e:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f973 	bl	8001184 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff f96f 	bl	8001184 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e255      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	495f      	ldr	r1, [pc, #380]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e018      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5c      	ldr	r2, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f94f 	bl	8001184 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff f94b 	bl	8001184 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e231      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff f92a 	bl	8001184 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff f926 	bl	8001184 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e20c      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3ec>
 8001f54:	e01b      	b.n	8001f8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff f90d 	bl	8001184 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f909 	bl	8001184 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1ef      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f80:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ef      	bne.n	8001f6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80a6 	beq.w	80020e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a26      	ldr	r2, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb8:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_RCC_OscConfig+0x508>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d118      	bne.n	8002006 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_OscConfig+0x508>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x508>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f8d0 	bl	8001184 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7ff f8cc 	bl	8001184 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1b2      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_RCC_OscConfig+0x508>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d108      	bne.n	8002020 <HAL_RCC_OscConfig+0x4d8>
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800201e:	e029      	b.n	8002074 <HAL_RCC_OscConfig+0x52c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d115      	bne.n	8002054 <HAL_RCC_OscConfig+0x50c>
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_RCC_OscConfig+0x504>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RCC_OscConfig+0x504>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	4a03      	ldr	r2, [pc, #12]	; (800204c <HAL_RCC_OscConfig+0x504>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x52c>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	4b9a      	ldr	r3, [pc, #616]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a99      	ldr	r2, [pc, #612]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	4b96      	ldr	r3, [pc, #600]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a95      	ldr	r2, [pc, #596]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d016      	beq.n	80020aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff f882 	bl	8001184 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7ff f87e 	bl	8001184 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e162      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209a:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ed      	beq.n	8002084 <HAL_RCC_OscConfig+0x53c>
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7ff f86b 	bl	8001184 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff f867 	bl	8001184 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e14b      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c8:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ed      	bne.n	80020b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4b78      	ldr	r3, [pc, #480]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	4a77      	ldr	r2, [pc, #476]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 80020e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d03c      	beq.n	800216e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01c      	beq.n	8002136 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020fc:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 80020fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002102:	4a6f      	ldr	r2, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7ff f83a 	bl	8001184 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002114:	f7ff f836 	bl	8001184 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e11c      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002126:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ef      	beq.n	8002114 <HAL_RCC_OscConfig+0x5cc>
 8002134:	e01b      	b.n	800216e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002136:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800213c:	4a60      	ldr	r2, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7ff f81d 	bl	8001184 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214e:	f7ff f819 	bl	8001184 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0ff      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002160:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ef      	bne.n	800214e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80f3 	beq.w	800235e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	2b02      	cmp	r3, #2
 800217e:	f040 80c9 	bne.w	8002314 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002182:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0203 	and.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	429a      	cmp	r2, r3
 8002194:	d12c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	3b01      	subs	r3, #1
 80021a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d123      	bne.n	80021f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d11b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d113      	bne.n	80021f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d109      	bne.n	80021f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	3b01      	subs	r3, #1
 80021ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d06b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d062      	beq.n	80022bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021f6:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0ac      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800220c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002210:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002212:	f7fe ffb7 	bl	8001184 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe ffb3 	bl	8001184 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e099      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_OscConfig+0x77c>)
 800223e:	4013      	ands	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002248:	3a01      	subs	r2, #1
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002252:	0212      	lsls	r2, r2, #8
 8002254:	4311      	orrs	r1, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800225a:	0852      	lsrs	r2, r2, #1
 800225c:	3a01      	subs	r2, #1
 800225e:	0552      	lsls	r2, r2, #21
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002266:	0852      	lsrs	r2, r2, #1
 8002268:	3a01      	subs	r2, #1
 800226a:	0652      	lsls	r2, r2, #25
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002272:	06d2      	lsls	r2, r2, #27
 8002274:	430a      	orrs	r2, r1
 8002276:	4912      	ldr	r1, [pc, #72]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002278:	4313      	orrs	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002294:	f7fe ff76 	bl	8001184 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe ff72 	bl	8001184 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e058      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_RCC_OscConfig+0x778>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ba:	e050      	b.n	800235e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e04f      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d144      	bne.n	800235e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a23      	ldr	r2, [pc, #140]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a20      	ldr	r2, [pc, #128]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022ec:	f7fe ff4a 	bl	8001184 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ff46 	bl	8001184 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e02c      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x7ac>
 8002312:	e024      	b.n	800235e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d01f      	beq.n	800235a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 8002320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe ff2d 	bl	8001184 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe ff29 	bl	8001184 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e00f      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	4905      	ldr	r1, [pc, #20]	; (8002368 <HAL_RCC_OscConfig+0x820>)
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_OscConfig+0x824>)
 8002354:	4013      	ands	r3, r2
 8002356:	60cb      	str	r3, [r1, #12]
 8002358:	e001      	b.n	800235e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	feeefffc 	.word	0xfeeefffc

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0e7      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d910      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b72      	ldr	r3, [pc, #456]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 0207 	bic.w	r2, r3, #7
 800239a:	4970      	ldr	r1, [pc, #448]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b6e      	ldr	r3, [pc, #440]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0cf      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b66      	ldr	r3, [pc, #408]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d908      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4960      	ldr	r1, [pc, #384]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d04c      	beq.n	8002488 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f6:	4b5a      	ldr	r3, [pc, #360]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d121      	bne.n	8002446 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0a6      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240e:	4b54      	ldr	r3, [pc, #336]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d115      	bne.n	8002446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e09a      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002426:	4b4e      	ldr	r3, [pc, #312]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e08e      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002436:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e086      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4943      	ldr	r1, [pc, #268]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002458:	f7fe fe94 	bl	8001184 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe fe90 	bl	8001184 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e06e      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d208      	bcs.n	80024b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	492b      	ldr	r1, [pc, #172]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d210      	bcs.n	80024e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c4:	4b25      	ldr	r3, [pc, #148]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 0207 	bic.w	r2, r3, #7
 80024cc:	4923      	ldr	r1, [pc, #140]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_RCC_ClockConfig+0x1ec>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e036      	b.n	8002554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4918      	ldr	r1, [pc, #96]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4910      	ldr	r1, [pc, #64]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002524:	f000 f824 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	490b      	ldr	r1, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x1f4>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
 8002540:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1f8>)
 8002542:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1fc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe faaf 	bl	8000aac <HAL_InitTick>
 800254e:	4603      	mov	r3, r0
 8002550:	72fb      	strb	r3, [r7, #11]

  return status;
 8002552:	7afb      	ldrb	r3, [r7, #11]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40022000 	.word	0x40022000
 8002560:	40021000 	.word	0x40021000
 8002564:	08008d0c 	.word	0x08008d0c
 8002568:	20000000 	.word	0x20000000
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d121      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d11e      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e005      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025cc:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10d      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d102      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e004      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCC_GetSysClockFreq+0x114>)
 80025f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d134      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d003      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0xa6>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d003      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xac>
 8002614:	e005      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_GetSysClockFreq+0x110>)
 8002618:	617b      	str	r3, [r7, #20]
      break;
 800261a:	e005      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_GetSysClockFreq+0x114>)
 800261e:	617b      	str	r3, [r7, #20]
      break;
 8002620:	e002      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	617b      	str	r3, [r7, #20]
      break;
 8002626:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	3301      	adds	r3, #1
 8002634:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	fb03 f202 	mul.w	r2, r3, r2
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	0e5b      	lsrs	r3, r3, #25
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	3301      	adds	r3, #1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002668:	69bb      	ldr	r3, [r7, #24]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	08008d24 	.word	0x08008d24
 8002680:	00f42400 	.word	0x00f42400
 8002684:	007a1200 	.word	0x007a1200

08002688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	08008d1c 	.word	0x08008d1c

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d0:	f7ff ffda 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08008d1c 	.word	0x08008d1c

080026f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	220f      	movs	r2, #15
 8002706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_RCC_GetClockConfig+0x60>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0207 	and.w	r2, r3, #7
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	601a      	str	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	40022000 	.word	0x40022000

0800275c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002774:	f7ff f984 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 8002778:	6178      	str	r0, [r7, #20]
 800277a:	e014      	b.n	80027a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002780:	4a24      	ldr	r2, [pc, #144]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	6593      	str	r3, [r2, #88]	; 0x58
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002794:	f7ff f974 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 8002798:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ac:	d10b      	bne.n	80027c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	d919      	bls.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2ba0      	cmp	r3, #160	; 0xa0
 80027b8:	d902      	bls.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027ba:	2302      	movs	r3, #2
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e013      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027c0:	2301      	movs	r3, #1
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	e010      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d902      	bls.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027cc:	2303      	movs	r3, #3
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	e00a      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b80      	cmp	r3, #128	; 0x80
 80027d6:	d102      	bne.n	80027de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d8:	2302      	movs	r3, #2
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	e004      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b70      	cmp	r3, #112	; 0x70
 80027e2:	d101      	bne.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e4:	2301      	movs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 0207 	bic.w	r2, r3, #7
 80027f0:	4909      	ldr	r1, [pc, #36]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	429a      	cmp	r2, r3
 8002804:	d001      	beq.n	800280a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	40022000 	.word	0x40022000

0800281c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002824:	2300      	movs	r3, #0
 8002826:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002828:	2300      	movs	r3, #0
 800282a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002834:	2b00      	cmp	r3, #0
 8002836:	d031      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002840:	d01a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002842:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002846:	d814      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800284c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002850:	d10f      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002852:	4b5d      	ldr	r3, [pc, #372]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4a5c      	ldr	r2, [pc, #368]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800285e:	e00c      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f9de 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002870:	e003      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	74fb      	strb	r3, [r7, #19]
      break;
 8002876:	e000      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002880:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	494e      	ldr	r1, [pc, #312]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002896:	e001      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 809e 	beq.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ae:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	4a3f      	ldr	r2, [pc, #252]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6593      	str	r3, [r2, #88]	; 0x58
 80028d0:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e0:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a39      	ldr	r2, [pc, #228]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fc4a 	bl	8001184 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028f2:	e009      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe fc46 	bl	8001184 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d902      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	74fb      	strb	r3, [r7, #19]
        break;
 8002906:	e005      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d15a      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800291a:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002924:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01e      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	429a      	cmp	r2, r3
 8002934:	d019      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002940:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002962:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fc06 	bl	8001184 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297a:	e00b      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fc02 	bl	8001184 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d902      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	74fb      	strb	r3, [r7, #19]
            break;
 8002992:	e006      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0ec      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029be:	e009      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
 80029c4:	e006      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d4:	7c7b      	ldrb	r3, [r7, #17]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b8a      	ldr	r3, [pc, #552]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	4a89      	ldr	r2, [pc, #548]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f2:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f023 0203 	bic.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4980      	ldr	r1, [pc, #512]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a14:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 020c 	bic.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	4978      	ldr	r1, [pc, #480]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a36:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	496f      	ldr	r1, [pc, #444]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a58:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	4967      	ldr	r1, [pc, #412]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a7a:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	495e      	ldr	r1, [pc, #376]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	4956      	ldr	r1, [pc, #344]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002abe:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d028      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ae0:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4945      	ldr	r1, [pc, #276]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002afe:	d106      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b00:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a3f      	ldr	r2, [pc, #252]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0a:	60d3      	str	r3, [r2, #12]
 8002b0c:	e011      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f882 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	492d      	ldr	r1, [pc, #180]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4a28      	ldr	r2, [pc, #160]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b68:	60d3      	str	r3, [r2, #12]
 8002b6a:	e011      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f853 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002baa:	4916      	ldr	r1, [pc, #88]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f830 	bl	8002c28 <RCCEx_PLLSAI1_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	4904      	ldr	r1, [pc, #16]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6013      	str	r3, [r2, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c36:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d018      	beq.n	8002c74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c42:	4b71      	ldr	r3, [pc, #452]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0203 	and.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10d      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
       ||
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c5a:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
       ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d047      	beq.n	8002cfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	e044      	b.n	8002cfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d018      	beq.n	8002cae <RCCEx_PLLSAI1_Config+0x86>
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d825      	bhi.n	8002ccc <RCCEx_PLLSAI1_Config+0xa4>
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d002      	beq.n	8002c8a <RCCEx_PLLSAI1_Config+0x62>
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d009      	beq.n	8002c9c <RCCEx_PLLSAI1_Config+0x74>
 8002c88:	e020      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11d      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9a:	e01a      	b.n	8002cd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c9c:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cac:	e013      	b.n	8002cd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cae:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cba:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cca:	e006      	b.n	8002cda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e004      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ce2:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	4943      	ldr	r1, [pc, #268]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d17c      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d04:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3f      	ldr	r2, [pc, #252]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe fa38 	bl	8001184 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d16:	e009      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d18:	f7fe fa34 	bl	8001184 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	73fb      	strb	r3, [r7, #15]
        break;
 8002d2a:	e005      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ef      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d15f      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d110      	bne.n	8002d66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6892      	ldr	r2, [r2, #8]
 8002d54:	0211      	lsls	r1, r2, #8
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68d2      	ldr	r2, [r2, #12]
 8002d5a:	06d2      	lsls	r2, r2, #27
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	492a      	ldr	r1, [pc, #168]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	610b      	str	r3, [r1, #16]
 8002d64:	e027      	b.n	8002db6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d112      	bne.n	8002d92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6892      	ldr	r2, [r2, #8]
 8002d7c:	0211      	lsls	r1, r2, #8
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6912      	ldr	r2, [r2, #16]
 8002d82:	0852      	lsrs	r2, r2, #1
 8002d84:	3a01      	subs	r2, #1
 8002d86:	0552      	lsls	r2, r2, #21
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	491f      	ldr	r1, [pc, #124]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	610b      	str	r3, [r1, #16]
 8002d90:	e011      	b.n	8002db6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	0211      	lsls	r1, r2, #8
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6952      	ldr	r2, [r2, #20]
 8002da8:	0852      	lsrs	r2, r2, #1
 8002daa:	3a01      	subs	r2, #1
 8002dac:	0652      	lsls	r2, r2, #25
 8002dae:	430a      	orrs	r2, r1
 8002db0:	4915      	ldr	r1, [pc, #84]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe f9df 	bl	8001184 <HAL_GetTick>
 8002dc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dc8:	e009      	b.n	8002dde <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dca:	f7fe f9db 	bl	8001184 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d902      	bls.n	8002dde <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	73fb      	strb	r3, [r7, #15]
          break;
 8002ddc:	e005      	b.n	8002dea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ef      	beq.n	8002dca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4903      	ldr	r1, [pc, #12]	; (8002e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000

08002e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e049      	b.n	8002eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f841 	bl	8002eba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f000 f9dc 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d001      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e03b      	b.n	8002f60 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_TIM_Base_Start_IT+0x9c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_TIM_Base_Start_IT+0x4e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f12:	d004      	beq.n	8002f1e <HAL_TIM_Base_Start_IT+0x4e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d115      	bne.n	8002f4a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_TIM_Base_Start_IT+0xa4>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d015      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x8c>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d011      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	e008      	b.n	8002f5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e000      	b.n	8002f5e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40014000 	.word	0x40014000
 8002f74:	00010007 	.word	0x00010007

08002f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d122      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d11b      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0202 	mvn.w	r2, #2
 8002fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f905 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8f7 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f908 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d122      	bne.n	8003028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d11b      	bne.n	8003028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0204 	mvn.w	r2, #4
 8002ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8db 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8cd 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8de 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b08      	cmp	r3, #8
 8003034:	d122      	bne.n	800307c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d11b      	bne.n	800307c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0208 	mvn.w	r2, #8
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2204      	movs	r2, #4
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8b1 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8a3 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8b4 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b10      	cmp	r3, #16
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0210 	mvn.w	r2, #16
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2208      	movs	r2, #8
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f887 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f879 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f88a 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0201 	mvn.w	r2, #1
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fc98 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8de 	bl	80032e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003136:	d10e      	bne.n	8003156 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b80      	cmp	r3, #128	; 0x80
 8003144:	d107      	bne.n	8003156 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800314e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f8d1 	bl	80032f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d10e      	bne.n	8003182 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d107      	bne.n	8003182 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800317a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f838 	bl	80031f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b20      	cmp	r3, #32
 800318e:	d10e      	bne.n	80031ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	d107      	bne.n	80031ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f06f 0220 	mvn.w	r2, #32
 80031a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f891 	bl	80032d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <TIM_Base_SetConfig+0xbc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0x20>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d108      	bne.n	800323a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <TIM_Base_SetConfig+0xbc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00b      	beq.n	800325a <TIM_Base_SetConfig+0x52>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d007      	beq.n	800325a <TIM_Base_SetConfig+0x52>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <TIM_Base_SetConfig+0xc0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_Base_SetConfig+0x52>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <TIM_Base_SetConfig+0xc4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <TIM_Base_SetConfig+0xbc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0xa0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <TIM_Base_SetConfig+0xc0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0xa0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <TIM_Base_SetConfig+0xc4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d103      	bne.n	80032b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400

080032d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e040      	b.n	80033a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fdec 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fbc2 	bl	8003ad4 <UART_SetConfig>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fde2 	bl	8003f2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fe69 	bl	8004070 <UART_CheckIdleState>
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033bc:	2b20      	cmp	r3, #32
 80033be:	f040 8082 	bne.w	80034c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Transmit+0x26>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07a      	b.n	80034c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Transmit+0x38>
 80033dc:	2302      	movs	r3, #2
 80033de:	e073      	b.n	80034c8 <HAL_UART_Transmit+0x120>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2221      	movs	r2, #33	; 0x21
 80033f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f6:	f7fd fec5 	bl	8001184 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d108      	bne.n	8003428 <HAL_UART_Transmit+0x80>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003438:	e02d      	b.n	8003496 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fe5c 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e039      	b.n	80034c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003466:	b292      	uxth	r2, r2
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	3302      	adds	r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	e008      	b.n	8003484 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b292      	uxth	r2, r2
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3301      	adds	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1cb      	bne.n	800343a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fe28 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e005      	b.n	80034c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b0ba      	sub	sp, #232	; 0xe8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80034fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80034fe:	4013      	ands	r3, r2
 8003500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d115      	bne.n	8003538 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00f      	beq.n	8003538 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 82a6 	beq.w	8003a7a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
      }
      return;
 8003536:	e2a0      	b.n	8003a7a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8117 	beq.w	8003770 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800354e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003552:	4b85      	ldr	r3, [pc, #532]	; (8003768 <HAL_UART_IRQHandler+0x298>)
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 810a 	beq.w	8003770 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <HAL_UART_IRQHandler+0xbc>
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800358c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d011      	beq.n	80035bc <HAL_UART_IRQHandler+0xec>
 8003598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2202      	movs	r2, #2
 80035aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b2:	f043 0204 	orr.w	r2, r3, #4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d011      	beq.n	80035ec <HAL_UART_IRQHandler+0x11c>
 80035c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e2:	f043 0202 	orr.w	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003608:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2208      	movs	r2, #8
 8003616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800361e:	f043 0208 	orr.w	r2, r3, #8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <HAL_UART_IRQHandler+0x18a>
 8003634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00c      	beq.n	800365a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 820c 	beq.w	8003a7e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d005      	beq.n	80036b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d04f      	beq.n	8003752 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fde9 	bl	800428a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d141      	bne.n	800374a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3308      	adds	r3, #8
 80036cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800370a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1d9      	bne.n	80036c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	2b00      	cmp	r3, #0
 8003718:	d013      	beq.n	8003742 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a13      	ldr	r2, [pc, #76]	; (800376c <HAL_UART_IRQHandler+0x29c>)
 8003720:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd ff10 	bl	800154c <HAL_DMA_Abort_IT>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800373c:	4610      	mov	r0, r2
 800373e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	e00f      	b.n	8003762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9b0 	bl	8003aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	e00b      	b.n	8003762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9ac 	bl	8003aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	e007      	b.n	8003762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f9a8 	bl	8003aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003760:	e18d      	b.n	8003a7e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003762:	bf00      	nop
    return;
 8003764:	e18b      	b.n	8003a7e <HAL_UART_IRQHandler+0x5ae>
 8003766:	bf00      	nop
 8003768:	04000120 	.word	0x04000120
 800376c:	08004351 	.word	0x08004351

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003774:	2b01      	cmp	r3, #1
 8003776:	f040 8146 	bne.w	8003a06 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 813f 	beq.w	8003a06 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8138 	beq.w	8003a06 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2210      	movs	r2, #16
 800379c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	f040 80b4 	bne.w	8003916 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 815f 	beq.w	8003a82 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ce:	429a      	cmp	r2, r3
 80037d0:	f080 8157 	bcs.w	8003a82 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 8085 	bne.w	80038fa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800381a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800381e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1da      	bne.n	80037f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3308      	adds	r3, #8
 8003840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800384a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3308      	adds	r3, #8
 800385a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800385e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e1      	bne.n	800383a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3308      	adds	r3, #8
 8003896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800389a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800389c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e3      	bne.n	8003876 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ca:	f023 0310 	bic.w	r3, r3, #16
 80038ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80038de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e4      	bne.n	80038ba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fdeb 	bl	80014d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003906:	b29b      	uxth	r3, r3
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8d4 	bl	8003abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003914:	e0b5      	b.n	8003a82 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003922:	b29b      	uxth	r3, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80a7 	beq.w	8003a86 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80a2 	beq.w	8003a86 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
 8003966:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800396a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e4      	bne.n	8003942 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	623b      	str	r3, [r7, #32]
   return(result);
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800399c:	633a      	str	r2, [r7, #48]	; 0x30
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e3      	bne.n	8003978 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0310 	bic.w	r3, r3, #16
 80039d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	617b      	str	r3, [r7, #20]
   return(result);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e4      	bne.n	80039c2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f85c 	bl	8003abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a04:	e03f      	b.n	8003a86 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <HAL_UART_IRQHandler+0x560>
 8003a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fcd1 	bl	80043d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a2e:	e02d      	b.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00e      	beq.n	8003a5a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01c      	beq.n	8003a8a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
    }
    return;
 8003a58:	e017      	b.n	8003a8a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fc82 	bl	800437c <UART_EndTransmit_IT>
    return;
 8003a78:	e008      	b.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a7a:	bf00      	nop
 8003a7c:	e006      	b.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003a7e:	bf00      	nop
 8003a80:	e004      	b.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a82:	bf00      	nop
 8003a84:	e002      	b.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003a8a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a8c:	37e8      	adds	r7, #232	; 0xe8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop

08003a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b08a      	sub	sp, #40	; 0x28
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4bb4      	ldr	r3, [pc, #720]	; (8003dd4 <UART_SetConfig+0x300>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4aa9      	ldr	r2, [pc, #676]	; (8003dd8 <UART_SetConfig+0x304>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	430a      	orrs	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4aa0      	ldr	r2, [pc, #640]	; (8003ddc <UART_SetConfig+0x308>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d126      	bne.n	8003bac <UART_SetConfig+0xd8>
 8003b5e:	4ba0      	ldr	r3, [pc, #640]	; (8003de0 <UART_SetConfig+0x30c>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d81b      	bhi.n	8003ba4 <UART_SetConfig+0xd0>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0xa0>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b95 	.word	0x08003b95
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b9d 	.word	0x08003b9d
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e080      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e07c      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e078      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e074      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e070      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a8c      	ldr	r2, [pc, #560]	; (8003de4 <UART_SetConfig+0x310>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d138      	bne.n	8003c28 <UART_SetConfig+0x154>
 8003bb6:	4b8a      	ldr	r3, [pc, #552]	; (8003de0 <UART_SetConfig+0x30c>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d82d      	bhi.n	8003c20 <UART_SetConfig+0x14c>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0xf8>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003c21 	.word	0x08003c21
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c21 	.word	0x08003c21
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c09 	.word	0x08003c09
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e042      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e03e      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e03a      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e036      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e032      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <UART_SetConfig+0x304>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12a      	bne.n	8003c88 <UART_SetConfig+0x1b4>
 8003c32:	4b6b      	ldr	r3, [pc, #428]	; (8003de0 <UART_SetConfig+0x30c>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c40:	d01a      	beq.n	8003c78 <UART_SetConfig+0x1a4>
 8003c42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c46:	d81b      	bhi.n	8003c80 <UART_SetConfig+0x1ac>
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4c:	d00c      	beq.n	8003c68 <UART_SetConfig+0x194>
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c52:	d815      	bhi.n	8003c80 <UART_SetConfig+0x1ac>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <UART_SetConfig+0x18c>
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d008      	beq.n	8003c70 <UART_SetConfig+0x19c>
 8003c5e:	e00f      	b.n	8003c80 <UART_SetConfig+0x1ac>
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e012      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e00e      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c70:	2304      	movs	r3, #4
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e00a      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e006      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e002      	b.n	8003c8e <UART_SetConfig+0x1ba>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a51      	ldr	r2, [pc, #324]	; (8003dd8 <UART_SetConfig+0x304>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d17a      	bne.n	8003d8e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d824      	bhi.n	8003cea <UART_SetConfig+0x216>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x1d4>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003cdb 	.word	0x08003cdb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003ceb 	.word	0x08003ceb
 8003cc8:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fce8 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <UART_SetConfig+0x314>)
 8003cd6:	61fb      	str	r3, [r7, #28]
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7fe fc49 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8003cde:	61f8      	str	r0, [r7, #28]
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	61fb      	str	r3, [r7, #28]
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8107 	beq.w	8003f0c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d305      	bcc.n	8003d1a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d903      	bls.n	8003d22 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d20:	e0f4      	b.n	8003f0c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2200      	movs	r2, #0
 8003d26:	461c      	mov	r4, r3
 8003d28:	4615      	mov	r5, r2
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	022b      	lsls	r3, r5, #8
 8003d34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d38:	0222      	lsls	r2, r4, #8
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	6849      	ldr	r1, [r1, #4]
 8003d3e:	0849      	lsrs	r1, r1, #1
 8003d40:	2000      	movs	r0, #0
 8003d42:	4688      	mov	r8, r1
 8003d44:	4681      	mov	r9, r0
 8003d46:	eb12 0a08 	adds.w	sl, r2, r8
 8003d4a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d5c:	4650      	mov	r0, sl
 8003d5e:	4659      	mov	r1, fp
 8003d60:	f7fc fa8e 	bl	8000280 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d72:	d308      	bcc.n	8003d86 <UART_SetConfig+0x2b2>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7a:	d204      	bcs.n	8003d86 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	60da      	str	r2, [r3, #12]
 8003d84:	e0c2      	b.n	8003f0c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d8c:	e0be      	b.n	8003f0c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d96:	d16a      	bne.n	8003e6e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d834      	bhi.n	8003e0a <UART_SetConfig+0x336>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x2d4>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003ded 	.word	0x08003ded
 8003db0:	08003df5 	.word	0x08003df5
 8003db4:	08003e0b 	.word	0x08003e0b
 8003db8:	08003dfb 	.word	0x08003dfb
 8003dbc:	08003e0b 	.word	0x08003e0b
 8003dc0:	08003e0b 	.word	0x08003e0b
 8003dc4:	08003e0b 	.word	0x08003e0b
 8003dc8:	08003e03 	.word	0x08003e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe fc68 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	61f8      	str	r0, [r7, #28]
        break;
 8003dd2:	e020      	b.n	8003e16 <UART_SetConfig+0x342>
 8003dd4:	efff69f3 	.word	0xefff69f3
 8003dd8:	40008000 	.word	0x40008000
 8003ddc:	40013800 	.word	0x40013800
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40004400 	.word	0x40004400
 8003de8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7fe fc6e 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003df0:	61f8      	str	r0, [r7, #28]
        break;
 8003df2:	e010      	b.n	8003e16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df4:	4b4c      	ldr	r3, [pc, #304]	; (8003f28 <UART_SetConfig+0x454>)
 8003df6:	61fb      	str	r3, [r7, #28]
        break;
 8003df8:	e00d      	b.n	8003e16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfa:	f7fe fbb9 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8003dfe:	61f8      	str	r0, [r7, #28]
        break;
 8003e00:	e009      	b.n	8003e16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	61fb      	str	r3, [r7, #28]
        break;
 8003e08:	e005      	b.n	8003e16 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d077      	beq.n	8003f0c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005a      	lsls	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	441a      	add	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d916      	bls.n	8003e66 <UART_SetConfig+0x392>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3e:	d212      	bcs.n	8003e66 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f023 030f 	bic.w	r3, r3, #15
 8003e48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	8afb      	ldrh	r3, [r7, #22]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	8afa      	ldrh	r2, [r7, #22]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	e052      	b.n	8003f0c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e6c:	e04e      	b.n	8003f0c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d827      	bhi.n	8003ec6 <UART_SetConfig+0x3f2>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <UART_SetConfig+0x3a8>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003ea9 	.word	0x08003ea9
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003ec7 	.word	0x08003ec7
 8003e8c:	08003eb7 	.word	0x08003eb7
 8003e90:	08003ec7 	.word	0x08003ec7
 8003e94:	08003ec7 	.word	0x08003ec7
 8003e98:	08003ec7 	.word	0x08003ec7
 8003e9c:	08003ebf 	.word	0x08003ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f7fe fbfe 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	61f8      	str	r0, [r7, #28]
        break;
 8003ea6:	e014      	b.n	8003ed2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea8:	f7fe fc10 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003eac:	61f8      	str	r0, [r7, #28]
        break;
 8003eae:	e010      	b.n	8003ed2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <UART_SetConfig+0x454>)
 8003eb2:	61fb      	str	r3, [r7, #28]
        break;
 8003eb4:	e00d      	b.n	8003ed2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb6:	f7fe fb5b 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8003eba:	61f8      	str	r0, [r7, #28]
        break;
 8003ebc:	e009      	b.n	8003ed2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec2:	61fb      	str	r3, [r7, #28]
        break;
 8003ec4:	e005      	b.n	8003ed2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ed0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d019      	beq.n	8003f0c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	085a      	lsrs	r2, r3, #1
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	441a      	add	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	d909      	bls.n	8003f06 <UART_SetConfig+0x432>
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d205      	bcs.n	8003f06 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	e002      	b.n	8003f0c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	; 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f26:	bf00      	nop
 8003f28:	00f42400 	.word	0x00f42400

08003f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01a      	beq.n	8004042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402a:	d10a      	bne.n	8004042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004080:	f7fd f880 	bl	8001184 <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b08      	cmp	r3, #8
 8004092:	d10e      	bne.n	80040b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f82d 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e023      	b.n	80040fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d10e      	bne.n	80040de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f817 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e00d      	b.n	80040fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b09c      	sub	sp, #112	; 0x70
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004112:	e0a5      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411a:	f000 80a1 	beq.w	8004260 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411e:	f7fd f831 	bl	8001184 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800412a:	429a      	cmp	r2, r3
 800412c:	d302      	bcc.n	8004134 <UART_WaitOnFlagUntilTimeout+0x32>
 800412e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004130:	2b00      	cmp	r3, #0
 8004132:	d13e      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004148:	667b      	str	r3, [r7, #100]	; 0x64
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004154:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004158:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e6      	bne.n	8004134 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004186:	64ba      	str	r2, [r7, #72]	; 0x48
 8004188:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800418c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e5      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e067      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d04f      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ce:	d147      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
 80041fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e6      	bne.n	80041da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3308      	adds	r3, #8
 8004212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	613b      	str	r3, [r7, #16]
   return(result);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	66bb      	str	r3, [r7, #104]	; 0x68
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3308      	adds	r3, #8
 800422a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800422c:	623a      	str	r2, [r7, #32]
 800422e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	69f9      	ldr	r1, [r7, #28]
 8004232:	6a3a      	ldr	r2, [r7, #32]
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	61bb      	str	r3, [r7, #24]
   return(result);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e010      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	429a      	cmp	r2, r3
 800427c:	f43f af4a 	beq.w	8004114 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3770      	adds	r7, #112	; 0x70
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b095      	sub	sp, #84	; 0x54
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	643b      	str	r3, [r7, #64]	; 0x40
 80042b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d118      	bne.n	8004332 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	60bb      	str	r3, [r7, #8]
   return(result);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0310 	bic.w	r3, r3, #16
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6979      	ldr	r1, [r7, #20]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	613b      	str	r3, [r7, #16]
   return(result);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e6      	bne.n	8004300 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004344:	bf00      	nop
 8004346:	3754      	adds	r7, #84	; 0x54
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff fb9a 	bl	8003aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60bb      	str	r3, [r7, #8]
   return(result);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6979      	ldr	r1, [r7, #20]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	613b      	str	r3, [r7, #16]
   return(result);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fb66 	bl	8003a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c8:	bf00      	nop
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <__NVIC_SetPriority>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db0a      	blt.n	800440e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	490c      	ldr	r1, [pc, #48]	; (8004430 <__NVIC_SetPriority+0x4c>)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	0112      	lsls	r2, r2, #4
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	440b      	add	r3, r1
 8004408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800440c:	e00a      	b.n	8004424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4908      	ldr	r1, [pc, #32]	; (8004434 <__NVIC_SetPriority+0x50>)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	3b04      	subs	r3, #4
 800441c:	0112      	lsls	r2, r2, #4
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	440b      	add	r3, r1
 8004422:	761a      	strb	r2, [r3, #24]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000e100 	.word	0xe000e100
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <SysTick_Handler+0x1c>)
 800443e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004440:	f002 f854 	bl	80064ec <xTaskGetSchedulerState>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d001      	beq.n	800444e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800444a:	f002 ff1d 	bl	8007288 <xPortSysTickHandler>
  }
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	e000e010 	.word	0xe000e010

08004458 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800445c:	2100      	movs	r1, #0
 800445e:	f06f 0004 	mvn.w	r0, #4
 8004462:	f7ff ffbf 	bl	80043e4 <__NVIC_SetPriority>
#endif
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004472:	f3ef 8305 	mrs	r3, IPSR
 8004476:	603b      	str	r3, [r7, #0]
  return(result);
 8004478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800447e:	f06f 0305 	mvn.w	r3, #5
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e00c      	b.n	80044a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <osKernelInitialize+0x44>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <osKernelInitialize+0x44>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004494:	2300      	movs	r3, #0
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	e002      	b.n	80044a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800449e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044a0:	687b      	ldr	r3, [r7, #4]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	200008e0 	.word	0x200008e0

080044b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ba:	f3ef 8305 	mrs	r3, IPSR
 80044be:	603b      	str	r3, [r7, #0]
  return(result);
 80044c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80044c6:	f06f 0305 	mvn.w	r3, #5
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	e010      	b.n	80044f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <osKernelStart+0x48>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d109      	bne.n	80044ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044d6:	f7ff ffbf 	bl	8004458 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044da:	4b08      	ldr	r3, [pc, #32]	; (80044fc <osKernelStart+0x48>)
 80044dc:	2202      	movs	r2, #2
 80044de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044e0:	f001 fba8 	bl	8005c34 <vTaskStartScheduler>
      stat = osOK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	e002      	b.n	80044f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044f0:	687b      	ldr	r3, [r7, #4]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200008e0 	.word	0x200008e0

08004500 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b08e      	sub	sp, #56	; 0x38
 8004504:	af04      	add	r7, sp, #16
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004510:	f3ef 8305 	mrs	r3, IPSR
 8004514:	617b      	str	r3, [r7, #20]
  return(result);
 8004516:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004518:	2b00      	cmp	r3, #0
 800451a:	d17e      	bne.n	800461a <osThreadNew+0x11a>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d07b      	beq.n	800461a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004526:	2318      	movs	r3, #24
 8004528:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004532:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d045      	beq.n	80045c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <osThreadNew+0x48>
        name = attr->name;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <osThreadNew+0x6e>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b38      	cmp	r3, #56	; 0x38
 8004560:	d805      	bhi.n	800456e <osThreadNew+0x6e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <osThreadNew+0x72>
        return (NULL);
 800456e:	2300      	movs	r3, #0
 8004570:	e054      	b.n	800461c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <osThreadNew+0xa8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2bbb      	cmp	r3, #187	; 0xbb
 8004590:	d90a      	bls.n	80045a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <osThreadNew+0xa8>
        mem = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e010      	b.n	80045ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10c      	bne.n	80045ca <osThreadNew+0xca>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <osThreadNew+0xca>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <osThreadNew+0xca>
          mem = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	e001      	b.n	80045ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d110      	bne.n	80045f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d8:	9202      	str	r2, [sp, #8]
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f001 f938 	bl	800585c <xTaskCreateStatic>
 80045ec:	4603      	mov	r3, r0
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	e013      	b.n	800461a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d110      	bne.n	800461a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f001 f983 	bl	8005916 <xTaskCreate>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <osThreadNew+0x11a>
            hTask = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800461a:	693b      	ldr	r3, [r7, #16]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800462c:	f3ef 8305 	mrs	r3, IPSR
 8004630:	60bb      	str	r3, [r7, #8]
  return(result);
 8004632:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <osDelay+0x1c>
    stat = osErrorISR;
 8004638:	f06f 0305 	mvn.w	r3, #5
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e007      	b.n	8004650 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <osDelay+0x2c>
      vTaskDelay(ticks);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 fabe 	bl	8005bcc <vTaskDelay>
    }
  }

  return (stat);
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800465a:	b580      	push	{r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466a:	f3ef 8305 	mrs	r3, IPSR
 800466e:	613b      	str	r3, [r7, #16]
  return(result);
 8004670:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004672:	2b00      	cmp	r3, #0
 8004674:	d175      	bne.n	8004762 <osSemaphoreNew+0x108>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d072      	beq.n	8004762 <osSemaphoreNew+0x108>
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d86e      	bhi.n	8004762 <osSemaphoreNew+0x108>
    mem = -1;
 8004684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004688:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <osSemaphoreNew+0x4c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b4f      	cmp	r3, #79	; 0x4f
 800469e:	d902      	bls.n	80046a6 <osSemaphoreNew+0x4c>
        mem = 1;
 80046a0:	2301      	movs	r3, #1
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	e00c      	b.n	80046c0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <osSemaphoreNew+0x66>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <osSemaphoreNew+0x66>
          mem = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e001      	b.n	80046c0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c6:	d04c      	beq.n	8004762 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d128      	bne.n	8004720 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10a      	bne.n	80046ea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2203      	movs	r2, #3
 80046da:	9200      	str	r2, [sp, #0]
 80046dc:	2200      	movs	r2, #0
 80046de:	2100      	movs	r1, #0
 80046e0:	2001      	movs	r0, #1
 80046e2:	f000 fac5 	bl	8004c70 <xQueueGenericCreateStatic>
 80046e6:	61f8      	str	r0, [r7, #28]
 80046e8:	e005      	b.n	80046f6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80046ea:	2203      	movs	r2, #3
 80046ec:	2100      	movs	r1, #0
 80046ee:	2001      	movs	r0, #1
 80046f0:	f000 fb36 	bl	8004d60 <xQueueGenericCreate>
 80046f4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d022      	beq.n	8004742 <osSemaphoreNew+0xe8>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01f      	beq.n	8004742 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004702:	2300      	movs	r3, #0
 8004704:	2200      	movs	r2, #0
 8004706:	2100      	movs	r1, #0
 8004708:	69f8      	ldr	r0, [r7, #28]
 800470a:	f000 fbf1 	bl	8004ef0 <xQueueGenericSend>
 800470e:	4603      	mov	r3, r0
 8004710:	2b01      	cmp	r3, #1
 8004712:	d016      	beq.n	8004742 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004714:	69f8      	ldr	r0, [r7, #28]
 8004716:	f000 fee5 	bl	80054e4 <vQueueDelete>
            hSemaphore = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e010      	b.n	8004742 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d108      	bne.n	8004738 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	461a      	mov	r2, r3
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fb73 	bl	8004e1a <xQueueCreateCountingSemaphoreStatic>
 8004734:	61f8      	str	r0, [r7, #28]
 8004736:	e004      	b.n	8004742 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fba4 	bl	8004e88 <xQueueCreateCountingSemaphore>
 8004740:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <osSemaphoreNew+0xfc>
          name = attr->name;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e001      	b.n	800475a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800475a:	6979      	ldr	r1, [r7, #20]
 800475c:	69f8      	ldr	r0, [r7, #28]
 800475e:	f000 fff5 	bl	800574c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004762:	69fb      	ldr	r3, [r7, #28]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3720      	adds	r7, #32
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b08a      	sub	sp, #40	; 0x28
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477c:	f3ef 8305 	mrs	r3, IPSR
 8004780:	613b      	str	r3, [r7, #16]
  return(result);
 8004782:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004784:	2b00      	cmp	r3, #0
 8004786:	d15f      	bne.n	8004848 <osMessageQueueNew+0xdc>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d05c      	beq.n	8004848 <osMessageQueueNew+0xdc>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d059      	beq.n	8004848 <osMessageQueueNew+0xdc>
    mem = -1;
 8004794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004798:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d029      	beq.n	80047f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <osMessageQueueNew+0x62>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b4f      	cmp	r3, #79	; 0x4f
 80047ae:	d90e      	bls.n	80047ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <osMessageQueueNew+0x62>
        mem = 1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e014      	b.n	80047f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d110      	bne.n	80047f8 <osMessageQueueNew+0x8c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10c      	bne.n	80047f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d108      	bne.n	80047f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e001      	b.n	80047f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10b      	bne.n	8004816 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2100      	movs	r1, #0
 8004808:	9100      	str	r1, [sp, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fa2f 	bl	8004c70 <xQueueGenericCreateStatic>
 8004812:	61f8      	str	r0, [r7, #28]
 8004814:	e008      	b.n	8004828 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800481c:	2200      	movs	r2, #0
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fa9d 	bl	8004d60 <xQueueGenericCreate>
 8004826:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <osMessageQueueNew+0xd0>
        name = attr->name;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e001      	b.n	8004840 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	69f8      	ldr	r0, [r7, #28]
 8004844:	f000 ff82 	bl	800574c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486c:	f3ef 8305 	mrs	r3, IPSR
 8004870:	617b      	str	r3, [r7, #20]
  return(result);
 8004872:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004874:	2b00      	cmp	r3, #0
 8004876:	d028      	beq.n	80048ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <osMessageQueuePut+0x36>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <osMessageQueuePut+0x36>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800488a:	f06f 0303 	mvn.w	r3, #3
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e038      	b.n	8004904 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004896:	f107 0210 	add.w	r2, r7, #16
 800489a:	2300      	movs	r3, #0
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	69b8      	ldr	r0, [r7, #24]
 80048a0:	f000 fc24 	bl	80050ec <xQueueGenericSendFromISR>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d003      	beq.n	80048b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80048aa:	f06f 0302 	mvn.w	r3, #2
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e028      	b.n	8004904 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d025      	beq.n	8004904 <osMessageQueuePut+0xb0>
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <osMessageQueuePut+0xbc>)
 80048ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	e01c      	b.n	8004904 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <osMessageQueuePut+0x82>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80048d6:	f06f 0303 	mvn.w	r3, #3
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	e012      	b.n	8004904 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80048de:	2300      	movs	r3, #0
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	69b8      	ldr	r0, [r7, #24]
 80048e6:	f000 fb03 	bl	8004ef0 <xQueueGenericSend>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d009      	beq.n	8004904 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80048f6:	f06f 0301 	mvn.w	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e002      	b.n	8004904 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80048fe:	f06f 0302 	mvn.w	r3, #2
 8004902:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004904:	69fb      	ldr	r3, [r7, #28]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800492a:	f3ef 8305 	mrs	r3, IPSR
 800492e:	617b      	str	r3, [r7, #20]
  return(result);
 8004930:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004932:	2b00      	cmp	r3, #0
 8004934:	d028      	beq.n	8004988 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <osMessageQueueGet+0x34>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <osMessageQueueGet+0x34>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004948:	f06f 0303 	mvn.w	r3, #3
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	e037      	b.n	80049c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004954:	f107 0310 	add.w	r3, r7, #16
 8004958:	461a      	mov	r2, r3
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	69b8      	ldr	r0, [r7, #24]
 800495e:	f000 fd41 	bl	80053e4 <xQueueReceiveFromISR>
 8004962:	4603      	mov	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d003      	beq.n	8004970 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004968:	f06f 0302 	mvn.w	r3, #2
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	e027      	b.n	80049c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d024      	beq.n	80049c0 <osMessageQueueGet+0xac>
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <osMessageQueueGet+0xb8>)
 8004978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	e01b      	b.n	80049c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <osMessageQueueGet+0x80>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004994:	f06f 0303 	mvn.w	r3, #3
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e011      	b.n	80049c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	69b8      	ldr	r0, [r7, #24]
 80049a2:	f000 fc3f 	bl	8005224 <xQueueReceive>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d009      	beq.n	80049c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80049b2:	f06f 0301 	mvn.w	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	e002      	b.n	80049c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80049ba:	f06f 0302 	mvn.w	r3, #2
 80049be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80049c0:	69fb      	ldr	r3, [r7, #28]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	e000ed04 	.word	0xe000ed04

080049d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a07      	ldr	r2, [pc, #28]	; (80049fc <vApplicationGetIdleTaskMemory+0x2c>)
 80049e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4a06      	ldr	r2, [pc, #24]	; (8004a00 <vApplicationGetIdleTaskMemory+0x30>)
 80049e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	601a      	str	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	200008e4 	.word	0x200008e4
 8004a00:	200009a0 	.word	0x200009a0

08004a04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a06      	ldr	r2, [pc, #24]	; (8004a34 <vApplicationGetTimerTaskMemory+0x30>)
 8004a1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a22:	601a      	str	r2, [r3, #0]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20000ba0 	.word	0x20000ba0
 8004a34:	20000c5c 	.word	0x20000c5c

08004a38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f103 0208 	add.w	r2, r3, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f103 0208 	add.w	r2, r3, #8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f103 0208 	add.w	r2, r3, #8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af0:	d103      	bne.n	8004afa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e00c      	b.n	8004b14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3308      	adds	r3, #8
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e002      	b.n	8004b08 <vListInsert+0x2e>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d2f6      	bcs.n	8004b02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6892      	ldr	r2, [r2, #8]
 8004b62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6852      	ldr	r2, [r2, #4]
 8004b6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d103      	bne.n	8004b80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	1e5a      	subs	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bca:	f002 facb 	bl	8007164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	441a      	add	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	441a      	add	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	22ff      	movs	r2, #255	; 0xff
 8004c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d114      	bne.n	8004c4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01a      	beq.n	8004c5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3310      	adds	r3, #16
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fa9b 	bl	8006168 <xTaskRemoveFromEventList>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <xQueueGenericReset+0xcc>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	e009      	b.n	8004c5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fef2 	bl	8004a38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3324      	adds	r3, #36	; 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff feed 	bl	8004a38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c5e:	f002 fab1 	bl	80071c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08e      	sub	sp, #56	; 0x38
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <xQueueGenericCreateStatic+0x52>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <xQueueGenericCreateStatic+0x56>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueGenericCreateStatic+0x58>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	623b      	str	r3, [r7, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <xQueueGenericCreateStatic+0x7e>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <xQueueGenericCreateStatic+0x82>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueGenericCreateStatic+0x84>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61fb      	str	r3, [r7, #28]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d0e:	2350      	movs	r3, #80	; 0x50
 8004d10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b50      	cmp	r3, #80	; 0x50
 8004d16:	d00a      	beq.n	8004d2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	61bb      	str	r3, [r7, #24]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f83f 	bl	8004dd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3730      	adds	r7, #48	; 0x30
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	613b      	str	r3, [r7, #16]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	3350      	adds	r3, #80	; 0x50
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f002 fb05 	bl	80073a8 <pvPortMalloc>
 8004d9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d011      	beq.n	8004dca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	3350      	adds	r3, #80	; 0x50
 8004dae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004db8:	79fa      	ldrb	r2, [r7, #7]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f805 	bl	8004dd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dca:	69bb      	ldr	r3, [r7, #24]
	}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e002      	b.n	8004df6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e02:	2101      	movs	r1, #1
 8004e04:	69b8      	ldr	r0, [r7, #24]
 8004e06:	f7ff fecb 	bl	8004ba0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b08a      	sub	sp, #40	; 0x28
 8004e1e:	af02      	add	r7, sp, #8
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61bb      	str	r3, [r7, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d90a      	bls.n	8004e60 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	617b      	str	r3, [r7, #20]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004e60:	2302      	movs	r3, #2
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	2100      	movs	r1, #0
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff ff00 	bl	8004c70 <xQueueGenericCreateStatic>
 8004e70:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
	}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	613b      	str	r3, [r7, #16]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d90a      	bls.n	8004ecc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60fb      	str	r3, [r7, #12]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ecc:	2202      	movs	r2, #2
 8004ece:	2100      	movs	r1, #0
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ff45 	bl	8004d60 <xQueueGenericCreate>
 8004ed6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004ee4:	697b      	ldr	r3, [r7, #20]
	}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08e      	sub	sp, #56	; 0x38
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004efe:	2300      	movs	r3, #0
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xQueueGenericSend+0x32>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <xQueueGenericSend+0x40>
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <xQueueGenericSend+0x44>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <xQueueGenericSend+0x46>
 8004f34:	2300      	movs	r3, #0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <xQueueGenericSend+0x60>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d103      	bne.n	8004f5e <xQueueGenericSend+0x6e>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <xQueueGenericSend+0x72>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <xQueueGenericSend+0x74>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <xQueueGenericSend+0x8e>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	623b      	str	r3, [r7, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f7e:	f001 fab5 	bl	80064ec <xTaskGetSchedulerState>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <xQueueGenericSend+0x9e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <xQueueGenericSend+0xa2>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <xQueueGenericSend+0xa4>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <xQueueGenericSend+0xbe>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	61fb      	str	r3, [r7, #28]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fae:	f002 f8d9 	bl	8007164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <xQueueGenericSend+0xd4>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d129      	bne.n	8005018 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fca:	f000 faae 	bl	800552a <prvCopyDataToQueue>
 8004fce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d010      	beq.n	8004ffa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	3324      	adds	r3, #36	; 0x24
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f001 f8c3 	bl	8006168 <xTaskRemoveFromEventList>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d013      	beq.n	8005010 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fe8:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <xQueueGenericSend+0x1f8>)
 8004fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	e00a      	b.n	8005010 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005000:	4b39      	ldr	r3, [pc, #228]	; (80050e8 <xQueueGenericSend+0x1f8>)
 8005002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005010:	f002 f8d8 	bl	80071c4 <vPortExitCritical>
				return pdPASS;
 8005014:	2301      	movs	r3, #1
 8005016:	e063      	b.n	80050e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800501e:	f002 f8d1 	bl	80071c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005022:	2300      	movs	r3, #0
 8005024:	e05c      	b.n	80050e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	4618      	mov	r0, r3
 8005032:	f001 f8fd 	bl	8006230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800503a:	f002 f8c3 	bl	80071c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800503e:	f000 fe69 	bl	8005d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005042:	f002 f88f 	bl	8007164 <vPortEnterCritical>
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800504c:	b25b      	sxtb	r3, r3
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005052:	d103      	bne.n	800505c <xQueueGenericSend+0x16c>
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005062:	b25b      	sxtb	r3, r3
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005068:	d103      	bne.n	8005072 <xQueueGenericSend+0x182>
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005072:	f002 f8a7 	bl	80071c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005076:	1d3a      	adds	r2, r7, #4
 8005078:	f107 0314 	add.w	r3, r7, #20
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f001 f8ec 	bl	800625c <xTaskCheckForTimeOut>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d124      	bne.n	80050d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800508a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800508c:	f000 fb45 	bl	800571a <prvIsQueueFull>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	3310      	adds	r3, #16
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4611      	mov	r1, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f812 	bl	80060c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a6:	f000 fad0 	bl	800564a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050aa:	f000 fe41 	bl	8005d30 <xTaskResumeAll>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f47f af7c 	bne.w	8004fae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <xQueueGenericSend+0x1f8>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	e772      	b.n	8004fae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ca:	f000 fabe 	bl	800564a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ce:	f000 fe2f 	bl	8005d30 <xTaskResumeAll>
 80050d2:	e76c      	b.n	8004fae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d6:	f000 fab8 	bl	800564a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050da:	f000 fe29 	bl	8005d30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3738      	adds	r7, #56	; 0x38
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b090      	sub	sp, #64	; 0x40
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <xQueueGenericSendFromISR+0x3c>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <xQueueGenericSendFromISR+0x40>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <xQueueGenericSendFromISR+0x42>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d103      	bne.n	8005156 <xQueueGenericSendFromISR+0x6a>
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <xQueueGenericSendFromISR+0x6e>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <xQueueGenericSendFromISR+0x70>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	623b      	str	r3, [r7, #32]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005176:	f002 f8d7 	bl	8007328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800517a:	f3ef 8211 	mrs	r2, BASEPRI
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	61fa      	str	r2, [r7, #28]
 8005190:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005192:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <xQueueGenericSendFromISR+0xbc>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d12f      	bne.n	8005208 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051be:	f000 f9b4 	bl	800552a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ca:	d112      	bne.n	80051f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d016      	beq.n	8005202 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	3324      	adds	r3, #36	; 0x24
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 ffc5 	bl	8006168 <xTaskRemoveFromEventList>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00e      	beq.n	8005202 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e007      	b.n	8005202 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051f6:	3301      	adds	r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	b25a      	sxtb	r2, r3
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005202:	2301      	movs	r3, #1
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005206:	e001      	b.n	800520c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005208:	2300      	movs	r3, #0
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005216:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800521a:	4618      	mov	r0, r3
 800521c:	3740      	adds	r7, #64	; 0x40
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005230:	2300      	movs	r3, #0
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <xQueueReceive+0x30>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	623b      	str	r3, [r7, #32]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <xQueueReceive+0x3e>
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <xQueueReceive+0x42>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <xQueueReceive+0x44>
 8005266:	2300      	movs	r3, #0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <xQueueReceive+0x5e>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	61fb      	str	r3, [r7, #28]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005282:	f001 f933 	bl	80064ec <xTaskGetSchedulerState>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <xQueueReceive+0x6e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <xQueueReceive+0x72>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <xQueueReceive+0x74>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <xQueueReceive+0x8e>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	61bb      	str	r3, [r7, #24]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052b2:	f001 ff57 	bl	8007164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01f      	beq.n	8005302 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c6:	f000 f99a 	bl	80055fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1e5a      	subs	r2, r3, #1
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00f      	beq.n	80052fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	3310      	adds	r3, #16
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 ff42 	bl	8006168 <xTaskRemoveFromEventList>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052ea:	4b3d      	ldr	r3, [pc, #244]	; (80053e0 <xQueueReceive+0x1bc>)
 80052ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052fa:	f001 ff63 	bl	80071c4 <vPortExitCritical>
				return pdPASS;
 80052fe:	2301      	movs	r3, #1
 8005300:	e069      	b.n	80053d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d103      	bne.n	8005310 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005308:	f001 ff5c 	bl	80071c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800530c:	2300      	movs	r3, #0
 800530e:	e062      	b.n	80053d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005316:	f107 0310 	add.w	r3, r7, #16
 800531a:	4618      	mov	r0, r3
 800531c:	f000 ff88 	bl	8006230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005320:	2301      	movs	r3, #1
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005324:	f001 ff4e 	bl	80071c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005328:	f000 fcf4 	bl	8005d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800532c:	f001 ff1a 	bl	8007164 <vPortEnterCritical>
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005336:	b25b      	sxtb	r3, r3
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800533c:	d103      	bne.n	8005346 <xQueueReceive+0x122>
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800534c:	b25b      	sxtb	r3, r3
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005352:	d103      	bne.n	800535c <xQueueReceive+0x138>
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800535c:	f001 ff32 	bl	80071c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005360:	1d3a      	adds	r2, r7, #4
 8005362:	f107 0310 	add.w	r3, r7, #16
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f000 ff77 	bl	800625c <xTaskCheckForTimeOut>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d123      	bne.n	80053bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005376:	f000 f9ba 	bl	80056ee <prvIsQueueEmpty>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d017      	beq.n	80053b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	3324      	adds	r3, #36	; 0x24
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fe9d 	bl	80060c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800538e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005390:	f000 f95b 	bl	800564a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005394:	f000 fccc 	bl	8005d30 <xTaskResumeAll>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d189      	bne.n	80052b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <xQueueReceive+0x1bc>)
 80053a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	e780      	b.n	80052b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b2:	f000 f94a 	bl	800564a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053b6:	f000 fcbb 	bl	8005d30 <xTaskResumeAll>
 80053ba:	e77a      	b.n	80052b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053be:	f000 f944 	bl	800564a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053c2:	f000 fcb5 	bl	8005d30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c8:	f000 f991 	bl	80056ee <prvIsQueueEmpty>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f43f af6f 	beq.w	80052b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3730      	adds	r7, #48	; 0x30
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	623b      	str	r3, [r7, #32]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <xQueueReceiveFromISR+0x3a>
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <xQueueReceiveFromISR+0x3e>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueReceiveFromISR+0x40>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	61fb      	str	r3, [r7, #28]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800543e:	f001 ff73 	bl	8007328 <vPortValidateInterruptPriority>
	__asm volatile
 8005442:	f3ef 8211 	mrs	r2, BASEPRI
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	61ba      	str	r2, [r7, #24]
 8005458:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800545a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02f      	beq.n	80054ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005478:	f000 f8c1 	bl	80055fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	1e5a      	subs	r2, r3, #1
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548c:	d112      	bne.n	80054b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	3310      	adds	r3, #16
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fe64 	bl	8006168 <xTaskRemoveFromEventList>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e007      	b.n	80054c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80054b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054b8:	3301      	adds	r3, #1
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	b25a      	sxtb	r2, r3
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80054c4:	2301      	movs	r3, #1
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
 80054c8:	e001      	b.n	80054ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f383 8811 	msr	BASEPRI, r3
}
 80054d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3738      	adds	r7, #56	; 0x38
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <vQueueDelete+0x28>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60bb      	str	r3, [r7, #8]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f947 	bl	80057a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f002 f80f 	bl	8007540 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b086      	sub	sp, #24
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10d      	bne.n	8005564 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d14d      	bne.n	80055ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 ffe7 	bl	8006528 <xTaskPriorityDisinherit>
 800555a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	e043      	b.n	80055ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d119      	bne.n	800559e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6858      	ldr	r0, [r3, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	461a      	mov	r2, r3
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	f002 fa34 	bl	80079e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	441a      	add	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	d32b      	bcc.n	80055ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]
 800559c:	e026      	b.n	80055ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68d8      	ldr	r0, [r3, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	461a      	mov	r2, r3
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	f002 fa1a 	bl	80079e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	425b      	negs	r3, r3
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d207      	bcs.n	80055da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	425b      	negs	r3, r3
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d105      	bne.n	80055ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055f4:	697b      	ldr	r3, [r7, #20]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d018      	beq.n	8005642 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	441a      	add	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d303      	bcc.n	8005632 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68d9      	ldr	r1, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	461a      	mov	r2, r3
 800563c:	6838      	ldr	r0, [r7, #0]
 800563e:	f002 f9d0 	bl	80079e2 <memcpy>
	}
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005652:	f001 fd87 	bl	8007164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800565c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800565e:	e011      	b.n	8005684 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d012      	beq.n	800568e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3324      	adds	r3, #36	; 0x24
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fd7b 	bl	8006168 <xTaskRemoveFromEventList>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005678:	f000 fe52 	bl	8006320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	3b01      	subs	r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005688:	2b00      	cmp	r3, #0
 800568a:	dce9      	bgt.n	8005660 <prvUnlockQueue+0x16>
 800568c:	e000      	b.n	8005690 <prvUnlockQueue+0x46>
					break;
 800568e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	22ff      	movs	r2, #255	; 0xff
 8005694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005698:	f001 fd94 	bl	80071c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800569c:	f001 fd62 	bl	8007164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056a8:	e011      	b.n	80056ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d012      	beq.n	80056d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3310      	adds	r3, #16
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fd56 	bl	8006168 <xTaskRemoveFromEventList>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056c2:	f000 fe2d 	bl	8006320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	dce9      	bgt.n	80056aa <prvUnlockQueue+0x60>
 80056d6:	e000      	b.n	80056da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056e2:	f001 fd6f 	bl	80071c4 <vPortExitCritical>
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056f6:	f001 fd35 	bl	8007164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d102      	bne.n	8005708 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005702:	2301      	movs	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	e001      	b.n	800570c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800570c:	f001 fd5a 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 8005710:	68fb      	ldr	r3, [r7, #12]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005722:	f001 fd1f 	bl	8007164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	429a      	cmp	r2, r3
 8005730:	d102      	bne.n	8005738 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e001      	b.n	800573c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800573c:	f001 fd42 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e014      	b.n	8005786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800575c:	4a0f      	ldr	r2, [pc, #60]	; (800579c <vQueueAddToRegistry+0x50>)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005768:	490c      	ldr	r1, [pc, #48]	; (800579c <vQueueAddToRegistry+0x50>)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <vQueueAddToRegistry+0x50>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800577e:	e006      	b.n	800578e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b07      	cmp	r3, #7
 800578a:	d9e7      	bls.n	800575c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	2000105c 	.word	0x2000105c

080057a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e016      	b.n	80057dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80057ae:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <vQueueUnregisterQueue+0x50>)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d10b      	bne.n	80057d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80057be:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <vQueueUnregisterQueue+0x50>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2100      	movs	r1, #0
 80057c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80057c8:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <vQueueUnregisterQueue+0x50>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	2200      	movs	r2, #0
 80057d2:	605a      	str	r2, [r3, #4]
				break;
 80057d4:	e006      	b.n	80057e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b07      	cmp	r3, #7
 80057e0:	d9e5      	bls.n	80057ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	2000105c 	.word	0x2000105c

080057f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005804:	f001 fcae 	bl	8007164 <vPortEnterCritical>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800580e:	b25b      	sxtb	r3, r3
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005814:	d103      	bne.n	800581e <vQueueWaitForMessageRestricted+0x2a>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005824:	b25b      	sxtb	r3, r3
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582a:	d103      	bne.n	8005834 <vQueueWaitForMessageRestricted+0x40>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005834:	f001 fcc6 	bl	80071c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	3324      	adds	r3, #36	; 0x24
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fc61 	bl	8006110 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800584e:	6978      	ldr	r0, [r7, #20]
 8005850:	f7ff fefb 	bl	800564a <prvUnlockQueue>
	}
 8005854:	bf00      	nop
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08e      	sub	sp, #56	; 0x38
 8005860:	af04      	add	r7, sp, #16
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	623b      	str	r3, [r7, #32]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	61fb      	str	r3, [r7, #28]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058a2:	23bc      	movs	r3, #188	; 0xbc
 80058a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2bbc      	cmp	r3, #188	; 0xbc
 80058aa:	d00a      	beq.n	80058c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61bb      	str	r3, [r7, #24]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01e      	beq.n	8005908 <xTaskCreateStatic+0xac>
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01b      	beq.n	8005908 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058e2:	2300      	movs	r3, #0
 80058e4:	9303      	str	r3, [sp, #12]
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	9302      	str	r3, [sp, #8]
 80058ea:	f107 0314 	add.w	r3, r7, #20
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f850 	bl	80059a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005902:	f000 f8f3 	bl	8005aec <prvAddNewTaskToReadyList>
 8005906:	e001      	b.n	800590c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800590c:	697b      	ldr	r3, [r7, #20]
	}
 800590e:	4618      	mov	r0, r3
 8005910:	3728      	adds	r7, #40	; 0x28
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005916:	b580      	push	{r7, lr}
 8005918:	b08c      	sub	sp, #48	; 0x30
 800591a:	af04      	add	r7, sp, #16
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4618      	mov	r0, r3
 800592c:	f001 fd3c 	bl	80073a8 <pvPortMalloc>
 8005930:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005938:	20bc      	movs	r0, #188	; 0xbc
 800593a:	f001 fd35 	bl	80073a8 <pvPortMalloc>
 800593e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
 800594c:	e005      	b.n	800595a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800594e:	6978      	ldr	r0, [r7, #20]
 8005950:	f001 fdf6 	bl	8007540 <vPortFree>
 8005954:	e001      	b.n	800595a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d017      	beq.n	8005990 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	2300      	movs	r3, #0
 800596c:	9303      	str	r3, [sp, #12]
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	9302      	str	r3, [sp, #8]
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f80e 	bl	80059a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005984:	69f8      	ldr	r0, [r7, #28]
 8005986:	f000 f8b1 	bl	8005aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800598a:	2301      	movs	r3, #1
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	e002      	b.n	8005996 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005994:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005996:	69bb      	ldr	r3, [r7, #24]
	}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	461a      	mov	r2, r3
 80059b8:	21a5      	movs	r1, #165	; 0xa5
 80059ba:	f002 f820 	bl	80079fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059c8:	3b01      	subs	r3, #1
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	617b      	str	r3, [r7, #20]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01f      	beq.n	8005a3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e012      	b.n	8005a2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	7819      	ldrb	r1, [r3, #0]
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	3334      	adds	r3, #52	; 0x34
 8005a14:	460a      	mov	r2, r1
 8005a16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	3301      	adds	r3, #1
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d9e9      	bls.n	8005a04 <prvInitialiseNewTask+0x64>
 8005a30:	e000      	b.n	8005a34 <prvInitialiseNewTask+0x94>
			{
				break;
 8005a32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a3c:	e003      	b.n	8005a46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	2b37      	cmp	r3, #55	; 0x37
 8005a4a:	d901      	bls.n	8005a50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a4c:	2337      	movs	r3, #55	; 0x37
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	2200      	movs	r2, #0
 8005a60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	3304      	adds	r3, #4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff f806 	bl	8004a78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	3318      	adds	r3, #24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff f801 	bl	8004a78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	3354      	adds	r3, #84	; 0x54
 8005aa0:	2260      	movs	r2, #96	; 0x60
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 ffaa 	bl	80079fe <memset>
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <prvInitialiseNewTask+0x140>)
 8005aae:	659a      	str	r2, [r3, #88]	; 0x58
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <prvInitialiseNewTask+0x144>)
 8005ab4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	4a0b      	ldr	r2, [pc, #44]	; (8005ae8 <prvInitialiseNewTask+0x148>)
 8005aba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	69b8      	ldr	r0, [r7, #24]
 8005ac2:	f001 fa25 	bl	8006f10 <pxPortInitialiseStack>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad8:	bf00      	nop
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	08008d74 	.word	0x08008d74
 8005ae4:	08008d94 	.word	0x08008d94
 8005ae8:	08008d54 	.word	0x08008d54

08005aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005af4:	f001 fb36 	bl	8007164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005af8:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b02:	4b2c      	ldr	r3, [pc, #176]	; (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b0a:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d110      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b18:	f000 fc26 	bl	8006368 <prvInitialiseTaskLists>
 8005b1c:	e00d      	b.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b1e:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <prvAddNewTaskToReadyList+0xcc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b26:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d802      	bhi.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b3a:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <prvAddNewTaskToReadyList+0xd0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <prvAddNewTaskToReadyList+0xd0>)
 8005b42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b44:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <prvAddNewTaskToReadyList+0xd0>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <prvAddNewTaskToReadyList+0xd4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d903      	bls.n	8005b60 <prvAddNewTaskToReadyList+0x74>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <prvAddNewTaskToReadyList+0xd4>)
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <prvAddNewTaskToReadyList+0xd8>)
 8005b6e:	441a      	add	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f7fe ff8b 	bl	8004a92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b7c:	f001 fb22 	bl	80071c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b80:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <prvAddNewTaskToReadyList+0xcc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d207      	bcs.n	8005ba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <prvAddNewTaskToReadyList+0xdc>)
 8005b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20001570 	.word	0x20001570
 8005bb4:	2000109c 	.word	0x2000109c
 8005bb8:	2000157c 	.word	0x2000157c
 8005bbc:	2000158c 	.word	0x2000158c
 8005bc0:	20001578 	.word	0x20001578
 8005bc4:	200010a0 	.word	0x200010a0
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d017      	beq.n	8005c0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <vTaskDelay+0x60>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <vTaskDelay+0x30>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60bb      	str	r3, [r7, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bfc:	f000 f88a 	bl	8005d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c00:	2100      	movs	r1, #0
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fde2 	bl	80067cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c08:	f000 f892 	bl	8005d30 <xTaskResumeAll>
 8005c0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d107      	bne.n	8005c24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <vTaskDelay+0x64>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20001598 	.word	0x20001598
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c42:	463a      	mov	r2, r7
 8005c44:	1d39      	adds	r1, r7, #4
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fec0 	bl	80049d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	9202      	str	r2, [sp, #8]
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	460a      	mov	r2, r1
 8005c62:	4924      	ldr	r1, [pc, #144]	; (8005cf4 <vTaskStartScheduler+0xc0>)
 8005c64:	4824      	ldr	r0, [pc, #144]	; (8005cf8 <vTaskStartScheduler+0xc4>)
 8005c66:	f7ff fdf9 	bl	800585c <xTaskCreateStatic>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <vTaskStartScheduler+0xc8>)
 8005c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c70:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <vTaskStartScheduler+0xc8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e001      	b.n	8005c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d102      	bne.n	8005c8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c88:	f000 fdf4 	bl	8006874 <xTimerCreateTimerTask>
 8005c8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d11b      	bne.n	8005ccc <vTaskStartScheduler+0x98>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	613b      	str	r3, [r7, #16]
}
 8005ca6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <vTaskStartScheduler+0xcc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3354      	adds	r3, #84	; 0x54
 8005cae:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <vTaskStartScheduler+0xd0>)
 8005cb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <vTaskStartScheduler+0xd4>)
 8005cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <vTaskStartScheduler+0xd8>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cc0:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <vTaskStartScheduler+0xdc>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cc6:	f001 f9ab 	bl	8007020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cca:	e00e      	b.n	8005cea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd2:	d10a      	bne.n	8005cea <vTaskStartScheduler+0xb6>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	60fb      	str	r3, [r7, #12]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <vTaskStartScheduler+0xb4>
}
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	08008c84 	.word	0x08008c84
 8005cf8:	08006339 	.word	0x08006339
 8005cfc:	20001594 	.word	0x20001594
 8005d00:	2000109c 	.word	0x2000109c
 8005d04:	20000010 	.word	0x20000010
 8005d08:	20001590 	.word	0x20001590
 8005d0c:	2000157c 	.word	0x2000157c
 8005d10:	20001574 	.word	0x20001574

08005d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <vTaskSuspendAll+0x18>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a03      	ldr	r2, [pc, #12]	; (8005d2c <vTaskSuspendAll+0x18>)
 8005d20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d22:	bf00      	nop
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20001598 	.word	0x20001598

08005d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d3e:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <xTaskResumeAll+0x118>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <xTaskResumeAll+0x2c>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	603b      	str	r3, [r7, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d5c:	f001 fa02 	bl	8007164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <xTaskResumeAll+0x118>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4a38      	ldr	r2, [pc, #224]	; (8005e48 <xTaskResumeAll+0x118>)
 8005d68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d6a:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <xTaskResumeAll+0x118>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d162      	bne.n	8005e38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d72:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <xTaskResumeAll+0x11c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d05e      	beq.n	8005e38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d7a:	e02f      	b.n	8005ddc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7c:	4b34      	ldr	r3, [pc, #208]	; (8005e50 <xTaskResumeAll+0x120>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3318      	adds	r3, #24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe fedf 	bl	8004b4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe feda 	bl	8004b4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <xTaskResumeAll+0x124>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d903      	bls.n	8005dac <xTaskResumeAll+0x7c>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	4a2a      	ldr	r2, [pc, #168]	; (8005e54 <xTaskResumeAll+0x124>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4a27      	ldr	r2, [pc, #156]	; (8005e58 <xTaskResumeAll+0x128>)
 8005dba:	441a      	add	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f7fe fe65 	bl	8004a92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <xTaskResumeAll+0x12c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005dd6:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <xTaskResumeAll+0x130>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <xTaskResumeAll+0x120>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1cb      	bne.n	8005d7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dea:	f000 fb5f 	bl	80064ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dee:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <xTaskResumeAll+0x134>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dfa:	f000 f847 	bl	8005e8c <xTaskIncrementTick>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e04:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <xTaskResumeAll+0x130>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f1      	bne.n	8005dfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <xTaskResumeAll+0x134>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <xTaskResumeAll+0x130>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e28:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <xTaskResumeAll+0x138>)
 8005e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e38:	f001 f9c4 	bl	80071c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20001598 	.word	0x20001598
 8005e4c:	20001570 	.word	0x20001570
 8005e50:	20001530 	.word	0x20001530
 8005e54:	20001578 	.word	0x20001578
 8005e58:	200010a0 	.word	0x200010a0
 8005e5c:	2000109c 	.word	0x2000109c
 8005e60:	20001584 	.word	0x20001584
 8005e64:	20001580 	.word	0x20001580
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <xTaskGetTickCount+0x1c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e78:	687b      	ldr	r3, [r7, #4]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20001574 	.word	0x20001574

08005e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e96:	4b4f      	ldr	r3, [pc, #316]	; (8005fd4 <xTaskIncrementTick+0x148>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 808f 	bne.w	8005fbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ea0:	4b4d      	ldr	r3, [pc, #308]	; (8005fd8 <xTaskIncrementTick+0x14c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ea8:	4a4b      	ldr	r2, [pc, #300]	; (8005fd8 <xTaskIncrementTick+0x14c>)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d120      	bne.n	8005ef6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005eb4:	4b49      	ldr	r3, [pc, #292]	; (8005fdc <xTaskIncrementTick+0x150>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	603b      	str	r3, [r7, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <xTaskIncrementTick+0x46>
 8005ed4:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <xTaskIncrementTick+0x150>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <xTaskIncrementTick+0x154>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a3f      	ldr	r2, [pc, #252]	; (8005fdc <xTaskIncrementTick+0x150>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4a3f      	ldr	r2, [pc, #252]	; (8005fe0 <xTaskIncrementTick+0x154>)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4b3e      	ldr	r3, [pc, #248]	; (8005fe4 <xTaskIncrementTick+0x158>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	4a3d      	ldr	r2, [pc, #244]	; (8005fe4 <xTaskIncrementTick+0x158>)
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	f000 fadb 	bl	80064ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ef6:	4b3c      	ldr	r3, [pc, #240]	; (8005fe8 <xTaskIncrementTick+0x15c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d349      	bcc.n	8005f94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f00:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <xTaskIncrementTick+0x150>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0a:	4b37      	ldr	r3, [pc, #220]	; (8005fe8 <xTaskIncrementTick+0x15c>)
 8005f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f10:	601a      	str	r2, [r3, #0]
					break;
 8005f12:	e03f      	b.n	8005f94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f14:	4b31      	ldr	r3, [pc, #196]	; (8005fdc <xTaskIncrementTick+0x150>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d203      	bcs.n	8005f34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f2c:	4a2e      	ldr	r2, [pc, #184]	; (8005fe8 <xTaskIncrementTick+0x15c>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f32:	e02f      	b.n	8005f94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fe07 	bl	8004b4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	3318      	adds	r3, #24
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fdfe 	bl	8004b4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4b25      	ldr	r3, [pc, #148]	; (8005fec <xTaskIncrementTick+0x160>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d903      	bls.n	8005f64 <xTaskIncrementTick+0xd8>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4a22      	ldr	r2, [pc, #136]	; (8005fec <xTaskIncrementTick+0x160>)
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <xTaskIncrementTick+0x164>)
 8005f72:	441a      	add	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f7fe fd89 	bl	8004a92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <xTaskIncrementTick+0x168>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d3b8      	bcc.n	8005f00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f92:	e7b5      	b.n	8005f00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f94:	4b17      	ldr	r3, [pc, #92]	; (8005ff4 <xTaskIncrementTick+0x168>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	4915      	ldr	r1, [pc, #84]	; (8005ff0 <xTaskIncrementTick+0x164>)
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d901      	bls.n	8005fb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005fb0:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <xTaskIncrementTick+0x16c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e004      	b.n	8005fc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <xTaskIncrementTick+0x170>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <xTaskIncrementTick+0x170>)
 8005fc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fc8:	697b      	ldr	r3, [r7, #20]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20001598 	.word	0x20001598
 8005fd8:	20001574 	.word	0x20001574
 8005fdc:	20001528 	.word	0x20001528
 8005fe0:	2000152c 	.word	0x2000152c
 8005fe4:	20001588 	.word	0x20001588
 8005fe8:	20001590 	.word	0x20001590
 8005fec:	20001578 	.word	0x20001578
 8005ff0:	200010a0 	.word	0x200010a0
 8005ff4:	2000109c 	.word	0x2000109c
 8005ff8:	20001584 	.word	0x20001584
 8005ffc:	20001580 	.word	0x20001580

08006000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <vTaskSwitchContext+0xb0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800600e:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <vTaskSwitchContext+0xb4>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006014:	e046      	b.n	80060a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006016:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <vTaskSwitchContext+0xb4>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601c:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <vTaskSwitchContext+0xb8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e010      	b.n	8006046 <vTaskSwitchContext+0x46>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <vTaskSwitchContext+0x40>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <vTaskSwitchContext+0x3e>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3b01      	subs	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	491d      	ldr	r1, [pc, #116]	; (80060bc <vTaskSwitchContext+0xbc>)
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0e4      	beq.n	8006024 <vTaskSwitchContext+0x24>
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a15      	ldr	r2, [pc, #84]	; (80060bc <vTaskSwitchContext+0xbc>)
 8006066:	4413      	add	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	3308      	adds	r3, #8
 800607c:	429a      	cmp	r2, r3
 800607e:	d104      	bne.n	800608a <vTaskSwitchContext+0x8a>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4a0b      	ldr	r2, [pc, #44]	; (80060c0 <vTaskSwitchContext+0xc0>)
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <vTaskSwitchContext+0xb8>)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <vTaskSwitchContext+0xc0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3354      	adds	r3, #84	; 0x54
 80060a0:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <vTaskSwitchContext+0xc4>)
 80060a2:	6013      	str	r3, [r2, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20001598 	.word	0x20001598
 80060b4:	20001584 	.word	0x20001584
 80060b8:	20001578 	.word	0x20001578
 80060bc:	200010a0 	.word	0x200010a0
 80060c0:	2000109c 	.word	0x2000109c
 80060c4:	20000010 	.word	0x20000010

080060c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60fb      	str	r3, [r7, #12]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <vTaskPlaceOnEventList+0x44>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3318      	adds	r3, #24
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fe fcef 	bl	8004ada <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060fc:	2101      	movs	r1, #1
 80060fe:	6838      	ldr	r0, [r7, #0]
 8006100:	f000 fb64 	bl	80067cc <prvAddCurrentTaskToDelayedList>
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	2000109c 	.word	0x2000109c

08006110 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	617b      	str	r3, [r7, #20]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <vTaskPlaceOnEventListRestricted+0x54>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3318      	adds	r3, #24
 800613e:	4619      	mov	r1, r3
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7fe fca6 	bl	8004a92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800614c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006150:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	68b8      	ldr	r0, [r7, #8]
 8006156:	f000 fb39 	bl	80067cc <prvAddCurrentTaskToDelayedList>
	}
 800615a:	bf00      	nop
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	2000109c 	.word	0x2000109c

08006168 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60fb      	str	r3, [r7, #12]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	3318      	adds	r3, #24
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fcd7 	bl	8004b4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800619e:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <xTaskRemoveFromEventList+0xb0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d11d      	bne.n	80061e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fcce 	bl	8004b4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b4:	4b19      	ldr	r3, [pc, #100]	; (800621c <xTaskRemoveFromEventList+0xb4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d903      	bls.n	80061c4 <xTaskRemoveFromEventList+0x5c>
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4a16      	ldr	r2, [pc, #88]	; (800621c <xTaskRemoveFromEventList+0xb4>)
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <xTaskRemoveFromEventList+0xb8>)
 80061d2:	441a      	add	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f7fe fc59 	bl	8004a92 <vListInsertEnd>
 80061e0:	e005      	b.n	80061ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	3318      	adds	r3, #24
 80061e6:	4619      	mov	r1, r3
 80061e8:	480e      	ldr	r0, [pc, #56]	; (8006224 <xTaskRemoveFromEventList+0xbc>)
 80061ea:	f7fe fc52 	bl	8004a92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <xTaskRemoveFromEventList+0xc0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d905      	bls.n	8006208 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061fc:	2301      	movs	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <xTaskRemoveFromEventList+0xc4>)
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e001      	b.n	800620c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800620c:	697b      	ldr	r3, [r7, #20]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20001598 	.word	0x20001598
 800621c:	20001578 	.word	0x20001578
 8006220:	200010a0 	.word	0x200010a0
 8006224:	20001530 	.word	0x20001530
 8006228:	2000109c 	.word	0x2000109c
 800622c:	20001584 	.word	0x20001584

08006230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <vTaskInternalSetTimeOutState+0x24>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <vTaskInternalSetTimeOutState+0x28>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	605a      	str	r2, [r3, #4]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	20001588 	.word	0x20001588
 8006258:	20001574 	.word	0x20001574

0800625c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	613b      	str	r3, [r7, #16]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60fb      	str	r3, [r7, #12]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800629e:	f000 ff61 	bl	8007164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <xTaskCheckForTimeOut+0xbc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ba:	d102      	bne.n	80062c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	e023      	b.n	800630a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b15      	ldr	r3, [pc, #84]	; (800631c <xTaskCheckForTimeOut+0xc0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d007      	beq.n	80062de <xTaskCheckForTimeOut+0x82>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	e015      	b.n	800630a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d20b      	bcs.n	8006300 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff ff9b 	bl	8006230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e004      	b.n	800630a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800630a:	f000 ff5b 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 800630e:	69fb      	ldr	r3, [r7, #28]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20001574 	.word	0x20001574
 800631c:	20001588 	.word	0x20001588

08006320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <vTaskMissedYield+0x14>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20001584 	.word	0x20001584

08006338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006340:	f000 f852 	bl	80063e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <prvIdleTask+0x28>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d9f9      	bls.n	8006340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <prvIdleTask+0x2c>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800635c:	e7f0      	b.n	8006340 <prvIdleTask+0x8>
 800635e:	bf00      	nop
 8006360:	200010a0 	.word	0x200010a0
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	e00c      	b.n	800638e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <prvInitialiseTaskLists+0x60>)
 8006380:	4413      	add	r3, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fb58 	bl	8004a38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3301      	adds	r3, #1
 800638c:	607b      	str	r3, [r7, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b37      	cmp	r3, #55	; 0x37
 8006392:	d9ef      	bls.n	8006374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006394:	480d      	ldr	r0, [pc, #52]	; (80063cc <prvInitialiseTaskLists+0x64>)
 8006396:	f7fe fb4f 	bl	8004a38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800639a:	480d      	ldr	r0, [pc, #52]	; (80063d0 <prvInitialiseTaskLists+0x68>)
 800639c:	f7fe fb4c 	bl	8004a38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063a0:	480c      	ldr	r0, [pc, #48]	; (80063d4 <prvInitialiseTaskLists+0x6c>)
 80063a2:	f7fe fb49 	bl	8004a38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063a6:	480c      	ldr	r0, [pc, #48]	; (80063d8 <prvInitialiseTaskLists+0x70>)
 80063a8:	f7fe fb46 	bl	8004a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063ac:	480b      	ldr	r0, [pc, #44]	; (80063dc <prvInitialiseTaskLists+0x74>)
 80063ae:	f7fe fb43 	bl	8004a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <prvInitialiseTaskLists+0x78>)
 80063b4:	4a05      	ldr	r2, [pc, #20]	; (80063cc <prvInitialiseTaskLists+0x64>)
 80063b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <prvInitialiseTaskLists+0x7c>)
 80063ba:	4a05      	ldr	r2, [pc, #20]	; (80063d0 <prvInitialiseTaskLists+0x68>)
 80063bc:	601a      	str	r2, [r3, #0]
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200010a0 	.word	0x200010a0
 80063cc:	20001500 	.word	0x20001500
 80063d0:	20001514 	.word	0x20001514
 80063d4:	20001530 	.word	0x20001530
 80063d8:	20001544 	.word	0x20001544
 80063dc:	2000155c 	.word	0x2000155c
 80063e0:	20001528 	.word	0x20001528
 80063e4:	2000152c 	.word	0x2000152c

080063e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ee:	e019      	b.n	8006424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063f0:	f000 feb8 	bl	8007164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <prvCheckTasksWaitingTermination+0x50>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fba3 	bl	8004b4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <prvCheckTasksWaitingTermination+0x54>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	4a0b      	ldr	r2, [pc, #44]	; (800643c <prvCheckTasksWaitingTermination+0x54>)
 800640e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <prvCheckTasksWaitingTermination+0x58>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3b01      	subs	r3, #1
 8006416:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <prvCheckTasksWaitingTermination+0x58>)
 8006418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800641a:	f000 fed3 	bl	80071c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f810 	bl	8006444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <prvCheckTasksWaitingTermination+0x58>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e1      	bne.n	80063f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20001544 	.word	0x20001544
 800643c:	20001570 	.word	0x20001570
 8006440:	20001558 	.word	0x20001558

08006444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3354      	adds	r3, #84	; 0x54
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fb97 	bl	8007b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800645c:	2b00      	cmp	r3, #0
 800645e:	d108      	bne.n	8006472 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	4618      	mov	r0, r3
 8006466:	f001 f86b 	bl	8007540 <vPortFree>
				vPortFree( pxTCB );
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 f868 	bl	8007540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006470:	e018      	b.n	80064a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006478:	2b01      	cmp	r3, #1
 800647a:	d103      	bne.n	8006484 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 f85f 	bl	8007540 <vPortFree>
	}
 8006482:	e00f      	b.n	80064a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800648a:	2b02      	cmp	r3, #2
 800648c:	d00a      	beq.n	80064a4 <prvDeleteTCB+0x60>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60fb      	str	r3, [r7, #12]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <prvDeleteTCB+0x5e>
	}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <prvResetNextTaskUnblockTime+0x38>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <prvResetNextTaskUnblockTime+0x3c>)
 80064be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064c4:	e008      	b.n	80064d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <prvResetNextTaskUnblockTime+0x38>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <prvResetNextTaskUnblockTime+0x3c>)
 80064d6:	6013      	str	r3, [r2, #0]
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	20001528 	.word	0x20001528
 80064e8:	20001590 	.word	0x20001590

080064ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <xTaskGetSchedulerState+0x34>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064fa:	2301      	movs	r3, #1
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	e008      	b.n	8006512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <xTaskGetSchedulerState+0x38>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006508:	2302      	movs	r3, #2
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	e001      	b.n	8006512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006512:	687b      	ldr	r3, [r7, #4]
	}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	2000157c 	.word	0x2000157c
 8006524:	20001598 	.word	0x20001598

08006528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d056      	beq.n	80065ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800653e:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <xTaskPriorityDisinherit+0xd0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	d00a      	beq.n	800655e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60bb      	str	r3, [r7, #8]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	429a      	cmp	r2, r3
 8006590:	d02c      	beq.n	80065ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	2b00      	cmp	r3, #0
 8006598:	d128      	bne.n	80065ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	3304      	adds	r3, #4
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fad4 	bl	8004b4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <xTaskPriorityDisinherit+0xd4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d903      	bls.n	80065cc <xTaskPriorityDisinherit+0xa4>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <xTaskPriorityDisinherit+0xd4>)
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <xTaskPriorityDisinherit+0xd8>)
 80065da:	441a      	add	r2, r3
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fe fa55 	bl	8004a92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065ec:	697b      	ldr	r3, [r7, #20]
	}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2000109c 	.word	0x2000109c
 80065fc:	20001578 	.word	0x20001578
 8006600:	200010a0 	.word	0x200010a0

08006604 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08e      	sub	sp, #56	; 0x38
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006614:	2301      	movs	r3, #1
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006634:	f000 fe78 	bl	8007328 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800663c:	f3ef 8211 	mrs	r2, BASEPRI
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623a      	str	r2, [r7, #32]
 8006652:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006654:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	2202      	movs	r2, #2
 8006676:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d82f      	bhi.n	80066e0 <xTaskGenericNotifyFromISR+0xdc>
 8006680:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <xTaskGenericNotifyFromISR+0x84>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	08006703 	.word	0x08006703
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066af 	.word	0x080066af
 8006694:	080066bf 	.word	0x080066bf
 8006698:	080066c9 	.word	0x080066c9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80066ac:	e02c      	b.n	8006708 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80066bc:	e024      	b.n	8006708 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80066c6:	e01f      	b.n	8006708 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80066c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d004      	beq.n	80066da <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80066d8:	e016      	b.n	8006708 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80066da:	2300      	movs	r3, #0
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80066de:	e013      	b.n	8006708 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ea:	d00c      	beq.n	8006706 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	61bb      	str	r3, [r7, #24]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8006702:	bf00      	nop
 8006704:	e000      	b.n	8006708 <xTaskGenericNotifyFromISR+0x104>
					break;
 8006706:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006708:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800670c:	2b01      	cmp	r3, #1
 800670e:	d146      	bne.n	800679e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	617b      	str	r3, [r7, #20]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672e:	4b21      	ldr	r3, [pc, #132]	; (80067b4 <xTaskGenericNotifyFromISR+0x1b0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d11d      	bne.n	8006772 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	3304      	adds	r3, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe fa06 	bl	8004b4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006744:	4b1c      	ldr	r3, [pc, #112]	; (80067b8 <xTaskGenericNotifyFromISR+0x1b4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d903      	bls.n	8006754 <xTaskGenericNotifyFromISR+0x150>
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <xTaskGenericNotifyFromISR+0x1b4>)
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4a16      	ldr	r2, [pc, #88]	; (80067bc <xTaskGenericNotifyFromISR+0x1b8>)
 8006762:	441a      	add	r2, r3
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f7fe f991 	bl	8004a92 <vListInsertEnd>
 8006770:	e005      	b.n	800677e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	3318      	adds	r3, #24
 8006776:	4619      	mov	r1, r3
 8006778:	4811      	ldr	r0, [pc, #68]	; (80067c0 <xTaskGenericNotifyFromISR+0x1bc>)
 800677a:	f7fe f98a 	bl	8004a92 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <xTaskGenericNotifyFromISR+0x1c0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	429a      	cmp	r2, r3
 800678a:	d908      	bls.n	800679e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800678c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006798:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <xTaskGenericNotifyFromISR+0x1c4>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f383 8811 	msr	BASEPRI, r3
}
 80067a8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80067aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3738      	adds	r7, #56	; 0x38
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20001598 	.word	0x20001598
 80067b8:	20001578 	.word	0x20001578
 80067bc:	200010a0 	.word	0x200010a0
 80067c0:	20001530 	.word	0x20001530
 80067c4:	2000109c 	.word	0x2000109c
 80067c8:	20001584 	.word	0x20001584

080067cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067d6:	4b21      	ldr	r3, [pc, #132]	; (800685c <prvAddCurrentTaskToDelayedList+0x90>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067dc:	4b20      	ldr	r3, [pc, #128]	; (8006860 <prvAddCurrentTaskToDelayedList+0x94>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe f9b2 	bl	8004b4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ee:	d10a      	bne.n	8006806 <prvAddCurrentTaskToDelayedList+0x3a>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <prvAddCurrentTaskToDelayedList+0x94>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4819      	ldr	r0, [pc, #100]	; (8006864 <prvAddCurrentTaskToDelayedList+0x98>)
 8006800:	f7fe f947 	bl	8004a92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006804:	e026      	b.n	8006854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4413      	add	r3, r2
 800680c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800680e:	4b14      	ldr	r3, [pc, #80]	; (8006860 <prvAddCurrentTaskToDelayedList+0x94>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	429a      	cmp	r2, r3
 800681c:	d209      	bcs.n	8006832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <prvAddCurrentTaskToDelayedList+0x94>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f7fe f955 	bl	8004ada <vListInsert>
}
 8006830:	e010      	b.n	8006854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006832:	4b0e      	ldr	r3, [pc, #56]	; (800686c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <prvAddCurrentTaskToDelayedList+0x94>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7fe f94b 	bl	8004ada <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	d202      	bcs.n	8006854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800684e:	4a08      	ldr	r2, [pc, #32]	; (8006870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6013      	str	r3, [r2, #0]
}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20001574 	.word	0x20001574
 8006860:	2000109c 	.word	0x2000109c
 8006864:	2000155c 	.word	0x2000155c
 8006868:	2000152c 	.word	0x2000152c
 800686c:	20001528 	.word	0x20001528
 8006870:	20001590 	.word	0x20001590

08006874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800687e:	f000 fb07 	bl	8006e90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <xTimerCreateTimerTask+0x80>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d021      	beq.n	80068ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006892:	1d3a      	adds	r2, r7, #4
 8006894:	f107 0108 	add.w	r1, r7, #8
 8006898:	f107 030c 	add.w	r3, r7, #12
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe f8b1 	bl	8004a04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	9202      	str	r2, [sp, #8]
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	2302      	movs	r3, #2
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	2300      	movs	r3, #0
 80068b2:	460a      	mov	r2, r1
 80068b4:	4910      	ldr	r1, [pc, #64]	; (80068f8 <xTimerCreateTimerTask+0x84>)
 80068b6:	4811      	ldr	r0, [pc, #68]	; (80068fc <xTimerCreateTimerTask+0x88>)
 80068b8:	f7fe ffd0 	bl	800585c <xTaskCreateStatic>
 80068bc:	4603      	mov	r3, r0
 80068be:	4a10      	ldr	r2, [pc, #64]	; (8006900 <xTimerCreateTimerTask+0x8c>)
 80068c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <xTimerCreateTimerTask+0x8c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068ca:	2301      	movs	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	613b      	str	r3, [r7, #16]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068ea:	697b      	ldr	r3, [r7, #20]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	200015cc 	.word	0x200015cc
 80068f8:	08008c8c 	.word	0x08008c8c
 80068fc:	08006a39 	.word	0x08006a39
 8006900:	200015d0 	.word	0x200015d0

08006904 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006912:	2300      	movs	r3, #0
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xTimerGenericCommand+0x2e>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	623b      	str	r3, [r7, #32]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006932:	4b1a      	ldr	r3, [pc, #104]	; (800699c <xTimerGenericCommand+0x98>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d02a      	beq.n	8006990 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b05      	cmp	r3, #5
 800694a:	dc18      	bgt.n	800697e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800694c:	f7ff fdce 	bl	80064ec <xTaskGetSchedulerState>
 8006950:	4603      	mov	r3, r0
 8006952:	2b02      	cmp	r3, #2
 8006954:	d109      	bne.n	800696a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <xTimerGenericCommand+0x98>)
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	f107 0110 	add.w	r1, r7, #16
 800695e:	2300      	movs	r3, #0
 8006960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006962:	f7fe fac5 	bl	8004ef0 <xQueueGenericSend>
 8006966:	6278      	str	r0, [r7, #36]	; 0x24
 8006968:	e012      	b.n	8006990 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <xTimerGenericCommand+0x98>)
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	f107 0110 	add.w	r1, r7, #16
 8006972:	2300      	movs	r3, #0
 8006974:	2200      	movs	r2, #0
 8006976:	f7fe fabb 	bl	8004ef0 <xQueueGenericSend>
 800697a:	6278      	str	r0, [r7, #36]	; 0x24
 800697c:	e008      	b.n	8006990 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800697e:	4b07      	ldr	r3, [pc, #28]	; (800699c <xTimerGenericCommand+0x98>)
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	f107 0110 	add.w	r1, r7, #16
 8006986:	2300      	movs	r3, #0
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	f7fe fbaf 	bl	80050ec <xQueueGenericSendFromISR>
 800698e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006992:	4618      	mov	r0, r3
 8006994:	3728      	adds	r7, #40	; 0x28
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	200015cc 	.word	0x200015cc

080069a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069aa:	4b22      	ldr	r3, [pc, #136]	; (8006a34 <prvProcessExpiredTimer+0x94>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe f8c7 	bl	8004b4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d022      	beq.n	8006a12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	699a      	ldr	r2, [r3, #24]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	18d1      	adds	r1, r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	6978      	ldr	r0, [r7, #20]
 80069da:	f000 f8d1 	bl	8006b80 <prvInsertTimerInActiveList>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01f      	beq.n	8006a24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069e4:	2300      	movs	r3, #0
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	2300      	movs	r3, #0
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	2100      	movs	r1, #0
 80069ee:	6978      	ldr	r0, [r7, #20]
 80069f0:	f7ff ff88 	bl	8006904 <xTimerGenericCommand>
 80069f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d113      	bne.n	8006a24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60fb      	str	r3, [r7, #12]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	6978      	ldr	r0, [r7, #20]
 8006a2a:	4798      	blx	r3
}
 8006a2c:	bf00      	nop
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	200015c4 	.word	0x200015c4

08006a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a40:	f107 0308 	add.w	r3, r7, #8
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f857 	bl	8006af8 <prvGetNextExpireTime>
 8006a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f803 	bl	8006a5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a56:	f000 f8d5 	bl	8006c04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a5a:	e7f1      	b.n	8006a40 <prvTimerTask+0x8>

08006a5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a66:	f7ff f955 	bl	8005d14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a6a:	f107 0308 	add.w	r3, r7, #8
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f866 	bl	8006b40 <prvSampleTimeNow>
 8006a74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d130      	bne.n	8006ade <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <prvProcessTimerOrBlockTask+0x3c>
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d806      	bhi.n	8006a98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a8a:	f7ff f951 	bl	8005d30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff ff85 	bl	80069a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a96:	e024      	b.n	8006ae2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <prvProcessTimerOrBlockTask+0x90>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <prvProcessTimerOrBlockTask+0x50>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <prvProcessTimerOrBlockTask+0x52>
 8006aac:	2300      	movs	r3, #0
 8006aae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <prvProcessTimerOrBlockTask+0x94>)
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	4619      	mov	r1, r3
 8006abe:	f7fe fe99 	bl	80057f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ac2:	f7ff f935 	bl	8005d30 <xTaskResumeAll>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <prvProcessTimerOrBlockTask+0x98>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	f3bf 8f6f 	isb	sy
}
 8006adc:	e001      	b.n	8006ae2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ade:	f7ff f927 	bl	8005d30 <xTaskResumeAll>
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	200015c8 	.word	0x200015c8
 8006af0:	200015cc 	.word	0x200015cc
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b00:	4b0e      	ldr	r3, [pc, #56]	; (8006b3c <prvGetNextExpireTime+0x44>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <prvGetNextExpireTime+0x16>
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	e000      	b.n	8006b10 <prvGetNextExpireTime+0x18>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <prvGetNextExpireTime+0x44>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e001      	b.n	8006b2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	200015c4 	.word	0x200015c4

08006b40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b48:	f7ff f990 	bl	8005e6c <xTaskGetTickCount>
 8006b4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <prvSampleTimeNow+0x3c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d205      	bcs.n	8006b64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b58:	f000 f936 	bl	8006dc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e002      	b.n	8006b6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b6a:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <prvSampleTimeNow+0x3c>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b70:	68fb      	ldr	r3, [r7, #12]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200015d4 	.word	0x200015d4

08006b80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d812      	bhi.n	8006bcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e01b      	b.n	8006bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bba:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <prvInsertTimerInActiveList+0x7c>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fd ff88 	bl	8004ada <vListInsert>
 8006bca:	e012      	b.n	8006bf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d206      	bcs.n	8006be2 <prvInsertTimerInActiveList+0x62>
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d302      	bcc.n	8006be2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e007      	b.n	8006bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <prvInsertTimerInActiveList+0x80>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f7fd ff74 	bl	8004ada <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bf2:	697b      	ldr	r3, [r7, #20]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200015c8 	.word	0x200015c8
 8006c00:	200015c4 	.word	0x200015c4

08006c04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08e      	sub	sp, #56	; 0x38
 8006c08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c0a:	e0ca      	b.n	8006da2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da18      	bge.n	8006c44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	3304      	adds	r3, #4
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	61fb      	str	r3, [r7, #28]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3a:	6850      	ldr	r0, [r2, #4]
 8006c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3e:	6892      	ldr	r2, [r2, #8]
 8006c40:	4611      	mov	r1, r2
 8006c42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f2c0 80aa 	blt.w	8006da0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fd ff75 	bl	8004b4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c62:	463b      	mov	r3, r7
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff ff6b 	bl	8006b40 <prvSampleTimeNow>
 8006c6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	f200 8097 	bhi.w	8006da2 <prvProcessReceivedCommands+0x19e>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <prvProcessReceivedCommands+0x78>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006ca5 	.word	0x08006ca5
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006d19 	.word	0x08006d19
 8006c8c:	08006d2d 	.word	0x08006d2d
 8006c90:	08006d77 	.word	0x08006d77
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006ca5 	.word	0x08006ca5
 8006c9c:	08006d19 	.word	0x08006d19
 8006ca0:	08006d2d 	.word	0x08006d2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	18d1      	adds	r1, r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc4:	f7ff ff5c 	bl	8006b80 <prvInsertTimerInActiveList>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d069      	beq.n	8006da2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d05e      	beq.n	8006da2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	441a      	add	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf6:	f7ff fe05 	bl	8006904 <xTimerGenericCommand>
 8006cfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d14f      	bne.n	8006da2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	61bb      	str	r3, [r7, #24]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d1e:	f023 0301 	bic.w	r3, r3, #1
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d2a:	e03a      	b.n	8006da2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	617b      	str	r3, [r7, #20]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	699a      	ldr	r2, [r3, #24]
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	18d1      	adds	r1, r2, r3
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d70:	f7ff ff06 	bl	8006b80 <prvInsertTimerInActiveList>
					break;
 8006d74:	e015      	b.n	8006da2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d103      	bne.n	8006d8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d86:	f000 fbdb 	bl	8007540 <vPortFree>
 8006d8a:	e00a      	b.n	8006da2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d9e:	e000      	b.n	8006da2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006da0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006da2:	4b08      	ldr	r3, [pc, #32]	; (8006dc4 <prvProcessReceivedCommands+0x1c0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	1d39      	adds	r1, r7, #4
 8006da8:	2200      	movs	r2, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fa3a 	bl	8005224 <xQueueReceive>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f47f af2a 	bne.w	8006c0c <prvProcessReceivedCommands+0x8>
	}
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	3730      	adds	r7, #48	; 0x30
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200015cc 	.word	0x200015cc

08006dc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dce:	e048      	b.n	8006e62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd0:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <prvSwitchTimerLists+0xc0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dda:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <prvSwitchTimerLists+0xc0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fd feaf 	bl	8004b4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d02e      	beq.n	8006e62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d90e      	bls.n	8006e34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e22:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <prvSwitchTimerLists+0xc0>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f7fd fe54 	bl	8004ada <vListInsert>
 8006e32:	e016      	b.n	8006e62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e34:	2300      	movs	r3, #0
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fd60 	bl	8006904 <xTimerGenericCommand>
 8006e44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	603b      	str	r3, [r7, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <prvSwitchTimerLists+0xc0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1b1      	bne.n	8006dd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <prvSwitchTimerLists+0xc0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e72:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <prvSwitchTimerLists+0xc4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a04      	ldr	r2, [pc, #16]	; (8006e88 <prvSwitchTimerLists+0xc0>)
 8006e78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e7a:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <prvSwitchTimerLists+0xc4>)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	200015c4 	.word	0x200015c4
 8006e8c:	200015c8 	.word	0x200015c8

08006e90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e96:	f000 f965 	bl	8007164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e9a:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <prvCheckForValidListAndQueue+0x60>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d120      	bne.n	8006ee4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ea2:	4814      	ldr	r0, [pc, #80]	; (8006ef4 <prvCheckForValidListAndQueue+0x64>)
 8006ea4:	f7fd fdc8 	bl	8004a38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ea8:	4813      	ldr	r0, [pc, #76]	; (8006ef8 <prvCheckForValidListAndQueue+0x68>)
 8006eaa:	f7fd fdc5 	bl	8004a38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eae:	4b13      	ldr	r3, [pc, #76]	; (8006efc <prvCheckForValidListAndQueue+0x6c>)
 8006eb0:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <prvCheckForValidListAndQueue+0x64>)
 8006eb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006eb4:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <prvCheckForValidListAndQueue+0x70>)
 8006eb6:	4a10      	ldr	r2, [pc, #64]	; (8006ef8 <prvCheckForValidListAndQueue+0x68>)
 8006eb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <prvCheckForValidListAndQueue+0x74>)
 8006ec0:	4a11      	ldr	r2, [pc, #68]	; (8006f08 <prvCheckForValidListAndQueue+0x78>)
 8006ec2:	2110      	movs	r1, #16
 8006ec4:	200a      	movs	r0, #10
 8006ec6:	f7fd fed3 	bl	8004c70 <xQueueGenericCreateStatic>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <prvCheckForValidListAndQueue+0x60>)
 8006ece:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <prvCheckForValidListAndQueue+0x60>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ed8:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <prvCheckForValidListAndQueue+0x60>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	490b      	ldr	r1, [pc, #44]	; (8006f0c <prvCheckForValidListAndQueue+0x7c>)
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fc34 	bl	800574c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ee4:	f000 f96e 	bl	80071c4 <vPortExitCritical>
}
 8006ee8:	bf00      	nop
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	200015cc 	.word	0x200015cc
 8006ef4:	2000159c 	.word	0x2000159c
 8006ef8:	200015b0 	.word	0x200015b0
 8006efc:	200015c4 	.word	0x200015c4
 8006f00:	200015c8 	.word	0x200015c8
 8006f04:	20001678 	.word	0x20001678
 8006f08:	200015d8 	.word	0x200015d8
 8006f0c:	08008c94 	.word	0x08008c94

08006f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3b04      	subs	r3, #4
 8006f20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3b04      	subs	r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f023 0201 	bic.w	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3b04      	subs	r3, #4
 8006f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f40:	4a0c      	ldr	r2, [pc, #48]	; (8006f74 <pxPortInitialiseStack+0x64>)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3b14      	subs	r3, #20
 8006f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3b04      	subs	r3, #4
 8006f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f06f 0202 	mvn.w	r2, #2
 8006f5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b20      	subs	r3, #32
 8006f64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f66:	68fb      	ldr	r3, [r7, #12]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	08006f79 	.word	0x08006f79

08006f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <prvTaskExitError+0x54>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f8a:	d00a      	beq.n	8006fa2 <prvTaskExitError+0x2a>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60fb      	str	r3, [r7, #12]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <prvTaskExitError+0x28>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60bb      	str	r3, [r7, #8]
}
 8006fb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fb6:	bf00      	nop
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0fc      	beq.n	8006fb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	2000000c 	.word	0x2000000c

08006fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <pxCurrentTCBConst2>)
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	6808      	ldr	r0, [r1, #0]
 8006fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	f380 8809 	msr	PSP, r0
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8811 	msr	BASEPRI, r0
 8006fea:	4770      	bx	lr
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst2>:
 8006ff0:	2000109c 	.word	0x2000109c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ff8:	4808      	ldr	r0, [pc, #32]	; (800701c <prvPortStartFirstTask+0x24>)
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	6800      	ldr	r0, [r0, #0]
 8006ffe:	f380 8808 	msr	MSP, r0
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8814 	msr	CONTROL, r0
 800700a:	b662      	cpsie	i
 800700c:	b661      	cpsie	f
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	df00      	svc	0
 8007018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800701a:	bf00      	nop
 800701c:	e000ed08 	.word	0xe000ed08

08007020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007026:	4b46      	ldr	r3, [pc, #280]	; (8007140 <xPortStartScheduler+0x120>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a46      	ldr	r2, [pc, #280]	; (8007144 <xPortStartScheduler+0x124>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10a      	bne.n	8007046 <xPortStartScheduler+0x26>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007046:	4b3e      	ldr	r3, [pc, #248]	; (8007140 <xPortStartScheduler+0x120>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a3f      	ldr	r2, [pc, #252]	; (8007148 <xPortStartScheduler+0x128>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10a      	bne.n	8007066 <xPortStartScheduler+0x46>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <xPortStartScheduler+0x12c>)
 8007068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007088:	b2da      	uxtb	r2, r3
 800708a:	4b31      	ldr	r3, [pc, #196]	; (8007150 <xPortStartScheduler+0x130>)
 800708c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800708e:	4b31      	ldr	r3, [pc, #196]	; (8007154 <xPortStartScheduler+0x134>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007094:	e009      	b.n	80070aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007096:	4b2f      	ldr	r3, [pc, #188]	; (8007154 <xPortStartScheduler+0x134>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3b01      	subs	r3, #1
 800709c:	4a2d      	ldr	r2, [pc, #180]	; (8007154 <xPortStartScheduler+0x134>)
 800709e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b80      	cmp	r3, #128	; 0x80
 80070b4:	d0ef      	beq.n	8007096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070b6:	4b27      	ldr	r3, [pc, #156]	; (8007154 <xPortStartScheduler+0x134>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1c3 0307 	rsb	r3, r3, #7
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d00a      	beq.n	80070d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	60bb      	str	r3, [r7, #8]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070d8:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <xPortStartScheduler+0x134>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <xPortStartScheduler+0x134>)
 80070e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <xPortStartScheduler+0x134>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ea:	4a1a      	ldr	r2, [pc, #104]	; (8007154 <xPortStartScheduler+0x134>)
 80070ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070f6:	4b18      	ldr	r3, [pc, #96]	; (8007158 <xPortStartScheduler+0x138>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <xPortStartScheduler+0x138>)
 80070fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <xPortStartScheduler+0x138>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a14      	ldr	r2, [pc, #80]	; (8007158 <xPortStartScheduler+0x138>)
 8007108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800710c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800710e:	f000 f8dd 	bl	80072cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <xPortStartScheduler+0x13c>)
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007118:	f000 f8fc 	bl	8007314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800711c:	4b10      	ldr	r3, [pc, #64]	; (8007160 <xPortStartScheduler+0x140>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <xPortStartScheduler+0x140>)
 8007122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007128:	f7ff ff66 	bl	8006ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800712c:	f7fe ff68 	bl	8006000 <vTaskSwitchContext>
	prvTaskExitError();
 8007130:	f7ff ff22 	bl	8006f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	e000ed00 	.word	0xe000ed00
 8007144:	410fc271 	.word	0x410fc271
 8007148:	410fc270 	.word	0x410fc270
 800714c:	e000e400 	.word	0xe000e400
 8007150:	200016c8 	.word	0x200016c8
 8007154:	200016cc 	.word	0x200016cc
 8007158:	e000ed20 	.word	0xe000ed20
 800715c:	2000000c 	.word	0x2000000c
 8007160:	e000ef34 	.word	0xe000ef34

08007164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	607b      	str	r3, [r7, #4]
}
 800717c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800717e:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <vPortEnterCritical+0x58>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	4a0d      	ldr	r2, [pc, #52]	; (80071bc <vPortEnterCritical+0x58>)
 8007186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007188:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <vPortEnterCritical+0x58>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d10f      	bne.n	80071b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <vPortEnterCritical+0x5c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	603b      	str	r3, [r7, #0]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <vPortEnterCritical+0x4a>
	}
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	2000000c 	.word	0x2000000c
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <vPortExitCritical+0x50>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <vPortExitCritical+0x24>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	607b      	str	r3, [r7, #4]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <vPortExitCritical+0x50>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	4a09      	ldr	r2, [pc, #36]	; (8007214 <vPortExitCritical+0x50>)
 80071f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071f2:	4b08      	ldr	r3, [pc, #32]	; (8007214 <vPortExitCritical+0x50>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d105      	bne.n	8007206 <vPortExitCritical+0x42>
 80071fa:	2300      	movs	r3, #0
 80071fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	f383 8811 	msr	BASEPRI, r3
}
 8007204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	2000000c 	.word	0x2000000c
	...

08007220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007220:	f3ef 8009 	mrs	r0, PSP
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4b15      	ldr	r3, [pc, #84]	; (8007280 <pxCurrentTCBConst>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f01e 0f10 	tst.w	lr, #16
 8007230:	bf08      	it	eq
 8007232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	6010      	str	r0, [r2, #0]
 800723c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007244:	f380 8811 	msr	BASEPRI, r0
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f7fe fed6 	bl	8006000 <vTaskSwitchContext>
 8007254:	f04f 0000 	mov.w	r0, #0
 8007258:	f380 8811 	msr	BASEPRI, r0
 800725c:	bc09      	pop	{r0, r3}
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	6808      	ldr	r0, [r1, #0]
 8007262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007266:	f01e 0f10 	tst.w	lr, #16
 800726a:	bf08      	it	eq
 800726c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007270:	f380 8809 	msr	PSP, r0
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w

08007280 <pxCurrentTCBConst>:
 8007280:	2000109c 	.word	0x2000109c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072a2:	f7fe fdf3 	bl	8005e8c <xTaskIncrementTick>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <xPortSysTickHandler+0x40>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	2300      	movs	r3, #0
 80072b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072d0:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <vPortSetupTimerInterrupt+0x34>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072d6:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <vPortSetupTimerInterrupt+0x38>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <vPortSetupTimerInterrupt+0x3c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	; (800730c <vPortSetupTimerInterrupt+0x40>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	099b      	lsrs	r3, r3, #6
 80072e8:	4a09      	ldr	r2, [pc, #36]	; (8007310 <vPortSetupTimerInterrupt+0x44>)
 80072ea:	3b01      	subs	r3, #1
 80072ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ee:	4b04      	ldr	r3, [pc, #16]	; (8007300 <vPortSetupTimerInterrupt+0x34>)
 80072f0:	2207      	movs	r2, #7
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	e000e010 	.word	0xe000e010
 8007304:	e000e018 	.word	0xe000e018
 8007308:	20000000 	.word	0x20000000
 800730c:	10624dd3 	.word	0x10624dd3
 8007310:	e000e014 	.word	0xe000e014

08007314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007324 <vPortEnableVFP+0x10>
 8007318:	6801      	ldr	r1, [r0, #0]
 800731a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800731e:	6001      	str	r1, [r0, #0]
 8007320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007322:	bf00      	nop
 8007324:	e000ed88 	.word	0xe000ed88

08007328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800732e:	f3ef 8305 	mrs	r3, IPSR
 8007332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b0f      	cmp	r3, #15
 8007338:	d914      	bls.n	8007364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800733a:	4a17      	ldr	r2, [pc, #92]	; (8007398 <vPortValidateInterruptPriority+0x70>)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007344:	4b15      	ldr	r3, [pc, #84]	; (800739c <vPortValidateInterruptPriority+0x74>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	7afa      	ldrb	r2, [r7, #11]
 800734a:	429a      	cmp	r2, r3
 800734c:	d20a      	bcs.n	8007364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	607b      	str	r3, [r7, #4]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <vPortValidateInterruptPriority+0x78>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800736c:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <vPortValidateInterruptPriority+0x7c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d90a      	bls.n	800738a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	603b      	str	r3, [r7, #0]
}
 8007386:	bf00      	nop
 8007388:	e7fe      	b.n	8007388 <vPortValidateInterruptPriority+0x60>
	}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	e000e3f0 	.word	0xe000e3f0
 800739c:	200016c8 	.word	0x200016c8
 80073a0:	e000ed0c 	.word	0xe000ed0c
 80073a4:	200016cc 	.word	0x200016cc

080073a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08a      	sub	sp, #40	; 0x28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073b4:	f7fe fcae 	bl	8005d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073b8:	4b5b      	ldr	r3, [pc, #364]	; (8007528 <pvPortMalloc+0x180>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073c0:	f000 f920 	bl	8007604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073c4:	4b59      	ldr	r3, [pc, #356]	; (800752c <pvPortMalloc+0x184>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 8093 	bne.w	80074f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01d      	beq.n	8007414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073d8:	2208      	movs	r2, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d014      	beq.n	8007414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f023 0307 	bic.w	r3, r3, #7
 80073f0:	3308      	adds	r3, #8
 80073f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <pvPortMalloc+0x6c>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	617b      	str	r3, [r7, #20]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d06e      	beq.n	80074f8 <pvPortMalloc+0x150>
 800741a:	4b45      	ldr	r3, [pc, #276]	; (8007530 <pvPortMalloc+0x188>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d869      	bhi.n	80074f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007424:	4b43      	ldr	r3, [pc, #268]	; (8007534 <pvPortMalloc+0x18c>)
 8007426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007428:	4b42      	ldr	r3, [pc, #264]	; (8007534 <pvPortMalloc+0x18c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800742e:	e004      	b.n	800743a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d903      	bls.n	800744c <pvPortMalloc+0xa4>
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f1      	bne.n	8007430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800744c:	4b36      	ldr	r3, [pc, #216]	; (8007528 <pvPortMalloc+0x180>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	429a      	cmp	r2, r3
 8007454:	d050      	beq.n	80074f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2208      	movs	r2, #8
 800745c:	4413      	add	r3, r2
 800745e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	2308      	movs	r3, #8
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	429a      	cmp	r2, r3
 8007476:	d91f      	bls.n	80074b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4413      	add	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <pvPortMalloc+0xf8>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	613b      	str	r3, [r7, #16]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074b2:	69b8      	ldr	r0, [r7, #24]
 80074b4:	f000 f908 	bl	80076c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074b8:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <pvPortMalloc+0x188>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <pvPortMalloc+0x188>)
 80074c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074c6:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <pvPortMalloc+0x188>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <pvPortMalloc+0x190>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d203      	bcs.n	80074da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074d2:	4b17      	ldr	r3, [pc, #92]	; (8007530 <pvPortMalloc+0x188>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a18      	ldr	r2, [pc, #96]	; (8007538 <pvPortMalloc+0x190>)
 80074d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <pvPortMalloc+0x184>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <pvPortMalloc+0x194>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3301      	adds	r3, #1
 80074f4:	4a11      	ldr	r2, [pc, #68]	; (800753c <pvPortMalloc+0x194>)
 80074f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074f8:	f7fe fc1a 	bl	8005d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <pvPortMalloc+0x174>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <pvPortMalloc+0x172>
	return pvReturn;
 800751c:	69fb      	ldr	r3, [r7, #28]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3728      	adds	r7, #40	; 0x28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20002290 	.word	0x20002290
 800752c:	200022a4 	.word	0x200022a4
 8007530:	20002294 	.word	0x20002294
 8007534:	20002288 	.word	0x20002288
 8007538:	20002298 	.word	0x20002298
 800753c:	2000229c 	.word	0x2000229c

08007540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d04d      	beq.n	80075ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007552:	2308      	movs	r3, #8
 8007554:	425b      	negs	r3, r3
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4413      	add	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <vPortFree+0xb8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4013      	ands	r3, r2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <vPortFree+0x44>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	60fb      	str	r3, [r7, #12]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <vPortFree+0x62>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60bb      	str	r3, [r7, #8]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <vPortFree+0xb8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01e      	beq.n	80075ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11a      	bne.n	80075ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <vPortFree+0xb8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	43db      	mvns	r3, r3
 80075c2:	401a      	ands	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075c8:	f7fe fba4 	bl	8005d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <vPortFree+0xbc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4413      	add	r3, r2
 80075d6:	4a09      	ldr	r2, [pc, #36]	; (80075fc <vPortFree+0xbc>)
 80075d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075da:	6938      	ldr	r0, [r7, #16]
 80075dc:	f000 f874 	bl	80076c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <vPortFree+0xc0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <vPortFree+0xc0>)
 80075e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075ea:	f7fe fba1 	bl	8005d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ee:	bf00      	nop
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200022a4 	.word	0x200022a4
 80075fc:	20002294 	.word	0x20002294
 8007600:	200022a0 	.word	0x200022a0

08007604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800760a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800760e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007610:	4b27      	ldr	r3, [pc, #156]	; (80076b0 <prvHeapInit+0xac>)
 8007612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00c      	beq.n	8007638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3307      	adds	r3, #7
 8007622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <prvHeapInit+0xac>)
 8007634:	4413      	add	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <prvHeapInit+0xb0>)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <prvHeapInit+0xb0>)
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007650:	2208      	movs	r2, #8
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0307 	bic.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <prvHeapInit+0xb4>)
 8007664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <prvHeapInit+0xb4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <prvHeapInit+0xb4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <prvHeapInit+0xb4>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <prvHeapInit+0xb8>)
 8007692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <prvHeapInit+0xbc>)
 800769a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800769c:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <prvHeapInit+0xc0>)
 800769e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	200016d0 	.word	0x200016d0
 80076b4:	20002288 	.word	0x20002288
 80076b8:	20002290 	.word	0x20002290
 80076bc:	20002298 	.word	0x20002298
 80076c0:	20002294 	.word	0x20002294
 80076c4:	200022a4 	.word	0x200022a4

080076c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076d0:	4b28      	ldr	r3, [pc, #160]	; (8007774 <prvInsertBlockIntoFreeList+0xac>)
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e002      	b.n	80076dc <prvInsertBlockIntoFreeList+0x14>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d8f7      	bhi.n	80076d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4413      	add	r3, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d108      	bne.n	800770a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	441a      	add	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d118      	bne.n	8007750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b15      	ldr	r3, [pc, #84]	; (8007778 <prvInsertBlockIntoFreeList+0xb0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d00d      	beq.n	8007746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	441a      	add	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e008      	b.n	8007758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <prvInsertBlockIntoFreeList+0xb0>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e003      	b.n	8007758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d002      	beq.n	8007766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20002288 	.word	0x20002288
 8007778:	20002290 	.word	0x20002290

0800777c <__errno>:
 800777c:	4b01      	ldr	r3, [pc, #4]	; (8007784 <__errno+0x8>)
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000010 	.word	0x20000010

08007788 <std>:
 8007788:	2300      	movs	r3, #0
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	e9c0 3300 	strd	r3, r3, [r0]
 8007792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007796:	6083      	str	r3, [r0, #8]
 8007798:	8181      	strh	r1, [r0, #12]
 800779a:	6643      	str	r3, [r0, #100]	; 0x64
 800779c:	81c2      	strh	r2, [r0, #14]
 800779e:	6183      	str	r3, [r0, #24]
 80077a0:	4619      	mov	r1, r3
 80077a2:	2208      	movs	r2, #8
 80077a4:	305c      	adds	r0, #92	; 0x5c
 80077a6:	f000 f92a 	bl	80079fe <memset>
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <std+0x38>)
 80077ac:	6263      	str	r3, [r4, #36]	; 0x24
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <std+0x3c>)
 80077b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <std+0x40>)
 80077b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <std+0x44>)
 80077b8:	6224      	str	r4, [r4, #32]
 80077ba:	6323      	str	r3, [r4, #48]	; 0x30
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	08007cc5 	.word	0x08007cc5
 80077c4:	08007ce7 	.word	0x08007ce7
 80077c8:	08007d1f 	.word	0x08007d1f
 80077cc:	08007d43 	.word	0x08007d43

080077d0 <_cleanup_r>:
 80077d0:	4901      	ldr	r1, [pc, #4]	; (80077d8 <_cleanup_r+0x8>)
 80077d2:	f000 b8af 	b.w	8007934 <_fwalk_reent>
 80077d6:	bf00      	nop
 80077d8:	08007e9d 	.word	0x08007e9d

080077dc <__sfmoreglue>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	2268      	movs	r2, #104	; 0x68
 80077e0:	1e4d      	subs	r5, r1, #1
 80077e2:	4355      	muls	r5, r2
 80077e4:	460e      	mov	r6, r1
 80077e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077ea:	f000 f931 	bl	8007a50 <_malloc_r>
 80077ee:	4604      	mov	r4, r0
 80077f0:	b140      	cbz	r0, 8007804 <__sfmoreglue+0x28>
 80077f2:	2100      	movs	r1, #0
 80077f4:	e9c0 1600 	strd	r1, r6, [r0]
 80077f8:	300c      	adds	r0, #12
 80077fa:	60a0      	str	r0, [r4, #8]
 80077fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007800:	f000 f8fd 	bl	80079fe <memset>
 8007804:	4620      	mov	r0, r4
 8007806:	bd70      	pop	{r4, r5, r6, pc}

08007808 <__sfp_lock_acquire>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__sfp_lock_acquire+0x8>)
 800780a:	f000 b8d8 	b.w	80079be <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	200022a9 	.word	0x200022a9

08007814 <__sfp_lock_release>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__sfp_lock_release+0x8>)
 8007816:	f000 b8d3 	b.w	80079c0 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	200022a9 	.word	0x200022a9

08007820 <__sinit_lock_acquire>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__sinit_lock_acquire+0x8>)
 8007822:	f000 b8cc 	b.w	80079be <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	200022aa 	.word	0x200022aa

0800782c <__sinit_lock_release>:
 800782c:	4801      	ldr	r0, [pc, #4]	; (8007834 <__sinit_lock_release+0x8>)
 800782e:	f000 b8c7 	b.w	80079c0 <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	200022aa 	.word	0x200022aa

08007838 <__sinit>:
 8007838:	b510      	push	{r4, lr}
 800783a:	4604      	mov	r4, r0
 800783c:	f7ff fff0 	bl	8007820 <__sinit_lock_acquire>
 8007840:	69a3      	ldr	r3, [r4, #24]
 8007842:	b11b      	cbz	r3, 800784c <__sinit+0x14>
 8007844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007848:	f7ff bff0 	b.w	800782c <__sinit_lock_release>
 800784c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007850:	6523      	str	r3, [r4, #80]	; 0x50
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <__sinit+0x68>)
 8007854:	4a13      	ldr	r2, [pc, #76]	; (80078a4 <__sinit+0x6c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	62a2      	str	r2, [r4, #40]	; 0x28
 800785a:	42a3      	cmp	r3, r4
 800785c:	bf04      	itt	eq
 800785e:	2301      	moveq	r3, #1
 8007860:	61a3      	streq	r3, [r4, #24]
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f820 	bl	80078a8 <__sfp>
 8007868:	6060      	str	r0, [r4, #4]
 800786a:	4620      	mov	r0, r4
 800786c:	f000 f81c 	bl	80078a8 <__sfp>
 8007870:	60a0      	str	r0, [r4, #8]
 8007872:	4620      	mov	r0, r4
 8007874:	f000 f818 	bl	80078a8 <__sfp>
 8007878:	2200      	movs	r2, #0
 800787a:	60e0      	str	r0, [r4, #12]
 800787c:	2104      	movs	r1, #4
 800787e:	6860      	ldr	r0, [r4, #4]
 8007880:	f7ff ff82 	bl	8007788 <std>
 8007884:	68a0      	ldr	r0, [r4, #8]
 8007886:	2201      	movs	r2, #1
 8007888:	2109      	movs	r1, #9
 800788a:	f7ff ff7d 	bl	8007788 <std>
 800788e:	68e0      	ldr	r0, [r4, #12]
 8007890:	2202      	movs	r2, #2
 8007892:	2112      	movs	r1, #18
 8007894:	f7ff ff78 	bl	8007788 <std>
 8007898:	2301      	movs	r3, #1
 800789a:	61a3      	str	r3, [r4, #24]
 800789c:	e7d2      	b.n	8007844 <__sinit+0xc>
 800789e:	bf00      	nop
 80078a0:	08008db4 	.word	0x08008db4
 80078a4:	080077d1 	.word	0x080077d1

080078a8 <__sfp>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	4607      	mov	r7, r0
 80078ac:	f7ff ffac 	bl	8007808 <__sfp_lock_acquire>
 80078b0:	4b1e      	ldr	r3, [pc, #120]	; (800792c <__sfp+0x84>)
 80078b2:	681e      	ldr	r6, [r3, #0]
 80078b4:	69b3      	ldr	r3, [r6, #24]
 80078b6:	b913      	cbnz	r3, 80078be <__sfp+0x16>
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff ffbd 	bl	8007838 <__sinit>
 80078be:	3648      	adds	r6, #72	; 0x48
 80078c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	d503      	bpl.n	80078d0 <__sfp+0x28>
 80078c8:	6833      	ldr	r3, [r6, #0]
 80078ca:	b30b      	cbz	r3, 8007910 <__sfp+0x68>
 80078cc:	6836      	ldr	r6, [r6, #0]
 80078ce:	e7f7      	b.n	80078c0 <__sfp+0x18>
 80078d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078d4:	b9d5      	cbnz	r5, 800790c <__sfp+0x64>
 80078d6:	4b16      	ldr	r3, [pc, #88]	; (8007930 <__sfp+0x88>)
 80078d8:	60e3      	str	r3, [r4, #12]
 80078da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078de:	6665      	str	r5, [r4, #100]	; 0x64
 80078e0:	f000 f86c 	bl	80079bc <__retarget_lock_init_recursive>
 80078e4:	f7ff ff96 	bl	8007814 <__sfp_lock_release>
 80078e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078f0:	6025      	str	r5, [r4, #0]
 80078f2:	61a5      	str	r5, [r4, #24]
 80078f4:	2208      	movs	r2, #8
 80078f6:	4629      	mov	r1, r5
 80078f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078fc:	f000 f87f 	bl	80079fe <memset>
 8007900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007908:	4620      	mov	r0, r4
 800790a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790c:	3468      	adds	r4, #104	; 0x68
 800790e:	e7d9      	b.n	80078c4 <__sfp+0x1c>
 8007910:	2104      	movs	r1, #4
 8007912:	4638      	mov	r0, r7
 8007914:	f7ff ff62 	bl	80077dc <__sfmoreglue>
 8007918:	4604      	mov	r4, r0
 800791a:	6030      	str	r0, [r6, #0]
 800791c:	2800      	cmp	r0, #0
 800791e:	d1d5      	bne.n	80078cc <__sfp+0x24>
 8007920:	f7ff ff78 	bl	8007814 <__sfp_lock_release>
 8007924:	230c      	movs	r3, #12
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	e7ee      	b.n	8007908 <__sfp+0x60>
 800792a:	bf00      	nop
 800792c:	08008db4 	.word	0x08008db4
 8007930:	ffff0001 	.word	0xffff0001

08007934 <_fwalk_reent>:
 8007934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007938:	4606      	mov	r6, r0
 800793a:	4688      	mov	r8, r1
 800793c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007940:	2700      	movs	r7, #0
 8007942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007946:	f1b9 0901 	subs.w	r9, r9, #1
 800794a:	d505      	bpl.n	8007958 <_fwalk_reent+0x24>
 800794c:	6824      	ldr	r4, [r4, #0]
 800794e:	2c00      	cmp	r4, #0
 8007950:	d1f7      	bne.n	8007942 <_fwalk_reent+0xe>
 8007952:	4638      	mov	r0, r7
 8007954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007958:	89ab      	ldrh	r3, [r5, #12]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d907      	bls.n	800796e <_fwalk_reent+0x3a>
 800795e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007962:	3301      	adds	r3, #1
 8007964:	d003      	beq.n	800796e <_fwalk_reent+0x3a>
 8007966:	4629      	mov	r1, r5
 8007968:	4630      	mov	r0, r6
 800796a:	47c0      	blx	r8
 800796c:	4307      	orrs	r7, r0
 800796e:	3568      	adds	r5, #104	; 0x68
 8007970:	e7e9      	b.n	8007946 <_fwalk_reent+0x12>
	...

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	; (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	; (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	; (80079b8 <__libc_init_array+0x44>)
 8007988:	f001 f924 	bl	8008bd4 <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	08008df4 	.word	0x08008df4
 80079b0:	08008df4 	.word	0x08008df4
 80079b4:	08008df4 	.word	0x08008df4
 80079b8:	08008df8 	.word	0x08008df8

080079bc <__retarget_lock_init_recursive>:
 80079bc:	4770      	bx	lr

080079be <__retarget_lock_acquire_recursive>:
 80079be:	4770      	bx	lr

080079c0 <__retarget_lock_release_recursive>:
 80079c0:	4770      	bx	lr

080079c2 <memcmp>:
 80079c2:	b510      	push	{r4, lr}
 80079c4:	3901      	subs	r1, #1
 80079c6:	4402      	add	r2, r0
 80079c8:	4290      	cmp	r0, r2
 80079ca:	d101      	bne.n	80079d0 <memcmp+0xe>
 80079cc:	2000      	movs	r0, #0
 80079ce:	e005      	b.n	80079dc <memcmp+0x1a>
 80079d0:	7803      	ldrb	r3, [r0, #0]
 80079d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	d001      	beq.n	80079de <memcmp+0x1c>
 80079da:	1b18      	subs	r0, r3, r4
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	3001      	adds	r0, #1
 80079e0:	e7f2      	b.n	80079c8 <memcmp+0x6>

080079e2 <memcpy>:
 80079e2:	440a      	add	r2, r1
 80079e4:	4291      	cmp	r1, r2
 80079e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079ea:	d100      	bne.n	80079ee <memcpy+0xc>
 80079ec:	4770      	bx	lr
 80079ee:	b510      	push	{r4, lr}
 80079f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079f8:	4291      	cmp	r1, r2
 80079fa:	d1f9      	bne.n	80079f0 <memcpy+0xe>
 80079fc:	bd10      	pop	{r4, pc}

080079fe <memset>:
 80079fe:	4402      	add	r2, r0
 8007a00:	4603      	mov	r3, r0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d100      	bne.n	8007a08 <memset+0xa>
 8007a06:	4770      	bx	lr
 8007a08:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0c:	e7f9      	b.n	8007a02 <memset+0x4>
	...

08007a10 <sbrk_aligned>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	4e0e      	ldr	r6, [pc, #56]	; (8007a4c <sbrk_aligned+0x3c>)
 8007a14:	460c      	mov	r4, r1
 8007a16:	6831      	ldr	r1, [r6, #0]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	b911      	cbnz	r1, 8007a22 <sbrk_aligned+0x12>
 8007a1c:	f000 f90e 	bl	8007c3c <_sbrk_r>
 8007a20:	6030      	str	r0, [r6, #0]
 8007a22:	4621      	mov	r1, r4
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 f909 	bl	8007c3c <_sbrk_r>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	d00a      	beq.n	8007a44 <sbrk_aligned+0x34>
 8007a2e:	1cc4      	adds	r4, r0, #3
 8007a30:	f024 0403 	bic.w	r4, r4, #3
 8007a34:	42a0      	cmp	r0, r4
 8007a36:	d007      	beq.n	8007a48 <sbrk_aligned+0x38>
 8007a38:	1a21      	subs	r1, r4, r0
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 f8fe 	bl	8007c3c <_sbrk_r>
 8007a40:	3001      	adds	r0, #1
 8007a42:	d101      	bne.n	8007a48 <sbrk_aligned+0x38>
 8007a44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a48:	4620      	mov	r0, r4
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	200022b0 	.word	0x200022b0

08007a50 <_malloc_r>:
 8007a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a54:	1ccd      	adds	r5, r1, #3
 8007a56:	f025 0503 	bic.w	r5, r5, #3
 8007a5a:	3508      	adds	r5, #8
 8007a5c:	2d0c      	cmp	r5, #12
 8007a5e:	bf38      	it	cc
 8007a60:	250c      	movcc	r5, #12
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	4607      	mov	r7, r0
 8007a66:	db01      	blt.n	8007a6c <_malloc_r+0x1c>
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	d905      	bls.n	8007a78 <_malloc_r+0x28>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	2600      	movs	r6, #0
 8007a72:	4630      	mov	r0, r6
 8007a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a78:	4e2e      	ldr	r6, [pc, #184]	; (8007b34 <_malloc_r+0xe4>)
 8007a7a:	f000 fa5d 	bl	8007f38 <__malloc_lock>
 8007a7e:	6833      	ldr	r3, [r6, #0]
 8007a80:	461c      	mov	r4, r3
 8007a82:	bb34      	cbnz	r4, 8007ad2 <_malloc_r+0x82>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7ff ffc2 	bl	8007a10 <sbrk_aligned>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	4604      	mov	r4, r0
 8007a90:	d14d      	bne.n	8007b2e <_malloc_r+0xde>
 8007a92:	6834      	ldr	r4, [r6, #0]
 8007a94:	4626      	mov	r6, r4
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	d140      	bne.n	8007b1c <_malloc_r+0xcc>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	eb04 0803 	add.w	r8, r4, r3
 8007aa4:	f000 f8ca 	bl	8007c3c <_sbrk_r>
 8007aa8:	4580      	cmp	r8, r0
 8007aaa:	d13a      	bne.n	8007b22 <_malloc_r+0xd2>
 8007aac:	6821      	ldr	r1, [r4, #0]
 8007aae:	3503      	adds	r5, #3
 8007ab0:	1a6d      	subs	r5, r5, r1
 8007ab2:	f025 0503 	bic.w	r5, r5, #3
 8007ab6:	3508      	adds	r5, #8
 8007ab8:	2d0c      	cmp	r5, #12
 8007aba:	bf38      	it	cc
 8007abc:	250c      	movcc	r5, #12
 8007abe:	4629      	mov	r1, r5
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff ffa5 	bl	8007a10 <sbrk_aligned>
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d02b      	beq.n	8007b22 <_malloc_r+0xd2>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	442b      	add	r3, r5
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	e00e      	b.n	8007af0 <_malloc_r+0xa0>
 8007ad2:	6822      	ldr	r2, [r4, #0]
 8007ad4:	1b52      	subs	r2, r2, r5
 8007ad6:	d41e      	bmi.n	8007b16 <_malloc_r+0xc6>
 8007ad8:	2a0b      	cmp	r2, #11
 8007ada:	d916      	bls.n	8007b0a <_malloc_r+0xba>
 8007adc:	1961      	adds	r1, r4, r5
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	6025      	str	r5, [r4, #0]
 8007ae2:	bf18      	it	ne
 8007ae4:	6059      	strne	r1, [r3, #4]
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	bf08      	it	eq
 8007aea:	6031      	streq	r1, [r6, #0]
 8007aec:	5162      	str	r2, [r4, r5]
 8007aee:	604b      	str	r3, [r1, #4]
 8007af0:	4638      	mov	r0, r7
 8007af2:	f104 060b 	add.w	r6, r4, #11
 8007af6:	f000 fa25 	bl	8007f44 <__malloc_unlock>
 8007afa:	f026 0607 	bic.w	r6, r6, #7
 8007afe:	1d23      	adds	r3, r4, #4
 8007b00:	1af2      	subs	r2, r6, r3
 8007b02:	d0b6      	beq.n	8007a72 <_malloc_r+0x22>
 8007b04:	1b9b      	subs	r3, r3, r6
 8007b06:	50a3      	str	r3, [r4, r2]
 8007b08:	e7b3      	b.n	8007a72 <_malloc_r+0x22>
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	bf0c      	ite	eq
 8007b10:	6032      	streq	r2, [r6, #0]
 8007b12:	605a      	strne	r2, [r3, #4]
 8007b14:	e7ec      	b.n	8007af0 <_malloc_r+0xa0>
 8007b16:	4623      	mov	r3, r4
 8007b18:	6864      	ldr	r4, [r4, #4]
 8007b1a:	e7b2      	b.n	8007a82 <_malloc_r+0x32>
 8007b1c:	4634      	mov	r4, r6
 8007b1e:	6876      	ldr	r6, [r6, #4]
 8007b20:	e7b9      	b.n	8007a96 <_malloc_r+0x46>
 8007b22:	230c      	movs	r3, #12
 8007b24:	603b      	str	r3, [r7, #0]
 8007b26:	4638      	mov	r0, r7
 8007b28:	f000 fa0c 	bl	8007f44 <__malloc_unlock>
 8007b2c:	e7a1      	b.n	8007a72 <_malloc_r+0x22>
 8007b2e:	6025      	str	r5, [r4, #0]
 8007b30:	e7de      	b.n	8007af0 <_malloc_r+0xa0>
 8007b32:	bf00      	nop
 8007b34:	200022ac 	.word	0x200022ac

08007b38 <iprintf>:
 8007b38:	b40f      	push	{r0, r1, r2, r3}
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <iprintf+0x2c>)
 8007b3c:	b513      	push	{r0, r1, r4, lr}
 8007b3e:	681c      	ldr	r4, [r3, #0]
 8007b40:	b124      	cbz	r4, 8007b4c <iprintf+0x14>
 8007b42:	69a3      	ldr	r3, [r4, #24]
 8007b44:	b913      	cbnz	r3, 8007b4c <iprintf+0x14>
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7ff fe76 	bl	8007838 <__sinit>
 8007b4c:	ab05      	add	r3, sp, #20
 8007b4e:	9a04      	ldr	r2, [sp, #16]
 8007b50:	68a1      	ldr	r1, [r4, #8]
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fbcd 	bl	80082f4 <_vfiprintf_r>
 8007b5a:	b002      	add	sp, #8
 8007b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b60:	b004      	add	sp, #16
 8007b62:	4770      	bx	lr
 8007b64:	20000010 	.word	0x20000010

08007b68 <cleanup_glue>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	6809      	ldr	r1, [r1, #0]
 8007b6e:	4605      	mov	r5, r0
 8007b70:	b109      	cbz	r1, 8007b76 <cleanup_glue+0xe>
 8007b72:	f7ff fff9 	bl	8007b68 <cleanup_glue>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7e:	f000 b9e7 	b.w	8007f50 <_free_r>
	...

08007b84 <_reclaim_reent>:
 8007b84:	4b2c      	ldr	r3, [pc, #176]	; (8007c38 <_reclaim_reent+0xb4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4283      	cmp	r3, r0
 8007b8a:	b570      	push	{r4, r5, r6, lr}
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	d051      	beq.n	8007c34 <_reclaim_reent+0xb0>
 8007b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b92:	b143      	cbz	r3, 8007ba6 <_reclaim_reent+0x22>
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d14a      	bne.n	8007c30 <_reclaim_reent+0xac>
 8007b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b9c:	6819      	ldr	r1, [r3, #0]
 8007b9e:	b111      	cbz	r1, 8007ba6 <_reclaim_reent+0x22>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 f9d5 	bl	8007f50 <_free_r>
 8007ba6:	6961      	ldr	r1, [r4, #20]
 8007ba8:	b111      	cbz	r1, 8007bb0 <_reclaim_reent+0x2c>
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 f9d0 	bl	8007f50 <_free_r>
 8007bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bb2:	b111      	cbz	r1, 8007bba <_reclaim_reent+0x36>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 f9cb 	bl	8007f50 <_free_r>
 8007bba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bbc:	b111      	cbz	r1, 8007bc4 <_reclaim_reent+0x40>
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 f9c6 	bl	8007f50 <_free_r>
 8007bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007bc6:	b111      	cbz	r1, 8007bce <_reclaim_reent+0x4a>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 f9c1 	bl	8007f50 <_free_r>
 8007bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bd0:	b111      	cbz	r1, 8007bd8 <_reclaim_reent+0x54>
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f9bc 	bl	8007f50 <_free_r>
 8007bd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007bda:	b111      	cbz	r1, 8007be2 <_reclaim_reent+0x5e>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 f9b7 	bl	8007f50 <_free_r>
 8007be2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007be4:	b111      	cbz	r1, 8007bec <_reclaim_reent+0x68>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 f9b2 	bl	8007f50 <_free_r>
 8007bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bee:	b111      	cbz	r1, 8007bf6 <_reclaim_reent+0x72>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 f9ad 	bl	8007f50 <_free_r>
 8007bf6:	69a3      	ldr	r3, [r4, #24]
 8007bf8:	b1e3      	cbz	r3, 8007c34 <_reclaim_reent+0xb0>
 8007bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4798      	blx	r3
 8007c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c02:	b1b9      	cbz	r1, 8007c34 <_reclaim_reent+0xb0>
 8007c04:	4620      	mov	r0, r4
 8007c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c0a:	f7ff bfad 	b.w	8007b68 <cleanup_glue>
 8007c0e:	5949      	ldr	r1, [r1, r5]
 8007c10:	b941      	cbnz	r1, 8007c24 <_reclaim_reent+0xa0>
 8007c12:	3504      	adds	r5, #4
 8007c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c16:	2d80      	cmp	r5, #128	; 0x80
 8007c18:	68d9      	ldr	r1, [r3, #12]
 8007c1a:	d1f8      	bne.n	8007c0e <_reclaim_reent+0x8a>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 f997 	bl	8007f50 <_free_r>
 8007c22:	e7ba      	b.n	8007b9a <_reclaim_reent+0x16>
 8007c24:	680e      	ldr	r6, [r1, #0]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f992 	bl	8007f50 <_free_r>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	e7ef      	b.n	8007c10 <_reclaim_reent+0x8c>
 8007c30:	2500      	movs	r5, #0
 8007c32:	e7ef      	b.n	8007c14 <_reclaim_reent+0x90>
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	bf00      	nop
 8007c38:	20000010 	.word	0x20000010

08007c3c <_sbrk_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_sbrk_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7f9 f8b8 	bl	8000dbc <_sbrk>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_sbrk_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_sbrk_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200022b4 	.word	0x200022b4

08007c5c <sniprintf>:
 8007c5c:	b40c      	push	{r2, r3}
 8007c5e:	b530      	push	{r4, r5, lr}
 8007c60:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <sniprintf+0x64>)
 8007c62:	1e0c      	subs	r4, r1, #0
 8007c64:	681d      	ldr	r5, [r3, #0]
 8007c66:	b09d      	sub	sp, #116	; 0x74
 8007c68:	da08      	bge.n	8007c7c <sniprintf+0x20>
 8007c6a:	238b      	movs	r3, #139	; 0x8b
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c72:	b01d      	add	sp, #116	; 0x74
 8007c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c78:	b002      	add	sp, #8
 8007c7a:	4770      	bx	lr
 8007c7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c84:	bf14      	ite	ne
 8007c86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007c8a:	4623      	moveq	r3, r4
 8007c8c:	9304      	str	r3, [sp, #16]
 8007c8e:	9307      	str	r3, [sp, #28]
 8007c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c94:	9002      	str	r0, [sp, #8]
 8007c96:	9006      	str	r0, [sp, #24]
 8007c98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c9e:	ab21      	add	r3, sp, #132	; 0x84
 8007ca0:	a902      	add	r1, sp, #8
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	f000 f9fb 	bl	80080a0 <_svfiprintf_r>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	bfbc      	itt	lt
 8007cae:	238b      	movlt	r3, #139	; 0x8b
 8007cb0:	602b      	strlt	r3, [r5, #0]
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d0dd      	beq.n	8007c72 <sniprintf+0x16>
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	e7d9      	b.n	8007c72 <sniprintf+0x16>
 8007cbe:	bf00      	nop
 8007cc0:	20000010 	.word	0x20000010

08007cc4 <__sread>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ccc:	f000 fdd6 	bl	800887c <_read_r>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	bfab      	itete	ge
 8007cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8007cd8:	181b      	addge	r3, r3, r0
 8007cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cde:	bfac      	ite	ge
 8007ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ce2:	81a3      	strhlt	r3, [r4, #12]
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <__swrite>:
 8007ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cea:	461f      	mov	r7, r3
 8007cec:	898b      	ldrh	r3, [r1, #12]
 8007cee:	05db      	lsls	r3, r3, #23
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	d505      	bpl.n	8007d04 <__swrite+0x1e>
 8007cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f000 f908 	bl	8007f14 <_lseek_r>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	4632      	mov	r2, r6
 8007d12:	463b      	mov	r3, r7
 8007d14:	4628      	mov	r0, r5
 8007d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1a:	f000 b817 	b.w	8007d4c <_write_r>

08007d1e <__sseek>:
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d26:	f000 f8f5 	bl	8007f14 <_lseek_r>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	bf15      	itete	ne
 8007d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d3a:	81a3      	strheq	r3, [r4, #12]
 8007d3c:	bf18      	it	ne
 8007d3e:	81a3      	strhne	r3, [r4, #12]
 8007d40:	bd10      	pop	{r4, pc}

08007d42 <__sclose>:
 8007d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d46:	f000 b813 	b.w	8007d70 <_close_r>
	...

08007d4c <_write_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4d07      	ldr	r5, [pc, #28]	; (8007d6c <_write_r+0x20>)
 8007d50:	4604      	mov	r4, r0
 8007d52:	4608      	mov	r0, r1
 8007d54:	4611      	mov	r1, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	602a      	str	r2, [r5, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f7f8 ffdd 	bl	8000d1a <_write>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_write_r+0x1e>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_write_r+0x1e>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	200022b4 	.word	0x200022b4

08007d70 <_close_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d06      	ldr	r5, [pc, #24]	; (8007d8c <_close_r+0x1c>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	f7f8 ffe9 	bl	8000d52 <_close>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_close_r+0x1a>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_close_r+0x1a>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	200022b4 	.word	0x200022b4

08007d90 <__sflush_r>:
 8007d90:	898a      	ldrh	r2, [r1, #12]
 8007d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d96:	4605      	mov	r5, r0
 8007d98:	0710      	lsls	r0, r2, #28
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	d458      	bmi.n	8007e50 <__sflush_r+0xc0>
 8007d9e:	684b      	ldr	r3, [r1, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dc05      	bgt.n	8007db0 <__sflush_r+0x20>
 8007da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	dc02      	bgt.n	8007db0 <__sflush_r+0x20>
 8007daa:	2000      	movs	r0, #0
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db2:	2e00      	cmp	r6, #0
 8007db4:	d0f9      	beq.n	8007daa <__sflush_r+0x1a>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dbc:	682f      	ldr	r7, [r5, #0]
 8007dbe:	602b      	str	r3, [r5, #0]
 8007dc0:	d032      	beq.n	8007e28 <__sflush_r+0x98>
 8007dc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	075a      	lsls	r2, r3, #29
 8007dc8:	d505      	bpl.n	8007dd6 <__sflush_r+0x46>
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	1ac0      	subs	r0, r0, r3
 8007dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dd0:	b10b      	cbz	r3, 8007dd6 <__sflush_r+0x46>
 8007dd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dd4:	1ac0      	subs	r0, r0, r3
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b0      	blx	r6
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	d106      	bne.n	8007df6 <__sflush_r+0x66>
 8007de8:	6829      	ldr	r1, [r5, #0]
 8007dea:	291d      	cmp	r1, #29
 8007dec:	d82c      	bhi.n	8007e48 <__sflush_r+0xb8>
 8007dee:	4a2a      	ldr	r2, [pc, #168]	; (8007e98 <__sflush_r+0x108>)
 8007df0:	40ca      	lsrs	r2, r1
 8007df2:	07d6      	lsls	r6, r2, #31
 8007df4:	d528      	bpl.n	8007e48 <__sflush_r+0xb8>
 8007df6:	2200      	movs	r2, #0
 8007df8:	6062      	str	r2, [r4, #4]
 8007dfa:	04d9      	lsls	r1, r3, #19
 8007dfc:	6922      	ldr	r2, [r4, #16]
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	d504      	bpl.n	8007e0c <__sflush_r+0x7c>
 8007e02:	1c42      	adds	r2, r0, #1
 8007e04:	d101      	bne.n	8007e0a <__sflush_r+0x7a>
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	b903      	cbnz	r3, 8007e0c <__sflush_r+0x7c>
 8007e0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e0e:	602f      	str	r7, [r5, #0]
 8007e10:	2900      	cmp	r1, #0
 8007e12:	d0ca      	beq.n	8007daa <__sflush_r+0x1a>
 8007e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	d002      	beq.n	8007e22 <__sflush_r+0x92>
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 f897 	bl	8007f50 <_free_r>
 8007e22:	2000      	movs	r0, #0
 8007e24:	6360      	str	r0, [r4, #52]	; 0x34
 8007e26:	e7c1      	b.n	8007dac <__sflush_r+0x1c>
 8007e28:	6a21      	ldr	r1, [r4, #32]
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b0      	blx	r6
 8007e30:	1c41      	adds	r1, r0, #1
 8007e32:	d1c7      	bne.n	8007dc4 <__sflush_r+0x34>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0c4      	beq.n	8007dc4 <__sflush_r+0x34>
 8007e3a:	2b1d      	cmp	r3, #29
 8007e3c:	d001      	beq.n	8007e42 <__sflush_r+0xb2>
 8007e3e:	2b16      	cmp	r3, #22
 8007e40:	d101      	bne.n	8007e46 <__sflush_r+0xb6>
 8007e42:	602f      	str	r7, [r5, #0]
 8007e44:	e7b1      	b.n	8007daa <__sflush_r+0x1a>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	e7ad      	b.n	8007dac <__sflush_r+0x1c>
 8007e50:	690f      	ldr	r7, [r1, #16]
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d0a9      	beq.n	8007daa <__sflush_r+0x1a>
 8007e56:	0793      	lsls	r3, r2, #30
 8007e58:	680e      	ldr	r6, [r1, #0]
 8007e5a:	bf08      	it	eq
 8007e5c:	694b      	ldreq	r3, [r1, #20]
 8007e5e:	600f      	str	r7, [r1, #0]
 8007e60:	bf18      	it	ne
 8007e62:	2300      	movne	r3, #0
 8007e64:	eba6 0807 	sub.w	r8, r6, r7
 8007e68:	608b      	str	r3, [r1, #8]
 8007e6a:	f1b8 0f00 	cmp.w	r8, #0
 8007e6e:	dd9c      	ble.n	8007daa <__sflush_r+0x1a>
 8007e70:	6a21      	ldr	r1, [r4, #32]
 8007e72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e74:	4643      	mov	r3, r8
 8007e76:	463a      	mov	r2, r7
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b0      	blx	r6
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	dc06      	bgt.n	8007e8e <__sflush_r+0xfe>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e8c:	e78e      	b.n	8007dac <__sflush_r+0x1c>
 8007e8e:	4407      	add	r7, r0
 8007e90:	eba8 0800 	sub.w	r8, r8, r0
 8007e94:	e7e9      	b.n	8007e6a <__sflush_r+0xda>
 8007e96:	bf00      	nop
 8007e98:	20400001 	.word	0x20400001

08007e9c <_fflush_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	690b      	ldr	r3, [r1, #16]
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	b913      	cbnz	r3, 8007eac <_fflush_r+0x10>
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	b118      	cbz	r0, 8007eb6 <_fflush_r+0x1a>
 8007eae:	6983      	ldr	r3, [r0, #24]
 8007eb0:	b90b      	cbnz	r3, 8007eb6 <_fflush_r+0x1a>
 8007eb2:	f7ff fcc1 	bl	8007838 <__sinit>
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <_fflush_r+0x6c>)
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	d11b      	bne.n	8007ef4 <_fflush_r+0x58>
 8007ebc:	686c      	ldr	r4, [r5, #4]
 8007ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0ef      	beq.n	8007ea6 <_fflush_r+0xa>
 8007ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ec8:	07d0      	lsls	r0, r2, #31
 8007eca:	d404      	bmi.n	8007ed6 <_fflush_r+0x3a>
 8007ecc:	0599      	lsls	r1, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_fflush_r+0x3a>
 8007ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed2:	f7ff fd74 	bl	80079be <__retarget_lock_acquire_recursive>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	4621      	mov	r1, r4
 8007eda:	f7ff ff59 	bl	8007d90 <__sflush_r>
 8007ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee0:	07da      	lsls	r2, r3, #31
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	d4e0      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	059b      	lsls	r3, r3, #22
 8007eea:	d4dd      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eee:	f7ff fd67 	bl	80079c0 <__retarget_lock_release_recursive>
 8007ef2:	e7d9      	b.n	8007ea8 <_fflush_r+0xc>
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <_fflush_r+0x70>)
 8007ef6:	429c      	cmp	r4, r3
 8007ef8:	d101      	bne.n	8007efe <_fflush_r+0x62>
 8007efa:	68ac      	ldr	r4, [r5, #8]
 8007efc:	e7df      	b.n	8007ebe <_fflush_r+0x22>
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <_fflush_r+0x74>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	bf08      	it	eq
 8007f04:	68ec      	ldreq	r4, [r5, #12]
 8007f06:	e7da      	b.n	8007ebe <_fflush_r+0x22>
 8007f08:	08008d74 	.word	0x08008d74
 8007f0c:	08008d94 	.word	0x08008d94
 8007f10:	08008d54 	.word	0x08008d54

08007f14 <_lseek_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_lseek_r+0x20>)
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	2200      	movs	r2, #0
 8007f20:	602a      	str	r2, [r5, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f7f8 ff3c 	bl	8000da0 <_lseek>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_lseek_r+0x1e>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_lseek_r+0x1e>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	200022b4 	.word	0x200022b4

08007f38 <__malloc_lock>:
 8007f38:	4801      	ldr	r0, [pc, #4]	; (8007f40 <__malloc_lock+0x8>)
 8007f3a:	f7ff bd40 	b.w	80079be <__retarget_lock_acquire_recursive>
 8007f3e:	bf00      	nop
 8007f40:	200022a8 	.word	0x200022a8

08007f44 <__malloc_unlock>:
 8007f44:	4801      	ldr	r0, [pc, #4]	; (8007f4c <__malloc_unlock+0x8>)
 8007f46:	f7ff bd3b 	b.w	80079c0 <__retarget_lock_release_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	200022a8 	.word	0x200022a8

08007f50 <_free_r>:
 8007f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d044      	beq.n	8007fe0 <_free_r+0x90>
 8007f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5a:	9001      	str	r0, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f62:	bfb8      	it	lt
 8007f64:	18e4      	addlt	r4, r4, r3
 8007f66:	f7ff ffe7 	bl	8007f38 <__malloc_lock>
 8007f6a:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <_free_r+0x94>)
 8007f6c:	9801      	ldr	r0, [sp, #4]
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	b933      	cbnz	r3, 8007f80 <_free_r+0x30>
 8007f72:	6063      	str	r3, [r4, #4]
 8007f74:	6014      	str	r4, [r2, #0]
 8007f76:	b003      	add	sp, #12
 8007f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f7c:	f7ff bfe2 	b.w	8007f44 <__malloc_unlock>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d908      	bls.n	8007f96 <_free_r+0x46>
 8007f84:	6825      	ldr	r5, [r4, #0]
 8007f86:	1961      	adds	r1, r4, r5
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	bf01      	itttt	eq
 8007f8c:	6819      	ldreq	r1, [r3, #0]
 8007f8e:	685b      	ldreq	r3, [r3, #4]
 8007f90:	1949      	addeq	r1, r1, r5
 8007f92:	6021      	streq	r1, [r4, #0]
 8007f94:	e7ed      	b.n	8007f72 <_free_r+0x22>
 8007f96:	461a      	mov	r2, r3
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	b10b      	cbz	r3, 8007fa0 <_free_r+0x50>
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d9fa      	bls.n	8007f96 <_free_r+0x46>
 8007fa0:	6811      	ldr	r1, [r2, #0]
 8007fa2:	1855      	adds	r5, r2, r1
 8007fa4:	42a5      	cmp	r5, r4
 8007fa6:	d10b      	bne.n	8007fc0 <_free_r+0x70>
 8007fa8:	6824      	ldr	r4, [r4, #0]
 8007faa:	4421      	add	r1, r4
 8007fac:	1854      	adds	r4, r2, r1
 8007fae:	42a3      	cmp	r3, r4
 8007fb0:	6011      	str	r1, [r2, #0]
 8007fb2:	d1e0      	bne.n	8007f76 <_free_r+0x26>
 8007fb4:	681c      	ldr	r4, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	6053      	str	r3, [r2, #4]
 8007fba:	4421      	add	r1, r4
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	e7da      	b.n	8007f76 <_free_r+0x26>
 8007fc0:	d902      	bls.n	8007fc8 <_free_r+0x78>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	6003      	str	r3, [r0, #0]
 8007fc6:	e7d6      	b.n	8007f76 <_free_r+0x26>
 8007fc8:	6825      	ldr	r5, [r4, #0]
 8007fca:	1961      	adds	r1, r4, r5
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	bf04      	itt	eq
 8007fd0:	6819      	ldreq	r1, [r3, #0]
 8007fd2:	685b      	ldreq	r3, [r3, #4]
 8007fd4:	6063      	str	r3, [r4, #4]
 8007fd6:	bf04      	itt	eq
 8007fd8:	1949      	addeq	r1, r1, r5
 8007fda:	6021      	streq	r1, [r4, #0]
 8007fdc:	6054      	str	r4, [r2, #4]
 8007fde:	e7ca      	b.n	8007f76 <_free_r+0x26>
 8007fe0:	b003      	add	sp, #12
 8007fe2:	bd30      	pop	{r4, r5, pc}
 8007fe4:	200022ac 	.word	0x200022ac

08007fe8 <__ssputs_r>:
 8007fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fec:	688e      	ldr	r6, [r1, #8]
 8007fee:	429e      	cmp	r6, r3
 8007ff0:	4682      	mov	sl, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	4690      	mov	r8, r2
 8007ff6:	461f      	mov	r7, r3
 8007ff8:	d838      	bhi.n	800806c <__ssputs_r+0x84>
 8007ffa:	898a      	ldrh	r2, [r1, #12]
 8007ffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008000:	d032      	beq.n	8008068 <__ssputs_r+0x80>
 8008002:	6825      	ldr	r5, [r4, #0]
 8008004:	6909      	ldr	r1, [r1, #16]
 8008006:	eba5 0901 	sub.w	r9, r5, r1
 800800a:	6965      	ldr	r5, [r4, #20]
 800800c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008014:	3301      	adds	r3, #1
 8008016:	444b      	add	r3, r9
 8008018:	106d      	asrs	r5, r5, #1
 800801a:	429d      	cmp	r5, r3
 800801c:	bf38      	it	cc
 800801e:	461d      	movcc	r5, r3
 8008020:	0553      	lsls	r3, r2, #21
 8008022:	d531      	bpl.n	8008088 <__ssputs_r+0xa0>
 8008024:	4629      	mov	r1, r5
 8008026:	f7ff fd13 	bl	8007a50 <_malloc_r>
 800802a:	4606      	mov	r6, r0
 800802c:	b950      	cbnz	r0, 8008044 <__ssputs_r+0x5c>
 800802e:	230c      	movs	r3, #12
 8008030:	f8ca 3000 	str.w	r3, [sl]
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008044:	6921      	ldr	r1, [r4, #16]
 8008046:	464a      	mov	r2, r9
 8008048:	f7ff fccb 	bl	80079e2 <memcpy>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	6126      	str	r6, [r4, #16]
 800805a:	6165      	str	r5, [r4, #20]
 800805c:	444e      	add	r6, r9
 800805e:	eba5 0509 	sub.w	r5, r5, r9
 8008062:	6026      	str	r6, [r4, #0]
 8008064:	60a5      	str	r5, [r4, #8]
 8008066:	463e      	mov	r6, r7
 8008068:	42be      	cmp	r6, r7
 800806a:	d900      	bls.n	800806e <__ssputs_r+0x86>
 800806c:	463e      	mov	r6, r7
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	4632      	mov	r2, r6
 8008072:	4641      	mov	r1, r8
 8008074:	f000 fd3a 	bl	8008aec <memmove>
 8008078:	68a3      	ldr	r3, [r4, #8]
 800807a:	1b9b      	subs	r3, r3, r6
 800807c:	60a3      	str	r3, [r4, #8]
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	4433      	add	r3, r6
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	2000      	movs	r0, #0
 8008086:	e7db      	b.n	8008040 <__ssputs_r+0x58>
 8008088:	462a      	mov	r2, r5
 800808a:	f000 fd49 	bl	8008b20 <_realloc_r>
 800808e:	4606      	mov	r6, r0
 8008090:	2800      	cmp	r0, #0
 8008092:	d1e1      	bne.n	8008058 <__ssputs_r+0x70>
 8008094:	6921      	ldr	r1, [r4, #16]
 8008096:	4650      	mov	r0, sl
 8008098:	f7ff ff5a 	bl	8007f50 <_free_r>
 800809c:	e7c7      	b.n	800802e <__ssputs_r+0x46>
	...

080080a0 <_svfiprintf_r>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	4698      	mov	r8, r3
 80080a6:	898b      	ldrh	r3, [r1, #12]
 80080a8:	061b      	lsls	r3, r3, #24
 80080aa:	b09d      	sub	sp, #116	; 0x74
 80080ac:	4607      	mov	r7, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	4614      	mov	r4, r2
 80080b2:	d50e      	bpl.n	80080d2 <_svfiprintf_r+0x32>
 80080b4:	690b      	ldr	r3, [r1, #16]
 80080b6:	b963      	cbnz	r3, 80080d2 <_svfiprintf_r+0x32>
 80080b8:	2140      	movs	r1, #64	; 0x40
 80080ba:	f7ff fcc9 	bl	8007a50 <_malloc_r>
 80080be:	6028      	str	r0, [r5, #0]
 80080c0:	6128      	str	r0, [r5, #16]
 80080c2:	b920      	cbnz	r0, 80080ce <_svfiprintf_r+0x2e>
 80080c4:	230c      	movs	r3, #12
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080cc:	e0d1      	b.n	8008272 <_svfiprintf_r+0x1d2>
 80080ce:	2340      	movs	r3, #64	; 0x40
 80080d0:	616b      	str	r3, [r5, #20]
 80080d2:	2300      	movs	r3, #0
 80080d4:	9309      	str	r3, [sp, #36]	; 0x24
 80080d6:	2320      	movs	r3, #32
 80080d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e0:	2330      	movs	r3, #48	; 0x30
 80080e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800828c <_svfiprintf_r+0x1ec>
 80080e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ea:	f04f 0901 	mov.w	r9, #1
 80080ee:	4623      	mov	r3, r4
 80080f0:	469a      	mov	sl, r3
 80080f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f6:	b10a      	cbz	r2, 80080fc <_svfiprintf_r+0x5c>
 80080f8:	2a25      	cmp	r2, #37	; 0x25
 80080fa:	d1f9      	bne.n	80080f0 <_svfiprintf_r+0x50>
 80080fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008100:	d00b      	beq.n	800811a <_svfiprintf_r+0x7a>
 8008102:	465b      	mov	r3, fp
 8008104:	4622      	mov	r2, r4
 8008106:	4629      	mov	r1, r5
 8008108:	4638      	mov	r0, r7
 800810a:	f7ff ff6d 	bl	8007fe8 <__ssputs_r>
 800810e:	3001      	adds	r0, #1
 8008110:	f000 80aa 	beq.w	8008268 <_svfiprintf_r+0x1c8>
 8008114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008116:	445a      	add	r2, fp
 8008118:	9209      	str	r2, [sp, #36]	; 0x24
 800811a:	f89a 3000 	ldrb.w	r3, [sl]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 80a2 	beq.w	8008268 <_svfiprintf_r+0x1c8>
 8008124:	2300      	movs	r3, #0
 8008126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800812e:	f10a 0a01 	add.w	sl, sl, #1
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	9307      	str	r3, [sp, #28]
 8008136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800813a:	931a      	str	r3, [sp, #104]	; 0x68
 800813c:	4654      	mov	r4, sl
 800813e:	2205      	movs	r2, #5
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	4851      	ldr	r0, [pc, #324]	; (800828c <_svfiprintf_r+0x1ec>)
 8008146:	f7f8 f84b 	bl	80001e0 <memchr>
 800814a:	9a04      	ldr	r2, [sp, #16]
 800814c:	b9d8      	cbnz	r0, 8008186 <_svfiprintf_r+0xe6>
 800814e:	06d0      	lsls	r0, r2, #27
 8008150:	bf44      	itt	mi
 8008152:	2320      	movmi	r3, #32
 8008154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008158:	0711      	lsls	r1, r2, #28
 800815a:	bf44      	itt	mi
 800815c:	232b      	movmi	r3, #43	; 0x2b
 800815e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008162:	f89a 3000 	ldrb.w	r3, [sl]
 8008166:	2b2a      	cmp	r3, #42	; 0x2a
 8008168:	d015      	beq.n	8008196 <_svfiprintf_r+0xf6>
 800816a:	9a07      	ldr	r2, [sp, #28]
 800816c:	4654      	mov	r4, sl
 800816e:	2000      	movs	r0, #0
 8008170:	f04f 0c0a 	mov.w	ip, #10
 8008174:	4621      	mov	r1, r4
 8008176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817a:	3b30      	subs	r3, #48	; 0x30
 800817c:	2b09      	cmp	r3, #9
 800817e:	d94e      	bls.n	800821e <_svfiprintf_r+0x17e>
 8008180:	b1b0      	cbz	r0, 80081b0 <_svfiprintf_r+0x110>
 8008182:	9207      	str	r2, [sp, #28]
 8008184:	e014      	b.n	80081b0 <_svfiprintf_r+0x110>
 8008186:	eba0 0308 	sub.w	r3, r0, r8
 800818a:	fa09 f303 	lsl.w	r3, r9, r3
 800818e:	4313      	orrs	r3, r2
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	46a2      	mov	sl, r4
 8008194:	e7d2      	b.n	800813c <_svfiprintf_r+0x9c>
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	1d19      	adds	r1, r3, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	9103      	str	r1, [sp, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bfbb      	ittet	lt
 80081a2:	425b      	neglt	r3, r3
 80081a4:	f042 0202 	orrlt.w	r2, r2, #2
 80081a8:	9307      	strge	r3, [sp, #28]
 80081aa:	9307      	strlt	r3, [sp, #28]
 80081ac:	bfb8      	it	lt
 80081ae:	9204      	strlt	r2, [sp, #16]
 80081b0:	7823      	ldrb	r3, [r4, #0]
 80081b2:	2b2e      	cmp	r3, #46	; 0x2e
 80081b4:	d10c      	bne.n	80081d0 <_svfiprintf_r+0x130>
 80081b6:	7863      	ldrb	r3, [r4, #1]
 80081b8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ba:	d135      	bne.n	8008228 <_svfiprintf_r+0x188>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	1d1a      	adds	r2, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	9203      	str	r2, [sp, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfb8      	it	lt
 80081c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081cc:	3402      	adds	r4, #2
 80081ce:	9305      	str	r3, [sp, #20]
 80081d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800829c <_svfiprintf_r+0x1fc>
 80081d4:	7821      	ldrb	r1, [r4, #0]
 80081d6:	2203      	movs	r2, #3
 80081d8:	4650      	mov	r0, sl
 80081da:	f7f8 f801 	bl	80001e0 <memchr>
 80081de:	b140      	cbz	r0, 80081f2 <_svfiprintf_r+0x152>
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	eba0 000a 	sub.w	r0, r0, sl
 80081e6:	fa03 f000 	lsl.w	r0, r3, r0
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	4303      	orrs	r3, r0
 80081ee:	3401      	adds	r4, #1
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f6:	4826      	ldr	r0, [pc, #152]	; (8008290 <_svfiprintf_r+0x1f0>)
 80081f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081fc:	2206      	movs	r2, #6
 80081fe:	f7f7 ffef 	bl	80001e0 <memchr>
 8008202:	2800      	cmp	r0, #0
 8008204:	d038      	beq.n	8008278 <_svfiprintf_r+0x1d8>
 8008206:	4b23      	ldr	r3, [pc, #140]	; (8008294 <_svfiprintf_r+0x1f4>)
 8008208:	bb1b      	cbnz	r3, 8008252 <_svfiprintf_r+0x1b2>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	3307      	adds	r3, #7
 800820e:	f023 0307 	bic.w	r3, r3, #7
 8008212:	3308      	adds	r3, #8
 8008214:	9303      	str	r3, [sp, #12]
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	4433      	add	r3, r6
 800821a:	9309      	str	r3, [sp, #36]	; 0x24
 800821c:	e767      	b.n	80080ee <_svfiprintf_r+0x4e>
 800821e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008222:	460c      	mov	r4, r1
 8008224:	2001      	movs	r0, #1
 8008226:	e7a5      	b.n	8008174 <_svfiprintf_r+0xd4>
 8008228:	2300      	movs	r3, #0
 800822a:	3401      	adds	r4, #1
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	4619      	mov	r1, r3
 8008230:	f04f 0c0a 	mov.w	ip, #10
 8008234:	4620      	mov	r0, r4
 8008236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800823a:	3a30      	subs	r2, #48	; 0x30
 800823c:	2a09      	cmp	r2, #9
 800823e:	d903      	bls.n	8008248 <_svfiprintf_r+0x1a8>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0c5      	beq.n	80081d0 <_svfiprintf_r+0x130>
 8008244:	9105      	str	r1, [sp, #20]
 8008246:	e7c3      	b.n	80081d0 <_svfiprintf_r+0x130>
 8008248:	fb0c 2101 	mla	r1, ip, r1, r2
 800824c:	4604      	mov	r4, r0
 800824e:	2301      	movs	r3, #1
 8008250:	e7f0      	b.n	8008234 <_svfiprintf_r+0x194>
 8008252:	ab03      	add	r3, sp, #12
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	462a      	mov	r2, r5
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <_svfiprintf_r+0x1f8>)
 800825a:	a904      	add	r1, sp, #16
 800825c:	4638      	mov	r0, r7
 800825e:	f3af 8000 	nop.w
 8008262:	1c42      	adds	r2, r0, #1
 8008264:	4606      	mov	r6, r0
 8008266:	d1d6      	bne.n	8008216 <_svfiprintf_r+0x176>
 8008268:	89ab      	ldrh	r3, [r5, #12]
 800826a:	065b      	lsls	r3, r3, #25
 800826c:	f53f af2c 	bmi.w	80080c8 <_svfiprintf_r+0x28>
 8008270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008272:	b01d      	add	sp, #116	; 0x74
 8008274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008278:	ab03      	add	r3, sp, #12
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	462a      	mov	r2, r5
 800827e:	4b06      	ldr	r3, [pc, #24]	; (8008298 <_svfiprintf_r+0x1f8>)
 8008280:	a904      	add	r1, sp, #16
 8008282:	4638      	mov	r0, r7
 8008284:	f000 f9d4 	bl	8008630 <_printf_i>
 8008288:	e7eb      	b.n	8008262 <_svfiprintf_r+0x1c2>
 800828a:	bf00      	nop
 800828c:	08008db8 	.word	0x08008db8
 8008290:	08008dc2 	.word	0x08008dc2
 8008294:	00000000 	.word	0x00000000
 8008298:	08007fe9 	.word	0x08007fe9
 800829c:	08008dbe 	.word	0x08008dbe

080082a0 <__sfputc_r>:
 80082a0:	6893      	ldr	r3, [r2, #8]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	b410      	push	{r4}
 80082a8:	6093      	str	r3, [r2, #8]
 80082aa:	da08      	bge.n	80082be <__sfputc_r+0x1e>
 80082ac:	6994      	ldr	r4, [r2, #24]
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	db01      	blt.n	80082b6 <__sfputc_r+0x16>
 80082b2:	290a      	cmp	r1, #10
 80082b4:	d103      	bne.n	80082be <__sfputc_r+0x1e>
 80082b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082ba:	f000 baf1 	b.w	80088a0 <__swbuf_r>
 80082be:	6813      	ldr	r3, [r2, #0]
 80082c0:	1c58      	adds	r0, r3, #1
 80082c2:	6010      	str	r0, [r2, #0]
 80082c4:	7019      	strb	r1, [r3, #0]
 80082c6:	4608      	mov	r0, r1
 80082c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <__sfputs_r>:
 80082ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d0:	4606      	mov	r6, r0
 80082d2:	460f      	mov	r7, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	18d5      	adds	r5, r2, r3
 80082d8:	42ac      	cmp	r4, r5
 80082da:	d101      	bne.n	80082e0 <__sfputs_r+0x12>
 80082dc:	2000      	movs	r0, #0
 80082de:	e007      	b.n	80082f0 <__sfputs_r+0x22>
 80082e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e4:	463a      	mov	r2, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7ff ffda 	bl	80082a0 <__sfputc_r>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d1f3      	bne.n	80082d8 <__sfputs_r+0xa>
 80082f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082f4 <_vfiprintf_r>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	460d      	mov	r5, r1
 80082fa:	b09d      	sub	sp, #116	; 0x74
 80082fc:	4614      	mov	r4, r2
 80082fe:	4698      	mov	r8, r3
 8008300:	4606      	mov	r6, r0
 8008302:	b118      	cbz	r0, 800830c <_vfiprintf_r+0x18>
 8008304:	6983      	ldr	r3, [r0, #24]
 8008306:	b90b      	cbnz	r3, 800830c <_vfiprintf_r+0x18>
 8008308:	f7ff fa96 	bl	8007838 <__sinit>
 800830c:	4b89      	ldr	r3, [pc, #548]	; (8008534 <_vfiprintf_r+0x240>)
 800830e:	429d      	cmp	r5, r3
 8008310:	d11b      	bne.n	800834a <_vfiprintf_r+0x56>
 8008312:	6875      	ldr	r5, [r6, #4]
 8008314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008316:	07d9      	lsls	r1, r3, #31
 8008318:	d405      	bmi.n	8008326 <_vfiprintf_r+0x32>
 800831a:	89ab      	ldrh	r3, [r5, #12]
 800831c:	059a      	lsls	r2, r3, #22
 800831e:	d402      	bmi.n	8008326 <_vfiprintf_r+0x32>
 8008320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008322:	f7ff fb4c 	bl	80079be <__retarget_lock_acquire_recursive>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	071b      	lsls	r3, r3, #28
 800832a:	d501      	bpl.n	8008330 <_vfiprintf_r+0x3c>
 800832c:	692b      	ldr	r3, [r5, #16]
 800832e:	b9eb      	cbnz	r3, 800836c <_vfiprintf_r+0x78>
 8008330:	4629      	mov	r1, r5
 8008332:	4630      	mov	r0, r6
 8008334:	f000 fb06 	bl	8008944 <__swsetup_r>
 8008338:	b1c0      	cbz	r0, 800836c <_vfiprintf_r+0x78>
 800833a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800833c:	07dc      	lsls	r4, r3, #31
 800833e:	d50e      	bpl.n	800835e <_vfiprintf_r+0x6a>
 8008340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008344:	b01d      	add	sp, #116	; 0x74
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	4b7b      	ldr	r3, [pc, #492]	; (8008538 <_vfiprintf_r+0x244>)
 800834c:	429d      	cmp	r5, r3
 800834e:	d101      	bne.n	8008354 <_vfiprintf_r+0x60>
 8008350:	68b5      	ldr	r5, [r6, #8]
 8008352:	e7df      	b.n	8008314 <_vfiprintf_r+0x20>
 8008354:	4b79      	ldr	r3, [pc, #484]	; (800853c <_vfiprintf_r+0x248>)
 8008356:	429d      	cmp	r5, r3
 8008358:	bf08      	it	eq
 800835a:	68f5      	ldreq	r5, [r6, #12]
 800835c:	e7da      	b.n	8008314 <_vfiprintf_r+0x20>
 800835e:	89ab      	ldrh	r3, [r5, #12]
 8008360:	0598      	lsls	r0, r3, #22
 8008362:	d4ed      	bmi.n	8008340 <_vfiprintf_r+0x4c>
 8008364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008366:	f7ff fb2b 	bl	80079c0 <__retarget_lock_release_recursive>
 800836a:	e7e9      	b.n	8008340 <_vfiprintf_r+0x4c>
 800836c:	2300      	movs	r3, #0
 800836e:	9309      	str	r3, [sp, #36]	; 0x24
 8008370:	2320      	movs	r3, #32
 8008372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008376:	f8cd 800c 	str.w	r8, [sp, #12]
 800837a:	2330      	movs	r3, #48	; 0x30
 800837c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008540 <_vfiprintf_r+0x24c>
 8008380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008384:	f04f 0901 	mov.w	r9, #1
 8008388:	4623      	mov	r3, r4
 800838a:	469a      	mov	sl, r3
 800838c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008390:	b10a      	cbz	r2, 8008396 <_vfiprintf_r+0xa2>
 8008392:	2a25      	cmp	r2, #37	; 0x25
 8008394:	d1f9      	bne.n	800838a <_vfiprintf_r+0x96>
 8008396:	ebba 0b04 	subs.w	fp, sl, r4
 800839a:	d00b      	beq.n	80083b4 <_vfiprintf_r+0xc0>
 800839c:	465b      	mov	r3, fp
 800839e:	4622      	mov	r2, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	4630      	mov	r0, r6
 80083a4:	f7ff ff93 	bl	80082ce <__sfputs_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	f000 80aa 	beq.w	8008502 <_vfiprintf_r+0x20e>
 80083ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083b0:	445a      	add	r2, fp
 80083b2:	9209      	str	r2, [sp, #36]	; 0x24
 80083b4:	f89a 3000 	ldrb.w	r3, [sl]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80a2 	beq.w	8008502 <_vfiprintf_r+0x20e>
 80083be:	2300      	movs	r3, #0
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c8:	f10a 0a01 	add.w	sl, sl, #1
 80083cc:	9304      	str	r3, [sp, #16]
 80083ce:	9307      	str	r3, [sp, #28]
 80083d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083d4:	931a      	str	r3, [sp, #104]	; 0x68
 80083d6:	4654      	mov	r4, sl
 80083d8:	2205      	movs	r2, #5
 80083da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083de:	4858      	ldr	r0, [pc, #352]	; (8008540 <_vfiprintf_r+0x24c>)
 80083e0:	f7f7 fefe 	bl	80001e0 <memchr>
 80083e4:	9a04      	ldr	r2, [sp, #16]
 80083e6:	b9d8      	cbnz	r0, 8008420 <_vfiprintf_r+0x12c>
 80083e8:	06d1      	lsls	r1, r2, #27
 80083ea:	bf44      	itt	mi
 80083ec:	2320      	movmi	r3, #32
 80083ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083f2:	0713      	lsls	r3, r2, #28
 80083f4:	bf44      	itt	mi
 80083f6:	232b      	movmi	r3, #43	; 0x2b
 80083f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008400:	2b2a      	cmp	r3, #42	; 0x2a
 8008402:	d015      	beq.n	8008430 <_vfiprintf_r+0x13c>
 8008404:	9a07      	ldr	r2, [sp, #28]
 8008406:	4654      	mov	r4, sl
 8008408:	2000      	movs	r0, #0
 800840a:	f04f 0c0a 	mov.w	ip, #10
 800840e:	4621      	mov	r1, r4
 8008410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008414:	3b30      	subs	r3, #48	; 0x30
 8008416:	2b09      	cmp	r3, #9
 8008418:	d94e      	bls.n	80084b8 <_vfiprintf_r+0x1c4>
 800841a:	b1b0      	cbz	r0, 800844a <_vfiprintf_r+0x156>
 800841c:	9207      	str	r2, [sp, #28]
 800841e:	e014      	b.n	800844a <_vfiprintf_r+0x156>
 8008420:	eba0 0308 	sub.w	r3, r0, r8
 8008424:	fa09 f303 	lsl.w	r3, r9, r3
 8008428:	4313      	orrs	r3, r2
 800842a:	9304      	str	r3, [sp, #16]
 800842c:	46a2      	mov	sl, r4
 800842e:	e7d2      	b.n	80083d6 <_vfiprintf_r+0xe2>
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	1d19      	adds	r1, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	9103      	str	r1, [sp, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	bfbb      	ittet	lt
 800843c:	425b      	neglt	r3, r3
 800843e:	f042 0202 	orrlt.w	r2, r2, #2
 8008442:	9307      	strge	r3, [sp, #28]
 8008444:	9307      	strlt	r3, [sp, #28]
 8008446:	bfb8      	it	lt
 8008448:	9204      	strlt	r2, [sp, #16]
 800844a:	7823      	ldrb	r3, [r4, #0]
 800844c:	2b2e      	cmp	r3, #46	; 0x2e
 800844e:	d10c      	bne.n	800846a <_vfiprintf_r+0x176>
 8008450:	7863      	ldrb	r3, [r4, #1]
 8008452:	2b2a      	cmp	r3, #42	; 0x2a
 8008454:	d135      	bne.n	80084c2 <_vfiprintf_r+0x1ce>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	1d1a      	adds	r2, r3, #4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	9203      	str	r2, [sp, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb8      	it	lt
 8008462:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008466:	3402      	adds	r4, #2
 8008468:	9305      	str	r3, [sp, #20]
 800846a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008550 <_vfiprintf_r+0x25c>
 800846e:	7821      	ldrb	r1, [r4, #0]
 8008470:	2203      	movs	r2, #3
 8008472:	4650      	mov	r0, sl
 8008474:	f7f7 feb4 	bl	80001e0 <memchr>
 8008478:	b140      	cbz	r0, 800848c <_vfiprintf_r+0x198>
 800847a:	2340      	movs	r3, #64	; 0x40
 800847c:	eba0 000a 	sub.w	r0, r0, sl
 8008480:	fa03 f000 	lsl.w	r0, r3, r0
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	4303      	orrs	r3, r0
 8008488:	3401      	adds	r4, #1
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008490:	482c      	ldr	r0, [pc, #176]	; (8008544 <_vfiprintf_r+0x250>)
 8008492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008496:	2206      	movs	r2, #6
 8008498:	f7f7 fea2 	bl	80001e0 <memchr>
 800849c:	2800      	cmp	r0, #0
 800849e:	d03f      	beq.n	8008520 <_vfiprintf_r+0x22c>
 80084a0:	4b29      	ldr	r3, [pc, #164]	; (8008548 <_vfiprintf_r+0x254>)
 80084a2:	bb1b      	cbnz	r3, 80084ec <_vfiprintf_r+0x1f8>
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	3307      	adds	r3, #7
 80084a8:	f023 0307 	bic.w	r3, r3, #7
 80084ac:	3308      	adds	r3, #8
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b2:	443b      	add	r3, r7
 80084b4:	9309      	str	r3, [sp, #36]	; 0x24
 80084b6:	e767      	b.n	8008388 <_vfiprintf_r+0x94>
 80084b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084bc:	460c      	mov	r4, r1
 80084be:	2001      	movs	r0, #1
 80084c0:	e7a5      	b.n	800840e <_vfiprintf_r+0x11a>
 80084c2:	2300      	movs	r3, #0
 80084c4:	3401      	adds	r4, #1
 80084c6:	9305      	str	r3, [sp, #20]
 80084c8:	4619      	mov	r1, r3
 80084ca:	f04f 0c0a 	mov.w	ip, #10
 80084ce:	4620      	mov	r0, r4
 80084d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d4:	3a30      	subs	r2, #48	; 0x30
 80084d6:	2a09      	cmp	r2, #9
 80084d8:	d903      	bls.n	80084e2 <_vfiprintf_r+0x1ee>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0c5      	beq.n	800846a <_vfiprintf_r+0x176>
 80084de:	9105      	str	r1, [sp, #20]
 80084e0:	e7c3      	b.n	800846a <_vfiprintf_r+0x176>
 80084e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e6:	4604      	mov	r4, r0
 80084e8:	2301      	movs	r3, #1
 80084ea:	e7f0      	b.n	80084ce <_vfiprintf_r+0x1da>
 80084ec:	ab03      	add	r3, sp, #12
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	462a      	mov	r2, r5
 80084f2:	4b16      	ldr	r3, [pc, #88]	; (800854c <_vfiprintf_r+0x258>)
 80084f4:	a904      	add	r1, sp, #16
 80084f6:	4630      	mov	r0, r6
 80084f8:	f3af 8000 	nop.w
 80084fc:	4607      	mov	r7, r0
 80084fe:	1c78      	adds	r0, r7, #1
 8008500:	d1d6      	bne.n	80084b0 <_vfiprintf_r+0x1bc>
 8008502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008504:	07d9      	lsls	r1, r3, #31
 8008506:	d405      	bmi.n	8008514 <_vfiprintf_r+0x220>
 8008508:	89ab      	ldrh	r3, [r5, #12]
 800850a:	059a      	lsls	r2, r3, #22
 800850c:	d402      	bmi.n	8008514 <_vfiprintf_r+0x220>
 800850e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008510:	f7ff fa56 	bl	80079c0 <__retarget_lock_release_recursive>
 8008514:	89ab      	ldrh	r3, [r5, #12]
 8008516:	065b      	lsls	r3, r3, #25
 8008518:	f53f af12 	bmi.w	8008340 <_vfiprintf_r+0x4c>
 800851c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800851e:	e711      	b.n	8008344 <_vfiprintf_r+0x50>
 8008520:	ab03      	add	r3, sp, #12
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	462a      	mov	r2, r5
 8008526:	4b09      	ldr	r3, [pc, #36]	; (800854c <_vfiprintf_r+0x258>)
 8008528:	a904      	add	r1, sp, #16
 800852a:	4630      	mov	r0, r6
 800852c:	f000 f880 	bl	8008630 <_printf_i>
 8008530:	e7e4      	b.n	80084fc <_vfiprintf_r+0x208>
 8008532:	bf00      	nop
 8008534:	08008d74 	.word	0x08008d74
 8008538:	08008d94 	.word	0x08008d94
 800853c:	08008d54 	.word	0x08008d54
 8008540:	08008db8 	.word	0x08008db8
 8008544:	08008dc2 	.word	0x08008dc2
 8008548:	00000000 	.word	0x00000000
 800854c:	080082cf 	.word	0x080082cf
 8008550:	08008dbe 	.word	0x08008dbe

08008554 <_printf_common>:
 8008554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008558:	4616      	mov	r6, r2
 800855a:	4699      	mov	r9, r3
 800855c:	688a      	ldr	r2, [r1, #8]
 800855e:	690b      	ldr	r3, [r1, #16]
 8008560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008564:	4293      	cmp	r3, r2
 8008566:	bfb8      	it	lt
 8008568:	4613      	movlt	r3, r2
 800856a:	6033      	str	r3, [r6, #0]
 800856c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008570:	4607      	mov	r7, r0
 8008572:	460c      	mov	r4, r1
 8008574:	b10a      	cbz	r2, 800857a <_printf_common+0x26>
 8008576:	3301      	adds	r3, #1
 8008578:	6033      	str	r3, [r6, #0]
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	0699      	lsls	r1, r3, #26
 800857e:	bf42      	ittt	mi
 8008580:	6833      	ldrmi	r3, [r6, #0]
 8008582:	3302      	addmi	r3, #2
 8008584:	6033      	strmi	r3, [r6, #0]
 8008586:	6825      	ldr	r5, [r4, #0]
 8008588:	f015 0506 	ands.w	r5, r5, #6
 800858c:	d106      	bne.n	800859c <_printf_common+0x48>
 800858e:	f104 0a19 	add.w	sl, r4, #25
 8008592:	68e3      	ldr	r3, [r4, #12]
 8008594:	6832      	ldr	r2, [r6, #0]
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	42ab      	cmp	r3, r5
 800859a:	dc26      	bgt.n	80085ea <_printf_common+0x96>
 800859c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085a0:	1e13      	subs	r3, r2, #0
 80085a2:	6822      	ldr	r2, [r4, #0]
 80085a4:	bf18      	it	ne
 80085a6:	2301      	movne	r3, #1
 80085a8:	0692      	lsls	r2, r2, #26
 80085aa:	d42b      	bmi.n	8008604 <_printf_common+0xb0>
 80085ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085b0:	4649      	mov	r1, r9
 80085b2:	4638      	mov	r0, r7
 80085b4:	47c0      	blx	r8
 80085b6:	3001      	adds	r0, #1
 80085b8:	d01e      	beq.n	80085f8 <_printf_common+0xa4>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	68e5      	ldr	r5, [r4, #12]
 80085be:	6832      	ldr	r2, [r6, #0]
 80085c0:	f003 0306 	and.w	r3, r3, #6
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	bf08      	it	eq
 80085c8:	1aad      	subeq	r5, r5, r2
 80085ca:	68a3      	ldr	r3, [r4, #8]
 80085cc:	6922      	ldr	r2, [r4, #16]
 80085ce:	bf0c      	ite	eq
 80085d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d4:	2500      	movne	r5, #0
 80085d6:	4293      	cmp	r3, r2
 80085d8:	bfc4      	itt	gt
 80085da:	1a9b      	subgt	r3, r3, r2
 80085dc:	18ed      	addgt	r5, r5, r3
 80085de:	2600      	movs	r6, #0
 80085e0:	341a      	adds	r4, #26
 80085e2:	42b5      	cmp	r5, r6
 80085e4:	d11a      	bne.n	800861c <_printf_common+0xc8>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e008      	b.n	80085fc <_printf_common+0xa8>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4652      	mov	r2, sl
 80085ee:	4649      	mov	r1, r9
 80085f0:	4638      	mov	r0, r7
 80085f2:	47c0      	blx	r8
 80085f4:	3001      	adds	r0, #1
 80085f6:	d103      	bne.n	8008600 <_printf_common+0xac>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008600:	3501      	adds	r5, #1
 8008602:	e7c6      	b.n	8008592 <_printf_common+0x3e>
 8008604:	18e1      	adds	r1, r4, r3
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	2030      	movs	r0, #48	; 0x30
 800860a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800860e:	4422      	add	r2, r4
 8008610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008618:	3302      	adds	r3, #2
 800861a:	e7c7      	b.n	80085ac <_printf_common+0x58>
 800861c:	2301      	movs	r3, #1
 800861e:	4622      	mov	r2, r4
 8008620:	4649      	mov	r1, r9
 8008622:	4638      	mov	r0, r7
 8008624:	47c0      	blx	r8
 8008626:	3001      	adds	r0, #1
 8008628:	d0e6      	beq.n	80085f8 <_printf_common+0xa4>
 800862a:	3601      	adds	r6, #1
 800862c:	e7d9      	b.n	80085e2 <_printf_common+0x8e>
	...

08008630 <_printf_i>:
 8008630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008634:	7e0f      	ldrb	r7, [r1, #24]
 8008636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008638:	2f78      	cmp	r7, #120	; 0x78
 800863a:	4691      	mov	r9, r2
 800863c:	4680      	mov	r8, r0
 800863e:	460c      	mov	r4, r1
 8008640:	469a      	mov	sl, r3
 8008642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008646:	d807      	bhi.n	8008658 <_printf_i+0x28>
 8008648:	2f62      	cmp	r7, #98	; 0x62
 800864a:	d80a      	bhi.n	8008662 <_printf_i+0x32>
 800864c:	2f00      	cmp	r7, #0
 800864e:	f000 80d8 	beq.w	8008802 <_printf_i+0x1d2>
 8008652:	2f58      	cmp	r7, #88	; 0x58
 8008654:	f000 80a3 	beq.w	800879e <_printf_i+0x16e>
 8008658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800865c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008660:	e03a      	b.n	80086d8 <_printf_i+0xa8>
 8008662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008666:	2b15      	cmp	r3, #21
 8008668:	d8f6      	bhi.n	8008658 <_printf_i+0x28>
 800866a:	a101      	add	r1, pc, #4	; (adr r1, 8008670 <_printf_i+0x40>)
 800866c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008670:	080086c9 	.word	0x080086c9
 8008674:	080086dd 	.word	0x080086dd
 8008678:	08008659 	.word	0x08008659
 800867c:	08008659 	.word	0x08008659
 8008680:	08008659 	.word	0x08008659
 8008684:	08008659 	.word	0x08008659
 8008688:	080086dd 	.word	0x080086dd
 800868c:	08008659 	.word	0x08008659
 8008690:	08008659 	.word	0x08008659
 8008694:	08008659 	.word	0x08008659
 8008698:	08008659 	.word	0x08008659
 800869c:	080087e9 	.word	0x080087e9
 80086a0:	0800870d 	.word	0x0800870d
 80086a4:	080087cb 	.word	0x080087cb
 80086a8:	08008659 	.word	0x08008659
 80086ac:	08008659 	.word	0x08008659
 80086b0:	0800880b 	.word	0x0800880b
 80086b4:	08008659 	.word	0x08008659
 80086b8:	0800870d 	.word	0x0800870d
 80086bc:	08008659 	.word	0x08008659
 80086c0:	08008659 	.word	0x08008659
 80086c4:	080087d3 	.word	0x080087d3
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	1d1a      	adds	r2, r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	602a      	str	r2, [r5, #0]
 80086d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086d8:	2301      	movs	r3, #1
 80086da:	e0a3      	b.n	8008824 <_printf_i+0x1f4>
 80086dc:	6820      	ldr	r0, [r4, #0]
 80086de:	6829      	ldr	r1, [r5, #0]
 80086e0:	0606      	lsls	r6, r0, #24
 80086e2:	f101 0304 	add.w	r3, r1, #4
 80086e6:	d50a      	bpl.n	80086fe <_printf_i+0xce>
 80086e8:	680e      	ldr	r6, [r1, #0]
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	2e00      	cmp	r6, #0
 80086ee:	da03      	bge.n	80086f8 <_printf_i+0xc8>
 80086f0:	232d      	movs	r3, #45	; 0x2d
 80086f2:	4276      	negs	r6, r6
 80086f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f8:	485e      	ldr	r0, [pc, #376]	; (8008874 <_printf_i+0x244>)
 80086fa:	230a      	movs	r3, #10
 80086fc:	e019      	b.n	8008732 <_printf_i+0x102>
 80086fe:	680e      	ldr	r6, [r1, #0]
 8008700:	602b      	str	r3, [r5, #0]
 8008702:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008706:	bf18      	it	ne
 8008708:	b236      	sxthne	r6, r6
 800870a:	e7ef      	b.n	80086ec <_printf_i+0xbc>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	6820      	ldr	r0, [r4, #0]
 8008710:	1d19      	adds	r1, r3, #4
 8008712:	6029      	str	r1, [r5, #0]
 8008714:	0601      	lsls	r1, r0, #24
 8008716:	d501      	bpl.n	800871c <_printf_i+0xec>
 8008718:	681e      	ldr	r6, [r3, #0]
 800871a:	e002      	b.n	8008722 <_printf_i+0xf2>
 800871c:	0646      	lsls	r6, r0, #25
 800871e:	d5fb      	bpl.n	8008718 <_printf_i+0xe8>
 8008720:	881e      	ldrh	r6, [r3, #0]
 8008722:	4854      	ldr	r0, [pc, #336]	; (8008874 <_printf_i+0x244>)
 8008724:	2f6f      	cmp	r7, #111	; 0x6f
 8008726:	bf0c      	ite	eq
 8008728:	2308      	moveq	r3, #8
 800872a:	230a      	movne	r3, #10
 800872c:	2100      	movs	r1, #0
 800872e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008732:	6865      	ldr	r5, [r4, #4]
 8008734:	60a5      	str	r5, [r4, #8]
 8008736:	2d00      	cmp	r5, #0
 8008738:	bfa2      	ittt	ge
 800873a:	6821      	ldrge	r1, [r4, #0]
 800873c:	f021 0104 	bicge.w	r1, r1, #4
 8008740:	6021      	strge	r1, [r4, #0]
 8008742:	b90e      	cbnz	r6, 8008748 <_printf_i+0x118>
 8008744:	2d00      	cmp	r5, #0
 8008746:	d04d      	beq.n	80087e4 <_printf_i+0x1b4>
 8008748:	4615      	mov	r5, r2
 800874a:	fbb6 f1f3 	udiv	r1, r6, r3
 800874e:	fb03 6711 	mls	r7, r3, r1, r6
 8008752:	5dc7      	ldrb	r7, [r0, r7]
 8008754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008758:	4637      	mov	r7, r6
 800875a:	42bb      	cmp	r3, r7
 800875c:	460e      	mov	r6, r1
 800875e:	d9f4      	bls.n	800874a <_printf_i+0x11a>
 8008760:	2b08      	cmp	r3, #8
 8008762:	d10b      	bne.n	800877c <_printf_i+0x14c>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	07de      	lsls	r6, r3, #31
 8008768:	d508      	bpl.n	800877c <_printf_i+0x14c>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	6861      	ldr	r1, [r4, #4]
 800876e:	4299      	cmp	r1, r3
 8008770:	bfde      	ittt	le
 8008772:	2330      	movle	r3, #48	; 0x30
 8008774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008778:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800877c:	1b52      	subs	r2, r2, r5
 800877e:	6122      	str	r2, [r4, #16]
 8008780:	f8cd a000 	str.w	sl, [sp]
 8008784:	464b      	mov	r3, r9
 8008786:	aa03      	add	r2, sp, #12
 8008788:	4621      	mov	r1, r4
 800878a:	4640      	mov	r0, r8
 800878c:	f7ff fee2 	bl	8008554 <_printf_common>
 8008790:	3001      	adds	r0, #1
 8008792:	d14c      	bne.n	800882e <_printf_i+0x1fe>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008798:	b004      	add	sp, #16
 800879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879e:	4835      	ldr	r0, [pc, #212]	; (8008874 <_printf_i+0x244>)
 80087a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087a4:	6829      	ldr	r1, [r5, #0]
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087ac:	6029      	str	r1, [r5, #0]
 80087ae:	061d      	lsls	r5, r3, #24
 80087b0:	d514      	bpl.n	80087dc <_printf_i+0x1ac>
 80087b2:	07df      	lsls	r7, r3, #31
 80087b4:	bf44      	itt	mi
 80087b6:	f043 0320 	orrmi.w	r3, r3, #32
 80087ba:	6023      	strmi	r3, [r4, #0]
 80087bc:	b91e      	cbnz	r6, 80087c6 <_printf_i+0x196>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	f023 0320 	bic.w	r3, r3, #32
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	2310      	movs	r3, #16
 80087c8:	e7b0      	b.n	800872c <_printf_i+0xfc>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	f043 0320 	orr.w	r3, r3, #32
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	2378      	movs	r3, #120	; 0x78
 80087d4:	4828      	ldr	r0, [pc, #160]	; (8008878 <_printf_i+0x248>)
 80087d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087da:	e7e3      	b.n	80087a4 <_printf_i+0x174>
 80087dc:	0659      	lsls	r1, r3, #25
 80087de:	bf48      	it	mi
 80087e0:	b2b6      	uxthmi	r6, r6
 80087e2:	e7e6      	b.n	80087b2 <_printf_i+0x182>
 80087e4:	4615      	mov	r5, r2
 80087e6:	e7bb      	b.n	8008760 <_printf_i+0x130>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	6826      	ldr	r6, [r4, #0]
 80087ec:	6961      	ldr	r1, [r4, #20]
 80087ee:	1d18      	adds	r0, r3, #4
 80087f0:	6028      	str	r0, [r5, #0]
 80087f2:	0635      	lsls	r5, r6, #24
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	d501      	bpl.n	80087fc <_printf_i+0x1cc>
 80087f8:	6019      	str	r1, [r3, #0]
 80087fa:	e002      	b.n	8008802 <_printf_i+0x1d2>
 80087fc:	0670      	lsls	r0, r6, #25
 80087fe:	d5fb      	bpl.n	80087f8 <_printf_i+0x1c8>
 8008800:	8019      	strh	r1, [r3, #0]
 8008802:	2300      	movs	r3, #0
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	4615      	mov	r5, r2
 8008808:	e7ba      	b.n	8008780 <_printf_i+0x150>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	1d1a      	adds	r2, r3, #4
 800880e:	602a      	str	r2, [r5, #0]
 8008810:	681d      	ldr	r5, [r3, #0]
 8008812:	6862      	ldr	r2, [r4, #4]
 8008814:	2100      	movs	r1, #0
 8008816:	4628      	mov	r0, r5
 8008818:	f7f7 fce2 	bl	80001e0 <memchr>
 800881c:	b108      	cbz	r0, 8008822 <_printf_i+0x1f2>
 800881e:	1b40      	subs	r0, r0, r5
 8008820:	6060      	str	r0, [r4, #4]
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	2300      	movs	r3, #0
 8008828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882c:	e7a8      	b.n	8008780 <_printf_i+0x150>
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	462a      	mov	r2, r5
 8008832:	4649      	mov	r1, r9
 8008834:	4640      	mov	r0, r8
 8008836:	47d0      	blx	sl
 8008838:	3001      	adds	r0, #1
 800883a:	d0ab      	beq.n	8008794 <_printf_i+0x164>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	079b      	lsls	r3, r3, #30
 8008840:	d413      	bmi.n	800886a <_printf_i+0x23a>
 8008842:	68e0      	ldr	r0, [r4, #12]
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	4298      	cmp	r0, r3
 8008848:	bfb8      	it	lt
 800884a:	4618      	movlt	r0, r3
 800884c:	e7a4      	b.n	8008798 <_printf_i+0x168>
 800884e:	2301      	movs	r3, #1
 8008850:	4632      	mov	r2, r6
 8008852:	4649      	mov	r1, r9
 8008854:	4640      	mov	r0, r8
 8008856:	47d0      	blx	sl
 8008858:	3001      	adds	r0, #1
 800885a:	d09b      	beq.n	8008794 <_printf_i+0x164>
 800885c:	3501      	adds	r5, #1
 800885e:	68e3      	ldr	r3, [r4, #12]
 8008860:	9903      	ldr	r1, [sp, #12]
 8008862:	1a5b      	subs	r3, r3, r1
 8008864:	42ab      	cmp	r3, r5
 8008866:	dcf2      	bgt.n	800884e <_printf_i+0x21e>
 8008868:	e7eb      	b.n	8008842 <_printf_i+0x212>
 800886a:	2500      	movs	r5, #0
 800886c:	f104 0619 	add.w	r6, r4, #25
 8008870:	e7f5      	b.n	800885e <_printf_i+0x22e>
 8008872:	bf00      	nop
 8008874:	08008dc9 	.word	0x08008dc9
 8008878:	08008dda 	.word	0x08008dda

0800887c <_read_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d07      	ldr	r5, [pc, #28]	; (800889c <_read_r+0x20>)
 8008880:	4604      	mov	r4, r0
 8008882:	4608      	mov	r0, r1
 8008884:	4611      	mov	r1, r2
 8008886:	2200      	movs	r2, #0
 8008888:	602a      	str	r2, [r5, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f7f8 fa28 	bl	8000ce0 <_read>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_read_r+0x1e>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_read_r+0x1e>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	200022b4 	.word	0x200022b4

080088a0 <__swbuf_r>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	460e      	mov	r6, r1
 80088a4:	4614      	mov	r4, r2
 80088a6:	4605      	mov	r5, r0
 80088a8:	b118      	cbz	r0, 80088b2 <__swbuf_r+0x12>
 80088aa:	6983      	ldr	r3, [r0, #24]
 80088ac:	b90b      	cbnz	r3, 80088b2 <__swbuf_r+0x12>
 80088ae:	f7fe ffc3 	bl	8007838 <__sinit>
 80088b2:	4b21      	ldr	r3, [pc, #132]	; (8008938 <__swbuf_r+0x98>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	d12b      	bne.n	8008910 <__swbuf_r+0x70>
 80088b8:	686c      	ldr	r4, [r5, #4]
 80088ba:	69a3      	ldr	r3, [r4, #24]
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	071a      	lsls	r2, r3, #28
 80088c2:	d52f      	bpl.n	8008924 <__swbuf_r+0x84>
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	b36b      	cbz	r3, 8008924 <__swbuf_r+0x84>
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	6820      	ldr	r0, [r4, #0]
 80088cc:	1ac0      	subs	r0, r0, r3
 80088ce:	6963      	ldr	r3, [r4, #20]
 80088d0:	b2f6      	uxtb	r6, r6
 80088d2:	4283      	cmp	r3, r0
 80088d4:	4637      	mov	r7, r6
 80088d6:	dc04      	bgt.n	80088e2 <__swbuf_r+0x42>
 80088d8:	4621      	mov	r1, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff fade 	bl	8007e9c <_fflush_r>
 80088e0:	bb30      	cbnz	r0, 8008930 <__swbuf_r+0x90>
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	60a3      	str	r3, [r4, #8]
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	6022      	str	r2, [r4, #0]
 80088ee:	701e      	strb	r6, [r3, #0]
 80088f0:	6963      	ldr	r3, [r4, #20]
 80088f2:	3001      	adds	r0, #1
 80088f4:	4283      	cmp	r3, r0
 80088f6:	d004      	beq.n	8008902 <__swbuf_r+0x62>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d506      	bpl.n	800890c <__swbuf_r+0x6c>
 80088fe:	2e0a      	cmp	r6, #10
 8008900:	d104      	bne.n	800890c <__swbuf_r+0x6c>
 8008902:	4621      	mov	r1, r4
 8008904:	4628      	mov	r0, r5
 8008906:	f7ff fac9 	bl	8007e9c <_fflush_r>
 800890a:	b988      	cbnz	r0, 8008930 <__swbuf_r+0x90>
 800890c:	4638      	mov	r0, r7
 800890e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <__swbuf_r+0x9c>)
 8008912:	429c      	cmp	r4, r3
 8008914:	d101      	bne.n	800891a <__swbuf_r+0x7a>
 8008916:	68ac      	ldr	r4, [r5, #8]
 8008918:	e7cf      	b.n	80088ba <__swbuf_r+0x1a>
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <__swbuf_r+0xa0>)
 800891c:	429c      	cmp	r4, r3
 800891e:	bf08      	it	eq
 8008920:	68ec      	ldreq	r4, [r5, #12]
 8008922:	e7ca      	b.n	80088ba <__swbuf_r+0x1a>
 8008924:	4621      	mov	r1, r4
 8008926:	4628      	mov	r0, r5
 8008928:	f000 f80c 	bl	8008944 <__swsetup_r>
 800892c:	2800      	cmp	r0, #0
 800892e:	d0cb      	beq.n	80088c8 <__swbuf_r+0x28>
 8008930:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008934:	e7ea      	b.n	800890c <__swbuf_r+0x6c>
 8008936:	bf00      	nop
 8008938:	08008d74 	.word	0x08008d74
 800893c:	08008d94 	.word	0x08008d94
 8008940:	08008d54 	.word	0x08008d54

08008944 <__swsetup_r>:
 8008944:	4b32      	ldr	r3, [pc, #200]	; (8008a10 <__swsetup_r+0xcc>)
 8008946:	b570      	push	{r4, r5, r6, lr}
 8008948:	681d      	ldr	r5, [r3, #0]
 800894a:	4606      	mov	r6, r0
 800894c:	460c      	mov	r4, r1
 800894e:	b125      	cbz	r5, 800895a <__swsetup_r+0x16>
 8008950:	69ab      	ldr	r3, [r5, #24]
 8008952:	b913      	cbnz	r3, 800895a <__swsetup_r+0x16>
 8008954:	4628      	mov	r0, r5
 8008956:	f7fe ff6f 	bl	8007838 <__sinit>
 800895a:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <__swsetup_r+0xd0>)
 800895c:	429c      	cmp	r4, r3
 800895e:	d10f      	bne.n	8008980 <__swsetup_r+0x3c>
 8008960:	686c      	ldr	r4, [r5, #4]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008968:	0719      	lsls	r1, r3, #28
 800896a:	d42c      	bmi.n	80089c6 <__swsetup_r+0x82>
 800896c:	06dd      	lsls	r5, r3, #27
 800896e:	d411      	bmi.n	8008994 <__swsetup_r+0x50>
 8008970:	2309      	movs	r3, #9
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800897e:	e03e      	b.n	80089fe <__swsetup_r+0xba>
 8008980:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <__swsetup_r+0xd4>)
 8008982:	429c      	cmp	r4, r3
 8008984:	d101      	bne.n	800898a <__swsetup_r+0x46>
 8008986:	68ac      	ldr	r4, [r5, #8]
 8008988:	e7eb      	b.n	8008962 <__swsetup_r+0x1e>
 800898a:	4b24      	ldr	r3, [pc, #144]	; (8008a1c <__swsetup_r+0xd8>)
 800898c:	429c      	cmp	r4, r3
 800898e:	bf08      	it	eq
 8008990:	68ec      	ldreq	r4, [r5, #12]
 8008992:	e7e6      	b.n	8008962 <__swsetup_r+0x1e>
 8008994:	0758      	lsls	r0, r3, #29
 8008996:	d512      	bpl.n	80089be <__swsetup_r+0x7a>
 8008998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800899a:	b141      	cbz	r1, 80089ae <__swsetup_r+0x6a>
 800899c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d002      	beq.n	80089aa <__swsetup_r+0x66>
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff fad3 	bl	8007f50 <_free_r>
 80089aa:	2300      	movs	r3, #0
 80089ac:	6363      	str	r3, [r4, #52]	; 0x34
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	2300      	movs	r3, #0
 80089b8:	6063      	str	r3, [r4, #4]
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f043 0308 	orr.w	r3, r3, #8
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	b94b      	cbnz	r3, 80089de <__swsetup_r+0x9a>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d4:	d003      	beq.n	80089de <__swsetup_r+0x9a>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4630      	mov	r0, r6
 80089da:	f000 f847 	bl	8008a6c <__smakebuf_r>
 80089de:	89a0      	ldrh	r0, [r4, #12]
 80089e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e4:	f010 0301 	ands.w	r3, r0, #1
 80089e8:	d00a      	beq.n	8008a00 <__swsetup_r+0xbc>
 80089ea:	2300      	movs	r3, #0
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6963      	ldr	r3, [r4, #20]
 80089f0:	425b      	negs	r3, r3
 80089f2:	61a3      	str	r3, [r4, #24]
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	b943      	cbnz	r3, 8008a0a <__swsetup_r+0xc6>
 80089f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089fc:	d1ba      	bne.n	8008974 <__swsetup_r+0x30>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	0781      	lsls	r1, r0, #30
 8008a02:	bf58      	it	pl
 8008a04:	6963      	ldrpl	r3, [r4, #20]
 8008a06:	60a3      	str	r3, [r4, #8]
 8008a08:	e7f4      	b.n	80089f4 <__swsetup_r+0xb0>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	e7f7      	b.n	80089fe <__swsetup_r+0xba>
 8008a0e:	bf00      	nop
 8008a10:	20000010 	.word	0x20000010
 8008a14:	08008d74 	.word	0x08008d74
 8008a18:	08008d94 	.word	0x08008d94
 8008a1c:	08008d54 	.word	0x08008d54

08008a20 <__swhatbuf_r>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	460e      	mov	r6, r1
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	b096      	sub	sp, #88	; 0x58
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	461d      	mov	r5, r3
 8008a30:	da08      	bge.n	8008a44 <__swhatbuf_r+0x24>
 8008a32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	061a      	lsls	r2, r3, #24
 8008a3c:	d410      	bmi.n	8008a60 <__swhatbuf_r+0x40>
 8008a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a42:	e00e      	b.n	8008a62 <__swhatbuf_r+0x42>
 8008a44:	466a      	mov	r2, sp
 8008a46:	f000 f89b 	bl	8008b80 <_fstat_r>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	dbf1      	blt.n	8008a32 <__swhatbuf_r+0x12>
 8008a4e:	9a01      	ldr	r2, [sp, #4]
 8008a50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a58:	425a      	negs	r2, r3
 8008a5a:	415a      	adcs	r2, r3
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	e7ee      	b.n	8008a3e <__swhatbuf_r+0x1e>
 8008a60:	2340      	movs	r3, #64	; 0x40
 8008a62:	2000      	movs	r0, #0
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	b016      	add	sp, #88	; 0x58
 8008a68:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a6c <__smakebuf_r>:
 8008a6c:	898b      	ldrh	r3, [r1, #12]
 8008a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a70:	079d      	lsls	r5, r3, #30
 8008a72:	4606      	mov	r6, r0
 8008a74:	460c      	mov	r4, r1
 8008a76:	d507      	bpl.n	8008a88 <__smakebuf_r+0x1c>
 8008a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	2301      	movs	r3, #1
 8008a82:	6163      	str	r3, [r4, #20]
 8008a84:	b002      	add	sp, #8
 8008a86:	bd70      	pop	{r4, r5, r6, pc}
 8008a88:	ab01      	add	r3, sp, #4
 8008a8a:	466a      	mov	r2, sp
 8008a8c:	f7ff ffc8 	bl	8008a20 <__swhatbuf_r>
 8008a90:	9900      	ldr	r1, [sp, #0]
 8008a92:	4605      	mov	r5, r0
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7fe ffdb 	bl	8007a50 <_malloc_r>
 8008a9a:	b948      	cbnz	r0, 8008ab0 <__smakebuf_r+0x44>
 8008a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa0:	059a      	lsls	r2, r3, #22
 8008aa2:	d4ef      	bmi.n	8008a84 <__smakebuf_r+0x18>
 8008aa4:	f023 0303 	bic.w	r3, r3, #3
 8008aa8:	f043 0302 	orr.w	r3, r3, #2
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	e7e3      	b.n	8008a78 <__smakebuf_r+0xc>
 8008ab0:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <__smakebuf_r+0x7c>)
 8008ab2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	6020      	str	r0, [r4, #0]
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	9b00      	ldr	r3, [sp, #0]
 8008ac0:	6163      	str	r3, [r4, #20]
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	6120      	str	r0, [r4, #16]
 8008ac6:	b15b      	cbz	r3, 8008ae0 <__smakebuf_r+0x74>
 8008ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008acc:	4630      	mov	r0, r6
 8008ace:	f000 f869 	bl	8008ba4 <_isatty_r>
 8008ad2:	b128      	cbz	r0, 8008ae0 <__smakebuf_r+0x74>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f023 0303 	bic.w	r3, r3, #3
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	89a0      	ldrh	r0, [r4, #12]
 8008ae2:	4305      	orrs	r5, r0
 8008ae4:	81a5      	strh	r5, [r4, #12]
 8008ae6:	e7cd      	b.n	8008a84 <__smakebuf_r+0x18>
 8008ae8:	080077d1 	.word	0x080077d1

08008aec <memmove>:
 8008aec:	4288      	cmp	r0, r1
 8008aee:	b510      	push	{r4, lr}
 8008af0:	eb01 0402 	add.w	r4, r1, r2
 8008af4:	d902      	bls.n	8008afc <memmove+0x10>
 8008af6:	4284      	cmp	r4, r0
 8008af8:	4623      	mov	r3, r4
 8008afa:	d807      	bhi.n	8008b0c <memmove+0x20>
 8008afc:	1e43      	subs	r3, r0, #1
 8008afe:	42a1      	cmp	r1, r4
 8008b00:	d008      	beq.n	8008b14 <memmove+0x28>
 8008b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b0a:	e7f8      	b.n	8008afe <memmove+0x12>
 8008b0c:	4402      	add	r2, r0
 8008b0e:	4601      	mov	r1, r0
 8008b10:	428a      	cmp	r2, r1
 8008b12:	d100      	bne.n	8008b16 <memmove+0x2a>
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b1e:	e7f7      	b.n	8008b10 <memmove+0x24>

08008b20 <_realloc_r>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	4680      	mov	r8, r0
 8008b26:	4614      	mov	r4, r2
 8008b28:	460e      	mov	r6, r1
 8008b2a:	b921      	cbnz	r1, 8008b36 <_realloc_r+0x16>
 8008b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b30:	4611      	mov	r1, r2
 8008b32:	f7fe bf8d 	b.w	8007a50 <_malloc_r>
 8008b36:	b92a      	cbnz	r2, 8008b44 <_realloc_r+0x24>
 8008b38:	f7ff fa0a 	bl	8007f50 <_free_r>
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	4628      	mov	r0, r5
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	f000 f83e 	bl	8008bc4 <_malloc_usable_size_r>
 8008b48:	4284      	cmp	r4, r0
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	d802      	bhi.n	8008b54 <_realloc_r+0x34>
 8008b4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b52:	d812      	bhi.n	8008b7a <_realloc_r+0x5a>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4640      	mov	r0, r8
 8008b58:	f7fe ff7a 	bl	8007a50 <_malloc_r>
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d0ed      	beq.n	8008b3e <_realloc_r+0x1e>
 8008b62:	42bc      	cmp	r4, r7
 8008b64:	4622      	mov	r2, r4
 8008b66:	4631      	mov	r1, r6
 8008b68:	bf28      	it	cs
 8008b6a:	463a      	movcs	r2, r7
 8008b6c:	f7fe ff39 	bl	80079e2 <memcpy>
 8008b70:	4631      	mov	r1, r6
 8008b72:	4640      	mov	r0, r8
 8008b74:	f7ff f9ec 	bl	8007f50 <_free_r>
 8008b78:	e7e1      	b.n	8008b3e <_realloc_r+0x1e>
 8008b7a:	4635      	mov	r5, r6
 8008b7c:	e7df      	b.n	8008b3e <_realloc_r+0x1e>
	...

08008b80 <_fstat_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_fstat_r+0x20>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	f7f8 f8ec 	bl	8000d6a <_fstat>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d102      	bne.n	8008b9c <_fstat_r+0x1c>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b103      	cbz	r3, 8008b9c <_fstat_r+0x1c>
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200022b4 	.word	0x200022b4

08008ba4 <_isatty_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d06      	ldr	r5, [pc, #24]	; (8008bc0 <_isatty_r+0x1c>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	602b      	str	r3, [r5, #0]
 8008bb0:	f7f8 f8eb 	bl	8000d8a <_isatty>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_isatty_r+0x1a>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_isatty_r+0x1a>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	200022b4 	.word	0x200022b4

08008bc4 <_malloc_usable_size_r>:
 8008bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc8:	1f18      	subs	r0, r3, #4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bfbc      	itt	lt
 8008bce:	580b      	ldrlt	r3, [r1, r0]
 8008bd0:	18c0      	addlt	r0, r0, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_init>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr

08008be0 <_fini>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr
